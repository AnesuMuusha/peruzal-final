{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction to Xamarin Android \u00b6 Welcome to Xamarin Android Guides \u00b6 Welcome to the guides to support the Xamarin Android Guides. The guides are intended to be used to support the course. Target Audience \u00b6 Developers Some development knowledge is required as most of the tools required reading at code. You don't need to proficient but be in a position to write and compile programs. What is Xamarin Android \u00b6 Xamarin.Android lets C# developers create native Android apps with the C# language. Xamarin.Android provides bindings to the Android libraries that are familiar to the C# developer. Xamarin.Android uses the same tools for building and packaging Android apps as Java. Development is done in Visual Studio. C# features like generics, async/await, LINQ and lambda expressions and are supported. Xamarin.Android have access to libraries defined in java.* , android.* and Mono.NET . Xamarin.Android also lets use use native Java jars or native C/C++ code using JNI. 1 2 3 EditText input = new EditText ( this ); String text = input . getText (). toString (); input . addTextChangedListener ( new TextWatcher () { ... }); 1 2 3 var input = new EditText ( this ); string text = input . Text ; input . TextChanged += ( sender , e ) => { ... }; Info Java uses get/set methods and listeners, whilst C# uses properties and events.","title":"Introduction"},{"location":"#introduction-to-xamarin-android","text":"","title":"Introduction to Xamarin Android"},{"location":"#welcome-to-xamarin-android-guides","text":"Welcome to the guides to support the Xamarin Android Guides. The guides are intended to be used to support the course.","title":"Welcome to Xamarin Android Guides"},{"location":"#target-audience","text":"Developers Some development knowledge is required as most of the tools required reading at code. You don't need to proficient but be in a position to write and compile programs.","title":"Target Audience"},{"location":"#what-is-xamarin-android","text":"Xamarin.Android lets C# developers create native Android apps with the C# language. Xamarin.Android provides bindings to the Android libraries that are familiar to the C# developer. Xamarin.Android uses the same tools for building and packaging Android apps as Java. Development is done in Visual Studio. C# features like generics, async/await, LINQ and lambda expressions and are supported. Xamarin.Android have access to libraries defined in java.* , android.* and Mono.NET . Xamarin.Android also lets use use native Java jars or native C/C++ code using JNI. 1 2 3 EditText input = new EditText ( this ); String text = input . getText (). toString (); input . addTextChangedListener ( new TextWatcher () { ... }); 1 2 3 var input = new EditText ( this ); string text = input . Text ; input . TextChanged += ( sender , e ) => { ... }; Info Java uses get/set methods and listeners, whilst C# uses properties and events.","title":"What is Xamarin Android"},{"location":"activities/","text":"Android Activities \u00b6 In this chapter you learn about the Activity class, the major building block of your app's user interface (UI). You also learn about using an Intent to communicate from one activity to another. Activities \u00b6 An activity represents a single screen in your app with an interface the user can interact with. An email app for example might contain several Activities: Message Activity Compose Activity Settings Activity Your app is made up of a collection of activities that you create yourself, or that you reuse from other apps. In an app, they should be one Activity designated as the main activity. This is the Activity that is started by Android. An Activity can start another activity Each time a new activity is started, the previous activity is stopped and put in a back stack. The system maintains the previous activity state. The activity is notified of each state by the system using life cycle methods. Creating activities \u00b6 To implement an Activity in your app, do the following: Create a class that inherits from the AppCompatActivity or Activity Implement a basic UI for the Activity in an XML layout file. Decorate the class with the [ActivityAttribute] Create the activity \u00b6 To create an Activity in Visual Studio, Add New file, choose Android and choose Activity and give a name to the class. When you create a new activity from the wizard, you get the code as follows: 1 2 3 4 5 6 7 8 9 [Activity(Label = \"ChatActivity\")] public class ChatActivity : Activity { protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); // Create your application here } } [Activity(Label = \"ChatActivity\")] decorates the class as an Android activity and generates the required xml tags in the AndroidManifest.xml file. Use AppCompatActivity for backward compatibility For the app to be backward compatible, its recommended to derive your activity class AppCompatActivity instead of Activity !!! question \"What is the OnCreate\" method? The OnCreate method is a required life cycle method that is called when the activity is created. You setup the layout file for the activity in this method. Implement the UI \u00b6 Create the UI xml layout file for the activity in the Resources -> layout folder. In Visual Studio, use the Add New file menu to add a new Android layout file. Naming conventions You should adopt a naming convention for your layout files. Generally for the activity, you should start with activity_ prefix, e.g for the compose activity, the layout file should be called activity_compose.axml . Associate the activity with the layout file \u00b6 Once the layout file is created, use the SetContentView method in the OnCreate method of the activity as follows: 1 2 3 4 5 protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); SetContentView ( Resource . Layout . activity_compose ); } The SetContentView takes in an resource id. Remember the layout file is referenced using the Resource.Layout.<layout-name> class. Intents \u00b6 Each activity is started or activated with an Intent , which is a message object that makes a request to the Android runtime to start an activity or other app component in your app or in some other app. When your app is first started from the device home screen, the Android runtime sends an Intent to your app to start your app's main activity (the one defined with the MAIN action and the LAUNCHER category in the AndroidManifest.xml file). This is the Activity with the MainLauncher = true set. To start another activity in your app, or to request that some other activity available on the device perform an action, you build your own intent and call the StartActivity() method to send the intent In addition to starting an activity, an intent can also be used to pass data between one activity and another. When you create an intent to start a new activity, you can include information about the data you want that new activity to operate on. Intent types \u00b6 Intents can be explicit or implicit: Explicit intent : Used to start activities using their fully qualified name. Implicit intent : Used to start activities without specifying the fully qualified name. The system will use the default registered activity or show options to choose th activity. Starting activities with explicit intents \u00b6 To start an activity from another activity, you use the explicit intent, e.g the following will start the ChatActivity from MainActivity : 1 2 3 4 5 // Create intent with the type of the Activity Intent intent = new Intent ( this , typeof ( ChatActivity )); // Start the activity StartActivity ( intent ); The first line creates the intent, passing this as the Context . Then the second line starts the activity. What is Context Context is the class that contains the runtime information about the environment in which the activity is running in. An activity inherits from Context so we can pass in this whn the context is required. What starts the activity? Android uses a process called the ActivityManager to run the activity. When you call StartActivity the information in the intent is sent to the ActivityManager . You can also call activity manually from the command line using adb am Manually closing an activity \u00b6 The started Activity remains on the screen until the user taps the Back button on the device, at which time that Activity closes and is reclaimed by the system, and the originating Activity is resumed. When can also close the Activity by using the Finish method as follows: 1 2 3 4 private void CloseActivity () { Finish (); } Passing data between activities \u00b6 You can also pass on data when you start an activity. They are two ways to pass data to the called activity: Set data as a URI Pass data using Intent extras Passing data using Intent uri \u00b6 The Intent uri can only hold one piece of information, the URI representing the location of the data you want to operate on. The following code passes the telephone number to the ChatActivity as follows: 1 2 3 Intent intent = new Intent ( this , typeof ( ChatActivity )); intent . SetData ( Android . Net . Uri . Parse ( \"tel:0114804898\" )); StartActivity ( intent ); The SetData method takes in the uri. On the called activity, you can retrieve the uri using the Data property on the Intent property as follows: 1 2 3 4 // This is in the called Activity if ( Intent . Data != null ) { Log . Debug ( TAG , $ \"{Intent.Data}\" ); } Passing data with Intent extras \u00b6 In the first (sending) Activity, you: Create the Intent object. Put data or extras into that Intent. Start the new Activity with StartActivity() . In the second (receiving) Activity , you: Get the Intent object the Activity was started with. Retrieve the data or extras from the Intent property. Add the extra data \u00b6 We can either create a Bundle or pass the extras directly to the intent object. The following code passes the extra as single fields: 1 2 3 4 Intent intent = new Intent ( this , typeof ( ChatActivity )); intent . PutExtra ( EXTRA_USERNAME , \"codeguru\" ); intent . PutExtra ( EXTRA_USERNAME , \"Hi there!\" ); StartActivity ( intent ); We also defined the constants in the MainActivity as follows: 1 2 public static readonly string EXTRA_USERNAME = \"com.peruzal.praat.USERNAME\" ; public static readonly string EXTRA_NEW_MESSAGE = \"com.peruzal.praat.NEW_MESSAGE\" ; You can pass serializable data with the PutExtra method. To retrive the data on the called activity with use the Intent object as follows: 1 2 3 if ( Intent . HasExtra ( MainActivity . EXTRA_USERNAME )) { var username = Intent . GetStringExtra ( MainActivity . EXTRA_USERNAME ) } Passing complex objects To pass complex objects with the intent, you can use Newtonsoft JSON. First convert the data into json and deserialize on the called activity. Alternatively you will have to implement the Serializable interaface. Its easy to serialize and deserialize from json. Using the Bundle \u00b6 You can put all the extras in the Bundle and the then use the PutExtras method to add the bundle to the intent as follows: 1 2 3 4 5 6 7 8 9 10 Intent intent = new Intent ( this , typeof ( ChatActivity )); // Create a bundle object Bundle bundle = new Bundle (); // Add the extras bundle . PutString ( EXTRA_USERNAME , \"codeguru\" ); bundle . PutString ( EXTRA_NEW_MESSAGE , \"Hi there\" ); intent . PutExtras ( bundle ); StartActivity ( intent ); Get the data in the called activity: 1 2 3 4 5 if ( Intent . Extras != null ) { var username = Intent . Extras . GetString ( MainActivity . EXTRA_USERNAME ); Log . Debug ( TAG , username ); } Getting data from an activity \u00b6 You can get data from the called activity. Here are the steps: Start the activity with the StartActivityForResult() method instead of StartActivity Create a new Intent in the launched started activity and return the data in the Intent Implement the OnActivityResult in the calling activity to process the returned data Start the result \u00b6 You need to specify a request code when you launch the activity for result: 1 2 Intent intent = new Intent ( this , typeof ( ChatActivity )); StartActivityForResult ( intent , USERNAME_REQUEST ); The USERNAME_REQUEST is defines a field 1 private readonly int USERNAME_REQUEST = 100 ; In the called activity we will add the following code: 1 2 3 4 5 6 7 8 9 10 btnDone . Click += delegate { var editUsername = FindViewById < EditText >( Resource . Id . edit_message ); var username = editUsername . Text ; Intent intent = new Intent (); intent . PutExtra ( \"USERNAME\" , username ); SetResult ( Result . Ok , intent ); Finish (); }; In the above, we have a done button thats wired to a click event. Within the event, we find the edit text and get the username. We use the username and pass it as the data to the intent. We then use the SetResult method, set the result to be OK and pass in the intent object. Retrieving the passed data \u00b6 To retrieve the returned data we use the OnActivityResult result method and get the data from the intent. The OnActivityResult is used to receive data from other activites, so we need to check if the request code matches first and also is the result was not cancelled as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 protected override void OnActivityResult ( int requestCode , [ GeneratedEnum ] Result resultCode , Intent data ) { base . OnActivityResult ( requestCode , resultCode , data ); // Check if its the same request code used to start the acitivity if ( requestCode == USERNAME_REQUEST && resultCode == Result . Ok ) { // Check if the key is in the bundle if ( data . HasExtra ( \"USERNAME\" )) { var username = data . GetStringExtra ( \"USERNAME\" ); Log . Debug ( TAG , username ); } } } Activity navigation \u00b6 Any app of any complexity that you build will include more than one Activity . As your users move around your app and from one Activity to another, consistent navigation becomes more important to the app's user experience. Few things frustrate users more than basic navigation that behaves in inconsistent and unexpected ways. Thoughtfully designing your app's navigation will make using your app predictable and reliable for your users. Android system supports two different forms of navigation strategies for your app. Back (temporal) navigation , provided by the device Back button, and the back stack. Up (ancestral) navigation , provided by you as an option in the app bar. Back navigation, tasks and the back stack \u00b6 Back navigation allows your users to return to the previous Activity by tapping the device back button. Back navigation is also called temporal navigation because the back button navigates the history of recently viewed screens, in reverse chronological order. The back stack is the set of each Activity that the user has visited and that can be returned to by the user with the back button. Each time a new Activity starts, it is pushed onto the back stack and takes user focus. The previous Activity is stopped but is still available in the back stack. Because an app can start an Activity both inside and outside a single app, the back stack contains each Activity that has been launched by the user in reverse order. Each time the user presses the Back button, each Activity in the stack is popped off to reveal the previous one, until the user returns to the Home screen. Tasks \u00b6 Android provides a back stack for each task . A task is an organizing concept for each Activity the user interacts with when performing an operation, whether they are inside your app or across multiple apps. Most tasks start from the Android home screen, and tapping an app icon starts a task (and a new back stack) for that app. If the user uses an app for a while, taps home, and starts a new app, that new app launches in its own task and has its own back stack. If the user returns to the first app, that first task's back stack returns. Navigating with the Back button returns only to the Activity in the current task, not for all tasks running on the device. Android enables the user to navigate between tasks with the overview or recent tasks screen, accessible with the square button on lower right corner of the device. Managing tasks In most cases you don't have to worry about managing either tasks or the back stack for your app\u2014the system keeps track of these things for you, and the back button is always available on the device. There may, however, be times where you may want to override the default behavior for tasks or for the back stack. Up navigation \u00b6 Up navigation, sometimes referred to as ancestral or logical navigation, is used to navigate within an app based on the explicit hierarchical relationships between screens. With Up navigation, each Activity is arranged in a hierarchy, and each \"child\" Activity shows a left-facing arrow in the app bar Up button (in app bar) that returns the user to the \"parent\" Activity . The topmost Activity in the hierarchy is usually MainActivity , and the user cannot go up from there. For instance, if the main Activity in an email app is a list of all messages, selecting a message launches a second Activity to display that single email. In this case the message Activity would provide an Up button that returns to the list of messages. Implementing up navigation \u00b6 There two ways to implement the up navigation: Using [Activity(Parent = \"\")] Using the [MetaData()] attribute MetaData supports backward compatibility Using the MetaData supports backward compatibility on older Android devices. Its recommended to use both methods to create a consistent up navigation experience. Implement back using [Activity] attribute \u00b6 Decorate the descendant activity with the [Activity] and specify the Parent type as follows: 1 2 3 [Activity(Label = \"ChatActivity\", Theme = \"@style/AppTheme\", ParentActivity = typeof(MainActivity)] public class ChatActivity : AppCompatActivity { ... } The ParentActivity = typeof(MainActivity) specifies that MainActivity is the parent of the ChatActivity . In the AndroidManifest.xml file the following will be generated: 1 2 3 4 5 <activity android:label= \"ChatActivity\" android:parentActivityName= \"com.peruzal.helloworld.MainActivity\" android:theme= \"@style/AppTheme\" android:name= \"md5982a942979eaad736ab55d3d1d394dbb.ChatActivity\" /> Implementing up using the [MetaData] \u00b6 To use the [MetaData] attribute you should give the parent activity a name using Name in the [Activity] . The name should be fully qualified as follows: 1 [Activity( Name = \"com.peruzal.helloworld.MainActivity\", ...)] then in the descendant activity, e.g the ChatActivity is the child of the MainActivity as follows: 1 2 3 4 [Activity(Label = \"ChatActivity\", Theme = \"@style/AppTheme\", ParentActivity = typeof(MainActivity))] [MetaData(\"android.support.PARENT_ACTIVITY\", Value = \"com.peruzal.helloworld.MainActivity\")] public class ChatActivity : AppCompatActivity {...} Meta attribute name The name should be exactly be android.support.PARENT_ACTIVITY and the value be the fully qualified name of the activity. The back button will not show if the name does not match android.support.PARENT_ACTIVITY . Activity life cycle \u00b6 The activity lifecycle is the set of states an activity can be in during its entire lifetime, from the time it's created to when it's destroyed and the system reclaims its resources. Activity life cycle and callback methods \u00b6 When an Activity transitions into and out of the different lifecycle states as it runs, the Android system calls several lifecycle callback methods at each stage. All of the callback methods are hooks that you can override in each of your Activity classes to define how that Activity behaves when the user leaves and re-enters the Activity.","title":"Activities"},{"location":"activities/#android-activities","text":"In this chapter you learn about the Activity class, the major building block of your app's user interface (UI). You also learn about using an Intent to communicate from one activity to another.","title":"Android Activities"},{"location":"activities/#activities","text":"An activity represents a single screen in your app with an interface the user can interact with. An email app for example might contain several Activities: Message Activity Compose Activity Settings Activity Your app is made up of a collection of activities that you create yourself, or that you reuse from other apps. In an app, they should be one Activity designated as the main activity. This is the Activity that is started by Android. An Activity can start another activity Each time a new activity is started, the previous activity is stopped and put in a back stack. The system maintains the previous activity state. The activity is notified of each state by the system using life cycle methods.","title":"Activities"},{"location":"activities/#creating-activities","text":"To implement an Activity in your app, do the following: Create a class that inherits from the AppCompatActivity or Activity Implement a basic UI for the Activity in an XML layout file. Decorate the class with the [ActivityAttribute]","title":"Creating activities"},{"location":"activities/#create-the-activity","text":"To create an Activity in Visual Studio, Add New file, choose Android and choose Activity and give a name to the class. When you create a new activity from the wizard, you get the code as follows: 1 2 3 4 5 6 7 8 9 [Activity(Label = \"ChatActivity\")] public class ChatActivity : Activity { protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); // Create your application here } } [Activity(Label = \"ChatActivity\")] decorates the class as an Android activity and generates the required xml tags in the AndroidManifest.xml file. Use AppCompatActivity for backward compatibility For the app to be backward compatible, its recommended to derive your activity class AppCompatActivity instead of Activity !!! question \"What is the OnCreate\" method? The OnCreate method is a required life cycle method that is called when the activity is created. You setup the layout file for the activity in this method.","title":"Create the activity"},{"location":"activities/#implement-the-ui","text":"Create the UI xml layout file for the activity in the Resources -> layout folder. In Visual Studio, use the Add New file menu to add a new Android layout file. Naming conventions You should adopt a naming convention for your layout files. Generally for the activity, you should start with activity_ prefix, e.g for the compose activity, the layout file should be called activity_compose.axml .","title":"Implement the UI"},{"location":"activities/#associate-the-activity-with-the-layout-file","text":"Once the layout file is created, use the SetContentView method in the OnCreate method of the activity as follows: 1 2 3 4 5 protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); SetContentView ( Resource . Layout . activity_compose ); } The SetContentView takes in an resource id. Remember the layout file is referenced using the Resource.Layout.<layout-name> class.","title":"Associate the activity with the layout file"},{"location":"activities/#intents","text":"Each activity is started or activated with an Intent , which is a message object that makes a request to the Android runtime to start an activity or other app component in your app or in some other app. When your app is first started from the device home screen, the Android runtime sends an Intent to your app to start your app's main activity (the one defined with the MAIN action and the LAUNCHER category in the AndroidManifest.xml file). This is the Activity with the MainLauncher = true set. To start another activity in your app, or to request that some other activity available on the device perform an action, you build your own intent and call the StartActivity() method to send the intent In addition to starting an activity, an intent can also be used to pass data between one activity and another. When you create an intent to start a new activity, you can include information about the data you want that new activity to operate on.","title":"Intents"},{"location":"activities/#intent-types","text":"Intents can be explicit or implicit: Explicit intent : Used to start activities using their fully qualified name. Implicit intent : Used to start activities without specifying the fully qualified name. The system will use the default registered activity or show options to choose th activity.","title":"Intent types"},{"location":"activities/#starting-activities-with-explicit-intents","text":"To start an activity from another activity, you use the explicit intent, e.g the following will start the ChatActivity from MainActivity : 1 2 3 4 5 // Create intent with the type of the Activity Intent intent = new Intent ( this , typeof ( ChatActivity )); // Start the activity StartActivity ( intent ); The first line creates the intent, passing this as the Context . Then the second line starts the activity. What is Context Context is the class that contains the runtime information about the environment in which the activity is running in. An activity inherits from Context so we can pass in this whn the context is required. What starts the activity? Android uses a process called the ActivityManager to run the activity. When you call StartActivity the information in the intent is sent to the ActivityManager . You can also call activity manually from the command line using adb am","title":"Starting activities with explicit intents"},{"location":"activities/#manually-closing-an-activity","text":"The started Activity remains on the screen until the user taps the Back button on the device, at which time that Activity closes and is reclaimed by the system, and the originating Activity is resumed. When can also close the Activity by using the Finish method as follows: 1 2 3 4 private void CloseActivity () { Finish (); }","title":"Manually closing an activity"},{"location":"activities/#passing-data-between-activities","text":"You can also pass on data when you start an activity. They are two ways to pass data to the called activity: Set data as a URI Pass data using Intent extras","title":"Passing data between activities"},{"location":"activities/#passing-data-using-intent-uri","text":"The Intent uri can only hold one piece of information, the URI representing the location of the data you want to operate on. The following code passes the telephone number to the ChatActivity as follows: 1 2 3 Intent intent = new Intent ( this , typeof ( ChatActivity )); intent . SetData ( Android . Net . Uri . Parse ( \"tel:0114804898\" )); StartActivity ( intent ); The SetData method takes in the uri. On the called activity, you can retrieve the uri using the Data property on the Intent property as follows: 1 2 3 4 // This is in the called Activity if ( Intent . Data != null ) { Log . Debug ( TAG , $ \"{Intent.Data}\" ); }","title":"Passing data using Intent uri"},{"location":"activities/#passing-data-with-intent-extras","text":"In the first (sending) Activity, you: Create the Intent object. Put data or extras into that Intent. Start the new Activity with StartActivity() . In the second (receiving) Activity , you: Get the Intent object the Activity was started with. Retrieve the data or extras from the Intent property.","title":"Passing data with Intent extras"},{"location":"activities/#add-the-extra-data","text":"We can either create a Bundle or pass the extras directly to the intent object. The following code passes the extra as single fields: 1 2 3 4 Intent intent = new Intent ( this , typeof ( ChatActivity )); intent . PutExtra ( EXTRA_USERNAME , \"codeguru\" ); intent . PutExtra ( EXTRA_USERNAME , \"Hi there!\" ); StartActivity ( intent ); We also defined the constants in the MainActivity as follows: 1 2 public static readonly string EXTRA_USERNAME = \"com.peruzal.praat.USERNAME\" ; public static readonly string EXTRA_NEW_MESSAGE = \"com.peruzal.praat.NEW_MESSAGE\" ; You can pass serializable data with the PutExtra method. To retrive the data on the called activity with use the Intent object as follows: 1 2 3 if ( Intent . HasExtra ( MainActivity . EXTRA_USERNAME )) { var username = Intent . GetStringExtra ( MainActivity . EXTRA_USERNAME ) } Passing complex objects To pass complex objects with the intent, you can use Newtonsoft JSON. First convert the data into json and deserialize on the called activity. Alternatively you will have to implement the Serializable interaface. Its easy to serialize and deserialize from json.","title":"Add the extra data"},{"location":"activities/#using-the-bundle","text":"You can put all the extras in the Bundle and the then use the PutExtras method to add the bundle to the intent as follows: 1 2 3 4 5 6 7 8 9 10 Intent intent = new Intent ( this , typeof ( ChatActivity )); // Create a bundle object Bundle bundle = new Bundle (); // Add the extras bundle . PutString ( EXTRA_USERNAME , \"codeguru\" ); bundle . PutString ( EXTRA_NEW_MESSAGE , \"Hi there\" ); intent . PutExtras ( bundle ); StartActivity ( intent ); Get the data in the called activity: 1 2 3 4 5 if ( Intent . Extras != null ) { var username = Intent . Extras . GetString ( MainActivity . EXTRA_USERNAME ); Log . Debug ( TAG , username ); }","title":"Using the Bundle"},{"location":"activities/#getting-data-from-an-activity","text":"You can get data from the called activity. Here are the steps: Start the activity with the StartActivityForResult() method instead of StartActivity Create a new Intent in the launched started activity and return the data in the Intent Implement the OnActivityResult in the calling activity to process the returned data","title":"Getting data from an activity"},{"location":"activities/#start-the-result","text":"You need to specify a request code when you launch the activity for result: 1 2 Intent intent = new Intent ( this , typeof ( ChatActivity )); StartActivityForResult ( intent , USERNAME_REQUEST ); The USERNAME_REQUEST is defines a field 1 private readonly int USERNAME_REQUEST = 100 ; In the called activity we will add the following code: 1 2 3 4 5 6 7 8 9 10 btnDone . Click += delegate { var editUsername = FindViewById < EditText >( Resource . Id . edit_message ); var username = editUsername . Text ; Intent intent = new Intent (); intent . PutExtra ( \"USERNAME\" , username ); SetResult ( Result . Ok , intent ); Finish (); }; In the above, we have a done button thats wired to a click event. Within the event, we find the edit text and get the username. We use the username and pass it as the data to the intent. We then use the SetResult method, set the result to be OK and pass in the intent object.","title":"Start the result"},{"location":"activities/#retrieving-the-passed-data","text":"To retrieve the returned data we use the OnActivityResult result method and get the data from the intent. The OnActivityResult is used to receive data from other activites, so we need to check if the request code matches first and also is the result was not cancelled as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 protected override void OnActivityResult ( int requestCode , [ GeneratedEnum ] Result resultCode , Intent data ) { base . OnActivityResult ( requestCode , resultCode , data ); // Check if its the same request code used to start the acitivity if ( requestCode == USERNAME_REQUEST && resultCode == Result . Ok ) { // Check if the key is in the bundle if ( data . HasExtra ( \"USERNAME\" )) { var username = data . GetStringExtra ( \"USERNAME\" ); Log . Debug ( TAG , username ); } } }","title":"Retrieving the passed data"},{"location":"activities/#activity-navigation","text":"Any app of any complexity that you build will include more than one Activity . As your users move around your app and from one Activity to another, consistent navigation becomes more important to the app's user experience. Few things frustrate users more than basic navigation that behaves in inconsistent and unexpected ways. Thoughtfully designing your app's navigation will make using your app predictable and reliable for your users. Android system supports two different forms of navigation strategies for your app. Back (temporal) navigation , provided by the device Back button, and the back stack. Up (ancestral) navigation , provided by you as an option in the app bar.","title":"Activity navigation"},{"location":"activities/#back-navigation-tasks-and-the-back-stack","text":"Back navigation allows your users to return to the previous Activity by tapping the device back button. Back navigation is also called temporal navigation because the back button navigates the history of recently viewed screens, in reverse chronological order. The back stack is the set of each Activity that the user has visited and that can be returned to by the user with the back button. Each time a new Activity starts, it is pushed onto the back stack and takes user focus. The previous Activity is stopped but is still available in the back stack. Because an app can start an Activity both inside and outside a single app, the back stack contains each Activity that has been launched by the user in reverse order. Each time the user presses the Back button, each Activity in the stack is popped off to reveal the previous one, until the user returns to the Home screen.","title":"Back navigation, tasks and the back stack"},{"location":"activities/#tasks","text":"Android provides a back stack for each task . A task is an organizing concept for each Activity the user interacts with when performing an operation, whether they are inside your app or across multiple apps. Most tasks start from the Android home screen, and tapping an app icon starts a task (and a new back stack) for that app. If the user uses an app for a while, taps home, and starts a new app, that new app launches in its own task and has its own back stack. If the user returns to the first app, that first task's back stack returns. Navigating with the Back button returns only to the Activity in the current task, not for all tasks running on the device. Android enables the user to navigate between tasks with the overview or recent tasks screen, accessible with the square button on lower right corner of the device. Managing tasks In most cases you don't have to worry about managing either tasks or the back stack for your app\u2014the system keeps track of these things for you, and the back button is always available on the device. There may, however, be times where you may want to override the default behavior for tasks or for the back stack.","title":"Tasks"},{"location":"activities/#up-navigation","text":"Up navigation, sometimes referred to as ancestral or logical navigation, is used to navigate within an app based on the explicit hierarchical relationships between screens. With Up navigation, each Activity is arranged in a hierarchy, and each \"child\" Activity shows a left-facing arrow in the app bar Up button (in app bar) that returns the user to the \"parent\" Activity . The topmost Activity in the hierarchy is usually MainActivity , and the user cannot go up from there. For instance, if the main Activity in an email app is a list of all messages, selecting a message launches a second Activity to display that single email. In this case the message Activity would provide an Up button that returns to the list of messages.","title":"Up navigation"},{"location":"activities/#implementing-up-navigation","text":"There two ways to implement the up navigation: Using [Activity(Parent = \"\")] Using the [MetaData()] attribute MetaData supports backward compatibility Using the MetaData supports backward compatibility on older Android devices. Its recommended to use both methods to create a consistent up navigation experience.","title":"Implementing up navigation"},{"location":"activities/#implement-back-using-activity-attribute","text":"Decorate the descendant activity with the [Activity] and specify the Parent type as follows: 1 2 3 [Activity(Label = \"ChatActivity\", Theme = \"@style/AppTheme\", ParentActivity = typeof(MainActivity)] public class ChatActivity : AppCompatActivity { ... } The ParentActivity = typeof(MainActivity) specifies that MainActivity is the parent of the ChatActivity . In the AndroidManifest.xml file the following will be generated: 1 2 3 4 5 <activity android:label= \"ChatActivity\" android:parentActivityName= \"com.peruzal.helloworld.MainActivity\" android:theme= \"@style/AppTheme\" android:name= \"md5982a942979eaad736ab55d3d1d394dbb.ChatActivity\" />","title":"Implement back using [Activity] attribute"},{"location":"activities/#implementing-up-using-the-metadata","text":"To use the [MetaData] attribute you should give the parent activity a name using Name in the [Activity] . The name should be fully qualified as follows: 1 [Activity( Name = \"com.peruzal.helloworld.MainActivity\", ...)] then in the descendant activity, e.g the ChatActivity is the child of the MainActivity as follows: 1 2 3 4 [Activity(Label = \"ChatActivity\", Theme = \"@style/AppTheme\", ParentActivity = typeof(MainActivity))] [MetaData(\"android.support.PARENT_ACTIVITY\", Value = \"com.peruzal.helloworld.MainActivity\")] public class ChatActivity : AppCompatActivity {...} Meta attribute name The name should be exactly be android.support.PARENT_ACTIVITY and the value be the fully qualified name of the activity. The back button will not show if the name does not match android.support.PARENT_ACTIVITY .","title":"Implementing up using the [MetaData]"},{"location":"activities/#activity-life-cycle","text":"The activity lifecycle is the set of states an activity can be in during its entire lifetime, from the time it's created to when it's destroyed and the system reclaims its resources.","title":"Activity life cycle"},{"location":"activities/#activity-life-cycle-and-callback-methods","text":"When an Activity transitions into and out of the different lifecycle states as it runs, the Android system calls several lifecycle callback methods at each stage. All of the callback methods are hooks that you can override in each of your Activity classes to define how that Activity behaves when the user leaves and re-enters the Activity.","title":"Activity life cycle and callback methods"},{"location":"android-components/","text":"Android App Components \u00b6 Activities \u00b6 Intents \u00b6 Services \u00b6 Content Providers \u00b6 Broadcast Receivers \u00b6","title":"Android Components"},{"location":"android-components/#android-app-components","text":"","title":"Android App Components"},{"location":"android-components/#activities","text":"","title":"Activities"},{"location":"android-components/#intents","text":"","title":"Intents"},{"location":"android-components/#services","text":"","title":"Services"},{"location":"android-components/#content-providers","text":"","title":"Content Providers"},{"location":"android-components/#broadcast-receivers","text":"","title":"Broadcast Receivers"},{"location":"android-views/","text":"Android Views \u00b6 The UI consists of a hierarchy of objects called views - every element on the screen is a View. The View represents the basic building block for all UI components, and the base class for classes that provide interactive UI components such as button, checkboxes, and text entry fields. A view consists of : two required dimensions expressed as width and height the unit for dimensions is in density-independent pixel(dpi) Common frequently used views are : TextView EditText Button ImageView ScrollView , ListView and RecyclerView used for displaying scrollable items LinearLayout used for containing other views RelativeLayout used for containing other views You can specify View elements in layout resources. Layout resources are written in XML and listed within the Resources -> layout . ViewGroup containers \u00b6 Views can be grouped inside a container. The base class for the Android container is the ViewGroup . When you define views, the views will be inside a ViewGroup . In Android, a the ViewGroups can be nested created a parent-child relationship. ![View Group][1] The root of the ViewGroup The first set of child View elements and ViewGroup groups whose parent is root . Some ViewGroup are designed as layouts because they organize child View elements in a specific way. Some examples layout ViewGroups are: CoordinatorLayout DrawerLayout LinearLayout Relativelayout Framelayout RecyclerView GridLayout ![Viewgroup example][2] In the figure above: LinearLayout , the root ViewGroup , contains all the child View elements in a vertical orientation. Button (button_toast). The first child View element appears at the top in the LinearLayout. TextView (show_count). The second child View element appears under the first child View element in the LinearLayout. Button (button_count). The third child View element appears under the second child View element in the LinearLayout. View Performance The layout hierarchy can grow to be complex for an app that shows many View elements on a screen. Deep nested ViewGroups can cause performance issues. Its recommended to use layouts that can accomplish flat layouts e.g using the ConstraintLayout instead of the LinearLayout . You should try to avoid nesting more than three levels deep. View Properties \u00b6 Views have two required properties, width and height . These two properties are set using the android:layout_width and android:layout_height . Another important property is the id property, this is used to name the views so that they can be referenced in code and in other parts of the layout file. Automatic view sizing \u00b6 There are two special values you can use to specify width and height Use the match_parent to take the full width or height as the parent view. Use the wrap_content just large enough to fit the content. The following defines the parent layout to match both the width and height of the phone : 1 2 3 4 5 <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > ... </RelativeLayout> Attribute form \u00b6 Attributes generally take the form: android :attribute_name=\" value \" If the value is a resource, the @ specifies what kind of resource, e.g android:text=\"@string/greeting\" The greeting is defined in the Resources -> strings.xml as follows : 1 2 3 4 <resources> ... <string name= \"greeting\" > Hello World! </string> </resources> android namespace View attributes must be prefixed with the Android namespace when defined in XML. Some libraries define their own namespace. You should use those for additional attributes. 1 2 3 <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" > </RelativeLayout> The app namespaace is also defined for this layout: 1 2 3 <RelativeLayout xmlns:app= \"http://schemas.android.com/apk/res-auto\" > </RelativeLayout> Identifying a View \u00b6 To uniquely identify a View and reference it from code or other resources, you must give it an id. Define the id \u00b6 The android:id is used to define the id in XML. To define a new id use the @+id/name-of-id as follows: 1 2 3 4 5 <TextView android:id= \"@+id/title\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/greeting\" /> Line 1 defines an id, title, for the TextView. Referencing the View from code \u00b6 Once an id is defined, we can now reference the View from code. The id can referenced using the Resource.Id.title as follows: 1 TextView textView = FindViewById < TextView > ( Resource . Id . title ); We can now access the properties defined in the TextView using the textView variable. We use the generic FindViewById<T> to find the view by the id. Ids are integer numbers The id's are integer numbers that are automatically generated. Its efficient not use numbers that the associated string name. Id not generated Sometimes though, if you have an error somewhere in your code the id will not be generated. Try clean and build for Visual studio to re-generate the ids. Referencing the View from other Views \u00b6 You can also reference the View using its id from other views by using the @id/<name> . name referencing the name of a predefined id. Notice that we no long have the + sign. Here is an example of the view being referencing in an xml layout file : 1 2 3 4 5 6 7 8 9 10 11 12 <EditText android:id= \"@+id/edit_username\" android:hint= \"Username\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <EditText android:layout_below= \"@id/edit_username\" android:id= \"@+id/edit_password\" android:hint= \"Password\" android:inputType= \"textPassword\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> In line 2 , we are defining the id for the username text field, then later on, we want the password field to be below the username text field, so we reference the edit_username id in line 7 . The parent ViewGroup is a RelativeLayout . The xml produces the layout as below: ![Defining Id Layout][3] View Positioning \u00b6 Besides the width and height and id, the view also need to be positioned. Some layout-related positioning attributes are required for a View or a ViewGroup. LinearLayout Positioning \u00b6 LinearLayout is required to have these attributes set: android:layout_width android:layout_height android:orientation The android:orientation can be: horizontal : Views are arranged from left to right. vertical : Views are arranged from top to bottom. Other layout-related attributes include: android:layout_gravity : This attribute is used with a UI element to control where the element is arranged within its parent. For example, the following attribute centers the UI element horizontally within the parent ViewGroup: 1 android:layout_gravity=\"center_horizontal\" RelativeLayout Positioning \u00b6 Another useful Viewgroup for layout is RelativeLayout , which you can use to position child View elements relative to each other or to the parent. The attributes you can use with RelativeLayout include the following: android:layout_toLeftOf : Positions the right edge of this View to the left of another View (identified by its ID). android:layout_toRightOf : Positions the left edge of this View to the right of another View (identified by its ID). android:layout_centerHorizontal : Centers this View horizontally within its parent. android:layout_centerVertical : Centers this View vertically within its parent. android:layout_alignParentTop : Positions the top edge of this View to match the top edge of the parent. android:layout_alignParentBottom : Positions the bottom edge of this View to match the bottom edge of the parent. Padding \u00b6 The other view attribute you will need to adjust is the padding. You can change padding for the left, top, right and bottom of the view. Padding can be change for all sides or individually. ![Padding][4] In the figure above: (1) Padding is the space between the edges of the TextView (dashed lines) and the content of the TextView (solid line). Padding vs Margin Padding is not the same as margin, which is the space from the edge of the View to its parent. Padding affects the space inside the view. The size of a View includes its padding. The following are commonly used padding attributes: android:padding : Sets the padding of all four edges. android:paddingTop : Sets the padding of the top edge. android:paddingBottom : Sets the padding of the bottom edge. android:paddingLeft : Sets the padding of the left edge. android:paddingRight : Sets the padding of the right edge. Style-related attributes \u00b6 The view can be customized using appearance attributes. Some attributes e.g android:textColor, android:textSize, and android:background are specified in the main theme. Here are some attributes you can change for the view: android:background : Specifies a color or drawable resource to use as the background. android:text : Specifies text to display in the view. android:textColor : Specifies the text color. android:textSize : Specifies the text size. android:textStyle : Specifies the text style, such as bold. Android Views \u00b6 Android views can be created with either code or XML . The most common way is to create Android UIs using XML. Views are created inside layouts. Layouts are the container views. View dimensions \u00b6 You can use px(pixel), pt(points 1/72') or in(inch) and mm for sizing but they are not recommended since they do not adapt to different screen displays. 1 <TextView android:layout_width= \"500px\" ... /> The above TextView will always occupy 100 physical pixels, so the TextView will look different on different screen sizes. View dimensions should be defined using dp Views should be defined in density independent pixels(dp). 1dp = 1px on a screen with 160dpi screen. 1 <TextView android:layout_width= \"100dp\" ... /> The above will occupy 100 physical pixels on a 160dpi(dots per inch) screen. Where does 160dpi come from The baseline density is derived from the screen of the G1, the first Android device. The formula to convert dp to pixels is px = dp * \\frac{dpi}{160} px = dp * \\frac{dpi}{160} The following TextView 1 <TextView android:layout_width= \"100dp\" ... /> on a 480dpi screen would be 100dp * \\frac{480dpi}{160} = 300px 100dp * \\frac{480dpi}{160} = 300px","title":"Android Views"},{"location":"android-views/#android-views","text":"The UI consists of a hierarchy of objects called views - every element on the screen is a View. The View represents the basic building block for all UI components, and the base class for classes that provide interactive UI components such as button, checkboxes, and text entry fields. A view consists of : two required dimensions expressed as width and height the unit for dimensions is in density-independent pixel(dpi) Common frequently used views are : TextView EditText Button ImageView ScrollView , ListView and RecyclerView used for displaying scrollable items LinearLayout used for containing other views RelativeLayout used for containing other views You can specify View elements in layout resources. Layout resources are written in XML and listed within the Resources -> layout .","title":"Android Views"},{"location":"android-views/#viewgroup-containers","text":"Views can be grouped inside a container. The base class for the Android container is the ViewGroup . When you define views, the views will be inside a ViewGroup . In Android, a the ViewGroups can be nested created a parent-child relationship. ![View Group][1] The root of the ViewGroup The first set of child View elements and ViewGroup groups whose parent is root . Some ViewGroup are designed as layouts because they organize child View elements in a specific way. Some examples layout ViewGroups are: CoordinatorLayout DrawerLayout LinearLayout Relativelayout Framelayout RecyclerView GridLayout ![Viewgroup example][2] In the figure above: LinearLayout , the root ViewGroup , contains all the child View elements in a vertical orientation. Button (button_toast). The first child View element appears at the top in the LinearLayout. TextView (show_count). The second child View element appears under the first child View element in the LinearLayout. Button (button_count). The third child View element appears under the second child View element in the LinearLayout. View Performance The layout hierarchy can grow to be complex for an app that shows many View elements on a screen. Deep nested ViewGroups can cause performance issues. Its recommended to use layouts that can accomplish flat layouts e.g using the ConstraintLayout instead of the LinearLayout . You should try to avoid nesting more than three levels deep.","title":"ViewGroup containers"},{"location":"android-views/#view-properties","text":"Views have two required properties, width and height . These two properties are set using the android:layout_width and android:layout_height . Another important property is the id property, this is used to name the views so that they can be referenced in code and in other parts of the layout file.","title":"View Properties"},{"location":"android-views/#automatic-view-sizing","text":"There are two special values you can use to specify width and height Use the match_parent to take the full width or height as the parent view. Use the wrap_content just large enough to fit the content. The following defines the parent layout to match both the width and height of the phone : 1 2 3 4 5 <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > ... </RelativeLayout>","title":"Automatic view sizing"},{"location":"android-views/#attribute-form","text":"Attributes generally take the form: android :attribute_name=\" value \" If the value is a resource, the @ specifies what kind of resource, e.g android:text=\"@string/greeting\" The greeting is defined in the Resources -> strings.xml as follows : 1 2 3 4 <resources> ... <string name= \"greeting\" > Hello World! </string> </resources> android namespace View attributes must be prefixed with the Android namespace when defined in XML. Some libraries define their own namespace. You should use those for additional attributes. 1 2 3 <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" > </RelativeLayout> The app namespaace is also defined for this layout: 1 2 3 <RelativeLayout xmlns:app= \"http://schemas.android.com/apk/res-auto\" > </RelativeLayout>","title":"Attribute form"},{"location":"android-views/#identifying-a-view","text":"To uniquely identify a View and reference it from code or other resources, you must give it an id.","title":"Identifying a View"},{"location":"android-views/#define-the-id","text":"The android:id is used to define the id in XML. To define a new id use the @+id/name-of-id as follows: 1 2 3 4 5 <TextView android:id= \"@+id/title\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/greeting\" /> Line 1 defines an id, title, for the TextView.","title":"Define the id"},{"location":"android-views/#referencing-the-view-from-code","text":"Once an id is defined, we can now reference the View from code. The id can referenced using the Resource.Id.title as follows: 1 TextView textView = FindViewById < TextView > ( Resource . Id . title ); We can now access the properties defined in the TextView using the textView variable. We use the generic FindViewById<T> to find the view by the id. Ids are integer numbers The id's are integer numbers that are automatically generated. Its efficient not use numbers that the associated string name. Id not generated Sometimes though, if you have an error somewhere in your code the id will not be generated. Try clean and build for Visual studio to re-generate the ids.","title":"Referencing the View from code"},{"location":"android-views/#referencing-the-view-from-other-views","text":"You can also reference the View using its id from other views by using the @id/<name> . name referencing the name of a predefined id. Notice that we no long have the + sign. Here is an example of the view being referencing in an xml layout file : 1 2 3 4 5 6 7 8 9 10 11 12 <EditText android:id= \"@+id/edit_username\" android:hint= \"Username\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <EditText android:layout_below= \"@id/edit_username\" android:id= \"@+id/edit_password\" android:hint= \"Password\" android:inputType= \"textPassword\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> In line 2 , we are defining the id for the username text field, then later on, we want the password field to be below the username text field, so we reference the edit_username id in line 7 . The parent ViewGroup is a RelativeLayout . The xml produces the layout as below: ![Defining Id Layout][3]","title":"Referencing the View from other Views"},{"location":"android-views/#view-positioning","text":"Besides the width and height and id, the view also need to be positioned. Some layout-related positioning attributes are required for a View or a ViewGroup.","title":"View Positioning"},{"location":"android-views/#linearlayout-positioning","text":"LinearLayout is required to have these attributes set: android:layout_width android:layout_height android:orientation The android:orientation can be: horizontal : Views are arranged from left to right. vertical : Views are arranged from top to bottom. Other layout-related attributes include: android:layout_gravity : This attribute is used with a UI element to control where the element is arranged within its parent. For example, the following attribute centers the UI element horizontally within the parent ViewGroup: 1 android:layout_gravity=\"center_horizontal\"","title":"LinearLayout Positioning"},{"location":"android-views/#relativelayout-positioning","text":"Another useful Viewgroup for layout is RelativeLayout , which you can use to position child View elements relative to each other or to the parent. The attributes you can use with RelativeLayout include the following: android:layout_toLeftOf : Positions the right edge of this View to the left of another View (identified by its ID). android:layout_toRightOf : Positions the left edge of this View to the right of another View (identified by its ID). android:layout_centerHorizontal : Centers this View horizontally within its parent. android:layout_centerVertical : Centers this View vertically within its parent. android:layout_alignParentTop : Positions the top edge of this View to match the top edge of the parent. android:layout_alignParentBottom : Positions the bottom edge of this View to match the bottom edge of the parent.","title":"RelativeLayout Positioning"},{"location":"android-views/#padding","text":"The other view attribute you will need to adjust is the padding. You can change padding for the left, top, right and bottom of the view. Padding can be change for all sides or individually. ![Padding][4] In the figure above: (1) Padding is the space between the edges of the TextView (dashed lines) and the content of the TextView (solid line). Padding vs Margin Padding is not the same as margin, which is the space from the edge of the View to its parent. Padding affects the space inside the view. The size of a View includes its padding. The following are commonly used padding attributes: android:padding : Sets the padding of all four edges. android:paddingTop : Sets the padding of the top edge. android:paddingBottom : Sets the padding of the bottom edge. android:paddingLeft : Sets the padding of the left edge. android:paddingRight : Sets the padding of the right edge.","title":"Padding"},{"location":"android-views/#style-related-attributes","text":"The view can be customized using appearance attributes. Some attributes e.g android:textColor, android:textSize, and android:background are specified in the main theme. Here are some attributes you can change for the view: android:background : Specifies a color or drawable resource to use as the background. android:text : Specifies text to display in the view. android:textColor : Specifies the text color. android:textSize : Specifies the text size. android:textStyle : Specifies the text style, such as bold.","title":"Style-related attributes"},{"location":"android-views/#android-views_1","text":"Android views can be created with either code or XML . The most common way is to create Android UIs using XML. Views are created inside layouts. Layouts are the container views.","title":"Android Views"},{"location":"android-views/#view-dimensions","text":"You can use px(pixel), pt(points 1/72') or in(inch) and mm for sizing but they are not recommended since they do not adapt to different screen displays. 1 <TextView android:layout_width= \"500px\" ... /> The above TextView will always occupy 100 physical pixels, so the TextView will look different on different screen sizes. View dimensions should be defined using dp Views should be defined in density independent pixels(dp). 1dp = 1px on a screen with 160dpi screen. 1 <TextView android:layout_width= \"100dp\" ... /> The above will occupy 100 physical pixels on a 160dpi(dots per inch) screen. Where does 160dpi come from The baseline density is derived from the screen of the G1, the first Android device. The formula to convert dp to pixels is px = dp * \\frac{dpi}{160} px = dp * \\frac{dpi}{160} The following TextView 1 <TextView android:layout_width= \"100dp\" ... /> on a 480dpi screen would be 100dp * \\frac{480dpi}{160} = 300px 100dp * \\frac{480dpi}{160} = 300px","title":"View dimensions"},{"location":"animations/","text":"Android Animations \u00b6","title":"Animation"},{"location":"animations/#android-animations","text":"","title":"Android Animations"},{"location":"app-resources/","text":"Understanding Android App Resources \u00b6 Resource files are a way of separating static values from code so that you don't have to change the code itself to change the values. Resource files are located in the Resources folder. These folders include : drawable : For images and icons layout : For layout resource files menu : For menu items mipmap : For pre-calculated, optimized collections of app icons used by the Launcher values : For colors, dimensions, strings, and styles (theme attributes) Referencing resources \u00b6 The syntax to reference a resource in an XML layout is as follows: @package_name:resource_type/resource_name package_name is the name of the package in which the resource is located. resource_type is the Resources subclass for the resource type. resource_name is either the resource filename without the extension, or the android:name attribute value in the XML element. Package name not require The package name is not required when you reference resources that are stored in the Resources folder of your project, because these resources are from the same package. For example, the following XML layout statement sets the android:text attribute to a string resource: android:text=\"@string/button_label_toast\" . No package_name is included, because the resource is stored in the strings.xml file in the project. The resource_type is string. The resource_name is button_label_toast. Referencing resources defined in another namespace \u00b6 In the following example, the XML layout statement sets the android:textColor attribute to a color resource. However, the resource is not defined in the project but supplied by Android, so you need to specify the package_name , which is android, followed by a colon: 1 android:textColor=\"@android:color/white\" Value resource files \u00b6 The values resources files are used to keep and easily manage commonly used values e.g colors, dimensions and strings. Its also used to manage resources translated to multiple languages. Strings \u00b6 String resources are located in the strings.xml file in Resources -> values -> strings.xml . 1 2 3 <resources> <string name= \"app_name\" > Hello Toast </string> </resources> The name (for example, app_name) is the resource name you use in your XML code, as in the following attribute: 1 android:label=\"@string/app_name\" Colors \u00b6 Color resources are located in the colors.xml file Resources -> values -> colors.xml . 1 2 3 4 5 6 <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <color name= \"colorPrimary\" > #2c3e50 </color> <color name= \"colorPrimaryDark\" > #1B3147 </color> <color name= \"colorAccent\" > #3498db </color> </resources> The name (for example, colorPrimary ) is the resource name you use in your XML code: 1 android:textColor=\"@color/colorPrimary\" The color value of this name is the hexadecimal color value (#3F51B5) enclosed within the tags. The hexadecimal value specifies red, green, and blue (RGB) values. The value always begins with a pound ( # ) character, followed by the Alpha-Red-Green-Blue information. For example, the hexadecimal value for black is #000000, while the hexadecimal value for a variant of sky blue is #559fe3. Base color values are listed in the Colors class documentation. Material Design colors The Material Design spec defines three primary colors, the primary dark, primary color and accent color. You can customize these colors to create a uniform UI. You can use Material Pallette website to generate the colors Dimensions \u00b6 Dimensions are stored in the Resources -> values -> dimens.xml . The dimens.xml file can be a folder holding more than one dimens.xml file - one for each device resolution. 1 2 3 4 5 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <resources> <dimen name= \"fab_margin\" > 16dp </dimen> <dimen name= \"default_padding\" > 16dp </dimen> </resources> The fab_margin is used as follows in the layout file : 1 2 3 4 <android.support.design.widget.FloatingActionButton ... android:layout_margin= \"@dimen/fab_margin\" ... /> Other resource files \u00b6 They are other resources files defined in the Resources folder: Images and icons - The drawable folder provides icon and image resources. They are usually various drawable folders for different device densities. Optimized icons - The mipmap folder typically contains pre-calculated, optimized collections of app icons used by the Launcher. Menus - You can use an XML resource file to define menu items and store them in your project in the menu folder.","title":"App Resources"},{"location":"app-resources/#understanding-android-app-resources","text":"Resource files are a way of separating static values from code so that you don't have to change the code itself to change the values. Resource files are located in the Resources folder. These folders include : drawable : For images and icons layout : For layout resource files menu : For menu items mipmap : For pre-calculated, optimized collections of app icons used by the Launcher values : For colors, dimensions, strings, and styles (theme attributes)","title":"Understanding Android App Resources"},{"location":"app-resources/#referencing-resources","text":"The syntax to reference a resource in an XML layout is as follows: @package_name:resource_type/resource_name package_name is the name of the package in which the resource is located. resource_type is the Resources subclass for the resource type. resource_name is either the resource filename without the extension, or the android:name attribute value in the XML element. Package name not require The package name is not required when you reference resources that are stored in the Resources folder of your project, because these resources are from the same package. For example, the following XML layout statement sets the android:text attribute to a string resource: android:text=\"@string/button_label_toast\" . No package_name is included, because the resource is stored in the strings.xml file in the project. The resource_type is string. The resource_name is button_label_toast.","title":"Referencing resources"},{"location":"app-resources/#referencing-resources-defined-in-another-namespace","text":"In the following example, the XML layout statement sets the android:textColor attribute to a color resource. However, the resource is not defined in the project but supplied by Android, so you need to specify the package_name , which is android, followed by a colon: 1 android:textColor=\"@android:color/white\"","title":"Referencing resources defined in another namespace"},{"location":"app-resources/#value-resource-files","text":"The values resources files are used to keep and easily manage commonly used values e.g colors, dimensions and strings. Its also used to manage resources translated to multiple languages.","title":"Value resource files"},{"location":"app-resources/#strings","text":"String resources are located in the strings.xml file in Resources -> values -> strings.xml . 1 2 3 <resources> <string name= \"app_name\" > Hello Toast </string> </resources> The name (for example, app_name) is the resource name you use in your XML code, as in the following attribute: 1 android:label=\"@string/app_name\"","title":"Strings"},{"location":"app-resources/#colors","text":"Color resources are located in the colors.xml file Resources -> values -> colors.xml . 1 2 3 4 5 6 <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <color name= \"colorPrimary\" > #2c3e50 </color> <color name= \"colorPrimaryDark\" > #1B3147 </color> <color name= \"colorAccent\" > #3498db </color> </resources> The name (for example, colorPrimary ) is the resource name you use in your XML code: 1 android:textColor=\"@color/colorPrimary\" The color value of this name is the hexadecimal color value (#3F51B5) enclosed within the tags. The hexadecimal value specifies red, green, and blue (RGB) values. The value always begins with a pound ( # ) character, followed by the Alpha-Red-Green-Blue information. For example, the hexadecimal value for black is #000000, while the hexadecimal value for a variant of sky blue is #559fe3. Base color values are listed in the Colors class documentation. Material Design colors The Material Design spec defines three primary colors, the primary dark, primary color and accent color. You can customize these colors to create a uniform UI. You can use Material Pallette website to generate the colors","title":"Colors"},{"location":"app-resources/#dimensions","text":"Dimensions are stored in the Resources -> values -> dimens.xml . The dimens.xml file can be a folder holding more than one dimens.xml file - one for each device resolution. 1 2 3 4 5 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <resources> <dimen name= \"fab_margin\" > 16dp </dimen> <dimen name= \"default_padding\" > 16dp </dimen> </resources> The fab_margin is used as follows in the layout file : 1 2 3 4 <android.support.design.widget.FloatingActionButton ... android:layout_margin= \"@dimen/fab_margin\" ... />","title":"Dimensions"},{"location":"app-resources/#other-resource-files","text":"They are other resources files defined in the Resources folder: Images and icons - The drawable folder provides icon and image resources. They are usually various drawable folders for different device densities. Optimized icons - The mipmap folder typically contains pre-calculated, optimized collections of app icons used by the Launcher. Menus - You can use an XML resource file to define menu items and store them in your project in the menu folder.","title":"Other resource files"},{"location":"broadcast-receivers/","text":"Broadcast Receivers \u00b6 Types of Broadcasts \u00b6 Broadcast Receivers \u00b6 Broadcast Intents \u00b6 Broadcast Security \u00b6","title":"Broadcast Receivers"},{"location":"broadcast-receivers/#broadcast-receivers","text":"","title":"Broadcast Receivers"},{"location":"broadcast-receivers/#types-of-broadcasts","text":"","title":"Types of Broadcasts"},{"location":"broadcast-receivers/#broadcast-receivers_1","text":"","title":"Broadcast Receivers"},{"location":"broadcast-receivers/#broadcast-intents","text":"","title":"Broadcast Intents"},{"location":"broadcast-receivers/#broadcast-security","text":"","title":"Broadcast Security"},{"location":"common-intents/","text":"Android Common Intents \u00b6 Let's take a look at the most common implicit intents such as making a phone call, launching a web address, sending an email, etc. Phone Call \u00b6 Permissions: 1 <uses-permission android:name= \"android.permission.CALL_PHONE\" /> Intent: 1 2 3 4 5 6 Intent callIntent = new Intent ( Intent . ActionCall ) ; callIntent . SetData ( Android . Net . Uri . Parse ( \" tel:0377778888 \" )) ; if ( callIntent . ResolveActivity ( PackageManager ) != null ) { StartActivity ( callIntent ) ; } Caution It's possible that a user won't have any apps that handle the implicit intent you send to StartActivity() . If that happens, the call will fail and your app will crash. To verify that an activity will receive the intent, call ResolveActivity() on your Intent object. If the result is non-null, then there is at least one app that can handle the intent and it's safe to call StartActivity() . If the result is null, you should not use the intent and, if possible, you should disable the feature that issue the intent. Send Email (to Phone Email Client) \u00b6 Compose an email in the phone email client: 1 2 3 4 5 6 7 8 9 Intent intent = new Intent ( Intent . ActionSend ) ; intent . SetType ( \" plain/text \" ) ; intent . PutExtra ( Intent . ExtraEmail , new String [] { \" some@email.address \" } ) ; intent . PutExtra ( Intent . ExtraSubject , \" subject \" ) ; intent . PutExtra ( Intent . ExtraText , \" mail body \" ) ; if ( intent . ResolveActivity ( PackageManager ) != null ) { StartActivity ( Intent . CreateChooser ( intent , \"\" )) ; } Send Email (to Gmail) \u00b6 Gmail does not examine the extra Intent fields, so in order to use this intent, you need to use the Intent.ACTION_SENDTO and pass a mailto: URI with the subject and body URL encoded. 1 2 3 4 5 6 7 8 9 10 11 12 13 var uriText = \" mailto:youremail@gmail.com \" + \" ?subject= \" + Android . Net . Uri . Encode ( \" some subject text here \" ) + \" &body= \" + Android . Net . Uri . Encode ( \" some text here \" ) ; var uri = Android . Net . Uri . Parse ( uriText ) ; Intent sendIntent = new Intent ( Intent . ActionSendto ) ; sendIntent . SetData ( uri ) ; if ( sendIntent . ResolveActivity ( PackageManager ) != null ) { StartActivity ( Intent . CreateChooser ( sendIntent , \" Send email \" )) ; } Launch Website \u00b6 Launch a website in the phone browser: 1 2 3 4 5 Intent browserIntent = new Intent ( Intent . ActionView , Android . Net . Uri . Parse ( \" http://www.google.com \" )) ; if ( browserIntent . ResolveActivity ( PackageManager ) != null ) { StartActivity ( browserIntent ) ; } You can also launch a Chrome tab if the app. Take a look at [[this guide|Chrome-Custom-Tabs#setup]] for how to launch this implicit intent. Open Google Play Store \u00b6 Open app page on Google Play: 1 2 3 4 5 Intent intent = new Intent ( Intent . ActionView , Android . Net . Uri . Parse ( \" market://details?id= \" + PackageName )) ; if ( intent . ResolveActivity ( PackageManager ) != null ) { StartActivity ( intent ) ; } Compose SMS \u00b6 1 2 3 4 5 6 7 8 9 10 11 var to = \" 123894994 \" ; var message = \" This is an example message \" ; var smsUri = Android . Net . Uri . Parse ( \" tel: \" + to ) ; Intent intent = new Intent ( Intent . ActionView , smsUri ) ; intent . PutExtra ( \" address \" , to ) ; intent . PutExtra ( \" sms_body \" , message ) ; intent . SetType ( \" vnd.android-dir/mms-sms \" ) ;//here setType will set the previous data null. if ( intent . ResolveActivity ( PackageManager ) != null ) { StartActivity ( intent ) ; } Google Maps \u00b6 Show location in maps application: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Intent intent = new Intent () ; intent . SetAction ( Intent . ActionView ) ; var latitude = 18 . 89 ; var longitude = 178 . 90 ; var zoomLevel = 14 ; String data = $ \" geo:{latitude},{longitude} \" ; if ( zoomLevel != null ) { data = $ \" {data}?z={zoomLevel} \" ; } intent . SetData ( Android . Net . Uri . Parse ( data )) ; if ( intent . ResolveActivity ( PackageManager ) != null ) { StartActivity ( intent ) ; } Capture Photo \u00b6 To open a camera app and receive the resulting photo or video, use the ACTION_IMAGE_CAPTURE or ACTION_VIDEO_CAPTURE action. Also specify the URI location where you'd like the camera to save the photo or video, in the EXTRA_OUTPUT extra. If you specify the EXTRA_OUTPUT then the OnActivityResult method will not hold the actual image in its intent, the image will written directly to the uri specified in the EXTRA_OUTPUT . Start the Camera App \u00b6 1 2 3 4 5 6 7 8 const int TAKE_PHOTO_REQUEST_CODE = 100 ; // Create an intent to start the camera app var intent = new Intent ( MediaStore . ActionImageCapture ) ; // Check if they are apps to handle taking photos if ( intent . ResolveActivity ( PackageManager ) != null ) { // Start the activity so that it will return a result StartActivityForResult ( intent , TAKE_PHOTO_REQUEST_CODE ) ; } Display the picture \u00b6 Once the user takes the picture, the OnActivityResult method will be called and we will retrieve the image from the intent and display it on the image view. 1 2 3 4 5 6 7 8 9 10 11 12 // Once we take the picture , this method will be called back protected override void OnActivityResult ( int requestCode , Result resultCode , Intent data ) { base . OnActivityResult ( requestCode , resultCode , data ) ; // We check if the user did not cancel taking the picture and if our result code is the same if ( resultCode == Result . Ok && requestCode == TAKE_PHOTO_REQUEST_CODE ) { // Get the picture from the intent var bitmap = data . GetParcelableExtra ( \" data \" ) as Bitmap ; // Set and display the image in an imageView imageView . SetImageBitmap ( bitmap ) ; } } Scaling the image \u00b6 Most cameras take high resolution pictures and the images will need to be resized before being displayed or sent to a server. The BitmapFactory calss have several methods we can use to create a scaled down image. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public static Bitmap LoadAndResizeBitmapFromFile ( this string fileName , int width , int height ) { // First we get the the dimensions of the file on disk BitmapFactory . Options options = new BitmapFactory . Options { InJustDecodeBounds = true } ; BitmapFactory . DecodeFile ( fileName , options ) ; // Next we calculate the ratio that we need to resize the image by // in order to fit the requested dimensions . int outHeight = options . OutHeight ; int outWidth = options . OutWidth ; int inSampleSize = 1 ; if ( outHeight > height || outWidth > width ) { inSampleSize = outWidth > outHeight ? outHeight / height : outWidth / width ; } // Now we will load the image and have BitmapFactory resize it for us . options . InSampleSize = inSampleSize ; options . InJustDecodeBounds = false ; Bitmap resizedBitmap = BitmapFactory . DecodeFile ( fileName , options ) ; return resizedBitmap ; } Save the image to the file system \u00b6 We can save the image take to the file system. In this example, we dont create folders, we save the image directly to the SDCard. First start by defining properties. 1 2 3 4 5 Android . Net . Uri uri ; Java . IO . File imageFileName ; imageFileName = new Java . IO . File ( Android . OS . Environment . ExternalStorageDirectory , $ \"photo-{Guid.NewGuid()}.jpg\" ); uri = Android . Net . Uri . FromFile ( imageFileName ); Wire the button to show Camera App \u00b6 We can use a button to launch the camera app. 1 2 3 4 5 6 7 8 9 10 button . Click += delegate { // Create an intent to start the camera app var intent = new Intent ( MediaStore . ActionImageCapture ) ; intent . PutExtra ( MediaStore . ExtraOutput , uri ) ; // Check if they are apps to handle taking photos if ( intent . ResolveActivity ( PackageManager ) != null ) { // Start the activity so that it will return a result StartActivityForResult ( intent , TAKE_PHOTO_REQUEST_CODE ) ; } } ; Display a scaled down image \u00b6 Once the picture is taken, we read it from the file system and scaled it and then display it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Once we take the picture , this method will be called back protected override void OnActivityResult ( int requestCode , Result resultCode , Intent data ) { base . OnActivityResult ( requestCode , resultCode , data ) ; // We check if the user did not cancel taking the picture and if our result code is the same if ( resultCode == Result . Ok && requestCode == TAKE_PHOTO_REQUEST_CODE ) { // Get the picture from the intent // var bitmap = data . GetParcelableExtra ( \" data \" ) as Bitmap ; var scaledBitmap = BitmapHelpers . LoadAndResizeBitmapFromFile ( uri . EncodedPath , 600 , 200 ) ; // Set and display the image in an imageView imageView . SetImageBitmap ( scaledBitmap ) ; } } Sharing Content \u00b6 Images or binary data: 1 2 3 4 5 6 7 8 var sharingIntent = new Intent ( Intent . ActionSend ) ; sharingIntent . SetType ( \" image/jpg \" ) ; var uri = Android . Net . Uri . fromFile ( new File ( getFilesDir () , \" foo.jpg \" )) ; sharingIntent . PutExtra ( Intent . ExtraStream , uri . toString ()) ; if ( sharingIntent . ResolveActivity ( PackageManager ) != null ) { StartActivity ( Intent . CreateChooser ( sharingIntent , \" Share image using \" )) ; } or HTML: 1 2 3 4 5 6 7 var sharingIntent = new Intent ( Intent . ActionSend ) ; sharingIntent . SetType ( \" text/html \" ) ; sharingIntent . PutExtra ( Intent . ExtraText , Html . FromHtml ( \" <p>This is the text shared.</p> \" )) ; if ( sharingIntent . ResolveActivity ( PackageManager ) != null ) { StartActivity ( Intent . CreateChooser ( sharingIntent , \" Share using \" )) ; }","title":"Common Intents"},{"location":"common-intents/#android-common-intents","text":"Let's take a look at the most common implicit intents such as making a phone call, launching a web address, sending an email, etc.","title":"Android Common Intents"},{"location":"common-intents/#phone-call","text":"Permissions: 1 <uses-permission android:name= \"android.permission.CALL_PHONE\" /> Intent: 1 2 3 4 5 6 Intent callIntent = new Intent ( Intent . ActionCall ) ; callIntent . SetData ( Android . Net . Uri . Parse ( \" tel:0377778888 \" )) ; if ( callIntent . ResolveActivity ( PackageManager ) != null ) { StartActivity ( callIntent ) ; } Caution It's possible that a user won't have any apps that handle the implicit intent you send to StartActivity() . If that happens, the call will fail and your app will crash. To verify that an activity will receive the intent, call ResolveActivity() on your Intent object. If the result is non-null, then there is at least one app that can handle the intent and it's safe to call StartActivity() . If the result is null, you should not use the intent and, if possible, you should disable the feature that issue the intent.","title":"Phone Call"},{"location":"common-intents/#send-email-to-phone-email-client","text":"Compose an email in the phone email client: 1 2 3 4 5 6 7 8 9 Intent intent = new Intent ( Intent . ActionSend ) ; intent . SetType ( \" plain/text \" ) ; intent . PutExtra ( Intent . ExtraEmail , new String [] { \" some@email.address \" } ) ; intent . PutExtra ( Intent . ExtraSubject , \" subject \" ) ; intent . PutExtra ( Intent . ExtraText , \" mail body \" ) ; if ( intent . ResolveActivity ( PackageManager ) != null ) { StartActivity ( Intent . CreateChooser ( intent , \"\" )) ; }","title":"Send Email (to Phone Email Client)"},{"location":"common-intents/#send-email-to-gmail","text":"Gmail does not examine the extra Intent fields, so in order to use this intent, you need to use the Intent.ACTION_SENDTO and pass a mailto: URI with the subject and body URL encoded. 1 2 3 4 5 6 7 8 9 10 11 12 13 var uriText = \" mailto:youremail@gmail.com \" + \" ?subject= \" + Android . Net . Uri . Encode ( \" some subject text here \" ) + \" &body= \" + Android . Net . Uri . Encode ( \" some text here \" ) ; var uri = Android . Net . Uri . Parse ( uriText ) ; Intent sendIntent = new Intent ( Intent . ActionSendto ) ; sendIntent . SetData ( uri ) ; if ( sendIntent . ResolveActivity ( PackageManager ) != null ) { StartActivity ( Intent . CreateChooser ( sendIntent , \" Send email \" )) ; }","title":"Send Email (to Gmail)"},{"location":"common-intents/#launch-website","text":"Launch a website in the phone browser: 1 2 3 4 5 Intent browserIntent = new Intent ( Intent . ActionView , Android . Net . Uri . Parse ( \" http://www.google.com \" )) ; if ( browserIntent . ResolveActivity ( PackageManager ) != null ) { StartActivity ( browserIntent ) ; } You can also launch a Chrome tab if the app. Take a look at [[this guide|Chrome-Custom-Tabs#setup]] for how to launch this implicit intent.","title":"Launch Website"},{"location":"common-intents/#open-google-play-store","text":"Open app page on Google Play: 1 2 3 4 5 Intent intent = new Intent ( Intent . ActionView , Android . Net . Uri . Parse ( \" market://details?id= \" + PackageName )) ; if ( intent . ResolveActivity ( PackageManager ) != null ) { StartActivity ( intent ) ; }","title":"Open Google Play Store"},{"location":"common-intents/#compose-sms","text":"1 2 3 4 5 6 7 8 9 10 11 var to = \" 123894994 \" ; var message = \" This is an example message \" ; var smsUri = Android . Net . Uri . Parse ( \" tel: \" + to ) ; Intent intent = new Intent ( Intent . ActionView , smsUri ) ; intent . PutExtra ( \" address \" , to ) ; intent . PutExtra ( \" sms_body \" , message ) ; intent . SetType ( \" vnd.android-dir/mms-sms \" ) ;//here setType will set the previous data null. if ( intent . ResolveActivity ( PackageManager ) != null ) { StartActivity ( intent ) ; }","title":"Compose SMS"},{"location":"common-intents/#google-maps","text":"Show location in maps application: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Intent intent = new Intent () ; intent . SetAction ( Intent . ActionView ) ; var latitude = 18 . 89 ; var longitude = 178 . 90 ; var zoomLevel = 14 ; String data = $ \" geo:{latitude},{longitude} \" ; if ( zoomLevel != null ) { data = $ \" {data}?z={zoomLevel} \" ; } intent . SetData ( Android . Net . Uri . Parse ( data )) ; if ( intent . ResolveActivity ( PackageManager ) != null ) { StartActivity ( intent ) ; }","title":"Google Maps"},{"location":"common-intents/#capture-photo","text":"To open a camera app and receive the resulting photo or video, use the ACTION_IMAGE_CAPTURE or ACTION_VIDEO_CAPTURE action. Also specify the URI location where you'd like the camera to save the photo or video, in the EXTRA_OUTPUT extra. If you specify the EXTRA_OUTPUT then the OnActivityResult method will not hold the actual image in its intent, the image will written directly to the uri specified in the EXTRA_OUTPUT .","title":"Capture Photo"},{"location":"common-intents/#start-the-camera-app","text":"1 2 3 4 5 6 7 8 const int TAKE_PHOTO_REQUEST_CODE = 100 ; // Create an intent to start the camera app var intent = new Intent ( MediaStore . ActionImageCapture ) ; // Check if they are apps to handle taking photos if ( intent . ResolveActivity ( PackageManager ) != null ) { // Start the activity so that it will return a result StartActivityForResult ( intent , TAKE_PHOTO_REQUEST_CODE ) ; }","title":"Start the Camera App"},{"location":"common-intents/#display-the-picture","text":"Once the user takes the picture, the OnActivityResult method will be called and we will retrieve the image from the intent and display it on the image view. 1 2 3 4 5 6 7 8 9 10 11 12 // Once we take the picture , this method will be called back protected override void OnActivityResult ( int requestCode , Result resultCode , Intent data ) { base . OnActivityResult ( requestCode , resultCode , data ) ; // We check if the user did not cancel taking the picture and if our result code is the same if ( resultCode == Result . Ok && requestCode == TAKE_PHOTO_REQUEST_CODE ) { // Get the picture from the intent var bitmap = data . GetParcelableExtra ( \" data \" ) as Bitmap ; // Set and display the image in an imageView imageView . SetImageBitmap ( bitmap ) ; } }","title":"Display the picture"},{"location":"common-intents/#scaling-the-image","text":"Most cameras take high resolution pictures and the images will need to be resized before being displayed or sent to a server. The BitmapFactory calss have several methods we can use to create a scaled down image. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public static Bitmap LoadAndResizeBitmapFromFile ( this string fileName , int width , int height ) { // First we get the the dimensions of the file on disk BitmapFactory . Options options = new BitmapFactory . Options { InJustDecodeBounds = true } ; BitmapFactory . DecodeFile ( fileName , options ) ; // Next we calculate the ratio that we need to resize the image by // in order to fit the requested dimensions . int outHeight = options . OutHeight ; int outWidth = options . OutWidth ; int inSampleSize = 1 ; if ( outHeight > height || outWidth > width ) { inSampleSize = outWidth > outHeight ? outHeight / height : outWidth / width ; } // Now we will load the image and have BitmapFactory resize it for us . options . InSampleSize = inSampleSize ; options . InJustDecodeBounds = false ; Bitmap resizedBitmap = BitmapFactory . DecodeFile ( fileName , options ) ; return resizedBitmap ; }","title":"Scaling the image"},{"location":"common-intents/#save-the-image-to-the-file-system","text":"We can save the image take to the file system. In this example, we dont create folders, we save the image directly to the SDCard. First start by defining properties. 1 2 3 4 5 Android . Net . Uri uri ; Java . IO . File imageFileName ; imageFileName = new Java . IO . File ( Android . OS . Environment . ExternalStorageDirectory , $ \"photo-{Guid.NewGuid()}.jpg\" ); uri = Android . Net . Uri . FromFile ( imageFileName );","title":"Save the image to the file system"},{"location":"common-intents/#wire-the-button-to-show-camera-app","text":"We can use a button to launch the camera app. 1 2 3 4 5 6 7 8 9 10 button . Click += delegate { // Create an intent to start the camera app var intent = new Intent ( MediaStore . ActionImageCapture ) ; intent . PutExtra ( MediaStore . ExtraOutput , uri ) ; // Check if they are apps to handle taking photos if ( intent . ResolveActivity ( PackageManager ) != null ) { // Start the activity so that it will return a result StartActivityForResult ( intent , TAKE_PHOTO_REQUEST_CODE ) ; } } ;","title":"Wire the button to show Camera App"},{"location":"common-intents/#display-a-scaled-down-image","text":"Once the picture is taken, we read it from the file system and scaled it and then display it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Once we take the picture , this method will be called back protected override void OnActivityResult ( int requestCode , Result resultCode , Intent data ) { base . OnActivityResult ( requestCode , resultCode , data ) ; // We check if the user did not cancel taking the picture and if our result code is the same if ( resultCode == Result . Ok && requestCode == TAKE_PHOTO_REQUEST_CODE ) { // Get the picture from the intent // var bitmap = data . GetParcelableExtra ( \" data \" ) as Bitmap ; var scaledBitmap = BitmapHelpers . LoadAndResizeBitmapFromFile ( uri . EncodedPath , 600 , 200 ) ; // Set and display the image in an imageView imageView . SetImageBitmap ( scaledBitmap ) ; } }","title":"Display a scaled down image"},{"location":"common-intents/#sharing-content","text":"Images or binary data: 1 2 3 4 5 6 7 8 var sharingIntent = new Intent ( Intent . ActionSend ) ; sharingIntent . SetType ( \" image/jpg \" ) ; var uri = Android . Net . Uri . fromFile ( new File ( getFilesDir () , \" foo.jpg \" )) ; sharingIntent . PutExtra ( Intent . ExtraStream , uri . toString ()) ; if ( sharingIntent . ResolveActivity ( PackageManager ) != null ) { StartActivity ( Intent . CreateChooser ( sharingIntent , \" Share image using \" )) ; } or HTML: 1 2 3 4 5 6 7 var sharingIntent = new Intent ( Intent . ActionSend ) ; sharingIntent . SetType ( \" text/html \" ) ; sharingIntent . PutExtra ( Intent . ExtraText , Html . FromHtml ( \" <p>This is the text shared.</p> \" )) ; if ( sharingIntent . ResolveActivity ( PackageManager ) != null ) { StartActivity ( Intent . CreateChooser ( sharingIntent , \" Share using \" )) ; }","title":"Sharing Content"},{"location":"common-views/","text":"Android Common Views \u00b6 This chapter describes the common UI views used to compose your Xamarin.Android app. The views in Xamarin.Android are wrappers of the natives Android views. Button \u00b6 There are three standard types of buttons: Floating action button : A circular material button that lifts and displays an ink reaction on press. Raised button : A typically rectangular material button that lifts and displays ink reactions on press. Flat button : A button made of ink that displays ink reactions on press but does not lift. To create a button with text, use the following XML : 1 2 3 4 <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"LOGIN\" /> If we want the button's width to be the same as its parent, we would change the android:layout_height to match_parent . 1 2 3 4 <Button android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"LOGIN\" /> Drawables on buttons \u00b6 A normal button can also have an image on the left or right, by using the android:drawableLeft and android:drawableRight attributes. Thses drawables have limited use as the images inside them can not be resized. 1 2 3 4 5 <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/button_text\" android:drawableLeft= \"@drawable/button_icon\" /> Floating Action Button \u00b6 The floating action action button is available as a support package. You need to the Android Support Design v7 package from from Nuget before you can use it in the project. 1 2 3 4 5 6 7 <android.support.design.widget.FloatingActionButton android:id= \"@+id/fab\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_gravity= \"bottom|end\" android:layout_margin= \"16dp\" app:srcCompat= \"@android:drawable/ic_input_add\" /> The floating action button is mostly used inside the CoordinatorLayout or FrameLayout . This layout is also included as part of the Android Support Design Package. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.design.widget.CoordinatorLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:fitsSystemWindows= \"true\" > <android.support.design.widget.FloatingActionButton android:id= \"@+id/fab\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_gravity= \"bottom|end\" android:layout_margin= \"@dimen/fab_margin\" app:srcCompat= \"@android:drawable/ic_input_add\" /> </android.support.design.widget.CoordinatorLayout> FAB Properties \u00b6 Property Description Position You can position the floating button by using layout_gravity attribute. Size FAB supports two sizes normal and mini . You can define the size of the button by using app:fabSize attribute Background Color By default, fab takes colorAccent as background color. If you want to change the background of fab, use app:backgroundTint attribute to define your own background color Ripple Color Sets the color of the ripple effect of your FloatingActionButton. Can be a color resource or hex string. app:rippleColor Compat Padding Enable compat padding. Maybe a boolean value, such as true or false. app:useCompatPadding Elevation Can be a string, integer, boolean, color value, floating point, dimension value. app:elevation Borderless Button \u00b6 A style is used to get the a borderless button. Note that the style does not use the android prefix. 1 2 3 4 5 <Button style= \"@style/Widget.AppCompat.Button.Borderless\" android:text= \"Borderless Button\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> You can also get a coloured borderless button. The default color used is the accent color from the theme. 1 2 3 4 5 <Button style= \"@style/Widget.AppCompat.Button.Borderless.Colored\" android:text= \"Borderless Button\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> EditText \u00b6 Text fields allow users to input text, select text, and lookup data via auto-completion. Text fields usually appear in forms. Users may enter text, numbers, or mixed-format types of input. Touching a text field makes the two actions occur: Places the cursor there Displays the keyboard Retrieving the Value \u00b6 Getting the value of the text entered into an EditText is as follows: 1 2 EditText etUsername = FindViewById < EditText > ( Resource . Id . etUsername ); var username = etUsername . Text ; Text field anatomy \u00b6 Labels describe the type of input requested in each field Hint text is placeholder text that suggests the type of information requested, sometimes in the form of an example Helper text appears below input fields to provide additional context 1 2 3 4 5 6 <EditText android:id= \"@+id/album_description_view\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"@string/album_description\" android:inputType= \"textMultiLine\" /> TextInputLayout \u00b6 Traditionally, the EditText hides the hint message (explained above) after the user starts typing. In addition, any validation error messages had to be managed manually by the developer. Starting with Android M the TextInputLayout can be used to setup a floating label to display hints and error messages. First, wrap the EditText in a TextInputLayout : 1 2 3 4 5 6 7 8 9 10 11 12 <android.support.design.widget.TextInputLayout android:id= \"@+id/input_layout_name\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <EditText android:id= \"@+id/input_name\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:singleLine= \"true\" android:hint= \"@string/hint_name\" /> </android.support.design.widget.TextInputLayout> Now the hint will automatically begin to float once the EditText takes focus as shown below: We can also use the TextInputLayout to display error messages using the SetError and SetErrorEnabled properties in the activity at runtime. Adding Character Counting \u00b6 TextInputLayout since the announcement of support design library v23.1 also can expose a character counter for an EditText defined within it. The counter will be rendered below the EditText and can change colors of both the line and character counter if the maximum number of characters has been exceeded: The TextInputLayout simply needs to define app:counterEnabled and app:CounterMaxLength in the XML attributes. These settings can also be defined dynamically through SetCounterEnabled() and SetCounterMaxLength() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <android.support.design.widget.TextInputLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:counterEnabled= \"true\" app:counterMaxLength= \"10\" app:counterTextAppearance= \"@style/counterText\" app:counterOverflowTextAppearance= \"@style/counterOverride\" > <EditText android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:hint= \"Username\" android:layout_centerHorizontal= \"true\" android:layout_centerVertical= \"true\" android:ems= \"10\" android:hint= \"Username\" /> </android.support.design.widget.TextInputLayout> Adding Password Visibility Toggles \u00b6 NOTE : You must have support library 24.2.0 or higher to use this feature. If you use an EditText with an input password type, you can also enable an icon that can show or hide the entire text using the passwordToggleEnabled attribute. You can also change the default eye icon with passwordToggleDrawable attribute or the color hint using the passwordToggleTint attribute. See the TextInputLayout attributes for more details. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <android.support.design.widget.TextInputLayout android:id= \"@+id/username_text_input_layout\" app:passwordToggleEnabled= \"true\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <EditText android:id= \"@+id/etUsername\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_centerHorizontal= \"true\" android:layout_centerVertical= \"true\" android:ems= \"10\" android:inputType= \"textPassword\" android:hint= \"Username\" /> </android.support.design.widget.TextInputLayout> Providing Auto-complete \u00b6 Check out the official text fields guide for a step-by-step on how to setup autocomplete for the entry. EditText Input Types \u00b6 We can customize the soft keyboard based on the required input for the EditText. These can be changed with the android:inputType attribute. Here are the available input types Type Description textUri Text that will be used as a URI textEmailAddress Text that will be used as an e-mail address textPersonName Text that is the name of a person textPassword Text that is a password that should be obscured number A numeric only field phone For entering a phone number date For entering a date time For entering a time textMultiLine Allow multiple lines of text in the field You can set multiple inputType attributes if needed (separated by '|') 1 2 3 <EditText android:inputType= \"textCapSentences|textMultiline\" /> More input types are available from the here Further Entry Customization \u00b6 We might want to limit the entry to a single-line of text (avoid newlines): 1 2 3 4 <EditText android:singleLine= \"true\" android:lines= \"1\" /> You can limit the characters that can be entered into a field using the digits attribute: 1 2 3 4 <EditText android:inputType= \"number\" android:digits= \"01\" /> This would restrict the digits entered to just \"0\" and \"1\". We might want to limit the total number of characters with: 1 2 3 <EditText android:maxLength= \"5\" /> Displaying Placeholder Hints \u00b6 You may want to set the hint for the EditText control to prompt a user for specific input with: 1 2 3 4 <EditText ... android:hint= \"@string/my_hint\" > </EditText> Changing the bottom line color \u00b6 Assuming you are using the AppCompat library, you can override the styles colorControlNormal , colorControlActivated , and colorControlHighlight : 1 2 3 4 5 <style name= \"Theme.App.Base\" parent= \"Theme.AppCompat.Light.DarkActionBar\" > <item name= \"colorControlNormal\" > #d32f2f </item> <item name= \"colorControlActivated\" > #ff5722 </item> <item name= \"colorControlHighlight\" > #f44336 </item> </style> ImageView \u00b6 Displays an image.This view takes care of the loading and optimizing of the image, freeing you to focus on app-specific details like the layout and content. Use the scaleType to control how the image resizes. Images are not clickable by default. You will need to enable android:clickable=true . Note the scaleType attribute which defines how the images will be scaled to fit in your layout. In the example, using scaleType \"center\", the image will be displayed at its native resolution and centered in the view, regardless of how much space the view consumes. 1 2 3 4 5 6 <ImageView android:id= \"@+id/photo_image_view\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:scaleType= \"center\" android:src= \"@drawable/beach\" /> Sizing ImageView Controls \u00b6 By default, contents of an ImageView control are of a certain size -- usually the size of the image dimensions. They can also be bounded by their layout_width and layout_height attributes: 1 2 3 4 5 6 <ImageView android:layout_width= \"50dp\" android:layout_height= \"50dp\" android:scaleType= \"fitXY\" ... /> The scaleType above has been set to fitXY which sets the height and the width up or down to fit the maximum dimensions specified. Fixing the width and height however means that the proportions of the width and height of the original image, known as the aspect ratio, will be altered. We can take advantage of the adjustViewBounds parameter to preserve this aspect ratio. However, we must either allow the height and/or width to be adjustable (i.e. by using maxWidth and using wrap_content for the dimension). Otherwise, the dimensions cannot be readjusted to meet the required aspect ratio. 1 2 3 4 5 6 7 <ImageView android:layout_width= \"50dp\" android:layout_height= \"wrap_content\" android:scaleType= \"fitXY\" android:adjustViewBounds= \"true\" ... /> Scale Types \u00b6 An ImageView can display an image differently based on the scaleType provided. Above we discussed the fitXY type along with adjustViewBounds to match the aspect ratio of the drawable. The following is a list of all the most common types: Scale Type Description center Displays the image centered in the view with no scaling. centerCrop Scales the image such that both the x and y dimensions are greater than or equal to the view, while maintaining the image aspect ratio; centers the image in the view. centerInside Scales the image to fit inside the view, while maintaining the image aspect ratio. If the image is already smaller than the view, then this is the same as center. fitCenter Scales the image to fit inside the view, while maintaining the image aspect ratio. At least one axis will exactly match the view, and the result is centered inside the view. fitStart Same as fitCenter but aligned to the top left of the view. fitEnd Same as fitCenter but aligned to the bottom right of the view. fitXY Scales the x and y dimensions to exactly match the view size; does not maintain the image aspect ratio. matrix Scales the image using a supplied Matrix class. The matrix can be supplied using the setImageMatrix method. A Matrix class can be used to apply transformations such as rotations to an image. Note: The fitXY scale type allows you to set the exact size of the image in your layout. However, be mindful of potential distortions of the image due to scaling. If you\u2019re creating a photo-viewing application, you will probably want to use the center or fitCenter scale types. Refer to this ImageView ScaleType visual guide for additional reference. Remember that if you wish to match the aspect ratio of the actual drawable, adjustViewBounds=true must be declared along with not defining an explicit width and/or height. Supporting Multiple Densities \u00b6 Since Android has so many different screen sizes, resolutions and densities, there is a [[powerful system for selecting the correct image asset|Understanding-App-Resources#introducing-alternate-resources]] for the correct device. There are specific drawable folders for each device density category including: ldpi (low), mdpi (medium), hdpi (high), and xhdpi (extra high). Notice that every app has folders for image drawables such as drawable-mdpi which is for \"medium dots per inch\". To create alternative bitmap drawables for different densities, you should follow the 3:4:6:8 scaling ratio between the four generalized densities. Refer to the chart below: Density DPI Example Device Scale Pixels ldpi 120 Galaxy Y 0.75x 1dp = 0.75px mdpi 160 Galaxy Tab 1.0x 1dp = 1px hdpi 240 Galaxy S II 1.5x 1dp = 1.5px xhdpi 320 Nexus 4 2.0x 1dp = 2px xxhdpi 480 Nexus 5 3.0x 1dp = 3px xxxhdpi 640 Nexus 6 4.0x 1dp = 4px This means that if you generate a 100x100 for mdpi (1x baseline), then you should generate the same resource in 150x150 for hdpi (1.5x), 200x200 image for xhdpi devices (2.0x), 300x300 image for xxhdpi (3.0x) and a 75x75 image for ldpi devices (0.75x). See these density guidelines for additional details. Mipmaps and Drawables \u00b6 Starting with Android 4.3, there is now an option to use the res/mipmap folder to store \"mipmap\" images. Mipmaps are most commonly used for application icons such as the launcher icon. To learn more about the benefits of mipmaps be sure to check out the mipmapping for drawables post . Mipmap image resources can then be accessed using the @mipmap/ic_launcher notation in place of @drawable . Placing icons in mipmap folders (rather than drawable) is considered a best practice because they can often be used at resolutions different from the device\u2019s current density. For example, an xxxhdpi app icon might be used on the launcher for an xxhdpi device. Review this post about preparing for the Nexus 6 which explains in more detail. Working with Bitmaps \u00b6 We can change the bitmap displayed in an ImageView to a drawable resource with: 1 2 var imageView = FindViewById < ImageView > ( Resource . Id . imageView ); imageView . SetImageResource ( Resource . Mipmap . Icon ); or to any arbitrary bitmap with: 1 2 Bitmap bMap = BitmapFactory . DecodeFile ( \"/sdcard/test2.png\" ); imageView . SetImageBitmap ( bMap ); Setting an Image Resource from a string \u00b6 Sometimes you have want to set an image drawable using its string filename but the problem is Android uses integer ids for the image names. 1 2 3 4 5 var imageView = FindViewById < ImageView > ( Resource . Id . imageView ); // imageView . SetImageResource ( Resource . Mipmap . Icon ); var imageId = Resources . GetIdentifier ( \"icon\" , \"drawable\" , PackageName ); imageView . SetImageResource ( imageId ); Scaling a Bitmap \u00b6 If we need to resize a Bitmap, we can call the createScaledBitmap 1 2 3 4 5 6 // Load a bitmap from the drawable folder var bitmap = BitmapFactory . DecodeResource ( Resources , Resource . Drawable . Icon ); // Resize the bitmap to 50 x50 ( width x height ) var scaledBitmap = Bitmap . CreateScaledBitmap ( bitmap , 50 , 50 , false ); // Loads the resized Bitmap into an ImageView imageView . SetImageBitmap ( scaledBitmap ); Loading Images from the network \u00b6 Loading images from the network is a challening task and the best way is to use libraries. The most popular libraries are : Picasso Glide Install the libraries from Nuget and follow the getting started guide to start using them. ImageButton \u00b6 A button that displays an image and its clickable. 1 2 3 4 5 6 <ImageButton android:id= \"@+id/photo_image_view\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:scaleType= \"centerCrop\" android:src= \"@drawable/beach\" /> RadioButton \u00b6 Radio buttons allow the user to select one option from a set. You should use radio buttons for optional sets that are mutually exclusive if you think that the user needs to see all available options side-by-side. If it's not necessary to show all options side-by-side, use a spinner instead. To create each radio button option, create a RadioButton in your layout. However, because radio buttons are mutually exclusive, you must group them together inside a RadioGroup. By grouping them together, the system ensures that only one radio button can be selected at a time. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 <RadioGroup android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:orientation= \"vertical\" > <RadioButton android:id= \"@+id/yes_radio_button\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Yes\" android:checked= \"true\" /> <RadioButton android:id= \"@+id/no_radio_button\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"No\" android:textAppearance= \"?android:textAppearanceMedium\" /> <RadioButton android:id= \"@+id/maybe_radio_button\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Maybe\" android:textAppearance= \"?android:textAppearanceSmall\" /> </RadioGroup> Attaching Click Event \u00b6 The radio button have a Click event. We can attach the event to the buttons in code as follows : 1 2 3 4 5 6 7 8 9 // Find the radio buttons in the layout file var radioAttendingYes = FindViewById < RadioButton > ( Resource . Id . rbn_attending_yes ); var radioAttendingNo = FindViewById < RadioButton > ( Resource . Id . rbn_attending_no ); var radioAttendingMaybe = FindViewById < RadioButton > ( Resource . Id . rbn_attending_maybe ); // Attach click event to the radio buttons radioAttendingYes . Click += RadioButtonClick ; radioAttendingNo . Click += RadioButtonClick ; radioAttendingMaybe . Click += RadioButtonClick ; And then use a private method to handle the clicking of the radio buttons : 1 2 3 4 5 // Define a private method to handle clicking of the Radio Button private void RadioButtonClick ( object sender , EventArgs e ) { var radioButton = ( RadioButton ) sender ; Console . WriteLine ( radioButton . Text ); } Changing the State \u00b6 We can change the state of the radio button by using the Toggle method, or setting the Checked property. View \u00b6 A plain rectangle that can be used as a divider. 1 2 3 4 <View android:layout_width= \"match_parent\" android:layout_height= \"1dp\" android:background= \"#CCC\" /> Spinner \u00b6 Spinners provide a quick way to select one value from a set. In the default state, a spinner shows its currently selected value. Touching the spinner displays a dropdown menu with all other available values, from which the user can select a new one. 1 2 3 4 <Spinner android:id= \"@+id/sort_by_spinner\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> Populate Spinner with choices with XML \u00b6 You can populate the Spinner using a string-array resource. Create a file the Resources\\Values folder and call it array.xml 1 2 3 4 5 6 7 8 9 <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string-array name= \"cities\" > <item> Home </item> <item> Work </item> <item> Other </item> <item> Custom </item> </string-array> </resources> Now you can populate the entries for the spinner using the data from the xml file. 1 2 3 4 <Spinner android:entries= \"@array/cities\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> Spinner Mode \u00b6 The spinner by default displays a dropdown, but it can be changed to show a dialog using the android:spinnerMode=\"dialog\" . Populate Spinner with code \u00b6 To populate the spinner in code, you will need to create a custom array adapter, then bind the array adapter to the spinner. 1 2 3 4 5 6 7 8 9 var choices = new string [] { \"Beach\" , \"BBQ\" , \"Family Dinner\" , \"Party\" } ; var spinner = FindViewById < Spinner > ( Resource . Id . sort_by_spinner ); var adapter = new ArrayAdapter < string > ( this , Android . Resource . Layout . SimpleSpinnerDropDownItem , choices ); adapter . SetDropDownViewResource ( Android . Resource . Layout . SimpleSpinnerDropDownItem ); spinner . Adapter = adapter ; spinner . ItemSelected += ( sender , e ) => { Console . WriteLine ( spinner . GetItemAtPosition ( e . Position )); } ; or create it using an existing xml file with a string array 1 2 3 4 5 6 // Find the spinner from the layout var spinner = FindViewById < Spinner > ( Resource . Id . spinner ); // Create an ArrayAdapter with the xml resource file and dropdown layout var arrayAdapter = ArrayAdapter . CreateFromResource ( this , Resource . Array . places , Android . Resource . Layout . SimpleSpinnerDropDownItem ); // Bind the adapter to the spinner spinner . Adapter = arrayAdapter ; Responding to Events \u00b6 The spinner have an ItemSelected event. Use this to find out which of the options have been selected. 1 2 3 4 5 6 // Find the spinner var spinner = FindViewById < Spinner > ( Resource . Id . sort_by_spinner ); // Attach the ItemSelected event spinner . ItemSelected += ( sender , e ) => { Console . WriteLine ( spinner . GetItemAtPosition ( e . Position )); } ; CheckBox \u00b6 Checkboxes allow the user to select one or more options from a set. Typically, you should present each checkbox option in a vertical list. 1 2 3 4 5 6 <CheckBox android:id= \"@+id/notify_me_checkbox\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/notify_me\" android:textAppearance= \"?android:textAppearanceMedium\" /> Responding to Events \u00b6 The checkbox have a Click event that fires when the the checkbox state changes. 1 2 3 4 5 6 7 8 9 10 // Find the checkbox in the layout CheckBox checkbox = FindViewById < CheckBox > ( Resource . Id . checkbox ) ; // Attach the click event checkbox . Click += ( o , e ) => { if ( checkbox . Checked ) Toast . MakeText ( this , \" Selected \" , ToastLength . Short ) . Show () ; else Toast . MakeText ( this , \" Not selected \" , ToastLength . Short ) . Show () ; } ; The state of the checkbox can also be changed using the Toggle method and the Checked property. Switch \u00b6 On/off switch that can you drag to the right or left or just tap to toggle. SwitchCompat is a version of the Switch widget which runs on devices back to API 7 1 2 3 4 5 6 <Switch android:id= \"@+id/backup_photos_switch\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/auto_backup_photos\" android:textAppearance= \"?android:textAppearanceSmall\" /> For backwards compatibility use SwitchCompat . On older devices, the control is called a Togglebutton . 1 2 3 4 5 6 7 <android.support.v7.widget.SwitchCompat android:checked= \"true\" android:id= \"@+id/backup_photos_switch\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Backup photos automatically to the cloud when on wifi\" android:textAppearance= \"?android:textAppearanceSmall\" /> Responding to events \u00b6 1 2 3 4 var backupPhotosSwitch = FindViewById < Switch > ( Resource . Id . backup_photos_switch ); backupPhotosSwitch . CheckedChange += ( object sender , CompoundButton . CheckedChangeEventArgs e ) => { Console . WriteLine ( $ \"Switch is {e.IsChecked}\" ); } ; SeekBar \u00b6 Displays progress and allows you to drag the handle anywhere in the bar e.g for music or video. 1 2 3 4 5 6 <SeekBar android:id= \"@+id/seek_bar\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:max= \"100\" android:progress= \"20\" /> SeekBar Events \u00b6 You handle the Progress event to get notified when the progress of the SeekBar changes. 1 2 3 4 var seekBar = FindViewById < SeekBar > ( Resource . Id . seek_bar ); seekBar . ProgressChanged += ( object sender , SeekBar . ProgressChangedEventArgs e ) => { Console . WriteLine ( $ \"Progress is now {e.Progress}\" ); } ; RatingBar \u00b6 1 2 3 4 5 6 7 8 <RatingBar android:id= \"@+id/rating_bar\" style= \"?android:attr/ratingBarStyleSmall\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:numStars= \"5\" android:rating= \"2.5\" android:stepSize= \"0.5\" /> RatingBar Events \u00b6 You can use the RatingBarChange event to subscribe to changes in the RatingBar 1 2 3 4 var ratingBar = FindViewById < RatingBar > ( Resource . Id . rating_bar ); ratingBar . RatingBarChange += ( object sender , RatingBar . RatingBarChangeEventArgs e ) => { Console . WriteLine ( $ \"Rating is {e.Rating}\" ); } ; ProgressBar \u00b6 Loading spinner, used to show that something is running. 1 2 3 4 5 <ProgressBar android:id= \"@+id/loading_spinner\" style= \"?android:progressBarStyle\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> Can also change the style to use a horizontal progressbar, use the style style=\"?android:progressBarStyleHorizontal\" 1 2 3 4 5 6 7 8 <ProgressBar android:id= \"@+id/progress_bar\" style= \"?android:progressBarStyleHorizontal\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:indeterminate= \"false\" android:max= \"100\" android:progress= \"40\" /> SearchView \u00b6 A search view that you type a query into. 1 2 3 4 5 6 <SearchView android:id= \"@+id/search_viewer\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:iconifiedByDefault= \"true\" android:queryHint= \"Search photos\" /> TextView \u00b6 Displays text to the user and optionally allows them to edit it. A TextView is a complete text editor, however the basic class is configured to not allow editing; see EditText for a subclass that configures the text view for editing. Typeface \u00b6 As stated in the overview, there are three different default typefaces which are known as the Droid family of fonts: sans , monospace and serif . You can specify any one of them as the value for the android:typeface attribute in the XML: 1 2 3 4 5 6 <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"This is a 'sans' demo!\" android:typeface= \"sans\" /> Here's how they look: In addition to the above, there is another attribute value named \"normal\" which defaults to the sans typeface. Text Style \u00b6 The android:textStyle attribute can be used to put emphasis on the text. The possible values are: normal , bold , italic . You can also specify bold|italic . 1 2 3 4 5 6 <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"This is bold!\" android:textStyle= \"bold\" /> A sampling of styles can be seen below: Text Size \u00b6 android:textSize specifies the font size. Its value must consist of two parts: a floating-point number followed by a unit. It is generally a good practice to use the sp unit so the size can scale depending on user settings. 1 2 3 4 5 6 <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"14sp is the 'normal' size.\" android:textSize= \"14sp\" /> A sampling of styles can be seen below: Too many type sizes and styles at once can wreck any layout. The basic set of styles are based on a typographic scale of 12, 14, 16, 20, and 34. Refer to this typography styles guide for more details. Text Truncation \u00b6 There are a few ways to truncate text within a TextView . First, to restrict the total number of lines of text we can use android:maxLines and android:minLines : 1 2 3 4 5 6 <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:minLines= \"1\" android:maxLines= \"2\" /> In addition, we can use android:ellipsize to begin truncating text 1 2 3 4 5 <TextView ... android:ellipsize= \"end\" android:singleLine= \"true\" /> Following values are available for ellipsize : start for ...bccc , end for aaab... , middle for aa...cc , and marquee for aaabbbccc sliding from left to right. Example: Text Color \u00b6 The android:textColor and android:textColorLink attribute values are hexadecimal RGB values with an optional alpha channel, similar to what's found in CSS: 1 2 3 4 5 6 7 <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"A light blue color.\" android:textColor= \"#00ccff\" android:textColorLink= \"#8DE67F\" /> The android:textColorLink attribute controls the highlighting for [[hyperlinks embedded within the TextView|Working-with-the-TextView#inserting-html-formatting]]. This results in: Text Shadow \u00b6 You can use three different attributes to customize the appearance of your text shadow: android:shadowColor - Shadow color in the same format as textColor. android:shadowRadius - Radius of the shadow specified as a floating point number. android:shadowDx - The shadow's horizontal offset specified as a floating point number. android:shadowDy - The shadow's vertical offset specified as a floating point number. The floating point numbers don't have a specific unit - they are merely arbitrary factors. 1 2 3 4 5 6 7 8 9 <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"A light blue shadow.\" android:shadowColor= \"#00ccff\" android:shadowRadius= \"2\" android:shadowDx= \"1\" android:shadowDy= \"1\" /> This results in: Various Text Properties \u00b6 There are many other text properties including android:lineSpacingMultiplier , android:letterSpacing , android:textAllCaps , android:includeFontPadding and many others : 1 2 3 4 5 6 <TextView android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:lineSpacingMultiplier= \"1.1\" android:textAllCaps= \"true\" /> android:includeFontPadding removes the extra padding around large fonts. android:lineSpacingMultiplier governs the spacing between lines with a default of \"1\". Inserting HTML Formatting \u00b6 TextView natively supports HTML by translating HTML tags to spannable sections within the view. To apply basic HTML formatting to text, add text to the TextView with: 1 2 3 4 5 6 7 8 9 10 11 TextView view = ( TextView ) FindViewById ( Resource . Id . sampleText ) ; // Htmlformatted text String formattedText = \" This <i>is</i> a <b>test</b> of <a href='http://foo.com'>html</a> \" ; // Check which build we running on and use the appropriate method if ( Build . VERSION . SdkInt >= BuildVersionCodes . N ) { view . Text = ( Html . FromHtml ( formattedText , FromHtmlOptions . ModeLegacy )) ; } else { view . Text = ( Html . FromHtml ( formattedText )) ; } This results in: Note that all tags are not supported. See this article for a more detailed look at supported tags and usages Setting Font Colors \u00b6 For setting font colors, we can use the <font> tag as shown: 1 Html.FromHtml(\"Nice! <font color= '#c5c5c5' > This text has a color </font> . This doesn't\"); And you should be all set. Storing Long HTML Strings \u00b6 If you want to store your HTML text within res/values/strings.xml , you have to use CDATA to escape such as: 1 2 3 4 5 6 7 <?xml version=\"1.0\" encoding=\"utf-8\"?> <string name= \"htmlFormattedText\" > <![CDATA[ Please <a href=\"http://highlight.com\">let us know</a> if you have <b>feedback on this</b> or if you would like to log in with <i>another identity service</i>. Thanks! ]]> </string> and access the content with getString(R.string.htmlFormattedText) to load this within the TextView. For more advanced cases, you can also check out the html-textview library which adds support for almost any HTML tag within this third-party TextView. Autolinking URLs \u00b6 TextView has native support for automatically locating URLs within the their text content and making them clickable links which can be opened in the browser. To do this, enable the android:autolink property: 1 2 3 4 5 6 7 <TextView android:id= \"@+id/custom_font\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:autoLink= \"all\" android:linksClickable= \"true\" /> This results in: Displaying Images within a TextView \u00b6 A TextView is actually surprisingly powerful and actually supports having images displayed as a part of it's content area. Any images stored in the \"drawable\" folders can actually be embedded within a TextView at several key locations in relation to the text using the android:drawableRight and the android:drawablePadding property. For example: 1 2 3 4 5 6 7 8 <TextView xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:gravity= \"center\" android:text= \"@string/my_contacts\" android:drawableRight= \"@drawable/ic_action_add_group\" android:drawablePadding= \"8dp\" /> Which results in: In Android, many views inherit from TextView such as Button s, EditText s, RadioButton s which means that all of these views support the same functionality. For example, we can also do: 1 2 3 4 5 6 7 <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"@string/user_name\" android:drawableLeft= \"@drawable/ic_action_person\" android:drawablePadding= \"8dp\" /> Which results in: The relevant attributes here are drawableLeft , drawableRight , drawableTop and drawableBottom along with drawablePadding . Check out this TextView article for a more detailed look at how to use this functionality. Note that if you want to be able to better control the size or scale of the drawables, check out this handy TextView extension or this bitmap drawable approach . You can also make calls to setCompoundDrawablesWithIntrinsicBounds on the TextView . Using Custom Fonts \u00b6 We can actually use any custom font that we'd like within our applications. Check out fontsquirrel for an easy source of free fonts. For example, we can download Chantelli Antiqua as an example. Fonts are stored in the \"assets\" folder. In Android Studio, File > New > folder > Assets Folder . Now download any font and place the TTF file in the assets/fonts directory : We're going to use a basic layout file with a TextView , marked with an id of \"custom_font\" so we can access it in our code. 1 2 3 4 5 6 7 8 9 10 11 12 13 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:id= \"@+id/custom_font\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"This is the Chantelli Antiqua font.\" /> </LinearLayout> To set the custom font manually, open your activity file and insert this into the onCreate() method: 1 2 3 4 5 6 // Get access to our TextView TextView txt = ( TextView ) FindViewById ( R . id . custom_font ); // Create the TypeFace from the TTF asset Typeface typeface = Typeface . CreateFromAsset ( Assets , \"fonts/Chantelli_Antiqua.ttf\" ); //Assign the typeface view . SetTypeface ( typeface , TypefaceStyle . Normal ); Alternatively, you can use the third-party calligraphy library : 1 < TextView fontPath = \"fonts/Chantelli_Antiqua.ttf\" /> Either method will will result in: You'll also want to keep an eye on the total size of your custom fonts, as this can grow quite large if you're using a lot of different typefaces. Using Spans to Style Sections of Text \u00b6 Spans come in really handy when we want to apply styles to portions of text within the same TextView. We can change the text color, change the typeface, add an underline, etc, and apply these to only certain portions of the text. The full list of spans shows all the available options. As an example, let's say we have a single TextView where we want the first word to show up in red and the second word to have a strikethrough: We can accomplish this with spans using the code below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 TextView textView = ( TextView ) FindViewById ( Resource . Id . textView ) ; var firstWord = \" Hello \" ; var secondWord = \" World \" ; var redForegroundColorSpan = new ForegroundColorSpan ( Color . Red ) ; // Use a SpannableStringBuilder so that both the text and the spans are mutable SpannableStringBuilder ssb = new SpannableStringBuilder ( firstWord ) ; // Apply the color span ssb . SetSpan ( redForegroundColorSpan , // the span to add 0 , // the start of the span ( inclusive ) ssb . Length () , // the end of the span ( exclusive ) SpanTypes . ExclusiveExclusive ) ; // behavior when text is later inserted into the SpannableStringBuilder // SPAN_EXCLUSIVE_EXCLUSIVE means to not extend the span when additional // text is added in later // Add a blank space ssb . Append ( \" \" ) ; // Create a span that will strikethrough the text StrikethroughSpan strikethroughSpan = new StrikethroughSpan () ; // Add the secondWord and apply the strikethrough span to only the second word ssb . Append ( secondWord ) ; ssb . SetSpan ( strikethroughSpan , ssb . Length () - secondWord . Length , ssb . Length () , SpanTypes . ExclusiveExclusive ) ; // Set the TextView text and denote that it is Editable // since it ' s a SpannableStringBuilder textView . SetText ( ssb , TextView . BufferType . Editable ) ; Note: There are 3 different classes that can be used to represent text that has markup attached. SpannableStringBuilder (used above) is the one to use when dealing with mutable spans and mutable text. SpannableString is for mutable spans, but immutable text. And SpannedString is for immutable spans and immutable text. References \u00b6 http://developer.android.com/guide/topics/ui/controls/text.html http://code.tutsplus.com/tutorials/android-user-interface-design-edittext-controls--mobile-7183 http://www.codeofaninja.com/2012/01/android-edittext-example.html http://www.tutorialspoint.com/android/android_edittext_control.htm http://developer.android.com/reference/android/widget/EditText.html http://android-developers.blogspot.com/2015/10/android-support-library-231.html?linkId=17977963","title":"Common Views"},{"location":"common-views/#android-common-views","text":"This chapter describes the common UI views used to compose your Xamarin.Android app. The views in Xamarin.Android are wrappers of the natives Android views.","title":"Android Common Views"},{"location":"common-views/#button","text":"There are three standard types of buttons: Floating action button : A circular material button that lifts and displays an ink reaction on press. Raised button : A typically rectangular material button that lifts and displays ink reactions on press. Flat button : A button made of ink that displays ink reactions on press but does not lift. To create a button with text, use the following XML : 1 2 3 4 <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"LOGIN\" /> If we want the button's width to be the same as its parent, we would change the android:layout_height to match_parent . 1 2 3 4 <Button android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"LOGIN\" />","title":"Button"},{"location":"common-views/#drawables-on-buttons","text":"A normal button can also have an image on the left or right, by using the android:drawableLeft and android:drawableRight attributes. Thses drawables have limited use as the images inside them can not be resized. 1 2 3 4 5 <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/button_text\" android:drawableLeft= \"@drawable/button_icon\" />","title":"Drawables on buttons"},{"location":"common-views/#floating-action-button","text":"The floating action action button is available as a support package. You need to the Android Support Design v7 package from from Nuget before you can use it in the project. 1 2 3 4 5 6 7 <android.support.design.widget.FloatingActionButton android:id= \"@+id/fab\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_gravity= \"bottom|end\" android:layout_margin= \"16dp\" app:srcCompat= \"@android:drawable/ic_input_add\" /> The floating action button is mostly used inside the CoordinatorLayout or FrameLayout . This layout is also included as part of the Android Support Design Package. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.design.widget.CoordinatorLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:fitsSystemWindows= \"true\" > <android.support.design.widget.FloatingActionButton android:id= \"@+id/fab\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_gravity= \"bottom|end\" android:layout_margin= \"@dimen/fab_margin\" app:srcCompat= \"@android:drawable/ic_input_add\" /> </android.support.design.widget.CoordinatorLayout>","title":"Floating Action Button"},{"location":"common-views/#fab-properties","text":"Property Description Position You can position the floating button by using layout_gravity attribute. Size FAB supports two sizes normal and mini . You can define the size of the button by using app:fabSize attribute Background Color By default, fab takes colorAccent as background color. If you want to change the background of fab, use app:backgroundTint attribute to define your own background color Ripple Color Sets the color of the ripple effect of your FloatingActionButton. Can be a color resource or hex string. app:rippleColor Compat Padding Enable compat padding. Maybe a boolean value, such as true or false. app:useCompatPadding Elevation Can be a string, integer, boolean, color value, floating point, dimension value. app:elevation","title":"FAB Properties"},{"location":"common-views/#borderless-button","text":"A style is used to get the a borderless button. Note that the style does not use the android prefix. 1 2 3 4 5 <Button style= \"@style/Widget.AppCompat.Button.Borderless\" android:text= \"Borderless Button\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> You can also get a coloured borderless button. The default color used is the accent color from the theme. 1 2 3 4 5 <Button style= \"@style/Widget.AppCompat.Button.Borderless.Colored\" android:text= \"Borderless Button\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" />","title":"Borderless Button"},{"location":"common-views/#edittext","text":"Text fields allow users to input text, select text, and lookup data via auto-completion. Text fields usually appear in forms. Users may enter text, numbers, or mixed-format types of input. Touching a text field makes the two actions occur: Places the cursor there Displays the keyboard","title":"EditText"},{"location":"common-views/#retrieving-the-value","text":"Getting the value of the text entered into an EditText is as follows: 1 2 EditText etUsername = FindViewById < EditText > ( Resource . Id . etUsername ); var username = etUsername . Text ;","title":"Retrieving the Value"},{"location":"common-views/#text-field-anatomy","text":"Labels describe the type of input requested in each field Hint text is placeholder text that suggests the type of information requested, sometimes in the form of an example Helper text appears below input fields to provide additional context 1 2 3 4 5 6 <EditText android:id= \"@+id/album_description_view\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"@string/album_description\" android:inputType= \"textMultiLine\" />","title":"Text field anatomy"},{"location":"common-views/#textinputlayout","text":"Traditionally, the EditText hides the hint message (explained above) after the user starts typing. In addition, any validation error messages had to be managed manually by the developer. Starting with Android M the TextInputLayout can be used to setup a floating label to display hints and error messages. First, wrap the EditText in a TextInputLayout : 1 2 3 4 5 6 7 8 9 10 11 12 <android.support.design.widget.TextInputLayout android:id= \"@+id/input_layout_name\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <EditText android:id= \"@+id/input_name\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:singleLine= \"true\" android:hint= \"@string/hint_name\" /> </android.support.design.widget.TextInputLayout> Now the hint will automatically begin to float once the EditText takes focus as shown below: We can also use the TextInputLayout to display error messages using the SetError and SetErrorEnabled properties in the activity at runtime.","title":"TextInputLayout"},{"location":"common-views/#adding-character-counting","text":"TextInputLayout since the announcement of support design library v23.1 also can expose a character counter for an EditText defined within it. The counter will be rendered below the EditText and can change colors of both the line and character counter if the maximum number of characters has been exceeded: The TextInputLayout simply needs to define app:counterEnabled and app:CounterMaxLength in the XML attributes. These settings can also be defined dynamically through SetCounterEnabled() and SetCounterMaxLength() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <android.support.design.widget.TextInputLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:counterEnabled= \"true\" app:counterMaxLength= \"10\" app:counterTextAppearance= \"@style/counterText\" app:counterOverflowTextAppearance= \"@style/counterOverride\" > <EditText android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:hint= \"Username\" android:layout_centerHorizontal= \"true\" android:layout_centerVertical= \"true\" android:ems= \"10\" android:hint= \"Username\" /> </android.support.design.widget.TextInputLayout>","title":"Adding Character Counting"},{"location":"common-views/#adding-password-visibility-toggles","text":"NOTE : You must have support library 24.2.0 or higher to use this feature. If you use an EditText with an input password type, you can also enable an icon that can show or hide the entire text using the passwordToggleEnabled attribute. You can also change the default eye icon with passwordToggleDrawable attribute or the color hint using the passwordToggleTint attribute. See the TextInputLayout attributes for more details. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <android.support.design.widget.TextInputLayout android:id= \"@+id/username_text_input_layout\" app:passwordToggleEnabled= \"true\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <EditText android:id= \"@+id/etUsername\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_centerHorizontal= \"true\" android:layout_centerVertical= \"true\" android:ems= \"10\" android:inputType= \"textPassword\" android:hint= \"Username\" /> </android.support.design.widget.TextInputLayout>","title":"Adding Password Visibility Toggles"},{"location":"common-views/#providing-auto-complete","text":"Check out the official text fields guide for a step-by-step on how to setup autocomplete for the entry.","title":"Providing Auto-complete"},{"location":"common-views/#edittext-input-types","text":"We can customize the soft keyboard based on the required input for the EditText. These can be changed with the android:inputType attribute. Here are the available input types Type Description textUri Text that will be used as a URI textEmailAddress Text that will be used as an e-mail address textPersonName Text that is the name of a person textPassword Text that is a password that should be obscured number A numeric only field phone For entering a phone number date For entering a date time For entering a time textMultiLine Allow multiple lines of text in the field You can set multiple inputType attributes if needed (separated by '|') 1 2 3 <EditText android:inputType= \"textCapSentences|textMultiline\" /> More input types are available from the here","title":"EditText Input Types"},{"location":"common-views/#further-entry-customization","text":"We might want to limit the entry to a single-line of text (avoid newlines): 1 2 3 4 <EditText android:singleLine= \"true\" android:lines= \"1\" /> You can limit the characters that can be entered into a field using the digits attribute: 1 2 3 4 <EditText android:inputType= \"number\" android:digits= \"01\" /> This would restrict the digits entered to just \"0\" and \"1\". We might want to limit the total number of characters with: 1 2 3 <EditText android:maxLength= \"5\" />","title":"Further Entry Customization"},{"location":"common-views/#displaying-placeholder-hints","text":"You may want to set the hint for the EditText control to prompt a user for specific input with: 1 2 3 4 <EditText ... android:hint= \"@string/my_hint\" > </EditText>","title":"Displaying Placeholder Hints"},{"location":"common-views/#changing-the-bottom-line-color","text":"Assuming you are using the AppCompat library, you can override the styles colorControlNormal , colorControlActivated , and colorControlHighlight : 1 2 3 4 5 <style name= \"Theme.App.Base\" parent= \"Theme.AppCompat.Light.DarkActionBar\" > <item name= \"colorControlNormal\" > #d32f2f </item> <item name= \"colorControlActivated\" > #ff5722 </item> <item name= \"colorControlHighlight\" > #f44336 </item> </style>","title":"Changing the bottom line color"},{"location":"common-views/#imageview","text":"Displays an image.This view takes care of the loading and optimizing of the image, freeing you to focus on app-specific details like the layout and content. Use the scaleType to control how the image resizes. Images are not clickable by default. You will need to enable android:clickable=true . Note the scaleType attribute which defines how the images will be scaled to fit in your layout. In the example, using scaleType \"center\", the image will be displayed at its native resolution and centered in the view, regardless of how much space the view consumes. 1 2 3 4 5 6 <ImageView android:id= \"@+id/photo_image_view\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:scaleType= \"center\" android:src= \"@drawable/beach\" />","title":"ImageView"},{"location":"common-views/#sizing-imageview-controls","text":"By default, contents of an ImageView control are of a certain size -- usually the size of the image dimensions. They can also be bounded by their layout_width and layout_height attributes: 1 2 3 4 5 6 <ImageView android:layout_width= \"50dp\" android:layout_height= \"50dp\" android:scaleType= \"fitXY\" ... /> The scaleType above has been set to fitXY which sets the height and the width up or down to fit the maximum dimensions specified. Fixing the width and height however means that the proportions of the width and height of the original image, known as the aspect ratio, will be altered. We can take advantage of the adjustViewBounds parameter to preserve this aspect ratio. However, we must either allow the height and/or width to be adjustable (i.e. by using maxWidth and using wrap_content for the dimension). Otherwise, the dimensions cannot be readjusted to meet the required aspect ratio. 1 2 3 4 5 6 7 <ImageView android:layout_width= \"50dp\" android:layout_height= \"wrap_content\" android:scaleType= \"fitXY\" android:adjustViewBounds= \"true\" ... />","title":"Sizing ImageView Controls"},{"location":"common-views/#scale-types","text":"An ImageView can display an image differently based on the scaleType provided. Above we discussed the fitXY type along with adjustViewBounds to match the aspect ratio of the drawable. The following is a list of all the most common types: Scale Type Description center Displays the image centered in the view with no scaling. centerCrop Scales the image such that both the x and y dimensions are greater than or equal to the view, while maintaining the image aspect ratio; centers the image in the view. centerInside Scales the image to fit inside the view, while maintaining the image aspect ratio. If the image is already smaller than the view, then this is the same as center. fitCenter Scales the image to fit inside the view, while maintaining the image aspect ratio. At least one axis will exactly match the view, and the result is centered inside the view. fitStart Same as fitCenter but aligned to the top left of the view. fitEnd Same as fitCenter but aligned to the bottom right of the view. fitXY Scales the x and y dimensions to exactly match the view size; does not maintain the image aspect ratio. matrix Scales the image using a supplied Matrix class. The matrix can be supplied using the setImageMatrix method. A Matrix class can be used to apply transformations such as rotations to an image. Note: The fitXY scale type allows you to set the exact size of the image in your layout. However, be mindful of potential distortions of the image due to scaling. If you\u2019re creating a photo-viewing application, you will probably want to use the center or fitCenter scale types. Refer to this ImageView ScaleType visual guide for additional reference. Remember that if you wish to match the aspect ratio of the actual drawable, adjustViewBounds=true must be declared along with not defining an explicit width and/or height.","title":"Scale Types"},{"location":"common-views/#supporting-multiple-densities","text":"Since Android has so many different screen sizes, resolutions and densities, there is a [[powerful system for selecting the correct image asset|Understanding-App-Resources#introducing-alternate-resources]] for the correct device. There are specific drawable folders for each device density category including: ldpi (low), mdpi (medium), hdpi (high), and xhdpi (extra high). Notice that every app has folders for image drawables such as drawable-mdpi which is for \"medium dots per inch\". To create alternative bitmap drawables for different densities, you should follow the 3:4:6:8 scaling ratio between the four generalized densities. Refer to the chart below: Density DPI Example Device Scale Pixels ldpi 120 Galaxy Y 0.75x 1dp = 0.75px mdpi 160 Galaxy Tab 1.0x 1dp = 1px hdpi 240 Galaxy S II 1.5x 1dp = 1.5px xhdpi 320 Nexus 4 2.0x 1dp = 2px xxhdpi 480 Nexus 5 3.0x 1dp = 3px xxxhdpi 640 Nexus 6 4.0x 1dp = 4px This means that if you generate a 100x100 for mdpi (1x baseline), then you should generate the same resource in 150x150 for hdpi (1.5x), 200x200 image for xhdpi devices (2.0x), 300x300 image for xxhdpi (3.0x) and a 75x75 image for ldpi devices (0.75x). See these density guidelines for additional details.","title":"Supporting Multiple Densities"},{"location":"common-views/#mipmaps-and-drawables","text":"Starting with Android 4.3, there is now an option to use the res/mipmap folder to store \"mipmap\" images. Mipmaps are most commonly used for application icons such as the launcher icon. To learn more about the benefits of mipmaps be sure to check out the mipmapping for drawables post . Mipmap image resources can then be accessed using the @mipmap/ic_launcher notation in place of @drawable . Placing icons in mipmap folders (rather than drawable) is considered a best practice because they can often be used at resolutions different from the device\u2019s current density. For example, an xxxhdpi app icon might be used on the launcher for an xxhdpi device. Review this post about preparing for the Nexus 6 which explains in more detail.","title":"Mipmaps and Drawables"},{"location":"common-views/#working-with-bitmaps","text":"We can change the bitmap displayed in an ImageView to a drawable resource with: 1 2 var imageView = FindViewById < ImageView > ( Resource . Id . imageView ); imageView . SetImageResource ( Resource . Mipmap . Icon ); or to any arbitrary bitmap with: 1 2 Bitmap bMap = BitmapFactory . DecodeFile ( \"/sdcard/test2.png\" ); imageView . SetImageBitmap ( bMap );","title":"Working with Bitmaps"},{"location":"common-views/#setting-an-image-resource-from-a-string","text":"Sometimes you have want to set an image drawable using its string filename but the problem is Android uses integer ids for the image names. 1 2 3 4 5 var imageView = FindViewById < ImageView > ( Resource . Id . imageView ); // imageView . SetImageResource ( Resource . Mipmap . Icon ); var imageId = Resources . GetIdentifier ( \"icon\" , \"drawable\" , PackageName ); imageView . SetImageResource ( imageId );","title":"Setting an Image Resource from a string"},{"location":"common-views/#scaling-a-bitmap","text":"If we need to resize a Bitmap, we can call the createScaledBitmap 1 2 3 4 5 6 // Load a bitmap from the drawable folder var bitmap = BitmapFactory . DecodeResource ( Resources , Resource . Drawable . Icon ); // Resize the bitmap to 50 x50 ( width x height ) var scaledBitmap = Bitmap . CreateScaledBitmap ( bitmap , 50 , 50 , false ); // Loads the resized Bitmap into an ImageView imageView . SetImageBitmap ( scaledBitmap );","title":"Scaling a Bitmap"},{"location":"common-views/#loading-images-from-the-network","text":"Loading images from the network is a challening task and the best way is to use libraries. The most popular libraries are : Picasso Glide Install the libraries from Nuget and follow the getting started guide to start using them.","title":"Loading Images from the network"},{"location":"common-views/#imagebutton","text":"A button that displays an image and its clickable. 1 2 3 4 5 6 <ImageButton android:id= \"@+id/photo_image_view\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:scaleType= \"centerCrop\" android:src= \"@drawable/beach\" />","title":"ImageButton"},{"location":"common-views/#radiobutton","text":"Radio buttons allow the user to select one option from a set. You should use radio buttons for optional sets that are mutually exclusive if you think that the user needs to see all available options side-by-side. If it's not necessary to show all options side-by-side, use a spinner instead. To create each radio button option, create a RadioButton in your layout. However, because radio buttons are mutually exclusive, you must group them together inside a RadioGroup. By grouping them together, the system ensures that only one radio button can be selected at a time. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 <RadioGroup android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:orientation= \"vertical\" > <RadioButton android:id= \"@+id/yes_radio_button\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Yes\" android:checked= \"true\" /> <RadioButton android:id= \"@+id/no_radio_button\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"No\" android:textAppearance= \"?android:textAppearanceMedium\" /> <RadioButton android:id= \"@+id/maybe_radio_button\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Maybe\" android:textAppearance= \"?android:textAppearanceSmall\" /> </RadioGroup>","title":"RadioButton"},{"location":"common-views/#attaching-click-event","text":"The radio button have a Click event. We can attach the event to the buttons in code as follows : 1 2 3 4 5 6 7 8 9 // Find the radio buttons in the layout file var radioAttendingYes = FindViewById < RadioButton > ( Resource . Id . rbn_attending_yes ); var radioAttendingNo = FindViewById < RadioButton > ( Resource . Id . rbn_attending_no ); var radioAttendingMaybe = FindViewById < RadioButton > ( Resource . Id . rbn_attending_maybe ); // Attach click event to the radio buttons radioAttendingYes . Click += RadioButtonClick ; radioAttendingNo . Click += RadioButtonClick ; radioAttendingMaybe . Click += RadioButtonClick ; And then use a private method to handle the clicking of the radio buttons : 1 2 3 4 5 // Define a private method to handle clicking of the Radio Button private void RadioButtonClick ( object sender , EventArgs e ) { var radioButton = ( RadioButton ) sender ; Console . WriteLine ( radioButton . Text ); }","title":"Attaching Click Event"},{"location":"common-views/#changing-the-state","text":"We can change the state of the radio button by using the Toggle method, or setting the Checked property.","title":"Changing the State"},{"location":"common-views/#view","text":"A plain rectangle that can be used as a divider. 1 2 3 4 <View android:layout_width= \"match_parent\" android:layout_height= \"1dp\" android:background= \"#CCC\" />","title":"View"},{"location":"common-views/#spinner","text":"Spinners provide a quick way to select one value from a set. In the default state, a spinner shows its currently selected value. Touching the spinner displays a dropdown menu with all other available values, from which the user can select a new one. 1 2 3 4 <Spinner android:id= \"@+id/sort_by_spinner\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" />","title":"Spinner"},{"location":"common-views/#populate-spinner-with-choices-with-xml","text":"You can populate the Spinner using a string-array resource. Create a file the Resources\\Values folder and call it array.xml 1 2 3 4 5 6 7 8 9 <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string-array name= \"cities\" > <item> Home </item> <item> Work </item> <item> Other </item> <item> Custom </item> </string-array> </resources> Now you can populate the entries for the spinner using the data from the xml file. 1 2 3 4 <Spinner android:entries= \"@array/cities\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" />","title":"Populate Spinner with choices with XML"},{"location":"common-views/#spinner-mode","text":"The spinner by default displays a dropdown, but it can be changed to show a dialog using the android:spinnerMode=\"dialog\" .","title":"Spinner Mode"},{"location":"common-views/#populate-spinner-with-code","text":"To populate the spinner in code, you will need to create a custom array adapter, then bind the array adapter to the spinner. 1 2 3 4 5 6 7 8 9 var choices = new string [] { \"Beach\" , \"BBQ\" , \"Family Dinner\" , \"Party\" } ; var spinner = FindViewById < Spinner > ( Resource . Id . sort_by_spinner ); var adapter = new ArrayAdapter < string > ( this , Android . Resource . Layout . SimpleSpinnerDropDownItem , choices ); adapter . SetDropDownViewResource ( Android . Resource . Layout . SimpleSpinnerDropDownItem ); spinner . Adapter = adapter ; spinner . ItemSelected += ( sender , e ) => { Console . WriteLine ( spinner . GetItemAtPosition ( e . Position )); } ; or create it using an existing xml file with a string array 1 2 3 4 5 6 // Find the spinner from the layout var spinner = FindViewById < Spinner > ( Resource . Id . spinner ); // Create an ArrayAdapter with the xml resource file and dropdown layout var arrayAdapter = ArrayAdapter . CreateFromResource ( this , Resource . Array . places , Android . Resource . Layout . SimpleSpinnerDropDownItem ); // Bind the adapter to the spinner spinner . Adapter = arrayAdapter ;","title":"Populate Spinner with code"},{"location":"common-views/#responding-to-events","text":"The spinner have an ItemSelected event. Use this to find out which of the options have been selected. 1 2 3 4 5 6 // Find the spinner var spinner = FindViewById < Spinner > ( Resource . Id . sort_by_spinner ); // Attach the ItemSelected event spinner . ItemSelected += ( sender , e ) => { Console . WriteLine ( spinner . GetItemAtPosition ( e . Position )); } ;","title":"Responding to Events"},{"location":"common-views/#checkbox","text":"Checkboxes allow the user to select one or more options from a set. Typically, you should present each checkbox option in a vertical list. 1 2 3 4 5 6 <CheckBox android:id= \"@+id/notify_me_checkbox\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/notify_me\" android:textAppearance= \"?android:textAppearanceMedium\" />","title":"CheckBox"},{"location":"common-views/#responding-to-events_1","text":"The checkbox have a Click event that fires when the the checkbox state changes. 1 2 3 4 5 6 7 8 9 10 // Find the checkbox in the layout CheckBox checkbox = FindViewById < CheckBox > ( Resource . Id . checkbox ) ; // Attach the click event checkbox . Click += ( o , e ) => { if ( checkbox . Checked ) Toast . MakeText ( this , \" Selected \" , ToastLength . Short ) . Show () ; else Toast . MakeText ( this , \" Not selected \" , ToastLength . Short ) . Show () ; } ; The state of the checkbox can also be changed using the Toggle method and the Checked property.","title":"Responding to Events"},{"location":"common-views/#switch","text":"On/off switch that can you drag to the right or left or just tap to toggle. SwitchCompat is a version of the Switch widget which runs on devices back to API 7 1 2 3 4 5 6 <Switch android:id= \"@+id/backup_photos_switch\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/auto_backup_photos\" android:textAppearance= \"?android:textAppearanceSmall\" /> For backwards compatibility use SwitchCompat . On older devices, the control is called a Togglebutton . 1 2 3 4 5 6 7 <android.support.v7.widget.SwitchCompat android:checked= \"true\" android:id= \"@+id/backup_photos_switch\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Backup photos automatically to the cloud when on wifi\" android:textAppearance= \"?android:textAppearanceSmall\" />","title":"Switch"},{"location":"common-views/#responding-to-events_2","text":"1 2 3 4 var backupPhotosSwitch = FindViewById < Switch > ( Resource . Id . backup_photos_switch ); backupPhotosSwitch . CheckedChange += ( object sender , CompoundButton . CheckedChangeEventArgs e ) => { Console . WriteLine ( $ \"Switch is {e.IsChecked}\" ); } ;","title":"Responding to events"},{"location":"common-views/#seekbar","text":"Displays progress and allows you to drag the handle anywhere in the bar e.g for music or video. 1 2 3 4 5 6 <SeekBar android:id= \"@+id/seek_bar\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:max= \"100\" android:progress= \"20\" />","title":"SeekBar"},{"location":"common-views/#seekbar-events","text":"You handle the Progress event to get notified when the progress of the SeekBar changes. 1 2 3 4 var seekBar = FindViewById < SeekBar > ( Resource . Id . seek_bar ); seekBar . ProgressChanged += ( object sender , SeekBar . ProgressChangedEventArgs e ) => { Console . WriteLine ( $ \"Progress is now {e.Progress}\" ); } ;","title":"SeekBar Events"},{"location":"common-views/#ratingbar","text":"1 2 3 4 5 6 7 8 <RatingBar android:id= \"@+id/rating_bar\" style= \"?android:attr/ratingBarStyleSmall\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:numStars= \"5\" android:rating= \"2.5\" android:stepSize= \"0.5\" />","title":"RatingBar"},{"location":"common-views/#ratingbar-events","text":"You can use the RatingBarChange event to subscribe to changes in the RatingBar 1 2 3 4 var ratingBar = FindViewById < RatingBar > ( Resource . Id . rating_bar ); ratingBar . RatingBarChange += ( object sender , RatingBar . RatingBarChangeEventArgs e ) => { Console . WriteLine ( $ \"Rating is {e.Rating}\" ); } ;","title":"RatingBar Events"},{"location":"common-views/#progressbar","text":"Loading spinner, used to show that something is running. 1 2 3 4 5 <ProgressBar android:id= \"@+id/loading_spinner\" style= \"?android:progressBarStyle\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> Can also change the style to use a horizontal progressbar, use the style style=\"?android:progressBarStyleHorizontal\" 1 2 3 4 5 6 7 8 <ProgressBar android:id= \"@+id/progress_bar\" style= \"?android:progressBarStyleHorizontal\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:indeterminate= \"false\" android:max= \"100\" android:progress= \"40\" />","title":"ProgressBar"},{"location":"common-views/#searchview","text":"A search view that you type a query into. 1 2 3 4 5 6 <SearchView android:id= \"@+id/search_viewer\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:iconifiedByDefault= \"true\" android:queryHint= \"Search photos\" />","title":"SearchView"},{"location":"common-views/#textview","text":"Displays text to the user and optionally allows them to edit it. A TextView is a complete text editor, however the basic class is configured to not allow editing; see EditText for a subclass that configures the text view for editing.","title":"TextView"},{"location":"common-views/#typeface","text":"As stated in the overview, there are three different default typefaces which are known as the Droid family of fonts: sans , monospace and serif . You can specify any one of them as the value for the android:typeface attribute in the XML: 1 2 3 4 5 6 <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"This is a 'sans' demo!\" android:typeface= \"sans\" /> Here's how they look: In addition to the above, there is another attribute value named \"normal\" which defaults to the sans typeface.","title":"Typeface"},{"location":"common-views/#text-style","text":"The android:textStyle attribute can be used to put emphasis on the text. The possible values are: normal , bold , italic . You can also specify bold|italic . 1 2 3 4 5 6 <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"This is bold!\" android:textStyle= \"bold\" /> A sampling of styles can be seen below:","title":"Text Style"},{"location":"common-views/#text-size","text":"android:textSize specifies the font size. Its value must consist of two parts: a floating-point number followed by a unit. It is generally a good practice to use the sp unit so the size can scale depending on user settings. 1 2 3 4 5 6 <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"14sp is the 'normal' size.\" android:textSize= \"14sp\" /> A sampling of styles can be seen below: Too many type sizes and styles at once can wreck any layout. The basic set of styles are based on a typographic scale of 12, 14, 16, 20, and 34. Refer to this typography styles guide for more details.","title":"Text Size"},{"location":"common-views/#text-truncation","text":"There are a few ways to truncate text within a TextView . First, to restrict the total number of lines of text we can use android:maxLines and android:minLines : 1 2 3 4 5 6 <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:minLines= \"1\" android:maxLines= \"2\" /> In addition, we can use android:ellipsize to begin truncating text 1 2 3 4 5 <TextView ... android:ellipsize= \"end\" android:singleLine= \"true\" /> Following values are available for ellipsize : start for ...bccc , end for aaab... , middle for aa...cc , and marquee for aaabbbccc sliding from left to right. Example:","title":"Text Truncation"},{"location":"common-views/#text-color","text":"The android:textColor and android:textColorLink attribute values are hexadecimal RGB values with an optional alpha channel, similar to what's found in CSS: 1 2 3 4 5 6 7 <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"A light blue color.\" android:textColor= \"#00ccff\" android:textColorLink= \"#8DE67F\" /> The android:textColorLink attribute controls the highlighting for [[hyperlinks embedded within the TextView|Working-with-the-TextView#inserting-html-formatting]]. This results in:","title":"Text Color"},{"location":"common-views/#text-shadow","text":"You can use three different attributes to customize the appearance of your text shadow: android:shadowColor - Shadow color in the same format as textColor. android:shadowRadius - Radius of the shadow specified as a floating point number. android:shadowDx - The shadow's horizontal offset specified as a floating point number. android:shadowDy - The shadow's vertical offset specified as a floating point number. The floating point numbers don't have a specific unit - they are merely arbitrary factors. 1 2 3 4 5 6 7 8 9 <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"A light blue shadow.\" android:shadowColor= \"#00ccff\" android:shadowRadius= \"2\" android:shadowDx= \"1\" android:shadowDy= \"1\" /> This results in:","title":"Text Shadow"},{"location":"common-views/#various-text-properties","text":"There are many other text properties including android:lineSpacingMultiplier , android:letterSpacing , android:textAllCaps , android:includeFontPadding and many others : 1 2 3 4 5 6 <TextView android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:lineSpacingMultiplier= \"1.1\" android:textAllCaps= \"true\" /> android:includeFontPadding removes the extra padding around large fonts. android:lineSpacingMultiplier governs the spacing between lines with a default of \"1\".","title":"Various Text Properties"},{"location":"common-views/#inserting-html-formatting","text":"TextView natively supports HTML by translating HTML tags to spannable sections within the view. To apply basic HTML formatting to text, add text to the TextView with: 1 2 3 4 5 6 7 8 9 10 11 TextView view = ( TextView ) FindViewById ( Resource . Id . sampleText ) ; // Htmlformatted text String formattedText = \" This <i>is</i> a <b>test</b> of <a href='http://foo.com'>html</a> \" ; // Check which build we running on and use the appropriate method if ( Build . VERSION . SdkInt >= BuildVersionCodes . N ) { view . Text = ( Html . FromHtml ( formattedText , FromHtmlOptions . ModeLegacy )) ; } else { view . Text = ( Html . FromHtml ( formattedText )) ; } This results in: Note that all tags are not supported. See this article for a more detailed look at supported tags and usages","title":"Inserting HTML Formatting"},{"location":"common-views/#setting-font-colors","text":"For setting font colors, we can use the <font> tag as shown: 1 Html.FromHtml(\"Nice! <font color= '#c5c5c5' > This text has a color </font> . This doesn't\"); And you should be all set.","title":"Setting Font Colors"},{"location":"common-views/#storing-long-html-strings","text":"If you want to store your HTML text within res/values/strings.xml , you have to use CDATA to escape such as: 1 2 3 4 5 6 7 <?xml version=\"1.0\" encoding=\"utf-8\"?> <string name= \"htmlFormattedText\" > <![CDATA[ Please <a href=\"http://highlight.com\">let us know</a> if you have <b>feedback on this</b> or if you would like to log in with <i>another identity service</i>. Thanks! ]]> </string> and access the content with getString(R.string.htmlFormattedText) to load this within the TextView. For more advanced cases, you can also check out the html-textview library which adds support for almost any HTML tag within this third-party TextView.","title":"Storing Long HTML Strings"},{"location":"common-views/#autolinking-urls","text":"TextView has native support for automatically locating URLs within the their text content and making them clickable links which can be opened in the browser. To do this, enable the android:autolink property: 1 2 3 4 5 6 7 <TextView android:id= \"@+id/custom_font\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:autoLink= \"all\" android:linksClickable= \"true\" /> This results in:","title":"Autolinking URLs"},{"location":"common-views/#displaying-images-within-a-textview","text":"A TextView is actually surprisingly powerful and actually supports having images displayed as a part of it's content area. Any images stored in the \"drawable\" folders can actually be embedded within a TextView at several key locations in relation to the text using the android:drawableRight and the android:drawablePadding property. For example: 1 2 3 4 5 6 7 8 <TextView xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:gravity= \"center\" android:text= \"@string/my_contacts\" android:drawableRight= \"@drawable/ic_action_add_group\" android:drawablePadding= \"8dp\" /> Which results in: In Android, many views inherit from TextView such as Button s, EditText s, RadioButton s which means that all of these views support the same functionality. For example, we can also do: 1 2 3 4 5 6 7 <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"@string/user_name\" android:drawableLeft= \"@drawable/ic_action_person\" android:drawablePadding= \"8dp\" /> Which results in: The relevant attributes here are drawableLeft , drawableRight , drawableTop and drawableBottom along with drawablePadding . Check out this TextView article for a more detailed look at how to use this functionality. Note that if you want to be able to better control the size or scale of the drawables, check out this handy TextView extension or this bitmap drawable approach . You can also make calls to setCompoundDrawablesWithIntrinsicBounds on the TextView .","title":"Displaying Images within a TextView"},{"location":"common-views/#using-custom-fonts","text":"We can actually use any custom font that we'd like within our applications. Check out fontsquirrel for an easy source of free fonts. For example, we can download Chantelli Antiqua as an example. Fonts are stored in the \"assets\" folder. In Android Studio, File > New > folder > Assets Folder . Now download any font and place the TTF file in the assets/fonts directory : We're going to use a basic layout file with a TextView , marked with an id of \"custom_font\" so we can access it in our code. 1 2 3 4 5 6 7 8 9 10 11 12 13 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:id= \"@+id/custom_font\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"This is the Chantelli Antiqua font.\" /> </LinearLayout> To set the custom font manually, open your activity file and insert this into the onCreate() method: 1 2 3 4 5 6 // Get access to our TextView TextView txt = ( TextView ) FindViewById ( R . id . custom_font ); // Create the TypeFace from the TTF asset Typeface typeface = Typeface . CreateFromAsset ( Assets , \"fonts/Chantelli_Antiqua.ttf\" ); //Assign the typeface view . SetTypeface ( typeface , TypefaceStyle . Normal ); Alternatively, you can use the third-party calligraphy library : 1 < TextView fontPath = \"fonts/Chantelli_Antiqua.ttf\" /> Either method will will result in: You'll also want to keep an eye on the total size of your custom fonts, as this can grow quite large if you're using a lot of different typefaces.","title":"Using Custom Fonts"},{"location":"common-views/#using-spans-to-style-sections-of-text","text":"Spans come in really handy when we want to apply styles to portions of text within the same TextView. We can change the text color, change the typeface, add an underline, etc, and apply these to only certain portions of the text. The full list of spans shows all the available options. As an example, let's say we have a single TextView where we want the first word to show up in red and the second word to have a strikethrough: We can accomplish this with spans using the code below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 TextView textView = ( TextView ) FindViewById ( Resource . Id . textView ) ; var firstWord = \" Hello \" ; var secondWord = \" World \" ; var redForegroundColorSpan = new ForegroundColorSpan ( Color . Red ) ; // Use a SpannableStringBuilder so that both the text and the spans are mutable SpannableStringBuilder ssb = new SpannableStringBuilder ( firstWord ) ; // Apply the color span ssb . SetSpan ( redForegroundColorSpan , // the span to add 0 , // the start of the span ( inclusive ) ssb . Length () , // the end of the span ( exclusive ) SpanTypes . ExclusiveExclusive ) ; // behavior when text is later inserted into the SpannableStringBuilder // SPAN_EXCLUSIVE_EXCLUSIVE means to not extend the span when additional // text is added in later // Add a blank space ssb . Append ( \" \" ) ; // Create a span that will strikethrough the text StrikethroughSpan strikethroughSpan = new StrikethroughSpan () ; // Add the secondWord and apply the strikethrough span to only the second word ssb . Append ( secondWord ) ; ssb . SetSpan ( strikethroughSpan , ssb . Length () - secondWord . Length , ssb . Length () , SpanTypes . ExclusiveExclusive ) ; // Set the TextView text and denote that it is Editable // since it ' s a SpannableStringBuilder textView . SetText ( ssb , TextView . BufferType . Editable ) ; Note: There are 3 different classes that can be used to represent text that has markup attached. SpannableStringBuilder (used above) is the one to use when dealing with mutable spans and mutable text. SpannableString is for mutable spans, but immutable text. And SpannedString is for immutable spans and immutable text.","title":"Using Spans to Style Sections of Text"},{"location":"common-views/#references","text":"http://developer.android.com/guide/topics/ui/controls/text.html http://code.tutsplus.com/tutorials/android-user-interface-design-edittext-controls--mobile-7183 http://www.codeofaninja.com/2012/01/android-edittext-example.html http://www.tutorialspoint.com/android/android_edittext_control.htm http://developer.android.com/reference/android/widget/EditText.html http://android-developers.blogspot.com/2015/10/android-support-library-231.html?linkId=17977963","title":"References"},{"location":"deployment/","text":"Deploying an Android App to Google Play Store \u00b6 Prepare for release \u00b6 What is an apk? \u00b6 Add a launch icon \u00b6 Add an application ID \u00b6 Specify API levels targets and version number \u00b6 Reduce app size \u00b6 Disable logging and debugging \u00b6 Generate a signed apk \u00b6 Publish your app \u00b6 Create an account on Google Play Developer Console \u00b6 Run pre-launch reports \u00b6 Review criteria for publishing \u00b6 Submit your app for publishing \u00b6","title":"Deployment"},{"location":"deployment/#deploying-an-android-app-to-google-play-store","text":"","title":"Deploying an Android App to Google Play Store"},{"location":"deployment/#prepare-for-release","text":"","title":"Prepare for release"},{"location":"deployment/#what-is-an-apk","text":"","title":"What is an apk?"},{"location":"deployment/#add-a-launch-icon","text":"","title":"Add a launch icon"},{"location":"deployment/#add-an-application-id","text":"","title":"Add an application ID"},{"location":"deployment/#specify-api-levels-targets-and-version-number","text":"","title":"Specify API levels targets and version number"},{"location":"deployment/#reduce-app-size","text":"","title":"Reduce app size"},{"location":"deployment/#disable-logging-and-debugging","text":"","title":"Disable logging and debugging"},{"location":"deployment/#generate-a-signed-apk","text":"","title":"Generate a signed apk"},{"location":"deployment/#publish-your-app","text":"","title":"Publish your app"},{"location":"deployment/#create-an-account-on-google-play-developer-console","text":"","title":"Create an account on Google Play Developer Console"},{"location":"deployment/#run-pre-launch-reports","text":"","title":"Run pre-launch reports"},{"location":"deployment/#review-criteria-for-publishing","text":"","title":"Review criteria for publishing"},{"location":"deployment/#submit-your-app-for-publishing","text":"","title":"Submit your app for publishing"},{"location":"dialogs/","text":"Android Dialogs and Pickers \u00b6 Dialogs \u00b6 A dialog is a window that appears on top of the display or fills the display, interrupting the flow of Activity. Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks. The base class for all dialog components is a Dialog . Pickers \u00b6 Pickers are ready to use dialogs that are provided by the Android framework. Android provides pickers for date and time. Each picker provides controls for selecting each part of the time (hour, minute, AM/PM) or date (month, day, year). Using these pickers helps ensure that your users can pick a time or date that is valid, formatted correctly, and adjusted to the user's locale. We recommend that you use DialogFragment to host each time or date picker. The DialogFragment manages the dialog life cycle for you and allows you to display the pickers in different layout configurations, such as in a basic dialog on handsets or as an embedded part of the layout on large screens. Use pickers sparingly Best practices recommend using dialogs sparingly as they interrupt the user's workflow. Read more on the Dialog guides Dialog subclasses \u00b6 You should not instantiate a dialog directly, instead use one of the subclasses of the Dialog class: AlertDialog : A dialog that can show a title, up to three buttons, a list of selectable items, or a custom layout. DatePickerDialog : A dialog with a predefined UI that lets the user select a date. TimePickerDialog : A dialog with a predefined UI that lets the user select a time. Alert dialogs \u00b6 Alerts are urgent interruptions, requiring acknowledgement or action, that inform the user about a situation as it occurs, or an action before it occurs (as in discarding a draft). Use the AlertDialog subclass of the Dialog class to show a standard dialog for an alert. The AlertDialog class allows you to build a variety of dialog designs. An alert dialog can have the following regions (refer to the diagram below): The figure above shows: Title : A title is optional. Most alerts don't need titles. Use a title if the situation is high-risk, such as the potential loss of connectivity or data, and the content area is occupied by a detailed message, a list, or custom layout. Content area : The content area can display a message, a list, or other custom layout. Action buttons : You should use no more than three action buttons in a dialog, and most have only two. Creating the AlertDialog \u00b6 To create the dialog, use the AlertDialog.Builder as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Android . Support . V7 . App . AlertDialog . Builder builder = new Android . Support . V7 . App . AlertDialog . Builder ( this ) // Set the title of the dialog . SetTitle ( \"Use Google's location service?\" ) //Set the content . SetMessage ( \"Let Google help apps determing location. This means sending anonymous location data to Google, even when no apps are running.\" ) // show and handle the positive button event . SetPositiveButton ( \"Agree\" , ( object s , Android . Content . DialogClickEventArgs dialogClickEventArgs ) => { Log . Debug ( TAG , $ \"{ dialogClickEventArgs.Which}\" ); // Handle positive button click event }) // Show and handle the negative button click event . SetNegativeButton ( \"Disagree\" , ( object s , Android . Content . DialogClickEventArgs dialogClickEventArgs ) => { Log . Debug ( TAG , $ \"{ dialogClickEventArgs.Which}\" ); // handle negative button click event }); Create the dialog \u00b6 Create the dialog from the builder as follows: 1 var dialog = builder . Create (); Show the dialog \u00b6 Use the Show method to display the dialog 1 dialog . Show (); The complete code should be as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 void BtnShowAlert_Click ( object sender , EventArgs e ) { Android . Support . V7 . App . AlertDialog . Builder builder = new Android . Support . V7 . App . AlertDialog . Builder ( this ) . SetTitle ( \"Use Google's location service?\" ) . SetMessage ( \"Let Google help apps determing location. This means sending anonymous location data to Google, even when no apps are running.\" ) . SetPositiveButton ( \"Agree\" , ( object s , Android . Content . DialogClickEventArgs dialogClickEventArgs ) => { Log . Debug ( TAG , $ \"{ dialogClickEventArgs.Which}\" ); // Handle positive button click event }) . SetNegativeButton ( \"Disagree\" , ( object s , Android . Content . DialogClickEventArgs dialogClickEventArgs ) => { Log . Debug ( TAG , $ \"{ dialogClickEventArgs.Which}\" ); // handle negative button click event }); var dialog = builder . Create (); dialog . Show (); } The above method is handling the click event of a view. You should see a a screen as below: Which AlertDialog class There are several AlertDialog classes. You should use the support version of the dialog class as we have done above. Either use the fully qualified name Android.Support.V7.App.AlertDialog or add a using statement at the top of the class. Date Picker Dialog \u00b6 They are two ways of picking a date: Use the DatePicker view control Use a DatePickerDialog. Which method is preferred Using the DatePickerDialog is the preferred way as the dialog will render differently on mobile and tablets. Using a DialogFragment \u00b6 The DatePickerDialog needs fragment to host it and we use the DialogFragment . Use the DialogFragment from the support library to support older devices. Define a fragment that inherits from the AppCompatDialogFragment . 1 2 3 4 5 6 7 8 9 10 11 12 13 class DatePickerFragment : AppCompatDialogFragment { //This event will be invoked when we set the date public event EventHandler < DatePickerDialog . DateSetEventArgs > DateSet = delegate { }; //Override the constructor and create a DatePickerDialog using the current date public override Dialog OnCreateDialog ( Bundle savedInstanceState ) { return new DatePickerDialog ( Context , ( sender , e ) => { //Invoke the event, once the date have been set DateSet ( sender , e ); }, DateTime . Now . Year , DateTime . Now . Month , DateTime . Now . Day ); } } Show the Date Picker \u00b6 We can attach an event to the button and instantiate the fragment and then show it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Get our button from the layout resource, // and attach an event to it Button button = FindViewById < Button >( Resource . Id . myButton ); button . Click += delegate { var datePicker = new DatePickerFragment (); //Attach an event to the fragment datePicker . DateSet += ( sender , e ) => { //Show the date on the console Console . WriteLine ( e . Date ); }; //Show the date picker //Needs a Support Fragment managing the lifecycle of the fragment datePicker . Show ( SupportFragmentManager , \"datepicker\" ); }; Time Picker Dialog \u00b6 The procedure is the same as setting the date, we need to host the TimerPickerDialog in a DialogFragment . 1 2 3 4 5 6 7 8 9 10 11 12 13 class TimePickerFragment : AppCompatDialogFragment { //This event will be invoked when we set the date public event EventHandler < TimePickerDialog . TimeSetEventArgs > TimeSet = delegate { }; //Ovverrice the constructor and create a DatePickerDialog using the current date public override Dialog OnCreateDialog ( Bundle savedInstanceState ) { return new TimePickerDialog ( Context , ( sender , e ) => { TimeSet ( sender , e ); }, DateTime . Now . Hour , DateTime . Now . Minute , true ); } } Hook event to button \u00b6 We can then hook an event to the button to display the timer picker fragment. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Get our button from the layout resource, // and attach an event to it Button button = FindViewById < Button >( Resource . Id . myButton ); button . Click += delegate { var timePicker = new TimePickerFragment (); //Attach an event to the fragment timePicker . TimeSet += ( sender , e ) => { //Show the date on the console Console . WriteLine ( $ \"{e.HourOfDay}:{e.Minute}\" ); }; //Show the date picker //Needs a Support Fragment managing the lifecycle of the fragment timePicker . Show ( SupportFragmentManager , \"timepicker\" ); }; Creating Picker in API Level 24 Using API 24, you can create the DatePickerDialog without having to create a subclass of the DialogFragment as follows: 1 2 3 4 5 6 7 8 9 10 // Create the dialog DatePickerDialog datePickerDialog = new DatePickerDialog ( this ); // Handle the date selected event datePickerDialog . DateSet += ( object sender , DatePickerDialog . DateSetEventArgs e ) => { Log . Debug ( TAG , e . Date . ToString ()); }; //Show the dialog datePickerDialog . Show (); We can also similarly show the time picker dialog as follows: 1 2 3 4 5 // Instantiate the dialog and handle the time selected event TimePickerDialog timePickerDialog = new TimePickerDialog ( this , ( s , evt ) => { }, 12 , 59 , true ); // Show the dialog timePickerDialog . Show (); Custom Dialog \u00b6 We can use the AlertDialog and instead of using a simple message, we use a custom layout to set its contents.","title":"Dialogs and Pickers"},{"location":"dialogs/#android-dialogs-and-pickers","text":"","title":"Android Dialogs and Pickers"},{"location":"dialogs/#dialogs","text":"A dialog is a window that appears on top of the display or fills the display, interrupting the flow of Activity. Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks. The base class for all dialog components is a Dialog .","title":"Dialogs"},{"location":"dialogs/#pickers","text":"Pickers are ready to use dialogs that are provided by the Android framework. Android provides pickers for date and time. Each picker provides controls for selecting each part of the time (hour, minute, AM/PM) or date (month, day, year). Using these pickers helps ensure that your users can pick a time or date that is valid, formatted correctly, and adjusted to the user's locale. We recommend that you use DialogFragment to host each time or date picker. The DialogFragment manages the dialog life cycle for you and allows you to display the pickers in different layout configurations, such as in a basic dialog on handsets or as an embedded part of the layout on large screens. Use pickers sparingly Best practices recommend using dialogs sparingly as they interrupt the user's workflow. Read more on the Dialog guides","title":"Pickers"},{"location":"dialogs/#dialog-subclasses","text":"You should not instantiate a dialog directly, instead use one of the subclasses of the Dialog class: AlertDialog : A dialog that can show a title, up to three buttons, a list of selectable items, or a custom layout. DatePickerDialog : A dialog with a predefined UI that lets the user select a date. TimePickerDialog : A dialog with a predefined UI that lets the user select a time.","title":"Dialog subclasses"},{"location":"dialogs/#alert-dialogs","text":"Alerts are urgent interruptions, requiring acknowledgement or action, that inform the user about a situation as it occurs, or an action before it occurs (as in discarding a draft). Use the AlertDialog subclass of the Dialog class to show a standard dialog for an alert. The AlertDialog class allows you to build a variety of dialog designs. An alert dialog can have the following regions (refer to the diagram below): The figure above shows: Title : A title is optional. Most alerts don't need titles. Use a title if the situation is high-risk, such as the potential loss of connectivity or data, and the content area is occupied by a detailed message, a list, or custom layout. Content area : The content area can display a message, a list, or other custom layout. Action buttons : You should use no more than three action buttons in a dialog, and most have only two.","title":"Alert dialogs"},{"location":"dialogs/#creating-the-alertdialog","text":"To create the dialog, use the AlertDialog.Builder as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Android . Support . V7 . App . AlertDialog . Builder builder = new Android . Support . V7 . App . AlertDialog . Builder ( this ) // Set the title of the dialog . SetTitle ( \"Use Google's location service?\" ) //Set the content . SetMessage ( \"Let Google help apps determing location. This means sending anonymous location data to Google, even when no apps are running.\" ) // show and handle the positive button event . SetPositiveButton ( \"Agree\" , ( object s , Android . Content . DialogClickEventArgs dialogClickEventArgs ) => { Log . Debug ( TAG , $ \"{ dialogClickEventArgs.Which}\" ); // Handle positive button click event }) // Show and handle the negative button click event . SetNegativeButton ( \"Disagree\" , ( object s , Android . Content . DialogClickEventArgs dialogClickEventArgs ) => { Log . Debug ( TAG , $ \"{ dialogClickEventArgs.Which}\" ); // handle negative button click event });","title":"Creating the AlertDialog"},{"location":"dialogs/#create-the-dialog","text":"Create the dialog from the builder as follows: 1 var dialog = builder . Create ();","title":"Create the dialog"},{"location":"dialogs/#show-the-dialog","text":"Use the Show method to display the dialog 1 dialog . Show (); The complete code should be as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 void BtnShowAlert_Click ( object sender , EventArgs e ) { Android . Support . V7 . App . AlertDialog . Builder builder = new Android . Support . V7 . App . AlertDialog . Builder ( this ) . SetTitle ( \"Use Google's location service?\" ) . SetMessage ( \"Let Google help apps determing location. This means sending anonymous location data to Google, even when no apps are running.\" ) . SetPositiveButton ( \"Agree\" , ( object s , Android . Content . DialogClickEventArgs dialogClickEventArgs ) => { Log . Debug ( TAG , $ \"{ dialogClickEventArgs.Which}\" ); // Handle positive button click event }) . SetNegativeButton ( \"Disagree\" , ( object s , Android . Content . DialogClickEventArgs dialogClickEventArgs ) => { Log . Debug ( TAG , $ \"{ dialogClickEventArgs.Which}\" ); // handle negative button click event }); var dialog = builder . Create (); dialog . Show (); } The above method is handling the click event of a view. You should see a a screen as below: Which AlertDialog class There are several AlertDialog classes. You should use the support version of the dialog class as we have done above. Either use the fully qualified name Android.Support.V7.App.AlertDialog or add a using statement at the top of the class.","title":"Show the dialog"},{"location":"dialogs/#date-picker-dialog","text":"They are two ways of picking a date: Use the DatePicker view control Use a DatePickerDialog. Which method is preferred Using the DatePickerDialog is the preferred way as the dialog will render differently on mobile and tablets.","title":"Date Picker Dialog"},{"location":"dialogs/#using-a-dialogfragment","text":"The DatePickerDialog needs fragment to host it and we use the DialogFragment . Use the DialogFragment from the support library to support older devices. Define a fragment that inherits from the AppCompatDialogFragment . 1 2 3 4 5 6 7 8 9 10 11 12 13 class DatePickerFragment : AppCompatDialogFragment { //This event will be invoked when we set the date public event EventHandler < DatePickerDialog . DateSetEventArgs > DateSet = delegate { }; //Override the constructor and create a DatePickerDialog using the current date public override Dialog OnCreateDialog ( Bundle savedInstanceState ) { return new DatePickerDialog ( Context , ( sender , e ) => { //Invoke the event, once the date have been set DateSet ( sender , e ); }, DateTime . Now . Year , DateTime . Now . Month , DateTime . Now . Day ); } }","title":"Using a DialogFragment"},{"location":"dialogs/#show-the-date-picker","text":"We can attach an event to the button and instantiate the fragment and then show it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Get our button from the layout resource, // and attach an event to it Button button = FindViewById < Button >( Resource . Id . myButton ); button . Click += delegate { var datePicker = new DatePickerFragment (); //Attach an event to the fragment datePicker . DateSet += ( sender , e ) => { //Show the date on the console Console . WriteLine ( e . Date ); }; //Show the date picker //Needs a Support Fragment managing the lifecycle of the fragment datePicker . Show ( SupportFragmentManager , \"datepicker\" ); };","title":"Show the Date Picker"},{"location":"dialogs/#time-picker-dialog","text":"The procedure is the same as setting the date, we need to host the TimerPickerDialog in a DialogFragment . 1 2 3 4 5 6 7 8 9 10 11 12 13 class TimePickerFragment : AppCompatDialogFragment { //This event will be invoked when we set the date public event EventHandler < TimePickerDialog . TimeSetEventArgs > TimeSet = delegate { }; //Ovverrice the constructor and create a DatePickerDialog using the current date public override Dialog OnCreateDialog ( Bundle savedInstanceState ) { return new TimePickerDialog ( Context , ( sender , e ) => { TimeSet ( sender , e ); }, DateTime . Now . Hour , DateTime . Now . Minute , true ); } }","title":"Time Picker Dialog"},{"location":"dialogs/#hook-event-to-button","text":"We can then hook an event to the button to display the timer picker fragment. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Get our button from the layout resource, // and attach an event to it Button button = FindViewById < Button >( Resource . Id . myButton ); button . Click += delegate { var timePicker = new TimePickerFragment (); //Attach an event to the fragment timePicker . TimeSet += ( sender , e ) => { //Show the date on the console Console . WriteLine ( $ \"{e.HourOfDay}:{e.Minute}\" ); }; //Show the date picker //Needs a Support Fragment managing the lifecycle of the fragment timePicker . Show ( SupportFragmentManager , \"timepicker\" ); }; Creating Picker in API Level 24 Using API 24, you can create the DatePickerDialog without having to create a subclass of the DialogFragment as follows: 1 2 3 4 5 6 7 8 9 10 // Create the dialog DatePickerDialog datePickerDialog = new DatePickerDialog ( this ); // Handle the date selected event datePickerDialog . DateSet += ( object sender , DatePickerDialog . DateSetEventArgs e ) => { Log . Debug ( TAG , e . Date . ToString ()); }; //Show the dialog datePickerDialog . Show (); We can also similarly show the time picker dialog as follows: 1 2 3 4 5 // Instantiate the dialog and handle the time selected event TimePickerDialog timePickerDialog = new TimePickerDialog ( this , ( s , evt ) => { }, 12 , 59 , true ); // Show the dialog timePickerDialog . Show ();","title":"Hook event to button"},{"location":"dialogs/#custom-dialog","text":"We can use the AlertDialog and instead of using a simple message, we use a custom layout to set its contents.","title":"Custom Dialog"},{"location":"fragments/","text":"Android Fragments \u00b6 Fragments are like activities but they have to be hosted inside an Activity. The fragments contains a layout file and backing .cs file. In addition to the Activity life cycle methods, Fragments have their own life cycle methods. Fragments can be swapped during runtime, this enables creating dynamic UIs. The fragment class inherits from Fragment . Fragment in different Android namespace Please not that when using the support libraries you will need to use the Fragment from the support libraries, Android.Support.V4.App.Fragment not the one from Android.App.Fragment Create fragment \u00b6 From Visual Studio add new File and choose Fragment. Visual Studio will create the following for you: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class CoursesFragment : Android . Support . V4 . App . Fragment { public override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); // Create your fragment here } public override View OnCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { // Use this to return your custom view for this Fragment // return inflater.Inflate(Resource.Layout.YourFragment, container, false); return base . OnCreateView ( inflater , container , savedInstanceState ); } } Create the layout file \u00b6 Create the layout file inside the Resources -> layout . Naming layout files You should adopt a convention for naming layout files. For layouts used in fragments, you should prefix them with fragment_<name_of_fragment> , e.g a fragment called CoursesFragment tha layout file should be fragment_courses.axml . Attach the layout to the fragment \u00b6 The fragment uses a different method to set the content UI. The OnCreateView() method is used set the content view for the fragment. Uncomment the line or add a new line to inflate the layout file as follows: 1 var fragmentView = inflater . Inflate ( Resource . Layout . fragment_courses , container , false ); The complete method will be as follows: 1 2 3 4 5 6 7 public override View OnCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { base . OnCreateView ( inflater , container , savedInstanceState ); // Use this to return your custom view for this Fragment var fragmentView = inflater . Inflate ( Resource . Layout . fragment_courses , container , false ); return fragmentView ; } Attach the fragment statically in the activity \u00b6 They are two ways to attach the fragment in the Activity. You can statically attach the fragment in the Activity 's xml file or dynamically add it in code. Statically attached fragment cannot be changed When you statically attach the fragment in the Activity 's xml file, you can not later swap out the fragment. Add the fragment in the xml file \u00b6 You should add the fragment in the xml file of the activity as follows: 1 2 3 4 5 <fragment android:id= \"@+id/fragment\" class= \"Challenge01.CoursesFragment\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> The fragment tag is used to attach the fragment in the xml file. The class attribute should be the fully qualified name of the class for the fragment. The android:id is required attribute when using fragments in the xml file. Dynamically attach the fragment \u00b6 You can add or remove a fragment dynamically to a container in the xml file. First define a ui with and android:id to be used to add the fragment. A FrameLayout is generally used but you can use an type of container. Create the xml tag \u00b6 Add the xml tag to be used to show the contents of the fragment in the activity layout file as follows: 1 2 3 4 <FrameLayout android:id= \"@+id/container\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> Add the fragment in code \u00b6 In the OnCerate() method of the activity dynamically add the fragment using the SupportFragmentManager as follows: 1 2 3 4 5 6 var fragment = new CoursesFragment (); SupportFragmentManager // Get the support fragment manager instead of the FragmentManager . BeginTransaction () // Start a transaction . Add ( Resource . Id . container , fragment , \"coursesFragment\" ) // Add the fragment . Commit (); // Commit the changes Which fragment manager to use? When using the fragments from the support library, Android.Support.V4.App.Fragment , you should use the SupportFragmentManager property and when using the fragments from Android.App.Fragment , you should use the the FragmentManager . You can perform multiple fragment operations by using transactions. Whe you are done you call the Commit() method to apply the changes.","title":"Fragments"},{"location":"fragments/#android-fragments","text":"Fragments are like activities but they have to be hosted inside an Activity. The fragments contains a layout file and backing .cs file. In addition to the Activity life cycle methods, Fragments have their own life cycle methods. Fragments can be swapped during runtime, this enables creating dynamic UIs. The fragment class inherits from Fragment . Fragment in different Android namespace Please not that when using the support libraries you will need to use the Fragment from the support libraries, Android.Support.V4.App.Fragment not the one from Android.App.Fragment","title":"Android Fragments"},{"location":"fragments/#create-fragment","text":"From Visual Studio add new File and choose Fragment. Visual Studio will create the following for you: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class CoursesFragment : Android . Support . V4 . App . Fragment { public override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); // Create your fragment here } public override View OnCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { // Use this to return your custom view for this Fragment // return inflater.Inflate(Resource.Layout.YourFragment, container, false); return base . OnCreateView ( inflater , container , savedInstanceState ); } }","title":"Create fragment"},{"location":"fragments/#create-the-layout-file","text":"Create the layout file inside the Resources -> layout . Naming layout files You should adopt a convention for naming layout files. For layouts used in fragments, you should prefix them with fragment_<name_of_fragment> , e.g a fragment called CoursesFragment tha layout file should be fragment_courses.axml .","title":"Create the layout file"},{"location":"fragments/#attach-the-layout-to-the-fragment","text":"The fragment uses a different method to set the content UI. The OnCreateView() method is used set the content view for the fragment. Uncomment the line or add a new line to inflate the layout file as follows: 1 var fragmentView = inflater . Inflate ( Resource . Layout . fragment_courses , container , false ); The complete method will be as follows: 1 2 3 4 5 6 7 public override View OnCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { base . OnCreateView ( inflater , container , savedInstanceState ); // Use this to return your custom view for this Fragment var fragmentView = inflater . Inflate ( Resource . Layout . fragment_courses , container , false ); return fragmentView ; }","title":"Attach the layout to the fragment"},{"location":"fragments/#attach-the-fragment-statically-in-the-activity","text":"They are two ways to attach the fragment in the Activity. You can statically attach the fragment in the Activity 's xml file or dynamically add it in code. Statically attached fragment cannot be changed When you statically attach the fragment in the Activity 's xml file, you can not later swap out the fragment.","title":"Attach the fragment statically in the activity"},{"location":"fragments/#add-the-fragment-in-the-xml-file","text":"You should add the fragment in the xml file of the activity as follows: 1 2 3 4 5 <fragment android:id= \"@+id/fragment\" class= \"Challenge01.CoursesFragment\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> The fragment tag is used to attach the fragment in the xml file. The class attribute should be the fully qualified name of the class for the fragment. The android:id is required attribute when using fragments in the xml file.","title":"Add the fragment in the xml file"},{"location":"fragments/#dynamically-attach-the-fragment","text":"You can add or remove a fragment dynamically to a container in the xml file. First define a ui with and android:id to be used to add the fragment. A FrameLayout is generally used but you can use an type of container.","title":"Dynamically attach the fragment"},{"location":"fragments/#create-the-xml-tag","text":"Add the xml tag to be used to show the contents of the fragment in the activity layout file as follows: 1 2 3 4 <FrameLayout android:id= \"@+id/container\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" />","title":"Create the xml tag"},{"location":"fragments/#add-the-fragment-in-code","text":"In the OnCerate() method of the activity dynamically add the fragment using the SupportFragmentManager as follows: 1 2 3 4 5 6 var fragment = new CoursesFragment (); SupportFragmentManager // Get the support fragment manager instead of the FragmentManager . BeginTransaction () // Start a transaction . Add ( Resource . Id . container , fragment , \"coursesFragment\" ) // Add the fragment . Commit (); // Commit the changes Which fragment manager to use? When using the fragments from the support library, Android.Support.V4.App.Fragment , you should use the SupportFragmentManager property and when using the fragments from Android.App.Fragment , you should use the the FragmentManager . You can perform multiple fragment operations by using transactions. Whe you are done you call the Commit() method to apply the changes.","title":"Add the fragment in code"},{"location":"hello-xamarin-android/","text":"Creating your first Xamarin.Android App \u00b6 You can use either Visual Studio for Windows or for Mac for creating a new Xamarin.Android app. Create new project \u00b6 Open Visual Studio Choose File -> New Solution Choose Android -> Android app Configure the project \u00b6 App Name - This is the name of the app. Organization identifier - This is the unique name used together with the app name to uniquely identify your app on the Google Play Store. Target platforms - This is the platforms on which the app can run, its always advisable to choose the version of the Android that can support at least 90% of the devices in the wild. Theme - The default theme that will be applied to the entire app. This can be changed and configured later. Organization Identifier The convention is to use the reverse of the domain name since its guaranteed to be unique. Android Versions Google maintains a list with statistics on the different versions of Android currently installed on Google Android Dashboard Project Structure \u00b6 A Xamarin.Android project have the following structure : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 . \u251c\u2500 References \u2502 \u251c\u2500 Mono.Android # Mono.Android library reference \u2502 \u251c\u2500 System # Reference to System library \u2502 \u251c\u2500 Systen.Core \u2502 \u251c\u2500 ... \u2502 \u2514\u2500 System.Xml \u251c\u2500 Packages \u2502 \u251c\u2500 Xamarin.Android.Support.Core.Utils # Support libraries \u2502 \u251c\u2500 Xamarin.Android.Support.CustomTabs # Support libraries \u2502 \u251c\u2500 Xamarin.Android.Support.Design # Material Design Support library \u2502 \u2514\u2500 Xamarin.Essentials # Xamarin Essentials library \u251c\u2500 Assets \u2502 \u2514\u2500 AboutAssets.txt # Add raw assets here \u251c\u2500 Properties \u2502 \u251c\u2500 AndroidManifest.xml # Glues the app to Android system \u2502 \u2514\u2500 AssemblyInfo.cs # Global assembly \u251c\u2500 Resources \u2502 \u251c\u2500 drawable # Contains images \u2502 \u251c\u2500 layout # contains layout files \u2502 \u2502 \u251c\u2500 actvity_main.axml # Layout file \u2502 \u2502 \u2514\u2500 content_main.axml # Layout file \u2502 \u251c\u2500 menu # Contains menu resource files \u2502 \u2502 \u2514\u2500 menu_main.xml # Menu resource file \u2502 \u251c\u2500 mipmap-hdpi # App icons shown on hdpi density \u2502 \u2502 \u251c\u2500 ic_launcher.png \u2502 \u2502 \u251c\u2500 ic_launcher_foreground.png \u2502 \u2502 \u2514\u2500 ic_launcher_round.png \u2502 \u251c\u2500 mipmap-mdpi # App icons shown on mdpi density \u2502 \u2502 \u251c\u2500 ic_launcher.png \u2502 \u2502 \u251c\u2500 ic_launcher_foreground.png \u2502 \u2502 \u2514\u2500 ic_launcher_round.png \u2502 \u251c\u2500 mipmap-xhdpi # App icons shown on xhpi density \u2502 \u2502 \u251c\u2500 ic_launcher.png \u2502 \u2502 \u251c\u2500 ic_launcher_foreground.png \u2502 \u2502 \u2514\u2500 ic_launcher_round.png \u2502 \u251c\u2500 mipmap-xxhdpi # App icons shown on xxhdpi density \u2502 \u2502 \u251c\u2500 ic_launcher.png \u2502 \u2502 \u251c\u2500 ic_launcher_foreground.png \u2502 \u2502 \u2514\u2500 ic_launcher_round.png \u2502 \u251c\u2500 mipmap-xxxhdpi # App icons shown on xxxhdpi density \u2502 \u2502 \u251c\u2500 ic_launcher.png \u2502 \u2502 \u251c\u2500 ic_launcher_foreground.png \u2502 \u2502 \u2514\u2500 ic_launcher_round.png \u2502 \u251c\u2500 values # Contains internationalized resources \u2502 \u2502 \u251c\u2500 colors.xml # Contains the color resources \u2502 \u2502 \u251c\u2500 dimens.xml # Contains the dimensions \u2502 \u2502 \u251c\u2500 ic_launcher_background.xml \u2502 \u2502 \u251c\u2500 strings.xml # Contains string resources in English \u2502 \u2502 \u2514\u2500 styles.xml # Contains style definitions \u2502 \u2514\u2500 Resource.designer.cs # Auto generated designer file \u2514\u2500 MainActivity.cs # Default start Activity Android Components \u00b6 An an Android app is composed several components : Activity Services Broadcast Receivers Content Providers Each component provides a specific functionality and they are tied together using Intents . Intents are used to pass messages across the different components of Android. Creating an Android Device Emulator \u00b6 Emulators allow you to test your Android apps without using a physical device. Note Android emulators allow you to test your apps against different versions and devices of Android. Creating an Emulator \u00b6 Click Tools -> Click New Device Name - The name of the emulator device. You can create many emulator devices. Base Device - The device mode, e.g Nexus, watch tv or a generic device. Processor - The type of the processor. For speed we use the x86. Physical android devices runs the ARM processor. OS - The version of Android Google APIs - Install the Google APIs on the device. This is required to install the Google Play Store. Google Play Store - Get an emulator with the Google Play Store installed. The enables you to install additional apps on the emulator. Properties - These are the properties available on the device. You can add more properties by choosing Add Property . Downloading System Image If you the version of Android you choose is not yet installed, the wizard will start the download. Make sure you have a fast active internet connection. Most of the images are more than 500Mb, it might take a while on a slow connection. Starting the Emulator \u00b6 Once the emulator is downloaded and created, you can now start it. You can click the Play icon to run project. When there are no emulators running, Visual Studio will start the emulator. You can also go to the Device Manager, Tools -> Device Manager. When loaded, click Play Running the emulator Its recommended to start the emulator once and continue deploying your apps as the emulator can take long to start. Android emulator running \u00b6 After starting and deploying the HelloAndroid, you will now get the app installed and running on the emulator. Exploring the default MainActivity \u00b6 The default Android project template creates one MainActivity.cs file. An activity contains the the C# code and the UI layout file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 using System ; using Android.App ; using Android.OS ; using Android.Runtime ; using Android.Support.Design.Widget ; using Android.Support.V7.App ; using Android.Views ; using Android.Widget ; namespace HelloAndroid { [Activity(Label = \"@string/app_name\", Theme = \"@style/AppTheme.NoActionBar\", MainLauncher = true)] public class MainActivity : AppCompatActivity { protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); Xamarin . Essentials . Platform . Init ( this , savedInstanceState ); SetContentView ( Resource . Layout . activity_main ); Android . Support . V7 . Widget . Toolbar toolbar = FindViewById < Android . Support . V7 . Widget . Toolbar >( Resource . Id . toolbar ); SetSupportActionBar ( toolbar ); FloatingActionButton fab = FindViewById < FloatingActionButton >( Resource . Id . fab ); fab . Click += FabOnClick ; } public override bool OnCreateOptionsMenu ( IMenu menu ) { MenuInflater . Inflate ( Resource . Menu . menu_main , menu ); return true ; } public override bool OnOptionsItemSelected ( IMenuItem item ) { int id = item . ItemId ; if ( id == Resource . Id . action_settings ) { return true ; } return base . OnOptionsItemSelected ( item ); } private void FabOnClick ( object sender , EventArgs eventArgs ) { View view = ( View ) sender ; Snackbar . Make ( view , \"Replace with your own action\" , Snackbar . LengthLong ) . SetAction ( \"Action\" , ( Android . Views . View . IOnClickListener ) null ). Show (); } public override void OnRequestPermissionsResult ( int requestCode , string [] permissions , [ GeneratedEnum ] Android . Content . PM . Permission [] grantResults ) { Xamarin . Essentials . Platform . OnRequestPermissionsResult ( requestCode , permissions , grantResults ); base . OnRequestPermissionsResult ( requestCode , permissions , grantResults ); } } } Using statements \u00b6 At the top of the activity is several declarations of the namespaces used by the activity. 1 2 3 4 5 6 7 8 using System ; // System namespace using Android.App ; using Android.OS ; using Android.Runtime ; using Android.Support.Design.Widget ; // Material design views using Android.Support.V7.App ; // The AppCompatAcitivity is declared in this namespace using Android.Views ; // Namespace containing Android views using Android.Widget ; // Provides common Android views e.g Button Activity attribute \u00b6 The [Activity()] attribute is used to mark as class as an Android activity and generate the appropriate xml metadata in the AndroidManifest.xml file. The class will also need to inherit from Activity or AppAcompatActivity . Label = \"@string/app_name\" ** - Define the name of the app shown on the launch screen or title bar Theme = \"@style/AppTheme.NoActionBar\" - The Theme used by this activity MainLauncher = true - Defines this activity as the launcher Activity. The entry point into the app The line [Activity(Label = \"@string/app_name\", Theme = \"@style/AppTheme.NoActionBar\", MainLauncher = true)] will generate the following in the AndroidManifest.xml file : 1 2 3 4 5 6 <activity android:label= \"@string/app_name\" android:theme= \"@style/AppTheme.NoActionBar\" android:name= \"md57bb84b1b6def9d8d059b80af1b562686.MainActivity\" > <intent-filter> <action android:name= \"android.intent.action.MAIN\" /> <category android:name= \"android.intent.category.LAUNCHER\" /> </intent-filter> </activity> AndroidManifest.xml generated attributes Notice how the generated attributes correspond from the [Activity()], the Label matches the android:label and the Theme matches android:theme and the MainLauncher is defined inside the intent-filter under <category android:name=\"android.intent.category.LAUNCHER\" /> What is the difference between Activity and AppCompatActivity The AppCompatActivity provides backward compatibility with older versions of Android, whilst the Activity only supports the version targeted by the current Android SDK used during development. Its always recommended to use AppCompatActivity . Defining the Activity \u00b6 An Android Activity is a class that inherits from the Activity or AppCompatActivity . The Android ActivityManager starts an Activity. The Activity will need to be registered in the AndroidManifest.xml file. 1 2 3 4 // Defines an Activity called MainActivity public class MainActivity : AppCompatActivity { .... } Connecting the UI to the Activity \u00b6 The UI for the activity is defined using XML. In Xamarin.Android the file extension of the layout file ends in .axml . The activity makes the connection to the layout file in the OnCreate life cycle method. The SetContentView method takes in the layout id and connects it to the activity. 1 2 3 4 5 6 7 8 9 10 11 12 protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); Xamarin . Essentials . Platform . Init ( this , savedInstanceState ); SetContentView ( Resource . Layout . activity_main ); Android . Support . V7 . Widget . Toolbar toolbar = FindViewById < Android . Support . V7 . Widget . Toolbar >( Resource . Id . toolbar ); SetSupportActionBar ( toolbar ); FloatingActionButton fab = FindViewById < FloatingActionButton >( Resource . Id . fab ); fab . Click += FabOnClick ; } Where does Resource come from? The Resource class is auto generated from the Resource.designer.cs class. All resources within the project can be referenced from code using the Resource class. Resource.Layout.activity_main refers to the layout file defined in the Resources -> layout -> activity_main.axml file. Exploring the layout file \u00b6 The layout file for the activity is found in the Resources -> layout -> activity_main.axml . The layout file is an xml file, although Xamarin.Android uses a different extension axml . 1 <?xml version=\"1.0\" encoding=\"utf-8\"?> The layout next defines the parent container for the views. The top level layout for the activity_main.axml is a CoordinatorLayout from the Material Design Support library. What is a CoordinatorLayout CoordinatorLayout - is a super-powered FrameLayout . CoordinatorLayout is intended for two primary use cases: As a top-level application decor or chrome layout As a container for a specific interaction with one or more child views To implement the guidelines in the Material Design spec, the CoordinatorLayout is used a top level layout. The xml tags open and close. For parent layouts, we can insert views within the open and closing tags. 1 2 3 4 5 6 7 8 9 <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.design.widget.CoordinatorLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > ... </android.support.design.widget.CoordinatorLayout> Defining the namespaces \u00b6 Most views come from the http://schemas.android.com/apk/res/android namespace. Its defined using the xml attribute xmlns and called android . Also notice several namespaces are defined, the app and tools : 1 2 3 4 5 6 7 8 9 <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.design.widget.CoordinatorLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > ... </android.support.design.widget.CoordinatorLayout> Once the namespace is defined, things like the width and height of the views can now be referred using the android namespace. The namespace name could be anything Its standard to call the http://schemas.android.com/apk/res/android namespace android but the name could be anything. We could have defined it as xmlns:demo=\"http://schemas.android.com/apk/res/android\" and anywhere else later we would have to use demo as follows : 1 2 3 4 5 6 7 8 9 <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.design.widget.CoordinatorLayout xmlns:demo= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" demo:layout_width= \"match_parent\" demo:layout_height= \"match_parent\" > ... </android.support.design.widget.CoordinatorLayout> Width and Height required attributes \u00b6 Every view in Android needs to define the width and height. The CoordinatorLayout layout defines the width and height with the following android:layout_width=\"match_parent\" and android:layout_height=\"match_parent\" respectively. View attributes match_parent - Matches the view's width or height to that of the parent wrap_content - Matches the width or height or the view to match its contents, The view will stretch or shrink to match its contents The CoordinatorLayout matches the phone's screen width and height by using the match_parent in both attributes. 1 2 3 4 5 6 7 8 9 <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.design.widget.CoordinatorLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > ... </android.support.design.widget.CoordinatorLayout> AppBarLayout \u00b6 The next view defined in the layout is the AppBarLayout . The AppBarLayout is a vertical LinearLayout which implements many of the features of material designs app bar concept, namely scrolling gestures. The AppBarLayout needs to be a direct child of the CoordinatorLayout as in the activity_main.axml file. 1 2 3 4 5 6 <android.support.design.widget.AppBarLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:theme= \"@style/AppTheme.AppBarOverlay\" > ... </android.support.design.widget.AppBarLayout> Toolbar \u00b6 The toolbar is defined using the Toolbar widget which comes from Android support library. The Toolbar also needs to be a direct descendant of the AppBarLayout to be scroll aware. 1 2 3 4 5 6 <android.support.v7.widget.Toolbar android:id= \"@+id/toolbar\" android:layout_width= \"match_parent\" android:layout_height= \"?attr/actionBarSize\" android:background= \"?attr/colorPrimary\" app:popupTheme= \"@style/AppTheme.PopupOverlay\" /> Main layout content \u00b6 The main content is in separated layout file. To include the content layout in the activity_main.axml file, the include tag is used as follows : 1 <include layout= \"@layout/content_main\" /> The line above include the contents of the layout -> content_main at that point in the layout file. The content_main defines a RelativeLayout as the parent layout with a TextView . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <?xml version=\"1.0\" encoding=\"utf-8\"?> <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" app:layout_behavior= \"@string/appbar_scrolling_view_behavior\" tools:showIn= \"@layout/activity_main\" > <TextView android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_centerInParent= \"true\" android:text= \"Hello World!\" /> </RelativeLayout> Lastly, the layout also include a FloatingActionButton which was added with the following code: 1 2 3 4 5 6 7 <android.support.design.widget.FloatingActionButton android:id= \"@+id/fab\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_gravity= \"bottom|end\" android:layout_margin= \"@dimen/fab_margin\" app:srcCompat= \"@android:drawable/ic_dialog_email\" /> Summary \u00b6 In this chapter we've explored the default Xamarin.Android created by Visual Studio 2019. The project have a specific layout, includes the AndroidManifest.xml file, the MainActivity.cs and its associated layout files defined in the Resources folder. We've also created an Android emulator to run and test our apps. Exercise \u00b6 Using Visual Studio, create a new Xamarin.Android project. Add at least one view Run the project on the emulator Run the project on your physical Android phone","title":"Hello Xamarin.Android"},{"location":"hello-xamarin-android/#creating-your-first-xamarinandroid-app","text":"You can use either Visual Studio for Windows or for Mac for creating a new Xamarin.Android app.","title":"Creating your first Xamarin.Android App"},{"location":"hello-xamarin-android/#create-new-project","text":"Open Visual Studio Choose File -> New Solution Choose Android -> Android app","title":"Create new project"},{"location":"hello-xamarin-android/#configure-the-project","text":"App Name - This is the name of the app. Organization identifier - This is the unique name used together with the app name to uniquely identify your app on the Google Play Store. Target platforms - This is the platforms on which the app can run, its always advisable to choose the version of the Android that can support at least 90% of the devices in the wild. Theme - The default theme that will be applied to the entire app. This can be changed and configured later. Organization Identifier The convention is to use the reverse of the domain name since its guaranteed to be unique. Android Versions Google maintains a list with statistics on the different versions of Android currently installed on Google Android Dashboard","title":"Configure the project"},{"location":"hello-xamarin-android/#project-structure","text":"A Xamarin.Android project have the following structure : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 . \u251c\u2500 References \u2502 \u251c\u2500 Mono.Android # Mono.Android library reference \u2502 \u251c\u2500 System # Reference to System library \u2502 \u251c\u2500 Systen.Core \u2502 \u251c\u2500 ... \u2502 \u2514\u2500 System.Xml \u251c\u2500 Packages \u2502 \u251c\u2500 Xamarin.Android.Support.Core.Utils # Support libraries \u2502 \u251c\u2500 Xamarin.Android.Support.CustomTabs # Support libraries \u2502 \u251c\u2500 Xamarin.Android.Support.Design # Material Design Support library \u2502 \u2514\u2500 Xamarin.Essentials # Xamarin Essentials library \u251c\u2500 Assets \u2502 \u2514\u2500 AboutAssets.txt # Add raw assets here \u251c\u2500 Properties \u2502 \u251c\u2500 AndroidManifest.xml # Glues the app to Android system \u2502 \u2514\u2500 AssemblyInfo.cs # Global assembly \u251c\u2500 Resources \u2502 \u251c\u2500 drawable # Contains images \u2502 \u251c\u2500 layout # contains layout files \u2502 \u2502 \u251c\u2500 actvity_main.axml # Layout file \u2502 \u2502 \u2514\u2500 content_main.axml # Layout file \u2502 \u251c\u2500 menu # Contains menu resource files \u2502 \u2502 \u2514\u2500 menu_main.xml # Menu resource file \u2502 \u251c\u2500 mipmap-hdpi # App icons shown on hdpi density \u2502 \u2502 \u251c\u2500 ic_launcher.png \u2502 \u2502 \u251c\u2500 ic_launcher_foreground.png \u2502 \u2502 \u2514\u2500 ic_launcher_round.png \u2502 \u251c\u2500 mipmap-mdpi # App icons shown on mdpi density \u2502 \u2502 \u251c\u2500 ic_launcher.png \u2502 \u2502 \u251c\u2500 ic_launcher_foreground.png \u2502 \u2502 \u2514\u2500 ic_launcher_round.png \u2502 \u251c\u2500 mipmap-xhdpi # App icons shown on xhpi density \u2502 \u2502 \u251c\u2500 ic_launcher.png \u2502 \u2502 \u251c\u2500 ic_launcher_foreground.png \u2502 \u2502 \u2514\u2500 ic_launcher_round.png \u2502 \u251c\u2500 mipmap-xxhdpi # App icons shown on xxhdpi density \u2502 \u2502 \u251c\u2500 ic_launcher.png \u2502 \u2502 \u251c\u2500 ic_launcher_foreground.png \u2502 \u2502 \u2514\u2500 ic_launcher_round.png \u2502 \u251c\u2500 mipmap-xxxhdpi # App icons shown on xxxhdpi density \u2502 \u2502 \u251c\u2500 ic_launcher.png \u2502 \u2502 \u251c\u2500 ic_launcher_foreground.png \u2502 \u2502 \u2514\u2500 ic_launcher_round.png \u2502 \u251c\u2500 values # Contains internationalized resources \u2502 \u2502 \u251c\u2500 colors.xml # Contains the color resources \u2502 \u2502 \u251c\u2500 dimens.xml # Contains the dimensions \u2502 \u2502 \u251c\u2500 ic_launcher_background.xml \u2502 \u2502 \u251c\u2500 strings.xml # Contains string resources in English \u2502 \u2502 \u2514\u2500 styles.xml # Contains style definitions \u2502 \u2514\u2500 Resource.designer.cs # Auto generated designer file \u2514\u2500 MainActivity.cs # Default start Activity","title":"Project Structure"},{"location":"hello-xamarin-android/#android-components","text":"An an Android app is composed several components : Activity Services Broadcast Receivers Content Providers Each component provides a specific functionality and they are tied together using Intents . Intents are used to pass messages across the different components of Android.","title":"Android Components"},{"location":"hello-xamarin-android/#creating-an-android-device-emulator","text":"Emulators allow you to test your Android apps without using a physical device. Note Android emulators allow you to test your apps against different versions and devices of Android.","title":"Creating an Android Device Emulator"},{"location":"hello-xamarin-android/#creating-an-emulator","text":"Click Tools -> Click New Device Name - The name of the emulator device. You can create many emulator devices. Base Device - The device mode, e.g Nexus, watch tv or a generic device. Processor - The type of the processor. For speed we use the x86. Physical android devices runs the ARM processor. OS - The version of Android Google APIs - Install the Google APIs on the device. This is required to install the Google Play Store. Google Play Store - Get an emulator with the Google Play Store installed. The enables you to install additional apps on the emulator. Properties - These are the properties available on the device. You can add more properties by choosing Add Property . Downloading System Image If you the version of Android you choose is not yet installed, the wizard will start the download. Make sure you have a fast active internet connection. Most of the images are more than 500Mb, it might take a while on a slow connection.","title":"Creating an Emulator"},{"location":"hello-xamarin-android/#starting-the-emulator","text":"Once the emulator is downloaded and created, you can now start it. You can click the Play icon to run project. When there are no emulators running, Visual Studio will start the emulator. You can also go to the Device Manager, Tools -> Device Manager. When loaded, click Play Running the emulator Its recommended to start the emulator once and continue deploying your apps as the emulator can take long to start.","title":"Starting the Emulator"},{"location":"hello-xamarin-android/#android-emulator-running","text":"After starting and deploying the HelloAndroid, you will now get the app installed and running on the emulator.","title":"Android emulator running"},{"location":"hello-xamarin-android/#exploring-the-default-mainactivity","text":"The default Android project template creates one MainActivity.cs file. An activity contains the the C# code and the UI layout file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 using System ; using Android.App ; using Android.OS ; using Android.Runtime ; using Android.Support.Design.Widget ; using Android.Support.V7.App ; using Android.Views ; using Android.Widget ; namespace HelloAndroid { [Activity(Label = \"@string/app_name\", Theme = \"@style/AppTheme.NoActionBar\", MainLauncher = true)] public class MainActivity : AppCompatActivity { protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); Xamarin . Essentials . Platform . Init ( this , savedInstanceState ); SetContentView ( Resource . Layout . activity_main ); Android . Support . V7 . Widget . Toolbar toolbar = FindViewById < Android . Support . V7 . Widget . Toolbar >( Resource . Id . toolbar ); SetSupportActionBar ( toolbar ); FloatingActionButton fab = FindViewById < FloatingActionButton >( Resource . Id . fab ); fab . Click += FabOnClick ; } public override bool OnCreateOptionsMenu ( IMenu menu ) { MenuInflater . Inflate ( Resource . Menu . menu_main , menu ); return true ; } public override bool OnOptionsItemSelected ( IMenuItem item ) { int id = item . ItemId ; if ( id == Resource . Id . action_settings ) { return true ; } return base . OnOptionsItemSelected ( item ); } private void FabOnClick ( object sender , EventArgs eventArgs ) { View view = ( View ) sender ; Snackbar . Make ( view , \"Replace with your own action\" , Snackbar . LengthLong ) . SetAction ( \"Action\" , ( Android . Views . View . IOnClickListener ) null ). Show (); } public override void OnRequestPermissionsResult ( int requestCode , string [] permissions , [ GeneratedEnum ] Android . Content . PM . Permission [] grantResults ) { Xamarin . Essentials . Platform . OnRequestPermissionsResult ( requestCode , permissions , grantResults ); base . OnRequestPermissionsResult ( requestCode , permissions , grantResults ); } } }","title":"Exploring the default MainActivity"},{"location":"hello-xamarin-android/#using-statements","text":"At the top of the activity is several declarations of the namespaces used by the activity. 1 2 3 4 5 6 7 8 using System ; // System namespace using Android.App ; using Android.OS ; using Android.Runtime ; using Android.Support.Design.Widget ; // Material design views using Android.Support.V7.App ; // The AppCompatAcitivity is declared in this namespace using Android.Views ; // Namespace containing Android views using Android.Widget ; // Provides common Android views e.g Button","title":"Using statements"},{"location":"hello-xamarin-android/#activity-attribute","text":"The [Activity()] attribute is used to mark as class as an Android activity and generate the appropriate xml metadata in the AndroidManifest.xml file. The class will also need to inherit from Activity or AppAcompatActivity . Label = \"@string/app_name\" ** - Define the name of the app shown on the launch screen or title bar Theme = \"@style/AppTheme.NoActionBar\" - The Theme used by this activity MainLauncher = true - Defines this activity as the launcher Activity. The entry point into the app The line [Activity(Label = \"@string/app_name\", Theme = \"@style/AppTheme.NoActionBar\", MainLauncher = true)] will generate the following in the AndroidManifest.xml file : 1 2 3 4 5 6 <activity android:label= \"@string/app_name\" android:theme= \"@style/AppTheme.NoActionBar\" android:name= \"md57bb84b1b6def9d8d059b80af1b562686.MainActivity\" > <intent-filter> <action android:name= \"android.intent.action.MAIN\" /> <category android:name= \"android.intent.category.LAUNCHER\" /> </intent-filter> </activity> AndroidManifest.xml generated attributes Notice how the generated attributes correspond from the [Activity()], the Label matches the android:label and the Theme matches android:theme and the MainLauncher is defined inside the intent-filter under <category android:name=\"android.intent.category.LAUNCHER\" /> What is the difference between Activity and AppCompatActivity The AppCompatActivity provides backward compatibility with older versions of Android, whilst the Activity only supports the version targeted by the current Android SDK used during development. Its always recommended to use AppCompatActivity .","title":"Activity attribute"},{"location":"hello-xamarin-android/#defining-the-activity","text":"An Android Activity is a class that inherits from the Activity or AppCompatActivity . The Android ActivityManager starts an Activity. The Activity will need to be registered in the AndroidManifest.xml file. 1 2 3 4 // Defines an Activity called MainActivity public class MainActivity : AppCompatActivity { .... }","title":"Defining the Activity"},{"location":"hello-xamarin-android/#connecting-the-ui-to-the-activity","text":"The UI for the activity is defined using XML. In Xamarin.Android the file extension of the layout file ends in .axml . The activity makes the connection to the layout file in the OnCreate life cycle method. The SetContentView method takes in the layout id and connects it to the activity. 1 2 3 4 5 6 7 8 9 10 11 12 protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); Xamarin . Essentials . Platform . Init ( this , savedInstanceState ); SetContentView ( Resource . Layout . activity_main ); Android . Support . V7 . Widget . Toolbar toolbar = FindViewById < Android . Support . V7 . Widget . Toolbar >( Resource . Id . toolbar ); SetSupportActionBar ( toolbar ); FloatingActionButton fab = FindViewById < FloatingActionButton >( Resource . Id . fab ); fab . Click += FabOnClick ; } Where does Resource come from? The Resource class is auto generated from the Resource.designer.cs class. All resources within the project can be referenced from code using the Resource class. Resource.Layout.activity_main refers to the layout file defined in the Resources -> layout -> activity_main.axml file.","title":"Connecting the UI to the Activity"},{"location":"hello-xamarin-android/#exploring-the-layout-file","text":"The layout file for the activity is found in the Resources -> layout -> activity_main.axml . The layout file is an xml file, although Xamarin.Android uses a different extension axml . 1 <?xml version=\"1.0\" encoding=\"utf-8\"?> The layout next defines the parent container for the views. The top level layout for the activity_main.axml is a CoordinatorLayout from the Material Design Support library. What is a CoordinatorLayout CoordinatorLayout - is a super-powered FrameLayout . CoordinatorLayout is intended for two primary use cases: As a top-level application decor or chrome layout As a container for a specific interaction with one or more child views To implement the guidelines in the Material Design spec, the CoordinatorLayout is used a top level layout. The xml tags open and close. For parent layouts, we can insert views within the open and closing tags. 1 2 3 4 5 6 7 8 9 <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.design.widget.CoordinatorLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > ... </android.support.design.widget.CoordinatorLayout>","title":"Exploring the layout file"},{"location":"hello-xamarin-android/#defining-the-namespaces","text":"Most views come from the http://schemas.android.com/apk/res/android namespace. Its defined using the xml attribute xmlns and called android . Also notice several namespaces are defined, the app and tools : 1 2 3 4 5 6 7 8 9 <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.design.widget.CoordinatorLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > ... </android.support.design.widget.CoordinatorLayout> Once the namespace is defined, things like the width and height of the views can now be referred using the android namespace. The namespace name could be anything Its standard to call the http://schemas.android.com/apk/res/android namespace android but the name could be anything. We could have defined it as xmlns:demo=\"http://schemas.android.com/apk/res/android\" and anywhere else later we would have to use demo as follows : 1 2 3 4 5 6 7 8 9 <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.design.widget.CoordinatorLayout xmlns:demo= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" demo:layout_width= \"match_parent\" demo:layout_height= \"match_parent\" > ... </android.support.design.widget.CoordinatorLayout>","title":"Defining the namespaces"},{"location":"hello-xamarin-android/#width-and-height-required-attributes","text":"Every view in Android needs to define the width and height. The CoordinatorLayout layout defines the width and height with the following android:layout_width=\"match_parent\" and android:layout_height=\"match_parent\" respectively. View attributes match_parent - Matches the view's width or height to that of the parent wrap_content - Matches the width or height or the view to match its contents, The view will stretch or shrink to match its contents The CoordinatorLayout matches the phone's screen width and height by using the match_parent in both attributes. 1 2 3 4 5 6 7 8 9 <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.design.widget.CoordinatorLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > ... </android.support.design.widget.CoordinatorLayout>","title":"Width and Height required attributes"},{"location":"hello-xamarin-android/#appbarlayout","text":"The next view defined in the layout is the AppBarLayout . The AppBarLayout is a vertical LinearLayout which implements many of the features of material designs app bar concept, namely scrolling gestures. The AppBarLayout needs to be a direct child of the CoordinatorLayout as in the activity_main.axml file. 1 2 3 4 5 6 <android.support.design.widget.AppBarLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:theme= \"@style/AppTheme.AppBarOverlay\" > ... </android.support.design.widget.AppBarLayout>","title":"AppBarLayout"},{"location":"hello-xamarin-android/#toolbar","text":"The toolbar is defined using the Toolbar widget which comes from Android support library. The Toolbar also needs to be a direct descendant of the AppBarLayout to be scroll aware. 1 2 3 4 5 6 <android.support.v7.widget.Toolbar android:id= \"@+id/toolbar\" android:layout_width= \"match_parent\" android:layout_height= \"?attr/actionBarSize\" android:background= \"?attr/colorPrimary\" app:popupTheme= \"@style/AppTheme.PopupOverlay\" />","title":"Toolbar"},{"location":"hello-xamarin-android/#main-layout-content","text":"The main content is in separated layout file. To include the content layout in the activity_main.axml file, the include tag is used as follows : 1 <include layout= \"@layout/content_main\" /> The line above include the contents of the layout -> content_main at that point in the layout file. The content_main defines a RelativeLayout as the parent layout with a TextView . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <?xml version=\"1.0\" encoding=\"utf-8\"?> <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" app:layout_behavior= \"@string/appbar_scrolling_view_behavior\" tools:showIn= \"@layout/activity_main\" > <TextView android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_centerInParent= \"true\" android:text= \"Hello World!\" /> </RelativeLayout> Lastly, the layout also include a FloatingActionButton which was added with the following code: 1 2 3 4 5 6 7 <android.support.design.widget.FloatingActionButton android:id= \"@+id/fab\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_gravity= \"bottom|end\" android:layout_margin= \"@dimen/fab_margin\" app:srcCompat= \"@android:drawable/ic_dialog_email\" />","title":"Main layout content"},{"location":"hello-xamarin-android/#summary","text":"In this chapter we've explored the default Xamarin.Android created by Visual Studio 2019. The project have a specific layout, includes the AndroidManifest.xml file, the MainActivity.cs and its associated layout files defined in the Resources folder. We've also created an Android emulator to run and test our apps.","title":"Summary"},{"location":"hello-xamarin-android/#exercise","text":"Using Visual Studio, create a new Xamarin.Android project. Add at least one view Run the project on the emulator Run the project on your physical Android phone","title":"Exercise"},{"location":"layouts/","text":"Android Layouts \u00b6 Overview \u00b6 View Layouts are a type of View class whose primary purpose is to organize and position other view controls. These layout classes (LinearLayout, RelativeLayout, etc.) are used to display child controls, such as text controls or buttons on the screen. Android activities (screens) use layouts as a container for view controls, and layouts can actually contain other nested layouts as well. Nearly all Android activities have layout containers similar to the way that most HTML documents use \"divs\" to contain other content. There are a few very commonly used layouts and then many more specialized layouts that are used in only very particular cases. The bread and butter layouts are LinearLayout , RelativeLayout , and FrameLayout . It's important to note the class hierarchy of these View Layouts. Each of them subclass ViewGroup , which itself subclasses View . That means it is perfectly legal to pass a layout such as LinearLayout as an argument for something that takes View as a parameter. ViewGroup also contains the nested static class LayoutParams which is used for creating or editing layouts in code. Keep in mind that each subclass of ViewGroup , such as LinearLayout , has its own nested static class LayoutParams that's a subclass of ViewGroup.LayoutParams . When creating View Layouts in code, beginners will often confuse the many different available LayoutParams classes and run into hard to catch problems. LinearLayout \u00b6 In a linear layout, like the name suggests, all the elements are displayed in a single direction either horizontally or vertically and this behavior is specified in android:orientation which is an attribute of the node LinearLayout . All children of a LinearLayout are displayed sequentially based on the order they are defined within the layout. A LinearLayout respects margins between children and the gravity (right, center, or left alignment) of each child. Common view attributes you might see used in a LinearLayout: android:gravity - Controls the alignment of the view content (akin to text-align in CSS) android:layout_gravity - Controls the alignment of the view within it's parent container (akin to float in CSS) android:layout_weight - Specifies how much of the extra space in the layout to be allocated to a view. Example of LinearLayout snippet: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"Email:\" /> <EditText android:hint= \"john.doe@domain.com\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:id= \"@+id/editText\" /> <Button android:text= \"Sign Up\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> </LinearLayout> Will produce something like the image below. Note that the android:orientation is set to vertical. Linear Layout Horizontal orientation \u00b6 We will group two buttons side by side using a linear layout in horizontal orientation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <Button android:text= \"Login\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> <Button android:text= \"Sign Up\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> </LinearLayout> And will produce something like the image below : Distribute Widths with Layout Weight \u00b6 To distribute the width in a linear layout we use the android:layout_weight property. We can also distribute the height using the same property. Lets make the buttons take equally the same space. Notice that the android:layout_width needs to be match_parent for both buttons and the android:layout_weight will be used to proportionally divide the space. And we can make the Login button take all the remaining space by just giving it the android:layout_weight=1 and wrap_content on the Sign Up button as per the picture below. If you want to setup a part of your layout, such that, for instance, 3 buttons appear in a row, occupying equal space (or if, for instance, you want to give 4/5 space to a map and 1/5 to another component below it), LinearLayout can be used to do the trick by leveraging android:layout_weight .This works by setting the android:weightSum to a total value and then setting the android:layout_weight value for each subview to determine width distribution. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <LinearLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:orientation= \"horizontal\" android:weightSum= \"5\" android:layout_alignParentBottom= \"true\" > <Button android:text= \"Login\" android:layout_width= \"0dp\" android:layout_weight= \"2\" android:layout_height= \"wrap_content\" android:layout_alignParentLeft= \"true\" /> <Button android:text= \"Sign Up\" android:layout_width= \"0dp\" android:layout_weight= \"3\" android:layout_height= \"wrap_content\" android:layout_alignParentRight= \"true\" /> </LinearLayout> </LinearLayout> {{< note title=\"Layout Performance\" >}} For performance, when using android:layout_weight , you should set the android:layout_width=0dp so that Android does not have to calculate the width as well since its already being calculated using android:layout_weight . {{< /note >}} Using the above XML, Login will have 2/5 of total container width and Sign Up will have 3/5 of parent width because we set the total android:weightSum to 5 and the buttons android:layout_weight property to 2 and 3 respectively. Use caution in utilizing multiple nested LinearLayout s and/or layout_weight from a performance standpoint! Gravity \u00b6 The android:layout_gravity is used to position the view within its parent. We can place the view to the left, right, start, bottom, center and so on. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"TO\" /> <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Subject\" /> <EditText android:layout_width= \"match_parent\" android:layout_height= \"0dp\" android:layout_weight= \"1\" android:gravity= \"top\" android:hint= \"Message\" /> <Button android:layout_width= \"100dp\" android:layout_height= \"wrap_content\" android:layout_gravity= \"right\" android:text= \"Send\" /> </LinearLayout> In the image below the android:layout_gravity property is used to place the Send button to the right : Nesting Layouts \u00b6 We can nest a LinearLayout inside another LinearLayout. For performance you should limit the nesting to only 2 levels. Excessive nesting reduces drawing performance. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <EditText android:hint= \"Username\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <EditText android:hint= \"Password\" android:inputType= \"textPassword\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <LinearLayout android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <Button android:layout_weight= \"1\" android:text= \"Login\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <Button android:text= \"Sign Up\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> </LinearLayout> </LinearLayout> Will look like the image below : RelativeLayout \u00b6 In a relative layout every element arranges itself relative to other elements or a parent element. RelativeLayout positions views based on a number of directional attributes: Position based on siblings: layout_above , layout_below , layout_toLeftOf , layout_toRightOf Position based on parent: android:layout_centerHorizontal , android:layout_centerVertical Alignment based on siblings: layout_alignTop , layout_alignBottom , layout_alignLeft , layout_alignRight , layout_alignBaseline Alignment based on parent: layout_alignParentTop , layout_alignParentBottom , layout_alignParentLeft , layout_alignParentRight An example of a RelativeLayout: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:id= \"@+id/label\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"Email\" /> <EditText android:hint= \"john.doe@example.com\" android:id= \"@+id/inputEmail\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/label\" /> <Button android:id= \"@+id/btnLogin\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/inputEmail\" android:layout_alignParentLeft= \"true\" android:layout_marginRight= \"5dp\" android:text= \"Login\" /> </RelativeLayout> Will have produce a layout as below : and another example of a Realtive Layout : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <?xml version=\"1.0\" encoding=\"utf-8\"?> <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:paddingLeft= \"16dp\" android:paddingRight= \"16dp\" > <EditText android:id= \"@+id/name\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Reminder name\" /> <Spinner android:entries= \"@array/dates\" android:id= \"@+id/dates\" android:layout_width= \"0dp\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/name\" android:layout_alignParentLeft= \"true\" android:layout_toLeftOf= \"@+id/times\" /> <Spinner android:entries= \"@array/times\" android:id= \"@id/times\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/name\" android:layout_alignParentRight= \"true\" /> <Button android:layout_width= \"96dp\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/times\" android:layout_alignParentRight= \"true\" android:text= \"Done\" /> </RelativeLayout> Note the spinner entries are defined in the arrays.xml file as follows : 1 2 3 4 5 6 7 8 9 <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string-array name= \"dates\" > <item> Thur, 23rd Feb 2017 </item> </string-array> <string-array name= \"times\" > <item> 3:25PM </item> </string-array> </resources> and will produce the image as below : Read this RelativeLayout tutorial for a more detailed overview. You can also see more about this layout by inspecting the RelativeLayout.LayoutParams docs and the official RelativeLayout guide . We can accomplish complicated layouts with the relative layout. In the following, we have put the circle on top of the other views, and also used negative margins to accomplish it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <?xml version=\"1.0\" encoding=\"utf-8\"?> <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <View android:id= \"@+id/box1\" android:background= \"#6b0c0c\" android:layout_width= \"match_parent\" android:layout_height= \"50dp\" /> <View android:layout_below= \"@+id/box1\" android:id= \"@+id/box2\" android:background= \"#18aaed\" android:layout_width= \"match_parent\" android:layout_height= \"50dp\" /> <View android:layout_marginRight= \"10dp\" android:layout_alignParentRight= \"true\" android:layout_marginBottom= \"-20dp\" android:layout_above= \"@+id/box2\" android:id= \"@+id/box3\" android:background= \"@drawable/bg\" android:layout_width= \"50dp\" android:layout_height= \"50dp\" /> </RelativeLayout> The background is a drawable resource, its created in the drawable folder . We will cover drawables in the styleing section. bg.xml 1 2 3 4 5 <?xml version=\"1.0\" encoding=\"utf-8\"?> <shape xmlns:android= \"http://schemas.android.com/apk/res/android\" android:shape= \"rectangle\" > <solid android:color= \"#bf14ae\" /> <corners android:radius= \"25sp\" /> </shape> Will produce the output as in the following picture : Using Alignment to Control Width or Height \u00b6 A less understood aspect of RelativeLayout is how the use of alignment can determine width or height. It may seem counterintuitive at first about how this works, so we'll walkthrough a few examples in this section. Using this approach is especially useful in matching the widths or heights relative to other elements. Example 1: How alignment can determine width \u00b6 Suppose we have two buttons of varying widths: The corresponding XML would be: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:paddingLeft= \"@dimen/activity_horizontal_margin\" android:paddingRight= \"@dimen/activity_horizontal_margin\" android:paddingTop= \"@dimen/activity_vertical_margin\" android:paddingBottom= \"@dimen/activity_vertical_margin\" tools:context= \".MainActivity\" > <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"1245678901234567890\" android:id= \"@+id/button1\" /> <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"CANCEL IT\" android:id= \"@+id/button2\" android:layout_below= \"@id/button1\" android:layout_alignLeft= \"@id/button1\" /> </RelativeLayout> Suppose we also specify that the second button should be aligned left and right to the first button. If we add android:layout_alignRight=\"@id/button1\" to the second button's XML style, the change causes the second button to expand the width to match that of the first button. In other words, the only way to meet the requirements of specifying alignment on both sides is to expand the width of the second button. In this way, when two elements are vertically positioned above or below the other, left and right alignments will control the width . When two elements are positioned horizontally next to each other, top and bottom alignments will control the height . We'll show how height can be impacted by specifying top and bottom alignments in the next example. Example 2: How alignment can determine height \u00b6 Suppose we have this layout definition: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:paddingLeft= \"@dimen/activity_horizontal_margin\" android:paddingRight= \"@dimen/activity_horizontal_margin\" android:paddingTop= \"@dimen/activity_vertical_margin\" android:paddingBottom= \"@dimen/activity_vertical_margin\" tools:context= \".MainActivity\" > <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:height= \"200dp\" android:text= \"1245678901234567890\" android:id= \"@+id/button1\" /> <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"CANCEL IT\" android:id= \"@+id/button2\" android:layout_toRightOf= \"@id/button1\" /> </RelativeLayout> The corresponding preview looks like: If we wish to match the height of the first button, we can specify layout_alignTop and layout_alignBottom on the second button. 1 2 3 4 5 6 7 8 <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_alignTop= \"@id/button1\" android:layout_alignBottom= \"@id/button1\" android:text= \"CANCEL IT\" android:id= \"@+id/button2\" android:layout_toRightOf= \"@id/button1\" /> The only way to fulfill this requirement is to expand the height of the second button as shown below: PercentRelativeLayout \u00b6 PercentRelativeLayout , a recent addition to the Design Support Library , enables the ability to specify not only elements relative to each other but also the total percentage of available space. In the past, in order to position two elements next to each other with equal height, you would normally have to create a LinearLayout within a RelativeLayout . PercentRelativeLayout helps solves this issue. The percent relative layout is available from Nuget. The layout_width and layout_height of the PercentRelativeLayout should determine the total width and height that can be used. Any elements contained within it should specify the width and height possible using layout_heightPercent and/or layout_widthPercent . Because this library is not part of the standard Android library, note that a custom attribute app namespace being used. An example of a layout used to describe the image above is shown below (taken from this sample code ): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <android.support.percent.PercentRelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <View android:id= \"@+id/top_left\" android:layout_width= \"0dp\" android:layout_height= \"0dp\" android:layout_alignParentTop= \"true\" android:background= \"#ff44aacc\" app:layout_heightPercent= \"20%\" app:layout_widthPercent= \"70%\" /> <View android:id= \"@+id/top_right\" android:layout_width= \"0dp\" android:layout_height= \"0dp\" android:layout_alignParentTop= \"true\" android:layout_toRightOf= \"@+id/top_left\" android:background= \"#ffe40000\" app:layout_heightPercent= \"20%\" app:layout_widthPercent= \"30%\" /> <View android:id= \"@+id/bottom\" android:layout_width= \"match_parent\" android:layout_height= \"0dp\" android:layout_below= \"@+id/top_left\" android:background= \"#ff00ff22\" app:layout_heightPercent= \"80%\" /> </android.support.percent.PercentRelativeLayout> Further samples include: https://github.com/JulienGenoud/android-percent-support-lib-sample https://github.com/lusfold/Android-Percent-Layout-Sample https://gist.github.com/vijaymakwana/e7fe04aaaa1cbaff8c6c98af1031e26a http://android-er.blogspot.com/2015/08/try-percentrelativelayout-and.html Margin Percentages \u00b6 The margins can also be set to a percentage of the total widths as well: app:layout_marginStartPercent app:layout_marginEndPercent app:layout_marginTopPercent app:layout_marginBottomPercent We can also define app:layout_marginPercent that will be to all four values above. Aspect Ratio \u00b6 Similar to how [[ImageView|Working-with-the-ImageView#sizing-imageview-controls|]]'s adjustViewBounds:true can be used to scale the image according to its aspect ratio, we can also use PercentRelativeLayout to define an aspect ratio for a layout. If one dimension is set to 0dp and no percent scaling is associated with it, setting a percentage on the app:layout_aspectRatio attribute can scale the other to meet the ratio: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 <android.support.percent.PercentRelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:background= \"#ff00ff22\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <!-- not using aspectRatio here --> <View android:id= \"@+id/view1\" android:background= \"#ff44aacc\" android:layout_width= \"300dp\" android:layout_height= \"wrap_content\" app:layout_heightPercent= \"50%\" /> <!-- using aspectRatio here --> <View android:layout_below= \"@id/view1\" android:background= \"#ffe40000\" android:layout_width= \"300dp\" android:layout_height= \"0dp\" app:layout_aspectRatio= \"160%\" /> </android.support.percent.PercentRelativeLayout> The resulting layout appears as follows: FrameLayout \u00b6 In a frame layout, the children are displayed with a z-index in the order of how they appear. Put simply, the last child added to a FrameLayout will be drawn on top of all the previous children. Think of it like a stack of items, the item last put on the stack will be drawn on top of the items below it. This layout makes it very easy to draw on top of other layouts, especially for tasks such as button placement. To arrange the children inside of a FrameLayout use the android:layout_gravity attribute along with whatever android:padding and android:margin you need. Example of FrameLayout snippet: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <FrameLayout android:id= \"@+id/frame_layout\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <!-- Child1 is drawn first --> <ImageView android:id= \"@+id/child1\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:contentDescription= \"Image\" android:src= \"@drawable/icon\" /> <!-- Child2 is drawn over Child1 --> <TextView android:id= \"@+id/child2\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Child 2\" android:layout_gravity= \"top|left\" /> <!-- Child3 is drawn over Child1 and Child2 --> <TextView android:id= \"@+id/child3\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Child 3\" android:layout_gravity= \"top|right\" /> </FrameLayout> In this example, an ImageView is set to the full size of the FrameLayout . We then draw two TextView 's over it. Understanding View Layers \u00b6 Layering Introduction \u00b6 You may notice that when two views overlap on screen, that one view will become hidden behind the other. Views are drawn in layers by default based on the order they appear in the XML . In other words, the view at the bottom of a container is drawn on screen last covering all previously drawn views. This is described in the official view docs and in the How Android Draws guide with: The tree is largely recorded and drawn in order, with parents drawn before (i.e., behind) their children, with siblings drawn in the order they appear in the tree. If you set a background drawable for a View, then the View will draw it before calling back to its onDraw() method. The child drawing order can be overridden with custom child drawing order in a ViewGroup, and with setZ(float) custom Z values} set on Views. In other words, the easiest way to layer is to pay close attention to the order in which the Views are added to your XML file within their container. Lower down in the file means higher up in the Z-axis . Elevation \u00b6 In Android starting from API level 21, items in the layout file get their Z-order both from how they are ordered within the file as well as from their \"elevation\" with a higher elevation value meaning the item gets a higher Z order. The value of android:elevation must be a dimension value such as 10dp . We can also use the translationZ property to provide the same effect. Read more about elevation here on the official guide . Overlapping Two Views \u00b6 If we want to overlap two views on top of each other, we can do so using either a RelativeLayout or a FrameLayout . Suppose we have two images: a background image and a foreground image and we want to place them on top of one another. The code for this can be achieved with a RelativeLayout such as shown below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <RelativeLayout android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" > <!-- Back view should be first to be drawn first! --> <ImageView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:adjustViewBounds= \"true\" android:scaleType= \"fitXY\" android:src= \"@drawable/back_image_beach\" /> <!-- Front view should be last to be drawn on top! --> <!-- Use `centerInParent` to center the image in the container --> <!-- Use `elevation` to ensure placement on top (not required) --> <ImageView android:layout_width= \"250dp\" android:layout_height= \"wrap_content\" android:adjustViewBounds= \"true\" android:elevation= \"10dp\" android:layout_centerInParent= \"true\" android:scaleType= \"fitXY\" android:src= \"@drawable/airbnb_logo_front\" /> </RelativeLayout> This results in the following: Forcing View to the Front \u00b6 We can force a view to the front of the stack to become visible using: 1 2 myView . bringToFront (); myView . invalidate (); Note: You must be sure to call bringToFront() and invalidate() method on the highest-level view under your root view. See a more detailed example here . With these methods outlined above, we can easily control the draw order of our views. Optimizing Layout Performance \u00b6 To optimize layout performance, minimize the number of instantiated layouts and especially minimize deep nested layouts whenever possible. This is why you should generally use a RelativeLayout whenever possible instead of nested LinearLayout . A few layout tips are included below: Using nested instances of LinearLayout can lead to an excessively deep view hierarchy and can be quite expensive especially expensive as each child needs to be measured twice. This is particularly important when the layout is inflated repeatedly such as in a list. Layout performance slows down due to a nested LinearLayout and the performance can be improved by flattening the layout, making the layout shallow and wide rather than narrow and deep. A RelativeLayout as the root node allows for such layouts. So, when this design is converted to use RelativeLayout , the view hierarchy can be flattened significantly. Sometimes your layout might require complex views that are rarely used. Whether they are item details, progress indicators, or undo messages, you can reduce memory usage and speed up rendering by loading the views only when they are needed . Review the following references for more detail on optimizing your view hierarchy: Optimizing Layouts Android Layout Tricks Layout Optimization This is just the beginning. Refer to our [[profiling apps guide|Debugging-and-Profiling-Apps]] for more resources. References \u00b6 http://developer.android.com/guide/topics/ui/declaring-layout.html http://developer.android.com/guide/topics/ui/layout/linear.html http://developer.android.com/guide/topics/ui/layout/relative.html http://www.learn-android.com/2010/01/05/android-layout-tutorial/ http://mobile.tutsplus.com/tutorials/android/android-layout/ http://www.androidhive.info/2011/07/android-layouts-linear-layout-relative-layout-and-table-layout/ http://logc.at/2011/10/18/when-to-use-linearlayout-vs-relativelayout/ http://developer.android.com/reference/android/widget/FrameLayout.html https://plus.google.com/+AndroidDevelopers/posts/C8oaLunpEEj","title":"Layouts"},{"location":"layouts/#android-layouts","text":"","title":"Android Layouts"},{"location":"layouts/#overview","text":"View Layouts are a type of View class whose primary purpose is to organize and position other view controls. These layout classes (LinearLayout, RelativeLayout, etc.) are used to display child controls, such as text controls or buttons on the screen. Android activities (screens) use layouts as a container for view controls, and layouts can actually contain other nested layouts as well. Nearly all Android activities have layout containers similar to the way that most HTML documents use \"divs\" to contain other content. There are a few very commonly used layouts and then many more specialized layouts that are used in only very particular cases. The bread and butter layouts are LinearLayout , RelativeLayout , and FrameLayout . It's important to note the class hierarchy of these View Layouts. Each of them subclass ViewGroup , which itself subclasses View . That means it is perfectly legal to pass a layout such as LinearLayout as an argument for something that takes View as a parameter. ViewGroup also contains the nested static class LayoutParams which is used for creating or editing layouts in code. Keep in mind that each subclass of ViewGroup , such as LinearLayout , has its own nested static class LayoutParams that's a subclass of ViewGroup.LayoutParams . When creating View Layouts in code, beginners will often confuse the many different available LayoutParams classes and run into hard to catch problems.","title":"Overview"},{"location":"layouts/#linearlayout","text":"In a linear layout, like the name suggests, all the elements are displayed in a single direction either horizontally or vertically and this behavior is specified in android:orientation which is an attribute of the node LinearLayout . All children of a LinearLayout are displayed sequentially based on the order they are defined within the layout. A LinearLayout respects margins between children and the gravity (right, center, or left alignment) of each child. Common view attributes you might see used in a LinearLayout: android:gravity - Controls the alignment of the view content (akin to text-align in CSS) android:layout_gravity - Controls the alignment of the view within it's parent container (akin to float in CSS) android:layout_weight - Specifies how much of the extra space in the layout to be allocated to a view. Example of LinearLayout snippet: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"Email:\" /> <EditText android:hint= \"john.doe@domain.com\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:id= \"@+id/editText\" /> <Button android:text= \"Sign Up\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> </LinearLayout> Will produce something like the image below. Note that the android:orientation is set to vertical.","title":"LinearLayout"},{"location":"layouts/#linear-layout-horizontal-orientation","text":"We will group two buttons side by side using a linear layout in horizontal orientation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <Button android:text= \"Login\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> <Button android:text= \"Sign Up\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> </LinearLayout> And will produce something like the image below :","title":"Linear Layout Horizontal orientation"},{"location":"layouts/#distribute-widths-with-layout-weight","text":"To distribute the width in a linear layout we use the android:layout_weight property. We can also distribute the height using the same property. Lets make the buttons take equally the same space. Notice that the android:layout_width needs to be match_parent for both buttons and the android:layout_weight will be used to proportionally divide the space. And we can make the Login button take all the remaining space by just giving it the android:layout_weight=1 and wrap_content on the Sign Up button as per the picture below. If you want to setup a part of your layout, such that, for instance, 3 buttons appear in a row, occupying equal space (or if, for instance, you want to give 4/5 space to a map and 1/5 to another component below it), LinearLayout can be used to do the trick by leveraging android:layout_weight .This works by setting the android:weightSum to a total value and then setting the android:layout_weight value for each subview to determine width distribution. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <LinearLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:orientation= \"horizontal\" android:weightSum= \"5\" android:layout_alignParentBottom= \"true\" > <Button android:text= \"Login\" android:layout_width= \"0dp\" android:layout_weight= \"2\" android:layout_height= \"wrap_content\" android:layout_alignParentLeft= \"true\" /> <Button android:text= \"Sign Up\" android:layout_width= \"0dp\" android:layout_weight= \"3\" android:layout_height= \"wrap_content\" android:layout_alignParentRight= \"true\" /> </LinearLayout> </LinearLayout> {{< note title=\"Layout Performance\" >}} For performance, when using android:layout_weight , you should set the android:layout_width=0dp so that Android does not have to calculate the width as well since its already being calculated using android:layout_weight . {{< /note >}} Using the above XML, Login will have 2/5 of total container width and Sign Up will have 3/5 of parent width because we set the total android:weightSum to 5 and the buttons android:layout_weight property to 2 and 3 respectively. Use caution in utilizing multiple nested LinearLayout s and/or layout_weight from a performance standpoint!","title":"Distribute Widths with Layout Weight"},{"location":"layouts/#gravity","text":"The android:layout_gravity is used to position the view within its parent. We can place the view to the left, right, start, bottom, center and so on. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"TO\" /> <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Subject\" /> <EditText android:layout_width= \"match_parent\" android:layout_height= \"0dp\" android:layout_weight= \"1\" android:gravity= \"top\" android:hint= \"Message\" /> <Button android:layout_width= \"100dp\" android:layout_height= \"wrap_content\" android:layout_gravity= \"right\" android:text= \"Send\" /> </LinearLayout> In the image below the android:layout_gravity property is used to place the Send button to the right :","title":"Gravity"},{"location":"layouts/#nesting-layouts","text":"We can nest a LinearLayout inside another LinearLayout. For performance you should limit the nesting to only 2 levels. Excessive nesting reduces drawing performance. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <EditText android:hint= \"Username\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <EditText android:hint= \"Password\" android:inputType= \"textPassword\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <LinearLayout android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <Button android:layout_weight= \"1\" android:text= \"Login\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <Button android:text= \"Sign Up\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> </LinearLayout> </LinearLayout> Will look like the image below :","title":"Nesting Layouts"},{"location":"layouts/#relativelayout","text":"In a relative layout every element arranges itself relative to other elements or a parent element. RelativeLayout positions views based on a number of directional attributes: Position based on siblings: layout_above , layout_below , layout_toLeftOf , layout_toRightOf Position based on parent: android:layout_centerHorizontal , android:layout_centerVertical Alignment based on siblings: layout_alignTop , layout_alignBottom , layout_alignLeft , layout_alignRight , layout_alignBaseline Alignment based on parent: layout_alignParentTop , layout_alignParentBottom , layout_alignParentLeft , layout_alignParentRight An example of a RelativeLayout: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:id= \"@+id/label\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"Email\" /> <EditText android:hint= \"john.doe@example.com\" android:id= \"@+id/inputEmail\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/label\" /> <Button android:id= \"@+id/btnLogin\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/inputEmail\" android:layout_alignParentLeft= \"true\" android:layout_marginRight= \"5dp\" android:text= \"Login\" /> </RelativeLayout> Will have produce a layout as below : and another example of a Realtive Layout : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <?xml version=\"1.0\" encoding=\"utf-8\"?> <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:paddingLeft= \"16dp\" android:paddingRight= \"16dp\" > <EditText android:id= \"@+id/name\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Reminder name\" /> <Spinner android:entries= \"@array/dates\" android:id= \"@+id/dates\" android:layout_width= \"0dp\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/name\" android:layout_alignParentLeft= \"true\" android:layout_toLeftOf= \"@+id/times\" /> <Spinner android:entries= \"@array/times\" android:id= \"@id/times\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/name\" android:layout_alignParentRight= \"true\" /> <Button android:layout_width= \"96dp\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/times\" android:layout_alignParentRight= \"true\" android:text= \"Done\" /> </RelativeLayout> Note the spinner entries are defined in the arrays.xml file as follows : 1 2 3 4 5 6 7 8 9 <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string-array name= \"dates\" > <item> Thur, 23rd Feb 2017 </item> </string-array> <string-array name= \"times\" > <item> 3:25PM </item> </string-array> </resources> and will produce the image as below : Read this RelativeLayout tutorial for a more detailed overview. You can also see more about this layout by inspecting the RelativeLayout.LayoutParams docs and the official RelativeLayout guide . We can accomplish complicated layouts with the relative layout. In the following, we have put the circle on top of the other views, and also used negative margins to accomplish it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <?xml version=\"1.0\" encoding=\"utf-8\"?> <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <View android:id= \"@+id/box1\" android:background= \"#6b0c0c\" android:layout_width= \"match_parent\" android:layout_height= \"50dp\" /> <View android:layout_below= \"@+id/box1\" android:id= \"@+id/box2\" android:background= \"#18aaed\" android:layout_width= \"match_parent\" android:layout_height= \"50dp\" /> <View android:layout_marginRight= \"10dp\" android:layout_alignParentRight= \"true\" android:layout_marginBottom= \"-20dp\" android:layout_above= \"@+id/box2\" android:id= \"@+id/box3\" android:background= \"@drawable/bg\" android:layout_width= \"50dp\" android:layout_height= \"50dp\" /> </RelativeLayout> The background is a drawable resource, its created in the drawable folder . We will cover drawables in the styleing section. bg.xml 1 2 3 4 5 <?xml version=\"1.0\" encoding=\"utf-8\"?> <shape xmlns:android= \"http://schemas.android.com/apk/res/android\" android:shape= \"rectangle\" > <solid android:color= \"#bf14ae\" /> <corners android:radius= \"25sp\" /> </shape> Will produce the output as in the following picture :","title":"RelativeLayout"},{"location":"layouts/#using-alignment-to-control-width-or-height","text":"A less understood aspect of RelativeLayout is how the use of alignment can determine width or height. It may seem counterintuitive at first about how this works, so we'll walkthrough a few examples in this section. Using this approach is especially useful in matching the widths or heights relative to other elements.","title":"Using Alignment to Control Width or Height"},{"location":"layouts/#example-1-how-alignment-can-determine-width","text":"Suppose we have two buttons of varying widths: The corresponding XML would be: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:paddingLeft= \"@dimen/activity_horizontal_margin\" android:paddingRight= \"@dimen/activity_horizontal_margin\" android:paddingTop= \"@dimen/activity_vertical_margin\" android:paddingBottom= \"@dimen/activity_vertical_margin\" tools:context= \".MainActivity\" > <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"1245678901234567890\" android:id= \"@+id/button1\" /> <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"CANCEL IT\" android:id= \"@+id/button2\" android:layout_below= \"@id/button1\" android:layout_alignLeft= \"@id/button1\" /> </RelativeLayout> Suppose we also specify that the second button should be aligned left and right to the first button. If we add android:layout_alignRight=\"@id/button1\" to the second button's XML style, the change causes the second button to expand the width to match that of the first button. In other words, the only way to meet the requirements of specifying alignment on both sides is to expand the width of the second button. In this way, when two elements are vertically positioned above or below the other, left and right alignments will control the width . When two elements are positioned horizontally next to each other, top and bottom alignments will control the height . We'll show how height can be impacted by specifying top and bottom alignments in the next example.","title":"Example 1: How alignment can determine width"},{"location":"layouts/#example-2-how-alignment-can-determine-height","text":"Suppose we have this layout definition: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:paddingLeft= \"@dimen/activity_horizontal_margin\" android:paddingRight= \"@dimen/activity_horizontal_margin\" android:paddingTop= \"@dimen/activity_vertical_margin\" android:paddingBottom= \"@dimen/activity_vertical_margin\" tools:context= \".MainActivity\" > <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:height= \"200dp\" android:text= \"1245678901234567890\" android:id= \"@+id/button1\" /> <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"CANCEL IT\" android:id= \"@+id/button2\" android:layout_toRightOf= \"@id/button1\" /> </RelativeLayout> The corresponding preview looks like: If we wish to match the height of the first button, we can specify layout_alignTop and layout_alignBottom on the second button. 1 2 3 4 5 6 7 8 <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_alignTop= \"@id/button1\" android:layout_alignBottom= \"@id/button1\" android:text= \"CANCEL IT\" android:id= \"@+id/button2\" android:layout_toRightOf= \"@id/button1\" /> The only way to fulfill this requirement is to expand the height of the second button as shown below:","title":"Example 2: How alignment can determine height"},{"location":"layouts/#percentrelativelayout","text":"PercentRelativeLayout , a recent addition to the Design Support Library , enables the ability to specify not only elements relative to each other but also the total percentage of available space. In the past, in order to position two elements next to each other with equal height, you would normally have to create a LinearLayout within a RelativeLayout . PercentRelativeLayout helps solves this issue. The percent relative layout is available from Nuget. The layout_width and layout_height of the PercentRelativeLayout should determine the total width and height that can be used. Any elements contained within it should specify the width and height possible using layout_heightPercent and/or layout_widthPercent . Because this library is not part of the standard Android library, note that a custom attribute app namespace being used. An example of a layout used to describe the image above is shown below (taken from this sample code ): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <android.support.percent.PercentRelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <View android:id= \"@+id/top_left\" android:layout_width= \"0dp\" android:layout_height= \"0dp\" android:layout_alignParentTop= \"true\" android:background= \"#ff44aacc\" app:layout_heightPercent= \"20%\" app:layout_widthPercent= \"70%\" /> <View android:id= \"@+id/top_right\" android:layout_width= \"0dp\" android:layout_height= \"0dp\" android:layout_alignParentTop= \"true\" android:layout_toRightOf= \"@+id/top_left\" android:background= \"#ffe40000\" app:layout_heightPercent= \"20%\" app:layout_widthPercent= \"30%\" /> <View android:id= \"@+id/bottom\" android:layout_width= \"match_parent\" android:layout_height= \"0dp\" android:layout_below= \"@+id/top_left\" android:background= \"#ff00ff22\" app:layout_heightPercent= \"80%\" /> </android.support.percent.PercentRelativeLayout> Further samples include: https://github.com/JulienGenoud/android-percent-support-lib-sample https://github.com/lusfold/Android-Percent-Layout-Sample https://gist.github.com/vijaymakwana/e7fe04aaaa1cbaff8c6c98af1031e26a http://android-er.blogspot.com/2015/08/try-percentrelativelayout-and.html","title":"PercentRelativeLayout"},{"location":"layouts/#margin-percentages","text":"The margins can also be set to a percentage of the total widths as well: app:layout_marginStartPercent app:layout_marginEndPercent app:layout_marginTopPercent app:layout_marginBottomPercent We can also define app:layout_marginPercent that will be to all four values above.","title":"Margin Percentages"},{"location":"layouts/#aspect-ratio","text":"Similar to how [[ImageView|Working-with-the-ImageView#sizing-imageview-controls|]]'s adjustViewBounds:true can be used to scale the image according to its aspect ratio, we can also use PercentRelativeLayout to define an aspect ratio for a layout. If one dimension is set to 0dp and no percent scaling is associated with it, setting a percentage on the app:layout_aspectRatio attribute can scale the other to meet the ratio: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 <android.support.percent.PercentRelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:background= \"#ff00ff22\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <!-- not using aspectRatio here --> <View android:id= \"@+id/view1\" android:background= \"#ff44aacc\" android:layout_width= \"300dp\" android:layout_height= \"wrap_content\" app:layout_heightPercent= \"50%\" /> <!-- using aspectRatio here --> <View android:layout_below= \"@id/view1\" android:background= \"#ffe40000\" android:layout_width= \"300dp\" android:layout_height= \"0dp\" app:layout_aspectRatio= \"160%\" /> </android.support.percent.PercentRelativeLayout> The resulting layout appears as follows:","title":"Aspect Ratio"},{"location":"layouts/#framelayout","text":"In a frame layout, the children are displayed with a z-index in the order of how they appear. Put simply, the last child added to a FrameLayout will be drawn on top of all the previous children. Think of it like a stack of items, the item last put on the stack will be drawn on top of the items below it. This layout makes it very easy to draw on top of other layouts, especially for tasks such as button placement. To arrange the children inside of a FrameLayout use the android:layout_gravity attribute along with whatever android:padding and android:margin you need. Example of FrameLayout snippet: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <FrameLayout android:id= \"@+id/frame_layout\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <!-- Child1 is drawn first --> <ImageView android:id= \"@+id/child1\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:contentDescription= \"Image\" android:src= \"@drawable/icon\" /> <!-- Child2 is drawn over Child1 --> <TextView android:id= \"@+id/child2\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Child 2\" android:layout_gravity= \"top|left\" /> <!-- Child3 is drawn over Child1 and Child2 --> <TextView android:id= \"@+id/child3\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Child 3\" android:layout_gravity= \"top|right\" /> </FrameLayout> In this example, an ImageView is set to the full size of the FrameLayout . We then draw two TextView 's over it.","title":"FrameLayout"},{"location":"layouts/#understanding-view-layers","text":"","title":"Understanding View Layers"},{"location":"layouts/#layering-introduction","text":"You may notice that when two views overlap on screen, that one view will become hidden behind the other. Views are drawn in layers by default based on the order they appear in the XML . In other words, the view at the bottom of a container is drawn on screen last covering all previously drawn views. This is described in the official view docs and in the How Android Draws guide with: The tree is largely recorded and drawn in order, with parents drawn before (i.e., behind) their children, with siblings drawn in the order they appear in the tree. If you set a background drawable for a View, then the View will draw it before calling back to its onDraw() method. The child drawing order can be overridden with custom child drawing order in a ViewGroup, and with setZ(float) custom Z values} set on Views. In other words, the easiest way to layer is to pay close attention to the order in which the Views are added to your XML file within their container. Lower down in the file means higher up in the Z-axis .","title":"Layering Introduction"},{"location":"layouts/#elevation","text":"In Android starting from API level 21, items in the layout file get their Z-order both from how they are ordered within the file as well as from their \"elevation\" with a higher elevation value meaning the item gets a higher Z order. The value of android:elevation must be a dimension value such as 10dp . We can also use the translationZ property to provide the same effect. Read more about elevation here on the official guide .","title":"Elevation"},{"location":"layouts/#overlapping-two-views","text":"If we want to overlap two views on top of each other, we can do so using either a RelativeLayout or a FrameLayout . Suppose we have two images: a background image and a foreground image and we want to place them on top of one another. The code for this can be achieved with a RelativeLayout such as shown below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <RelativeLayout android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" > <!-- Back view should be first to be drawn first! --> <ImageView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:adjustViewBounds= \"true\" android:scaleType= \"fitXY\" android:src= \"@drawable/back_image_beach\" /> <!-- Front view should be last to be drawn on top! --> <!-- Use `centerInParent` to center the image in the container --> <!-- Use `elevation` to ensure placement on top (not required) --> <ImageView android:layout_width= \"250dp\" android:layout_height= \"wrap_content\" android:adjustViewBounds= \"true\" android:elevation= \"10dp\" android:layout_centerInParent= \"true\" android:scaleType= \"fitXY\" android:src= \"@drawable/airbnb_logo_front\" /> </RelativeLayout> This results in the following:","title":"Overlapping Two Views"},{"location":"layouts/#forcing-view-to-the-front","text":"We can force a view to the front of the stack to become visible using: 1 2 myView . bringToFront (); myView . invalidate (); Note: You must be sure to call bringToFront() and invalidate() method on the highest-level view under your root view. See a more detailed example here . With these methods outlined above, we can easily control the draw order of our views.","title":"Forcing View to the Front"},{"location":"layouts/#optimizing-layout-performance","text":"To optimize layout performance, minimize the number of instantiated layouts and especially minimize deep nested layouts whenever possible. This is why you should generally use a RelativeLayout whenever possible instead of nested LinearLayout . A few layout tips are included below: Using nested instances of LinearLayout can lead to an excessively deep view hierarchy and can be quite expensive especially expensive as each child needs to be measured twice. This is particularly important when the layout is inflated repeatedly such as in a list. Layout performance slows down due to a nested LinearLayout and the performance can be improved by flattening the layout, making the layout shallow and wide rather than narrow and deep. A RelativeLayout as the root node allows for such layouts. So, when this design is converted to use RelativeLayout , the view hierarchy can be flattened significantly. Sometimes your layout might require complex views that are rarely used. Whether they are item details, progress indicators, or undo messages, you can reduce memory usage and speed up rendering by loading the views only when they are needed . Review the following references for more detail on optimizing your view hierarchy: Optimizing Layouts Android Layout Tricks Layout Optimization This is just the beginning. Refer to our [[profiling apps guide|Debugging-and-Profiling-Apps]] for more resources.","title":"Optimizing Layout Performance"},{"location":"layouts/#references","text":"http://developer.android.com/guide/topics/ui/declaring-layout.html http://developer.android.com/guide/topics/ui/layout/linear.html http://developer.android.com/guide/topics/ui/layout/relative.html http://www.learn-android.com/2010/01/05/android-layout-tutorial/ http://mobile.tutsplus.com/tutorials/android/android-layout/ http://www.androidhive.info/2011/07/android-layouts-linear-layout-relative-layout-and-table-layout/ http://logc.at/2011/10/18/when-to-use-linearlayout-vs-relativelayout/ http://developer.android.com/reference/android/widget/FrameLayout.html https://plus.google.com/+AndroidDevelopers/posts/C8oaLunpEEj","title":"References"},{"location":"maps-and-location/","text":"Maps and Location in Android \u00b6","title":"Maps and Location"},{"location":"maps-and-location/#maps-and-location-in-android","text":"","title":"Maps and Location in Android"},{"location":"menus/","text":"Android Menus \u00b6 In this section you will learn about the Android menus. A menu provides a set of options. A user can select from a menu to perform a function, for example saving, deleting, searching or navigating to another screen. Types of menus \u00b6 They are different types of menus : Options menu : Appears in the app bar and provides the primary options that affect use of the app itself Contextual menu : Appears as a floating list of choices when the user performs a long tap on an element on the screen. Contextual action bar : Appears at the top of the screen overlaying the app bar, with action items that affect the selected element or elements. Popup menu : Appears anchored to a View such as an ImageButton, and provides an overflow of actions or the second part of a two-part command. The app bar and options menu \u00b6 The app bar (also called the action bar) is a dedicated space at the top of each Activity screen. The app bar by default shows the app title, or the name defined in AndroidManifest.xml by the android:label attribute for the Activity . The app bar may also include the Up button for navigating up to the parent activity. The options menu in the app bar usually provides navigation to other screens in the app, or options that affect using the app itself. The options menu appears to thr right. In the figure above: Navigation button or Up butto n: Use a navigation button in this space to open a navigation drawer, or use an Up button for navigating up through your app's screen hierarchy to the parent activity. Both are described in the next chapter. Title : The title in the app bar is the app title, or the name defined in AndroidManifest.xml by the android:label attribute for the activity. Action icons for the options menu : Each action icon appears in the app bar and represents one of the options menu's most frequently used items. Less frequently used options menu items appear in the overflow options menu. Overflow options menu : The overflow icon opens a popup with option menu items that are not shown as icons in the app bar. Frequently used options menu items should appear as icons in the app bar. The overflow options menu shows the rest of the menu: In the above figure: App bar : The app bar includes the app title, the options menu, and the overflow button. Options menu action icons : The first two options menu items appear as icons in the app bar. Overflow button : The overflow button (three vertical dots) opens a menu that shows more options menu items. Options overflow menu : After clicking the overflow button, more options menu items appear in the overflow menu. Adding the app bar \u00b6 Each activity that uses the default theme also has an ActionBar as its app bar. Some themes also set up an ActionBar as an app bar by default. The ActionBar behaves differently with each version of Android. We are going to instead use the Toolbar because: Toolbar makes it easy to set up an app bar that works on a wide range of devices. Toolbar gives you room to customize your app bar later, as your app develops. Toolbar includes the most recent features, and it works for any device that can use the support library. The Toolbar comes from the v7 appcompat To add the Toolbar, you should have the v7 appcompat and support design libraries. This is already included in the app made from the default Android app project template. Here are the steps to add the Toolbar : Add the support libraries appcompat and design Use a NoActionBar theme and styles for the app bar and background. Add an AppBarLayout and a Toolbar to the layout. Add code to the Activity to set up the app bar. Adding the support libraries \u00b6 Open the Nuget manager Search for Xamarin.Android.Support Add the Xamarin.Android.Supportv7.AppCompat and Xamarin.Android.Support.Design librarues The above shows the screen from the Visual Stuio 2019 for Mac. Install Current Versions You should install the current versions of the support libraries. You might need to open the SDK Manager screen to update to the current versions of the support libraries. Adding the theme \u00b6 Open the styles.xml filed from Resources -> values -> styles.xml. If the file does not exist, create one. Add the theme with the name AppTheme.NoActionBar The styles.xml should already have a theme AppTheme defined as follows : 1 2 3 4 5 6 <style name= \"AppTheme\" parent= \"Theme.AppCompat.Light.DarkActionBar\" > <!-- Customize your theme here. --> <item name= \"colorPrimary\" > @color/colorPrimary </item> <item name= \"colorPrimaryDark\" > @color/colorPrimaryDark </item> <item name= \"colorAccent\" > @color/colorAccent </item> </style> AppTheme inherits the default Android theme AppTheme \"inherits\"\u2014takes on all the styles\u2014from a parent theme called Theme.AppCompat.Light.DarkActionBar , which is a standard theme supplied with Android. 1 2 3 4 <style name= \"AppTheme.NoActionBar\" > <item name= \"windowActionBar\" > false </item> <item name= \"windowNoTitle\" > true </item> </style> also add the theme with name AppTheme.AppBarOverlay , the theme for the AppBarLayout as follows : 1 2 3 <style name= \"AppTheme.AppBarOverlay\" parent= \"ThemeOverlay.AppCompat.Dark.ActionBar\" /> and lastly the theme for the Toolbar : 1 2 3 <style name= \"AppTheme.PopupOverlay\" parent= \"ThemeOverlay.AppCompat.Light\" /> Theme naming By using prefixing the name with AppTheme , this overrides the styles attributes already defined in the style with name AppTheme . So the AppTheme.NoActionBar will override the styles defined in the AppTheme and add the new style attributes windowActionBar and windowNoTitle . This is similar to how CSS works in the websites. The complete styles.xml should now be as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <resources> <!-- Base application theme. --> <style name= \"AppTheme\" parent= \"Theme.AppCompat.Light.DarkActionBar\" > <!-- Customize your theme here. --> <item name= \"colorPrimary\" > @color/colorPrimary </item> <item name= \"colorPrimaryDark\" > @color/colorPrimaryDark </item> <item name= \"colorAccent\" > @color/colorAccent </item> </style> <style name= \"AppTheme.NoActionBar\" > <item name= \"windowActionBar\" > false </item> <item name= \"windowNoTitle\" > true </item> </style> <style name= \"AppTheme.AppBarOverlay\" parent= \"ThemeOverlay.AppCompat.Dark.ActionBar\" /> <style name= \"AppTheme.PopupOverlay\" parent= \"ThemeOverlay.AppCompat.Light\" /> </resources> Adding the AppBarLayout and a Toolbar \u00b6 When adding the AppBarLayout , it needs to be a child of the CoordinatorLayout and the Toolbar must be a direct child of the AppBarLayout as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.design.widget.CoordinatorLayout xmlns:app= \"http://schemas.android.com/apk/res-auto\" ... > <android.support.design.widget.AppBarLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:theme= \"@style/AppTheme.AppBarOverlay\" > <android.support.v7.widget.Toolbar android:id= \"@+id/toolbar\" android:layout_width= \"match_parent\" android:layout_height= \"?attr/actionBarSize\" android:background= \"?attr/colorPrimary\" app:popupTheme= \"@style/AppTheme.PopupOverlay\" /> </android.support.design.widget.AppBarLayout> </android.support.design.widget.CoordinatorLayout> AppBarLayout also requires a separate content layout sibling for the content that scrolls underneath the app bar. You can add this sibling as a view group (such as RelativeLayout or LinearLayout ) in the same layout file, or in a separate layout file. You can include the layout as follows: 1 <include layout= \"@layout/content_main\" /> or define the layout directly without using the include . Set the content sibling's view group to use the scrolling behavior AppBarLayout.ScrollingViewBehavior: 1 app:layout_behavior=\"@string/appbar_scrolling_view_behavior\" The layout behavior for the RelativeLayout is set to the string resource @string/appbar_scrolling_view_behavior . This string resource controls how the screen scrolls in relation to the app bar at the top. The resource represents the following string, which is defined in the values.xml file (which you should not modify): android.support.design.widget.AppBarLayout$ScrollingViewBehavior . This behavior is defined by the AppBarLayout.ScrollingViewBehavior class. Any View or view group that can scroll vertically to support nested scrolling for AppBarLayout siblings should use this behavior. Add code to setup the app bar \u00b6 The Activity should inherit from AppCompatActivity in order to use the app bar: 1 2 3 public class MainActivity : AppCompatActivity { ... } In the OnCreate method call SetSupportActionBar with the toolbar as the parameter: 1 2 3 4 5 6 7 8 9 protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); Xamarin . Essentials . Platform . Init ( this , savedInstanceState ); SetContentView ( Resource . Layout . activity_main ); Android . Support . V7 . Widget . Toolbar toolbar = FindViewById < Android . Support . V7 . Widget . Toolbar >( Resource . Id . toolbar ); SetSupportActionBar ( toolbar ); } There are multiple Toolbar classes When using the Toolbar, make sure you are using the Toolbar from Android.Support.V7.Widget.Toolbar . There's also a Toolbar class defined in Android.Widget.Toolbar . The Activity should now show the Toolbar . By default, the app name will be displayed. Adding the options menu \u00b6 The options menu is defined using XML. The menu resource file should live in the Resources -> menu folder. The menu resources defines the menu for options menu, context menu or popup menu. The MenuInflater class is used to inflate the menu resource file and load it into the Menu . Create the XML file in the Resources -> menu folder. 1 2 3 4 5 6 7 8 9 10 <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" > <item android:id= \"@+id/action_settings\" android:orderInCategory= \"100\" android:title= \"@string/action_settings\" app:showAsAction= \"never\" /> </menu> Inflate the menu in the OnCreateOptionsMenu method 1 2 3 4 5 public override bool OnCreateOptionsMenu ( IMenu menu ) { MenuInflater . Inflate ( Resource . Menu . menu_main , menu ); return true ; } Handle the menu item click in the OnOptionsItemSelected method: 1 2 3 4 5 6 7 8 9 10 public override bool OnOptionsItemSelected ( IMenuItem item ) { int id = item . ItemId ; if ( id == Resource . Id . action_settings ) { return true ; } return base . OnOptionsItemSelected ( item ); } Defining how the menu appears \u00b6 To add additional menu items, add them using the <item .../> tag. A menu item requires an android:id and a android:title or android:icon . When they are multiple menu items, you can also specify how they are ordered using android:orderInCategory . The higher the number, the further menu item is. To show the menu in the overflow menu, use the app:showAsAction=\"never\" . Valid values for the showAsAction are: always - Always place this item in the app bar ifRoom - Only place this item in the app bar if there is room for it never - Never place this item in the app bar. Instead, list the item in the app bar's overflow menu. withText - Also include the title text (defined by android:title) with the item. For example, the following menu item's icon appears in the app bar only if there is room for it: 1 2 3 4 5 6 <item android:id= \"@+id/action_favorites\" android:icon= \"@drawable/ic_favorites_white\" android:orderInCategory= \"40\" android:title= \"@string/action_favorites\" app:showAsAction= \"ifRoom\" /> In the above figure, the favorite item does not show since there's not enough room, but if we change the orientation, it now shows: Adding icons to menus \u00b6 To add an icon, use the android:icon and specify the icon resource file as follows: 1 2 3 4 <item android:id= \"@+id/action_order\" android:icon= \"@drawable/ic_order_white\" android:title= \"@string/action_order\" /> Contextual menu \u00b6 Android provides two types of contextual menus: A context menu, appears as a floating list of menu items when the user performs a long tap on a View. It is typically used to modify the View or use it in some fashion. A contextual action bar, appears at the top of the screen in place of the app bar or underneath the app bar, with action items that affect one or more selected View elements. The steps to create the context menu are as follows: Create the XML menu resource file Register a View to the context menu using RegisterForContextMenu passing in the view. Override the OnCreateContextMenu and inflate the menu Override the OnContextItemSelected to handle menu item clicks Create a method to perform an action for each of the context menu item Creating the XML resource \u00b6 Create an XML file in Resources -> menu folder. Add the context menu items uisng the <item ..> tags 1 2 3 4 <item android:id= \"@+id/context_edit\" android:title= \"Edit\" android:orderInCategory= \"10\" /> Register a View for the context menu \u00b6 After creating the view register it as follows: 1 2 TextView textView = FindViewById < TextView >( Resource . Id . title ); RegisterForContextMenu ( textView ); Override the OnCreateContextMenu \u00b6 Override the OnCreateContextMenu as follows : 1 2 3 4 public override void OnCreateContextMenu ( IContextMenu menu , View v , IContextMenuContextMenuInfo menuInfo ) { base . OnCreateContextMenu ( menu , v , menuInfo ); } Inflate the menu using the MenuInflater class as follows: 1 MenuInflater . Inflate ( Resource . Menu . menu_context , menu ); The complete method should now be as follows: 1 2 3 4 5 public override void OnCreateContextMenu ( IContextMenu menu , View v , IContextMenuContextMenuInfo menuInfo ) { base . OnCreateContextMenu ( menu , v , menuInfo ); MenuInflater . Inflate ( Resource . Menu . menu_context , menu ); } The parameter to the method: menu : is the context menu to be built v : is the view that registered for the context menu menuinfo : Is the extra information about the view registered for the context menu. This varies depending on the view, e.g the RecyclerView or GridView will have a row id, position or a child view MenuInflater The MenuInflater is a property defined on the class. It takes two parameters, the resource id for the XML resource to load and the menu to inflate the resource into. Handle selected menu items \u00b6 When the menu item is clicked, the system calls OnContextItemSelected method. Override the method as below: 1 2 3 4 public override bool OnContextItemSelected ( IMenuItem item ) { return base . OnContextItemSelected ( item ); } We then handle each menu item with an if or switch statement. We use the ItemId to find which id was clicked: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public override bool OnContextItemSelected ( IMenuItem item ) { switch ( item . ItemId ) { case Resource . Id . action_edit : EditNote (); return true ; case Resource . Id . action_delete : DeleteNote (); return true ; case Resource . Id . action_favorite : FavoriteNote (); return true ; default : return base . OnContextItemSelected ( item ); } } Getting additional information from the menu When using the context menu in an RecyclerView, you can cast the MenuInfo property on the item to gather more information supplied to the menu item. When you long-click on the TextView , the popup should now show up as depicted in the image below: Contextual action bar \u00b6 A contextual action bar appears at the top of the screen to present actions the user can perform on a View after long-clicking the View, as shown in the figure below. To create a contextual action bar, perform the following action: Create the XML menu resource file and assign an icon to each item. Implement the ActionMode.Callback interface to handle the ActionMode lifecycle. Set the long-click event to the view using the event LongClick . Call the StartActionMode within the handler. Create the XML menu resource \u00b6 Create the XML menu resource file in the Resource -> menu folder. Add icons to the menu items as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <?xml version=\"1.0\" encoding=\"utf-8\"?> <menu xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:id= \"@+id/action_edit\" android:icon= \"@android:drawable/ic_menu_edit\" android:title= \"Edit\" /> <item android:id= \"@+id/action_delete\" android:icon= \"@android:drawable/ic_menu_delete\" android:title= \"Delete\" /> <item android:id= \"@+id/action_favorite\" android:icon= \"@android:drawable/star_off\" android:title= \"Favorite\" /> </menu> We have created the menu items, given them id, title and icons. Create the long-click event \u00b6 We need to register a long-click event to show the contextual app bar menu. 1 2 3 4 5 6 7 8 9 TextView textView = FindViewById < TextView >( Resource . Id . title ); textView . LongClick += ( sender , e ) => { if ( actionMode == null ) { actionMode = StartActionMode ( this ); } (( View )( sender )). Selected = true ; }; The actionMode variable is defined as follows in the MainActivity , 1 private ActionMode actionMode ; Implement the interface \u00b6 Implement the interface on the MainActivity as follows : 1 2 3 public class MainActivity : AppCompatActivity , ActionMode . ICallback { .... } The ActionMode.ICallback contains the following methods that needs to be implemented: OnActionItemClicked - Handle the click of the item OnCreateActionMode - Inflate the menu resource file OnDestroyActionMode - Handle actions when the menu is closed OnPrepareActionMode - Handle additional actions once the menu is created Inflate the menu resource \u00b6 Inflate the menu resource XML file as follows: 1 2 3 4 5 6 7 // Called when the action mode is created; public bool OnCreateActionMode ( ActionMode mode , IMenu menu ) { mode . Title = \"Actions\" ; MenuInflater . Inflate ( Resource . Menu . menu_context , menu ); return true ; } Handle the item clicks \u00b6 Handle the item clicks in the OnActionItemClicked as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Called when the user selects a contextual menu item public bool OnActionItemClicked ( ActionMode mode , IMenuItem item ) { switch ( item . ItemId ) { case Resource . Id . action_edit : EditNote (); mode . Finish (); return true ; .... default : return false ; } } The Finish method closes the app bar after performing the action. Handle all the menu item clicks in the switch statement. In the OnDestroyActionMode set the actionMode variable to null as follows: 1 2 3 4 5 // Called when the user exits the action mode public void OnDestroyActionMode ( ActionMode mode ) { actionMode = null ; } For the OnPrepareActionMode return false: 1 2 3 4 public bool OnPrepareActionMode ( ActionMode mode , IMenu menu ) { return false ; } When you long-click the TextView , you should now have something like the figure below: Popup menu \u00b6 A PopupMenu is a modal menu anchored to a View . It appears below the anchor view if there is room, or above the view otherwise. To show the PopMenu, you do the following: Create the menu resource file Add the View that show the PopMenu Inflate the PopMenu Handle the OnMenuItemClick for the PopMenu items Create the menu resource file \u00b6 We create the file as the other menu resources in the Resources -> menu folder. Add the View to handle the click \u00b6 The a View to your layout file to handle the click event 1 2 3 4 5 6 7 <ImageButton android:layout_below= \"@id/title\" android:id= \"@+id/optionButton\" android:background= \"@android:color/transparent\" android:src= \"@drawable/ic_more\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> Handle the event \u00b6 Create an event handler for the view: 1 2 3 4 ImageButton imageButton = FindViewById < ImageButton >( Resource . Id . optionButton ); imageButton . Click += delegate { ... } Inflate the menu \u00b6 Within the event handler we inflate the menu resource file into the PopupMenu as follows: 1 2 var popUpMenu = new PopupMenu ( this , imageButton ); popUpMenu . MenuInflater . Inflate ( Resource . Menu . menu_main , popUpMenu . Menu ); Handle menu items clicks \u00b6 Handle the menu item clicks as follows: 1 2 3 4 5 6 7 8 9 10 11 12 popUpMenu . MenuItemClick += ( object sender , PopupMenu . MenuItemClickEventArgs e ) => { switch ( e . Item . ItemId ) { case Resource . Id . action_edit : ... break ; case Resource . Id . action_delete : ... break ; } }; Show the popup \u00b6 Last we need to show the popupmenu: 1 popUpMenu . Show (); The complete, code should look as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ImageButton imageButton = FindViewById < ImageButton >( Resource . Id . optionButton ); imageButton . Click += delegate { var popUpMenu = new PopupMenu ( this , imageButton ); popUpMenu . MenuInflater . Inflate ( Resource . Menu . menu_main , popUpMenu . Menu ); popUpMenu . MenuItemClick += ( object sender , PopupMenu . MenuItemClickEventArgs e ) => { switch ( e . Item . ItemId ) { case Resource . Id . action_edit : break ; case Resource . Id . action_delete : break ; case Resource . Id . action_favorite : break ; } }; popUpMenu . Show (); }; Inflating menu shortcut We could also have done popUpMenu.Inflate(Resource.Menu.menu_main); by calling the Inflate method without getting a MenuInflater to inflate the menu resource file.","title":"Menus"},{"location":"menus/#android-menus","text":"In this section you will learn about the Android menus. A menu provides a set of options. A user can select from a menu to perform a function, for example saving, deleting, searching or navigating to another screen.","title":"Android Menus"},{"location":"menus/#types-of-menus","text":"They are different types of menus : Options menu : Appears in the app bar and provides the primary options that affect use of the app itself Contextual menu : Appears as a floating list of choices when the user performs a long tap on an element on the screen. Contextual action bar : Appears at the top of the screen overlaying the app bar, with action items that affect the selected element or elements. Popup menu : Appears anchored to a View such as an ImageButton, and provides an overflow of actions or the second part of a two-part command.","title":"Types of menus"},{"location":"menus/#the-app-bar-and-options-menu","text":"The app bar (also called the action bar) is a dedicated space at the top of each Activity screen. The app bar by default shows the app title, or the name defined in AndroidManifest.xml by the android:label attribute for the Activity . The app bar may also include the Up button for navigating up to the parent activity. The options menu in the app bar usually provides navigation to other screens in the app, or options that affect using the app itself. The options menu appears to thr right. In the figure above: Navigation button or Up butto n: Use a navigation button in this space to open a navigation drawer, or use an Up button for navigating up through your app's screen hierarchy to the parent activity. Both are described in the next chapter. Title : The title in the app bar is the app title, or the name defined in AndroidManifest.xml by the android:label attribute for the activity. Action icons for the options menu : Each action icon appears in the app bar and represents one of the options menu's most frequently used items. Less frequently used options menu items appear in the overflow options menu. Overflow options menu : The overflow icon opens a popup with option menu items that are not shown as icons in the app bar. Frequently used options menu items should appear as icons in the app bar. The overflow options menu shows the rest of the menu: In the above figure: App bar : The app bar includes the app title, the options menu, and the overflow button. Options menu action icons : The first two options menu items appear as icons in the app bar. Overflow button : The overflow button (three vertical dots) opens a menu that shows more options menu items. Options overflow menu : After clicking the overflow button, more options menu items appear in the overflow menu.","title":"The app bar and options menu"},{"location":"menus/#adding-the-app-bar","text":"Each activity that uses the default theme also has an ActionBar as its app bar. Some themes also set up an ActionBar as an app bar by default. The ActionBar behaves differently with each version of Android. We are going to instead use the Toolbar because: Toolbar makes it easy to set up an app bar that works on a wide range of devices. Toolbar gives you room to customize your app bar later, as your app develops. Toolbar includes the most recent features, and it works for any device that can use the support library. The Toolbar comes from the v7 appcompat To add the Toolbar, you should have the v7 appcompat and support design libraries. This is already included in the app made from the default Android app project template. Here are the steps to add the Toolbar : Add the support libraries appcompat and design Use a NoActionBar theme and styles for the app bar and background. Add an AppBarLayout and a Toolbar to the layout. Add code to the Activity to set up the app bar.","title":"Adding the app bar"},{"location":"menus/#adding-the-support-libraries","text":"Open the Nuget manager Search for Xamarin.Android.Support Add the Xamarin.Android.Supportv7.AppCompat and Xamarin.Android.Support.Design librarues The above shows the screen from the Visual Stuio 2019 for Mac. Install Current Versions You should install the current versions of the support libraries. You might need to open the SDK Manager screen to update to the current versions of the support libraries.","title":"Adding the support libraries"},{"location":"menus/#adding-the-theme","text":"Open the styles.xml filed from Resources -> values -> styles.xml. If the file does not exist, create one. Add the theme with the name AppTheme.NoActionBar The styles.xml should already have a theme AppTheme defined as follows : 1 2 3 4 5 6 <style name= \"AppTheme\" parent= \"Theme.AppCompat.Light.DarkActionBar\" > <!-- Customize your theme here. --> <item name= \"colorPrimary\" > @color/colorPrimary </item> <item name= \"colorPrimaryDark\" > @color/colorPrimaryDark </item> <item name= \"colorAccent\" > @color/colorAccent </item> </style> AppTheme inherits the default Android theme AppTheme \"inherits\"\u2014takes on all the styles\u2014from a parent theme called Theme.AppCompat.Light.DarkActionBar , which is a standard theme supplied with Android. 1 2 3 4 <style name= \"AppTheme.NoActionBar\" > <item name= \"windowActionBar\" > false </item> <item name= \"windowNoTitle\" > true </item> </style> also add the theme with name AppTheme.AppBarOverlay , the theme for the AppBarLayout as follows : 1 2 3 <style name= \"AppTheme.AppBarOverlay\" parent= \"ThemeOverlay.AppCompat.Dark.ActionBar\" /> and lastly the theme for the Toolbar : 1 2 3 <style name= \"AppTheme.PopupOverlay\" parent= \"ThemeOverlay.AppCompat.Light\" /> Theme naming By using prefixing the name with AppTheme , this overrides the styles attributes already defined in the style with name AppTheme . So the AppTheme.NoActionBar will override the styles defined in the AppTheme and add the new style attributes windowActionBar and windowNoTitle . This is similar to how CSS works in the websites. The complete styles.xml should now be as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <resources> <!-- Base application theme. --> <style name= \"AppTheme\" parent= \"Theme.AppCompat.Light.DarkActionBar\" > <!-- Customize your theme here. --> <item name= \"colorPrimary\" > @color/colorPrimary </item> <item name= \"colorPrimaryDark\" > @color/colorPrimaryDark </item> <item name= \"colorAccent\" > @color/colorAccent </item> </style> <style name= \"AppTheme.NoActionBar\" > <item name= \"windowActionBar\" > false </item> <item name= \"windowNoTitle\" > true </item> </style> <style name= \"AppTheme.AppBarOverlay\" parent= \"ThemeOverlay.AppCompat.Dark.ActionBar\" /> <style name= \"AppTheme.PopupOverlay\" parent= \"ThemeOverlay.AppCompat.Light\" /> </resources>","title":"Adding the theme"},{"location":"menus/#adding-the-appbarlayout-and-a-toolbar","text":"When adding the AppBarLayout , it needs to be a child of the CoordinatorLayout and the Toolbar must be a direct child of the AppBarLayout as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.design.widget.CoordinatorLayout xmlns:app= \"http://schemas.android.com/apk/res-auto\" ... > <android.support.design.widget.AppBarLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:theme= \"@style/AppTheme.AppBarOverlay\" > <android.support.v7.widget.Toolbar android:id= \"@+id/toolbar\" android:layout_width= \"match_parent\" android:layout_height= \"?attr/actionBarSize\" android:background= \"?attr/colorPrimary\" app:popupTheme= \"@style/AppTheme.PopupOverlay\" /> </android.support.design.widget.AppBarLayout> </android.support.design.widget.CoordinatorLayout> AppBarLayout also requires a separate content layout sibling for the content that scrolls underneath the app bar. You can add this sibling as a view group (such as RelativeLayout or LinearLayout ) in the same layout file, or in a separate layout file. You can include the layout as follows: 1 <include layout= \"@layout/content_main\" /> or define the layout directly without using the include . Set the content sibling's view group to use the scrolling behavior AppBarLayout.ScrollingViewBehavior: 1 app:layout_behavior=\"@string/appbar_scrolling_view_behavior\" The layout behavior for the RelativeLayout is set to the string resource @string/appbar_scrolling_view_behavior . This string resource controls how the screen scrolls in relation to the app bar at the top. The resource represents the following string, which is defined in the values.xml file (which you should not modify): android.support.design.widget.AppBarLayout$ScrollingViewBehavior . This behavior is defined by the AppBarLayout.ScrollingViewBehavior class. Any View or view group that can scroll vertically to support nested scrolling for AppBarLayout siblings should use this behavior.","title":"Adding the AppBarLayout and a Toolbar"},{"location":"menus/#add-code-to-setup-the-app-bar","text":"The Activity should inherit from AppCompatActivity in order to use the app bar: 1 2 3 public class MainActivity : AppCompatActivity { ... } In the OnCreate method call SetSupportActionBar with the toolbar as the parameter: 1 2 3 4 5 6 7 8 9 protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); Xamarin . Essentials . Platform . Init ( this , savedInstanceState ); SetContentView ( Resource . Layout . activity_main ); Android . Support . V7 . Widget . Toolbar toolbar = FindViewById < Android . Support . V7 . Widget . Toolbar >( Resource . Id . toolbar ); SetSupportActionBar ( toolbar ); } There are multiple Toolbar classes When using the Toolbar, make sure you are using the Toolbar from Android.Support.V7.Widget.Toolbar . There's also a Toolbar class defined in Android.Widget.Toolbar . The Activity should now show the Toolbar . By default, the app name will be displayed.","title":"Add code to setup the app bar"},{"location":"menus/#adding-the-options-menu","text":"The options menu is defined using XML. The menu resource file should live in the Resources -> menu folder. The menu resources defines the menu for options menu, context menu or popup menu. The MenuInflater class is used to inflate the menu resource file and load it into the Menu . Create the XML file in the Resources -> menu folder. 1 2 3 4 5 6 7 8 9 10 <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" > <item android:id= \"@+id/action_settings\" android:orderInCategory= \"100\" android:title= \"@string/action_settings\" app:showAsAction= \"never\" /> </menu> Inflate the menu in the OnCreateOptionsMenu method 1 2 3 4 5 public override bool OnCreateOptionsMenu ( IMenu menu ) { MenuInflater . Inflate ( Resource . Menu . menu_main , menu ); return true ; } Handle the menu item click in the OnOptionsItemSelected method: 1 2 3 4 5 6 7 8 9 10 public override bool OnOptionsItemSelected ( IMenuItem item ) { int id = item . ItemId ; if ( id == Resource . Id . action_settings ) { return true ; } return base . OnOptionsItemSelected ( item ); }","title":"Adding the options menu"},{"location":"menus/#defining-how-the-menu-appears","text":"To add additional menu items, add them using the <item .../> tag. A menu item requires an android:id and a android:title or android:icon . When they are multiple menu items, you can also specify how they are ordered using android:orderInCategory . The higher the number, the further menu item is. To show the menu in the overflow menu, use the app:showAsAction=\"never\" . Valid values for the showAsAction are: always - Always place this item in the app bar ifRoom - Only place this item in the app bar if there is room for it never - Never place this item in the app bar. Instead, list the item in the app bar's overflow menu. withText - Also include the title text (defined by android:title) with the item. For example, the following menu item's icon appears in the app bar only if there is room for it: 1 2 3 4 5 6 <item android:id= \"@+id/action_favorites\" android:icon= \"@drawable/ic_favorites_white\" android:orderInCategory= \"40\" android:title= \"@string/action_favorites\" app:showAsAction= \"ifRoom\" /> In the above figure, the favorite item does not show since there's not enough room, but if we change the orientation, it now shows:","title":"Defining how the menu appears"},{"location":"menus/#adding-icons-to-menus","text":"To add an icon, use the android:icon and specify the icon resource file as follows: 1 2 3 4 <item android:id= \"@+id/action_order\" android:icon= \"@drawable/ic_order_white\" android:title= \"@string/action_order\" />","title":"Adding icons to menus"},{"location":"menus/#contextual-menu","text":"Android provides two types of contextual menus: A context menu, appears as a floating list of menu items when the user performs a long tap on a View. It is typically used to modify the View or use it in some fashion. A contextual action bar, appears at the top of the screen in place of the app bar or underneath the app bar, with action items that affect one or more selected View elements. The steps to create the context menu are as follows: Create the XML menu resource file Register a View to the context menu using RegisterForContextMenu passing in the view. Override the OnCreateContextMenu and inflate the menu Override the OnContextItemSelected to handle menu item clicks Create a method to perform an action for each of the context menu item","title":"Contextual menu"},{"location":"menus/#creating-the-xml-resource","text":"Create an XML file in Resources -> menu folder. Add the context menu items uisng the <item ..> tags 1 2 3 4 <item android:id= \"@+id/context_edit\" android:title= \"Edit\" android:orderInCategory= \"10\" />","title":"Creating the XML resource"},{"location":"menus/#register-a-view-for-the-context-menu","text":"After creating the view register it as follows: 1 2 TextView textView = FindViewById < TextView >( Resource . Id . title ); RegisterForContextMenu ( textView );","title":"Register a View for the context menu"},{"location":"menus/#override-the-oncreatecontextmenu","text":"Override the OnCreateContextMenu as follows : 1 2 3 4 public override void OnCreateContextMenu ( IContextMenu menu , View v , IContextMenuContextMenuInfo menuInfo ) { base . OnCreateContextMenu ( menu , v , menuInfo ); } Inflate the menu using the MenuInflater class as follows: 1 MenuInflater . Inflate ( Resource . Menu . menu_context , menu ); The complete method should now be as follows: 1 2 3 4 5 public override void OnCreateContextMenu ( IContextMenu menu , View v , IContextMenuContextMenuInfo menuInfo ) { base . OnCreateContextMenu ( menu , v , menuInfo ); MenuInflater . Inflate ( Resource . Menu . menu_context , menu ); } The parameter to the method: menu : is the context menu to be built v : is the view that registered for the context menu menuinfo : Is the extra information about the view registered for the context menu. This varies depending on the view, e.g the RecyclerView or GridView will have a row id, position or a child view MenuInflater The MenuInflater is a property defined on the class. It takes two parameters, the resource id for the XML resource to load and the menu to inflate the resource into.","title":"Override the OnCreateContextMenu"},{"location":"menus/#handle-selected-menu-items","text":"When the menu item is clicked, the system calls OnContextItemSelected method. Override the method as below: 1 2 3 4 public override bool OnContextItemSelected ( IMenuItem item ) { return base . OnContextItemSelected ( item ); } We then handle each menu item with an if or switch statement. We use the ItemId to find which id was clicked: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public override bool OnContextItemSelected ( IMenuItem item ) { switch ( item . ItemId ) { case Resource . Id . action_edit : EditNote (); return true ; case Resource . Id . action_delete : DeleteNote (); return true ; case Resource . Id . action_favorite : FavoriteNote (); return true ; default : return base . OnContextItemSelected ( item ); } } Getting additional information from the menu When using the context menu in an RecyclerView, you can cast the MenuInfo property on the item to gather more information supplied to the menu item. When you long-click on the TextView , the popup should now show up as depicted in the image below:","title":"Handle selected menu items"},{"location":"menus/#contextual-action-bar","text":"A contextual action bar appears at the top of the screen to present actions the user can perform on a View after long-clicking the View, as shown in the figure below. To create a contextual action bar, perform the following action: Create the XML menu resource file and assign an icon to each item. Implement the ActionMode.Callback interface to handle the ActionMode lifecycle. Set the long-click event to the view using the event LongClick . Call the StartActionMode within the handler.","title":"Contextual action bar"},{"location":"menus/#create-the-xml-menu-resource","text":"Create the XML menu resource file in the Resource -> menu folder. Add icons to the menu items as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <?xml version=\"1.0\" encoding=\"utf-8\"?> <menu xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:id= \"@+id/action_edit\" android:icon= \"@android:drawable/ic_menu_edit\" android:title= \"Edit\" /> <item android:id= \"@+id/action_delete\" android:icon= \"@android:drawable/ic_menu_delete\" android:title= \"Delete\" /> <item android:id= \"@+id/action_favorite\" android:icon= \"@android:drawable/star_off\" android:title= \"Favorite\" /> </menu> We have created the menu items, given them id, title and icons.","title":"Create the XML menu resource"},{"location":"menus/#create-the-long-click-event","text":"We need to register a long-click event to show the contextual app bar menu. 1 2 3 4 5 6 7 8 9 TextView textView = FindViewById < TextView >( Resource . Id . title ); textView . LongClick += ( sender , e ) => { if ( actionMode == null ) { actionMode = StartActionMode ( this ); } (( View )( sender )). Selected = true ; }; The actionMode variable is defined as follows in the MainActivity , 1 private ActionMode actionMode ;","title":"Create the long-click event"},{"location":"menus/#implement-the-interface","text":"Implement the interface on the MainActivity as follows : 1 2 3 public class MainActivity : AppCompatActivity , ActionMode . ICallback { .... } The ActionMode.ICallback contains the following methods that needs to be implemented: OnActionItemClicked - Handle the click of the item OnCreateActionMode - Inflate the menu resource file OnDestroyActionMode - Handle actions when the menu is closed OnPrepareActionMode - Handle additional actions once the menu is created","title":"Implement the interface"},{"location":"menus/#inflate-the-menu-resource","text":"Inflate the menu resource XML file as follows: 1 2 3 4 5 6 7 // Called when the action mode is created; public bool OnCreateActionMode ( ActionMode mode , IMenu menu ) { mode . Title = \"Actions\" ; MenuInflater . Inflate ( Resource . Menu . menu_context , menu ); return true ; }","title":"Inflate the menu resource"},{"location":"menus/#handle-the-item-clicks","text":"Handle the item clicks in the OnActionItemClicked as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Called when the user selects a contextual menu item public bool OnActionItemClicked ( ActionMode mode , IMenuItem item ) { switch ( item . ItemId ) { case Resource . Id . action_edit : EditNote (); mode . Finish (); return true ; .... default : return false ; } } The Finish method closes the app bar after performing the action. Handle all the menu item clicks in the switch statement. In the OnDestroyActionMode set the actionMode variable to null as follows: 1 2 3 4 5 // Called when the user exits the action mode public void OnDestroyActionMode ( ActionMode mode ) { actionMode = null ; } For the OnPrepareActionMode return false: 1 2 3 4 public bool OnPrepareActionMode ( ActionMode mode , IMenu menu ) { return false ; } When you long-click the TextView , you should now have something like the figure below:","title":"Handle the item clicks"},{"location":"menus/#popup-menu","text":"A PopupMenu is a modal menu anchored to a View . It appears below the anchor view if there is room, or above the view otherwise. To show the PopMenu, you do the following: Create the menu resource file Add the View that show the PopMenu Inflate the PopMenu Handle the OnMenuItemClick for the PopMenu items","title":"Popup menu"},{"location":"menus/#create-the-menu-resource-file","text":"We create the file as the other menu resources in the Resources -> menu folder.","title":"Create the menu resource file"},{"location":"menus/#add-the-view-to-handle-the-click","text":"The a View to your layout file to handle the click event 1 2 3 4 5 6 7 <ImageButton android:layout_below= \"@id/title\" android:id= \"@+id/optionButton\" android:background= \"@android:color/transparent\" android:src= \"@drawable/ic_more\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" />","title":"Add the View to handle the click"},{"location":"menus/#handle-the-event","text":"Create an event handler for the view: 1 2 3 4 ImageButton imageButton = FindViewById < ImageButton >( Resource . Id . optionButton ); imageButton . Click += delegate { ... }","title":"Handle the event"},{"location":"menus/#inflate-the-menu","text":"Within the event handler we inflate the menu resource file into the PopupMenu as follows: 1 2 var popUpMenu = new PopupMenu ( this , imageButton ); popUpMenu . MenuInflater . Inflate ( Resource . Menu . menu_main , popUpMenu . Menu );","title":"Inflate the menu"},{"location":"menus/#handle-menu-items-clicks","text":"Handle the menu item clicks as follows: 1 2 3 4 5 6 7 8 9 10 11 12 popUpMenu . MenuItemClick += ( object sender , PopupMenu . MenuItemClickEventArgs e ) => { switch ( e . Item . ItemId ) { case Resource . Id . action_edit : ... break ; case Resource . Id . action_delete : ... break ; } };","title":"Handle menu items clicks"},{"location":"menus/#show-the-popup","text":"Last we need to show the popupmenu: 1 popUpMenu . Show (); The complete, code should look as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ImageButton imageButton = FindViewById < ImageButton >( Resource . Id . optionButton ); imageButton . Click += delegate { var popUpMenu = new PopupMenu ( this , imageButton ); popUpMenu . MenuInflater . Inflate ( Resource . Menu . menu_main , popUpMenu . Menu ); popUpMenu . MenuItemClick += ( object sender , PopupMenu . MenuItemClickEventArgs e ) => { switch ( e . Item . ItemId ) { case Resource . Id . action_edit : break ; case Resource . Id . action_delete : break ; case Resource . Id . action_favorite : break ; } }; popUpMenu . Show (); }; Inflating menu shortcut We could also have done popUpMenu.Inflate(Resource.Menu.menu_main); by calling the Inflate method without getting a MenuInflater to inflate the menu resource file.","title":"Show the popup"},{"location":"navigation/","text":"Android Navigation \u00b6 Common Navigation Paradigms \u00b6 Navigation between views is an important part of any application. There are several ways to setup navigation in an Android application: Swipe Views - Allow paging between views using a swipe gesture Navigation Drawer - Displays a vertical menu that slides in to allow navigation between views ActionBar - Using the ActionBar and/or ActionBar tabs to switch between different views Screen Map - Providing a series of buttons on screen that can be pressed to visit different views These four represent the most common navigation paradigms in Android applications. The specifics for how to implement these can be found in the various links above. Stack Based Navigation Navigation with Intents \u00b6 Intent is a powerful concept within the Android universe. An intent is a message that can be thought of as a request that is given to either an activity within your own app, an external application, or a built-in Android service. Think of an intent as a way for an Activity to communicate with the outside Android world. A few key tasks that an intent might be used for within your apps: Take the user to another screen (activity) within your application Take the user to a particular URL within the Android web browser Take the user to the camera to have them take a picture Initiate a call for the user to a given number As you can see, the Intent is a core part of user flows in Android development. The Intent object itself is a class that represents a particular \"request\" including the topic of the request and any request \"parameters\" which are called the Bundle . Explicit Intents \u00b6 An \"explicit\" intent is used to launch other activities within your application. For example, if you the user presses the \"compose\" button and you want to bring up an activity for them to compose a message, you would launch that second activity using an explicit intent. Using an intent is as simple as constructing the Intent with the correct parameters and then invoking that intent using the startActivity method: 1 2 3 4 5 6 7 8 9 10 public void launchComposeView () { // first parameter is the context , second is the type of class of the activity to launch // Get our button from the layout resource , // and attach an event to it Button button = FindViewById < Button > ( Resource . Id . myButton ); button . Click += delegate { var intent = new Intent ( this , typeof ( SecondActivity )); StartActivity ( intent ); // Launch the Second activity } ; } Now, in the launched second activity, the user can go back to the first screen by hitting \"back\" or if the developer wants to trigger the second activity to close, we need only call the finish method : 1 2 3 4 public void onSubmit ( View v ) { // closes the activity and returns to first screen this . Finish (); } Note: The first argument of the Intent constructor used above is a Context which at the moment is just the current Activity in scope. Passing Data to Launched Activities \u00b6 In addition to specifying the activity that we want to display, an intent can also pass key-value data between activities. Think of this as specifying the \"request parameters\" for an HTTP Request. You can specify the parameters by putting key-value pairs into the intent bundle: 1 2 3 4 5 6 7 8 9 10 11 // ActivityOne . java public void launchComposeView () { // first parameter is the context , second is the class of the activity to launch Intent i = new Intent ( ActivityOne . this , ActivityTwo . class ) ; // put \" extras \" into the bundle for access in the second activity i . putExtra ( \" username \" , \" foobar \" ) ; i . putExtra ( \" in_reply_to \" , \" george \" ) ; i . putExtra ( \" code \" , 400 ) ; // brings up the second activity StartActivity ( i ) ; } Once you have added data into the bundle, you can easily access that data within the launched activity: 1 2 3 4 5 6 7 8 9 10 // SecondActivity . cs ( subactivity ) can access any extras passed in protected override void onCreate ( Bundle savedInstanceState ) { // The Intent property holds the bundle with the values of the intent if ( Intent != null ) { // Get the username var username = Intent . GetStringExtra ( \" username \" ) ; // The 0 is the default value if the key is not found var gameScore = Intent . GetIntExtra ( \" game_score \" , 0 ) ; } } And using this system the intent can pass useful data across activities. Returning Data Result to Parent Activity \u00b6 In the typical case of using startActivity , the activity is launched and added to the navigation stack and no result is expected. If the user wants to close the activity, the user can simply hit \"back\" and the parent activity is displayed. However, in other cases the parent activity may want the launched activity to return a result back when it is finished. In this case, we use a different method to launch called startActivityForResult which allows the parent to retrieve the result based on a code that is returned (akin to an HTTP code). 1 2 3 4 5 6 7 var resultButton = FindViewById < Button > ( Resource . Id . resultButton ); resultButton . Click += delegate { var myIntent = new Intent ( this , typeof ( SecondActivity )); StartActivityForResult ( myIntent , 0 ); } ; } This will launch the subactivity, and when the subactivity is complete then it can return the result to the parent: 1 2 3 4 5 6 7 8 var helloButton = FindViewById < Button > ( Resource . Id . helloButton ) ; helloButton . Click += delegate { Intent myIntent = new Intent ( this , typeof ( FirstActivity )) ; myIntent . PutExtra ( \" greeting \" , \" Hello from the Second Activity! \" ) ; //Data tos end back SetResult ( Result . Ok , myIntent ) ; // set result code and bundle data for response Finish () ; // closes the activity, pass data to parent } ; Once the sub-activity finishes, the OnActivityResult() method in the calling activity is be invoked: 1 2 3 4 5 6 7 8 9 ActivityOne . java , time to handle the result of the sub - activity protected override void OnActivityResult ( int requestCode , Result resultCode , Intent data ) { base . OnActivityResult ( requestCode , resultCode , data ) ; if ( resultCode == Result . Ok ) { var helloLabel = FindViewById < TextView > ( Resource . Id . helloLabel ) ; helloLabel . Text = data . GetStringExtra ( \" greeting \" ) ; } } And using that process you can communicate data freely between different activities in your application. Passing Complex Data in a Bundle \u00b6 To pass complex data and models and then pass them in the intent extras. Implicit Intents \u00b6 Implicit Intents are requests to perform an action based on a desired action and target data. This is in contrast to an explicit intent that targets a specific activity. For example, if I want to make a phone call for the user, that can be done with this intent: 1 2 3 Intent callIntent = new Intent ( Intent . ActionCall ); callIntent . SetData ( Android . Net . Uri . Parse ( \"tel:3777789888\" )); StartActivity ( callIntent ); Permission is required You will need permission in order to make a phone call. Add the android.permission.CALL_PHONE in the AndroidManifest.xml . For more on permissions read this blog post, https://blog.xamarin.com/requesting-runtime-permissions-in-android-marshmallow/ If I want to launch a website in the phone's browser, I might do this: 1 2 Intent browserIntent = new Intent ( Intent . ActionView , Android . Net . Uri . Parse ( \"http://www.google.com\" )); StartActivity ( browserIntent ); Receiving Implicit Intents \u00b6 If we wish to receive implicit intents, you need to associate intent filters with your activity. You can also enable links within a view page to launch your app using deep links . You can also create custom URL schemes (i.e. instead of http:// you can create example://) patterns that are primarily meant to launch your app as well. Make sure to specify android.intent.category.DEFAULT category to declare that the activity should receive implicit intents. Otherwise, the activity can only respond to explicit intents. You also need to declare what type of implicit intent action to which it responds with the <action> tag. The list of possible actions are shown in the Standard Activity Actions section here . If you wish to receive a share intent from Chrome, for instance, you have to declare an activity will be responsible for processing the data in your AndroidManifest.xml file: 1 2 3 4 5 6 7 <activity android:name= \"com.peruzal.ReceiveIntentDataActivity\" > <intent-filter> <action android:name= \"android.intent.action.SEND\" /> <category android:name= \"android.intent.category.DEFAULT\" /> <data android:mimeType= \"text/plain\" ></data> </intent-filter> Receiving the data entails receiving the intent data: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ) ; // Set our view from the \" main \" layout resource SetContentView ( Resource . Layout . Main ) ; // Get intent , action and MIME type String action = Intent . Action ; // Get intent type String type = Intent . Type ; // Check if intent matches type and action if ( Intent . ActionSend . Equals ( action ) && type != null ) { if ( \" text/plain \" . Equals ( type )) { // Make sure to check whether returned data will be null . String titleOfPage = Intent . GetStringExtra ( Intent . ExtraSubject ) ; String urlOfPage = Intent . GetStringExtra ( Intent . ExtraText ) ; var imageUriOfPage = ( Android . Net . Uri ) Intent . GetParcelableExtra ( Intent . ExtraStream ) ; } } See this article for more details about parsing data from Chrome. If you wish for a web page link to be able to launch an activity, make sure to also specify the BROWSABLE category as well. You should also specify the <data> tag to specify what URL pattern to scan for: 1 2 3 4 5 6 7 8 <intent-filter> <action android:name= \"android.intent.action.SEND\" /> <category android:name= \"android.intent.category.BROWSABLE\" /> <category android:name= \"android.intent.category.DEFAULT\" /> <data android:scheme= \"http\" android:host= \"www.peruzal.com\" android:pathPrefix= \"/example\" /> </intent-filter> Receiving the specific URL being requested entails calling getData() on the intent: 1 2 3 4 5 6 7 8 9 10 protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); // Set our view from the \"main\" layout resource SetContentView ( Resource . Layout . Main ); String action = Intent . Action ; Android . Net . Uri data = Intent . Data ; } You can also receive more complex data types as shown in this guide . You can also use the DeepLinkDispatch library to makes it easy to annotate your activities with specific URL patterns. Default link handling \u00b6 If you wish for your app to be considered the default handler for a link (only works for Android Marshmallow devices and higher), you can leverage the new feature by setting android:autoVerify on the intent filter: 1 2 3 <intent-filter android:autoVerify= \"true\" > </intent> You would then need to host an assetlinks.json file at https://domain[:optional_port]/.well-known/assetlinks.json that uses the following format: 1 2 3 4 5 6 7 8 9 [{ \"relation\" : [ \"delegate_permission/common.handle_all_urls\" ], \"target\" : { \"namespace\" : \"android_app\" , \"package_name\" : \"com.mycompany.app1\" , \"sha256_cert_fingerprints\" : [ \"14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\" ] } }] The sha256_cert_fingerprints comes from the app signing certificate by typing keytool -list -v -keystore my-release-key.keystore . The package name should correspond to your app's package name. See this guide for more details. You can check to see if this file is hosted properly by checking this URL: 1 2 3 https : // digitalassetlinks . googleapis . com / v1 / statements : list ? source . web . site = https : //< domain1 > : < port >& relation = delegate_permission / common . handle_all_urls Swipe and Tabbed Navigation with ViewPager and TabLayout \u00b6 You use a ViewPager together with the TabLayout to create tabbed navigation. To only support swipe navigation without tabs you can use the ViewPager on its own. Here are the steps to add tab navigation : Add the Support Library V4 - The ViewPager is found in the Android Support V4 Add the Support Design Library - To get the TabLayout, you need to add the Support Design Library Adding ViewPager and TabLayout - You will need to add the ViewPager and TabLayout to layout resource file : Resources/layout/Main.axml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" > <android.support.design.widget.TabLayout android:id= \"@+id/tabLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <android.support.v4.view.ViewPager android:id= \"@+id/viewPager\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:padding= \"16dp\" /> </LinearLayout> Adding an Adapter for the ViewPager The ViewPager works the same as the ListView, it requires an adapter to supply the fragments it will use to display. PageAdapter.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class PagesAdapter : FragmentPagerAdapter { List < Fragment > fragmentList ; List < ICharSequence > titles ; public PagesAdapter ( Android . Support . V4 . App . FragmentManager fm , List < Fragment > fragmentList , List < ICharSequence > titles ) : base ( fm ) { this . fragmentList = fragmentList ; this . titles = titles ; } public override int Count { get { return fragmentList . Count ; } } public override Fragment GetItem ( int position ) { return fragmentList [ position ] ; } public override Java . Lang . ICharSequence GetPageTitleFormatted ( int position ) { return titles [ position ] ; } } The PageAdapter inherits from the FragmentPageAdapter and implements the required methods. Create the Fragments Classes to be Displayed The ViewPager will need fragments to display when you swipe MoviesFragment.cs 1 2 3 4 5 6 7 8 9 10 11 12 public class MoviesFragment : Fragment { public override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ) ; } public override View OnCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . Inflate ( Resource . Layout . activity_movies , container , false ) ; } } and the backing xml file for it : Resources/layout/activity_movies.axml 1 2 3 4 5 6 7 8 9 10 11 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:text= \"Movies\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> </LinearLayout> FavoriteMoviesFragment.cs 1 2 3 4 5 6 7 8 9 10 11 12 public class FavoriteMoviesFragment : Fragment { public override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ) ; } public override View OnCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . Inflate ( Resource . Layout . activity_favorite_movies , container , false ) ; } } and the backing xml layout resource file Resources/layout/activity_favorite_movies.axml 1 2 3 4 5 6 7 8 9 10 11 12 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:text= \"Favorite Movies\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </LinearLayout> PopularMoviesFragment.cs 1 2 3 4 5 6 7 8 9 10 11 12 public class PopularMoviesFragment : Fragment { public override void OnCreate(Bundle savedInstanceState) { base.OnCreate(savedInstanceState); } public override View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return inflater.Inflate(Resource.Layout.activity_popular_movies, container, false); } } and its backing xml resource file Resources/layout/activity_popular_movies.axml 1 2 3 4 5 6 7 8 9 10 11 12 13 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:text= \"Popular Movies\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> </LinearLayout> Bind the ViewPager and Setup TabLayout We can now find the Viewpager and TabLayout and create the adapter and attach it to the ViewPager. MainActivity.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 [Activity(Label = \"SwipeViewDemo\", MainLauncher = true, Icon = \"@mipmap/icon\", Theme = \"@style/AppTheme\")] public class MainActivity : AppCompatActivity { ViewPager viewPager; List<Fragment> fragmentList = new List<Fragment>(); List<ICharSequence> titles = new List<ICharSequence>(); PagesAdapter adapter; TabLayout tabLayout; protected override void OnCreate(Bundle savedInstanceState) { base.OnCreate(savedInstanceState); // Set our view from the \"main\" layout resource SetContentView(Resource.Layout.activity_main); viewPager = FindViewById<ViewPager>(Resource.Id.viewPager); tabLayout = FindViewById<TabLayout>(Resource.Id.tabLayout); tabLayout.TabMode = TabLayout.ModeFixed; tabLayout.TabGravity = TabLayout.GravityFill; fragmentList.Add(new MoviesFragment()); titles.Add(new Java.Lang.String(\"Movies\")); fragmentList.Add(new PopularMoviesFragment()); titles.Add(new Java.Lang.String(\"Popular\")); fragmentList.Add(new FavoriteMoviesFragment()); titles.Add(new Java.Lang.String(\"Favorite\")); adapter = new PagesAdapter(SupportFragmentManager, fragmentList, titles); viewPager.Adapter = adapter; tabLayout.SetupWithViewPager(viewPager); } } Navigation Drawer \u00b6 The navigation drawer is a panel that displays the app\u2019s main navigation options on the left edge of the screen. It is hidden most of the time, but is revealed when the user swipes a finger from the left edge of the screen or, while at the top level of the app, the user touches the app icon in the action bar. Navigation Drawer Design Before you decide to use a navigation drawer in your app, you should understand the use cases and design principles defined in the Navigation Drawer design guide. Usage \u00b6 This guide explains how to setup a basic material design style drawer filled with navigation items that switch different fragments into the content area. In this way, you can define multiple fragments, and then define the list of options which will display in the drawers items list. Each item when clicked will switch the relevant fragment into the activity's container view. This guide explains how to setup a basic material design style drawer filled with navigation items that switch different fragments into the content area. In this way, you can define multiple fragments, and then define the list of options which will display in the drawers items list. Each item when clicked will switch the relevant fragment into the activity's container view. Setup \u00b6 Make sure to setup the Google Design Support Library before using Google's new NavigationView , announced as part of the Android M release. The NavigationView should be backwards compatible with all versions down to Android 2.1. Setup Drawer Resources Create a menu/drawer_view.xml file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?xml version=\"1.0\" encoding=\"utf-8\"?> <menu xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:android= \"http://schemas.android.com/apk/res/android\" > <group android:checkableBehavior= \"single\" > <item android:id= \"@+id/action_popular\" android:title= \"Popular\" /> <item android:id= \"@+id/action_showing\" android:title= \"Showing\" /> <item android:id= \"@+id/action_favorites\" android:title= \"Favorites\" /> </group> </menu> Note that you can set one of these elements to be default selected by using android:checked=\"true\" . You can also create subheaders too and group elements together: 1 2 3 4 5 6 7 8 9 10 11 12 <item android:title= \"Sub items\" > <menu> <group android:checkableBehavior= \"single\" > <item android:icon= \"@drawable/ic_dashboard\" android:title= \"Sub item 1\" /> <item android:icon= \"@drawable/ic_forum\" android:title= \"Sub item 2\" /> </group> </menu> </item> Define Fragments Next, you need to define your fragments that will be displayed within the drawer. These can be any support fragments you define within your application. Make sure that all the fragments extend from Android.Support.V4.App.Fragment . Setup Toolbar In order to slide our navigation drawer over the ActionBar, we need to use the new Toolbar widget as defined in the AppCompat v21 library. The Toolbar can be embedded into your view hierarchy which makes sure that the drawer slides over the ActionBar. Create a new layout file res/layout/toolbar.xml with the following code: 1 2 3 4 5 6 7 8 9 10 11 <android.support.v7.widget.Toolbar xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:id= \"@+id/toolbar\" android:layout_height= \"wrap_content\" android:layout_width= \"match_parent\" android:fitsSystemWindows= \"true\" android:minHeight= \"?attr/actionBarSize\" app:theme= \"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" android:background= \"?attr/colorPrimaryDark\" > </android.support.v7.widget.Toolbar> Note Note that when the android:fitsSystemWindows attribute is set to true for a view, the view would be laid out as if the StatusBar and the ActionBar were present i.e. the UI on top gets padding enough to not be obscured by the navigation bar. Without this attribute, there is not enough padding factored into consideration for the ToolBar: We want our main content view to have the navigation bar and hence android:fitsSystemWindows is set to true for the Toolbar . To use the Toolbar as an ActionBar , you need to disable the default ActionBar . This can be done by setting the app theme in styles.xml file. 1 2 3 4 5 6 7 8 <resources> <!-- Base application theme. --> <style name= \"AppTheme\" parent= \"Theme.AppCompat.Light.NoActionBar\" > <item name= \"colorPrimary\" > #673AB7 </item> <item name= \"colorPrimaryDark\" > #512DA8 </item> <item name= \"colorAccent\" > #FF4081 </item> </style> </resources> Warning If you forget to disable the ActionBar in styles.xml, you are likely to see an error message that reads \"This Activity already has an action bar supplied by the window decor. Do not request Window.FEATURE_ACTION_BAR and set windowActionBar to false in your theme to use a Toolbar instead\". If you see this message, you need to make sure to follow the previous steps. Setup Drawer in Activity Next, let\u2019s setup a basic navigation drawer based on the following layout file which has the entire drawer setup in res/layout/activity_main.xml . !!! Note that the Toolbar is added as the first child of the main content view by adding the include tag. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_height= \"match_parent\" > <include layout= \"@layout/toolbar\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <android.support.v4.widget.DrawerLayout android:id= \"@+id/drawer\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <FrameLayout android:id= \"@+id/container\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> <android.support.design.widget.NavigationView android:layout_width= \"wrap_content\" android:layout_height= \"match_parent\" android:id= \"@+id/navigationView\" android:layout_gravity= \"start\" app:menu= \"@menu/drawer_menu\" /> </android.support.v4.widget.DrawerLayout> </LinearLayout> Now, let\u2019s setup the drawer in our activity. We can also setup the menu icon too. Note Make sure you implement the correct OnPostCreate(Bundle savedInstanceState) method. There are 2 signatures and only OnPostCreate(Bundle state) shows the hamburger icon. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 using Android . App ; using Android . Widget ; using Android . OS ; using Android . Support . V7 . App ; using Android . Support . V4 . Widget ; using Android . Support . Design . Widget ; using Android . Support . V7 . Widget ; using Android . Support . V7 . Widget ; using Android . Support . V4 . View ; namespace NavigationDrawerDemoTest { [ Activity ( Label = \" Rotten Tomatoes \" , MainLauncher = true , Icon = \" @mipmap/icon \" , Theme = \" @style/NoActionBar \" ) ] public class MainActivity : AppCompatActivity { DrawerLayout drawer ; NavigationView navigationView ; ActionBarDrawerToggle toggle ; Android . Support . V7 . Widget . Toolbar toolbar ; protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ) ; // Set our view from the \" main \" layout resource SetContentView ( Resource . Layout . Main ) ; drawer = FindViewById < DrawerLayout > ( Resource . Id . drawer ) ; navigationView = FindViewById < NavigationView > ( Resource . Id . navigationView ) ; toolbar = FindViewById < Android . Support . V7 . Widget . Toolbar > ( Resource . Id . toolbar ) ; SetSupportActionBar ( toolbar ) ; toggle = new ActionBarDrawerToggle ( this , drawer , toolbar , Resource . String . drawer_open , Resource . String . drawer_close ) ; SupportActionBar . SetHomeButtonEnabled ( true ) ; SupportActionBar . SetDisplayShowTitleEnabled ( true ) ; drawer . AddDrawerListener ( toggle ) ; toggle . SyncState () ; navigationView . NavigationItemSelected += ( object sender , NavigationView . NavigationItemSelectedEventArgs e ) => { switch ( e . MenuItem . ItemId ) { case Resource . Id . action_showing : Toast . MakeText ( this , \" Showing \" , ToastLength . Short ) . Show () ; // Code to change the fragment here . // FragmentManager // . BeginTransaction () // . Replace ( Resource . Id . container , new PopularMoviesFragment ()) // . Commit () ; drawer . CloseDrawer ( GravityCompat . Start ) ; break ; case Resource . Id . action_popular : Toast . MakeText ( this , \" Popular \" , ToastLength . Short ) . Show () ; break ; case Resource . Id . action_favorites : Toast . MakeText ( this , \" showing \" , ToastLength . Short ) . Show () ; break ; } } ; } public override bool OnOptionsItemSelected ( Android . Views . IMenuItem item ) { if ( toggle . OnOptionsItemSelected ( item )) { return true ; } switch ( item . ItemId ) { case Android . Resource . Id . Home : drawer . OpenDrawer ( GravityCompat . Start ) ; break ; } return base . OnOptionsItemSelected ( item ) ; } protected override void OnPostCreate ( Bundle savedInstanceState ) { base . OnPostCreate ( savedInstanceState ) ; toggle . SyncState () ; } public override void OnConfigurationChanged ( Android . Content . Res . Configuration newConfig ) { base . OnConfigurationChanged ( newConfig ) ; toggle . OnConfigurationChanged ( newConfig ) ; } } } Navigating between menu items 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 navigationView . NavigationItemSelected += ( object sender , NavigationView . NavigationItemSelectedEventArgs e ) => { switch ( e . MenuItem . ItemId ) { case Resource . Id . action_showing : FragmentManager . BeginTransaction () . Replace ( Resource . Id . container , new MoviesShowingFragment ()) . Commit () ; drawer . CloseDrawer ( GravityCompat . Start ) ; e . MenuItem . setChecked ( true ) ; // Set action bar title SetTitle ( MenuItem . Title ) ; break ; case Resource . Id . action_popular : FragmentManager . BeginTransaction () . Replace ( Resource . Id . container , new PopularMoviesFragment ()) . Commit () ; drawer . CloseDrawer ( GravityCompat . Start ) ; e . MenuItem . setChecked ( true ) ; // Set action bar title SetTitle ( MenuItem . Title ) ; break ; case Resource . Id . action_favorites : FragmentManager . BeginTransaction () . Replace ( Resource . Id . container , new FavoriteMoviesFragment ()) . Commit () ; drawer . CloseDrawer ( GravityCompat . Start ) ; e . MenuItem . setChecked ( true ) ; // Set action bar title SetTitle ( MenuItem . Title ) ; break ; } } ; One thing to note is that the ActionBarDrawerToggle renders a custom DrawerArrowDrawable for you for the hamburger icon. Making Status Bar Translucent \u00b6 To have the status bar translucent and have our drawer slide over it, we need to set android:windowTranslucentStatus to true. Because this style is not available for pre Kitkat devices, we\u2019ll add res/values-v19/styles.xml file for API version 19 and onwards. Note: If you modify your res/values/styles.xml directly with this android:windowTranslucentStatus line, you are likely to need to build only for SDK versions 19 or higher, which will obviously limit you from supporting many older devices. In res/values-v19/styles.xml we can add the following: 1 2 3 4 5 6 7 <resources> <!-- Base application theme. --> <style name= \"AppTheme\" parent= \"Theme.AppCompat.Light.NoActionBar\" > <!-- Customize your theme here. --> <item name= \"android:windowTranslucentStatus\" > true </item> </style> </resources> Now if you run your app, you should see the navigation drawer and be able to select between your fragments. Adding custom views to navigation drawer \u00b6 One improvement made to the design support library 23.1.0 is the addition of support for custom views for the navigation drawer items. For instance, we can create a custom switch like the navigation drawer from Google Play Movies for one of the rows: The approach is the same as adding custom menu items to the ActionBar. We simply need to define a separate layout such as the following snippet. We will call this file action_view_switch.xml : 1 2 3 4 5 6 7 8 9 10 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <android.support.v7.widget.SwitchCompat android:layout_width= \"fill_parent\" android:layout_height= \"match_parent\" android:text= \"Switch\" /> </LinearLayout> We then reference this layout using the app:actionLayout attribute. A title must be provided but can also be set to blank: 1 2 3 4 5 6 <menu xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:id= \"@+id/nav_switch\" app:actionLayout= \"@layout/action_view_switch\" android:title= \"Downloaded only\" /> </item> </menu> You can attach events directly in XML so long as your Activity will implement the method. To add an event handling to the toggle switch programmatically through Java, you will need to first get the menu instance and get access to the corresponding ActionView: 1 2 3 4 5 6 7 8 9 Menu menu = navigationView . getMenu (); MenuItem menuItem = menu . findItem ( R . id . nav_switch ); View actionView = MenuItemCompat . getActionView ( menuItem ); actionView . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { } } ); Custom widgets using app:actionViewClass can also be used too for menu items as well now too. For more details about how Action Views Persistent Navigation Drawer \u00b6 In certain situations, especially on tablets, the navigation drawer should be a permanent fixture on the activity acting as a sidebar: To achieve this effect, review the following links which describe one approach: * Static Nav Drawer * Related Stackoverflow Question * Sample Code Third-party libraries may also make this easier to achieve. Limitations \u00b6 The current version of the design support library does come with its limitations. The main issue is with the system that highlights the current item in the navigation menu. The itemBackground attribute for the NavigationView does not handle the checked state of the item correctly: somehow either all items are highlighted or none of them are. This makes this attribute basically unusable for most apps. Alternative to Fragments \u00b6 Although many navigation drawer examples show how fragments can be used with the navigation drawer, you can also use a RelativeLayout/LinearLayout if you wish to use the drawer as an overlay to your currently displayed Activity. Instead of <FrameLayout> you can substitute that for a <LinearLayout> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 <android.support.v4.widget.DrawerLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:id= \"@+id/drawer_layout\" > <LinearLayout android:id= \"@+id/content_frame\" android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> <!-- The navigation drawer --> <ListView android:id= \"@+id/left_drawer\" android:layout_width= \"240dp\" android:layout_height= \"wrap_content\" android:layout_gravity= \"start\" android:choiceMode= \"singleChoice\" android:divider= \"@android:color/transparent\" android:dividerHeight= \"0dp\" android:background= \"#111\" /> </android.support.v4.widget.DrawerLayout> Instead of this: 1 2 3 4 // Insert the fragment by replacing any existing fragment getFragmentManager (). beginTransaction () . replace ( R . id . content_frame , fragment ) . commit (); You can instead use the LinearLayout container to inflate the Activity directly: 1 2 3 LayoutInflater inflater = getLayoutInflater (); LinearLayout container = ( LinearLayout ) findViewById ( R . id . content_frame ); inflater . inflate ( R . layout . activity_main , container ); References \u00b6 http://developer.android.com/guide/components/intents-filters.html http://developer.android.com/reference/android/content/Intent.html http://www.vogella.com/articles/AndroidIntent/article.html https://developer.android.com/training/app-links/index.html","title":"Navigation"},{"location":"navigation/#android-navigation","text":"","title":"Android Navigation"},{"location":"navigation/#common-navigation-paradigms","text":"Navigation between views is an important part of any application. There are several ways to setup navigation in an Android application: Swipe Views - Allow paging between views using a swipe gesture Navigation Drawer - Displays a vertical menu that slides in to allow navigation between views ActionBar - Using the ActionBar and/or ActionBar tabs to switch between different views Screen Map - Providing a series of buttons on screen that can be pressed to visit different views These four represent the most common navigation paradigms in Android applications. The specifics for how to implement these can be found in the various links above.","title":"Common Navigation Paradigms"},{"location":"navigation/#stack-based-navigation-navigation-with-intents","text":"Intent is a powerful concept within the Android universe. An intent is a message that can be thought of as a request that is given to either an activity within your own app, an external application, or a built-in Android service. Think of an intent as a way for an Activity to communicate with the outside Android world. A few key tasks that an intent might be used for within your apps: Take the user to another screen (activity) within your application Take the user to a particular URL within the Android web browser Take the user to the camera to have them take a picture Initiate a call for the user to a given number As you can see, the Intent is a core part of user flows in Android development. The Intent object itself is a class that represents a particular \"request\" including the topic of the request and any request \"parameters\" which are called the Bundle .","title":"Stack Based Navigation Navigation with Intents"},{"location":"navigation/#explicit-intents","text":"An \"explicit\" intent is used to launch other activities within your application. For example, if you the user presses the \"compose\" button and you want to bring up an activity for them to compose a message, you would launch that second activity using an explicit intent. Using an intent is as simple as constructing the Intent with the correct parameters and then invoking that intent using the startActivity method: 1 2 3 4 5 6 7 8 9 10 public void launchComposeView () { // first parameter is the context , second is the type of class of the activity to launch // Get our button from the layout resource , // and attach an event to it Button button = FindViewById < Button > ( Resource . Id . myButton ); button . Click += delegate { var intent = new Intent ( this , typeof ( SecondActivity )); StartActivity ( intent ); // Launch the Second activity } ; } Now, in the launched second activity, the user can go back to the first screen by hitting \"back\" or if the developer wants to trigger the second activity to close, we need only call the finish method : 1 2 3 4 public void onSubmit ( View v ) { // closes the activity and returns to first screen this . Finish (); } Note: The first argument of the Intent constructor used above is a Context which at the moment is just the current Activity in scope.","title":"Explicit Intents"},{"location":"navigation/#passing-data-to-launched-activities","text":"In addition to specifying the activity that we want to display, an intent can also pass key-value data between activities. Think of this as specifying the \"request parameters\" for an HTTP Request. You can specify the parameters by putting key-value pairs into the intent bundle: 1 2 3 4 5 6 7 8 9 10 11 // ActivityOne . java public void launchComposeView () { // first parameter is the context , second is the class of the activity to launch Intent i = new Intent ( ActivityOne . this , ActivityTwo . class ) ; // put \" extras \" into the bundle for access in the second activity i . putExtra ( \" username \" , \" foobar \" ) ; i . putExtra ( \" in_reply_to \" , \" george \" ) ; i . putExtra ( \" code \" , 400 ) ; // brings up the second activity StartActivity ( i ) ; } Once you have added data into the bundle, you can easily access that data within the launched activity: 1 2 3 4 5 6 7 8 9 10 // SecondActivity . cs ( subactivity ) can access any extras passed in protected override void onCreate ( Bundle savedInstanceState ) { // The Intent property holds the bundle with the values of the intent if ( Intent != null ) { // Get the username var username = Intent . GetStringExtra ( \" username \" ) ; // The 0 is the default value if the key is not found var gameScore = Intent . GetIntExtra ( \" game_score \" , 0 ) ; } } And using this system the intent can pass useful data across activities.","title":"Passing Data to Launched Activities"},{"location":"navigation/#returning-data-result-to-parent-activity","text":"In the typical case of using startActivity , the activity is launched and added to the navigation stack and no result is expected. If the user wants to close the activity, the user can simply hit \"back\" and the parent activity is displayed. However, in other cases the parent activity may want the launched activity to return a result back when it is finished. In this case, we use a different method to launch called startActivityForResult which allows the parent to retrieve the result based on a code that is returned (akin to an HTTP code). 1 2 3 4 5 6 7 var resultButton = FindViewById < Button > ( Resource . Id . resultButton ); resultButton . Click += delegate { var myIntent = new Intent ( this , typeof ( SecondActivity )); StartActivityForResult ( myIntent , 0 ); } ; } This will launch the subactivity, and when the subactivity is complete then it can return the result to the parent: 1 2 3 4 5 6 7 8 var helloButton = FindViewById < Button > ( Resource . Id . helloButton ) ; helloButton . Click += delegate { Intent myIntent = new Intent ( this , typeof ( FirstActivity )) ; myIntent . PutExtra ( \" greeting \" , \" Hello from the Second Activity! \" ) ; //Data tos end back SetResult ( Result . Ok , myIntent ) ; // set result code and bundle data for response Finish () ; // closes the activity, pass data to parent } ; Once the sub-activity finishes, the OnActivityResult() method in the calling activity is be invoked: 1 2 3 4 5 6 7 8 9 ActivityOne . java , time to handle the result of the sub - activity protected override void OnActivityResult ( int requestCode , Result resultCode , Intent data ) { base . OnActivityResult ( requestCode , resultCode , data ) ; if ( resultCode == Result . Ok ) { var helloLabel = FindViewById < TextView > ( Resource . Id . helloLabel ) ; helloLabel . Text = data . GetStringExtra ( \" greeting \" ) ; } } And using that process you can communicate data freely between different activities in your application.","title":"Returning Data Result to Parent Activity"},{"location":"navigation/#passing-complex-data-in-a-bundle","text":"To pass complex data and models and then pass them in the intent extras.","title":"Passing Complex Data in a Bundle"},{"location":"navigation/#implicit-intents","text":"Implicit Intents are requests to perform an action based on a desired action and target data. This is in contrast to an explicit intent that targets a specific activity. For example, if I want to make a phone call for the user, that can be done with this intent: 1 2 3 Intent callIntent = new Intent ( Intent . ActionCall ); callIntent . SetData ( Android . Net . Uri . Parse ( \"tel:3777789888\" )); StartActivity ( callIntent ); Permission is required You will need permission in order to make a phone call. Add the android.permission.CALL_PHONE in the AndroidManifest.xml . For more on permissions read this blog post, https://blog.xamarin.com/requesting-runtime-permissions-in-android-marshmallow/ If I want to launch a website in the phone's browser, I might do this: 1 2 Intent browserIntent = new Intent ( Intent . ActionView , Android . Net . Uri . Parse ( \"http://www.google.com\" )); StartActivity ( browserIntent );","title":"Implicit Intents"},{"location":"navigation/#receiving-implicit-intents","text":"If we wish to receive implicit intents, you need to associate intent filters with your activity. You can also enable links within a view page to launch your app using deep links . You can also create custom URL schemes (i.e. instead of http:// you can create example://) patterns that are primarily meant to launch your app as well. Make sure to specify android.intent.category.DEFAULT category to declare that the activity should receive implicit intents. Otherwise, the activity can only respond to explicit intents. You also need to declare what type of implicit intent action to which it responds with the <action> tag. The list of possible actions are shown in the Standard Activity Actions section here . If you wish to receive a share intent from Chrome, for instance, you have to declare an activity will be responsible for processing the data in your AndroidManifest.xml file: 1 2 3 4 5 6 7 <activity android:name= \"com.peruzal.ReceiveIntentDataActivity\" > <intent-filter> <action android:name= \"android.intent.action.SEND\" /> <category android:name= \"android.intent.category.DEFAULT\" /> <data android:mimeType= \"text/plain\" ></data> </intent-filter> Receiving the data entails receiving the intent data: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ) ; // Set our view from the \" main \" layout resource SetContentView ( Resource . Layout . Main ) ; // Get intent , action and MIME type String action = Intent . Action ; // Get intent type String type = Intent . Type ; // Check if intent matches type and action if ( Intent . ActionSend . Equals ( action ) && type != null ) { if ( \" text/plain \" . Equals ( type )) { // Make sure to check whether returned data will be null . String titleOfPage = Intent . GetStringExtra ( Intent . ExtraSubject ) ; String urlOfPage = Intent . GetStringExtra ( Intent . ExtraText ) ; var imageUriOfPage = ( Android . Net . Uri ) Intent . GetParcelableExtra ( Intent . ExtraStream ) ; } } See this article for more details about parsing data from Chrome. If you wish for a web page link to be able to launch an activity, make sure to also specify the BROWSABLE category as well. You should also specify the <data> tag to specify what URL pattern to scan for: 1 2 3 4 5 6 7 8 <intent-filter> <action android:name= \"android.intent.action.SEND\" /> <category android:name= \"android.intent.category.BROWSABLE\" /> <category android:name= \"android.intent.category.DEFAULT\" /> <data android:scheme= \"http\" android:host= \"www.peruzal.com\" android:pathPrefix= \"/example\" /> </intent-filter> Receiving the specific URL being requested entails calling getData() on the intent: 1 2 3 4 5 6 7 8 9 10 protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); // Set our view from the \"main\" layout resource SetContentView ( Resource . Layout . Main ); String action = Intent . Action ; Android . Net . Uri data = Intent . Data ; } You can also receive more complex data types as shown in this guide . You can also use the DeepLinkDispatch library to makes it easy to annotate your activities with specific URL patterns.","title":"Receiving Implicit Intents"},{"location":"navigation/#default-link-handling","text":"If you wish for your app to be considered the default handler for a link (only works for Android Marshmallow devices and higher), you can leverage the new feature by setting android:autoVerify on the intent filter: 1 2 3 <intent-filter android:autoVerify= \"true\" > </intent> You would then need to host an assetlinks.json file at https://domain[:optional_port]/.well-known/assetlinks.json that uses the following format: 1 2 3 4 5 6 7 8 9 [{ \"relation\" : [ \"delegate_permission/common.handle_all_urls\" ], \"target\" : { \"namespace\" : \"android_app\" , \"package_name\" : \"com.mycompany.app1\" , \"sha256_cert_fingerprints\" : [ \"14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\" ] } }] The sha256_cert_fingerprints comes from the app signing certificate by typing keytool -list -v -keystore my-release-key.keystore . The package name should correspond to your app's package name. See this guide for more details. You can check to see if this file is hosted properly by checking this URL: 1 2 3 https : // digitalassetlinks . googleapis . com / v1 / statements : list ? source . web . site = https : //< domain1 > : < port >& relation = delegate_permission / common . handle_all_urls","title":"Default link handling"},{"location":"navigation/#swipe-and-tabbed-navigation-with-viewpager-and-tablayout","text":"You use a ViewPager together with the TabLayout to create tabbed navigation. To only support swipe navigation without tabs you can use the ViewPager on its own. Here are the steps to add tab navigation : Add the Support Library V4 - The ViewPager is found in the Android Support V4 Add the Support Design Library - To get the TabLayout, you need to add the Support Design Library Adding ViewPager and TabLayout - You will need to add the ViewPager and TabLayout to layout resource file : Resources/layout/Main.axml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" > <android.support.design.widget.TabLayout android:id= \"@+id/tabLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <android.support.v4.view.ViewPager android:id= \"@+id/viewPager\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:padding= \"16dp\" /> </LinearLayout> Adding an Adapter for the ViewPager The ViewPager works the same as the ListView, it requires an adapter to supply the fragments it will use to display. PageAdapter.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class PagesAdapter : FragmentPagerAdapter { List < Fragment > fragmentList ; List < ICharSequence > titles ; public PagesAdapter ( Android . Support . V4 . App . FragmentManager fm , List < Fragment > fragmentList , List < ICharSequence > titles ) : base ( fm ) { this . fragmentList = fragmentList ; this . titles = titles ; } public override int Count { get { return fragmentList . Count ; } } public override Fragment GetItem ( int position ) { return fragmentList [ position ] ; } public override Java . Lang . ICharSequence GetPageTitleFormatted ( int position ) { return titles [ position ] ; } } The PageAdapter inherits from the FragmentPageAdapter and implements the required methods. Create the Fragments Classes to be Displayed The ViewPager will need fragments to display when you swipe MoviesFragment.cs 1 2 3 4 5 6 7 8 9 10 11 12 public class MoviesFragment : Fragment { public override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ) ; } public override View OnCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . Inflate ( Resource . Layout . activity_movies , container , false ) ; } } and the backing xml file for it : Resources/layout/activity_movies.axml 1 2 3 4 5 6 7 8 9 10 11 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:text= \"Movies\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> </LinearLayout> FavoriteMoviesFragment.cs 1 2 3 4 5 6 7 8 9 10 11 12 public class FavoriteMoviesFragment : Fragment { public override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ) ; } public override View OnCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . Inflate ( Resource . Layout . activity_favorite_movies , container , false ) ; } } and the backing xml layout resource file Resources/layout/activity_favorite_movies.axml 1 2 3 4 5 6 7 8 9 10 11 12 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:text= \"Favorite Movies\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </LinearLayout> PopularMoviesFragment.cs 1 2 3 4 5 6 7 8 9 10 11 12 public class PopularMoviesFragment : Fragment { public override void OnCreate(Bundle savedInstanceState) { base.OnCreate(savedInstanceState); } public override View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return inflater.Inflate(Resource.Layout.activity_popular_movies, container, false); } } and its backing xml resource file Resources/layout/activity_popular_movies.axml 1 2 3 4 5 6 7 8 9 10 11 12 13 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:text= \"Popular Movies\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> </LinearLayout> Bind the ViewPager and Setup TabLayout We can now find the Viewpager and TabLayout and create the adapter and attach it to the ViewPager. MainActivity.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 [Activity(Label = \"SwipeViewDemo\", MainLauncher = true, Icon = \"@mipmap/icon\", Theme = \"@style/AppTheme\")] public class MainActivity : AppCompatActivity { ViewPager viewPager; List<Fragment> fragmentList = new List<Fragment>(); List<ICharSequence> titles = new List<ICharSequence>(); PagesAdapter adapter; TabLayout tabLayout; protected override void OnCreate(Bundle savedInstanceState) { base.OnCreate(savedInstanceState); // Set our view from the \"main\" layout resource SetContentView(Resource.Layout.activity_main); viewPager = FindViewById<ViewPager>(Resource.Id.viewPager); tabLayout = FindViewById<TabLayout>(Resource.Id.tabLayout); tabLayout.TabMode = TabLayout.ModeFixed; tabLayout.TabGravity = TabLayout.GravityFill; fragmentList.Add(new MoviesFragment()); titles.Add(new Java.Lang.String(\"Movies\")); fragmentList.Add(new PopularMoviesFragment()); titles.Add(new Java.Lang.String(\"Popular\")); fragmentList.Add(new FavoriteMoviesFragment()); titles.Add(new Java.Lang.String(\"Favorite\")); adapter = new PagesAdapter(SupportFragmentManager, fragmentList, titles); viewPager.Adapter = adapter; tabLayout.SetupWithViewPager(viewPager); } }","title":"Swipe and Tabbed Navigation with ViewPager and TabLayout"},{"location":"navigation/#navigation-drawer","text":"The navigation drawer is a panel that displays the app\u2019s main navigation options on the left edge of the screen. It is hidden most of the time, but is revealed when the user swipes a finger from the left edge of the screen or, while at the top level of the app, the user touches the app icon in the action bar. Navigation Drawer Design Before you decide to use a navigation drawer in your app, you should understand the use cases and design principles defined in the Navigation Drawer design guide.","title":"Navigation Drawer"},{"location":"navigation/#usage","text":"This guide explains how to setup a basic material design style drawer filled with navigation items that switch different fragments into the content area. In this way, you can define multiple fragments, and then define the list of options which will display in the drawers items list. Each item when clicked will switch the relevant fragment into the activity's container view. This guide explains how to setup a basic material design style drawer filled with navigation items that switch different fragments into the content area. In this way, you can define multiple fragments, and then define the list of options which will display in the drawers items list. Each item when clicked will switch the relevant fragment into the activity's container view.","title":"Usage"},{"location":"navigation/#setup","text":"Make sure to setup the Google Design Support Library before using Google's new NavigationView , announced as part of the Android M release. The NavigationView should be backwards compatible with all versions down to Android 2.1. Setup Drawer Resources Create a menu/drawer_view.xml file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?xml version=\"1.0\" encoding=\"utf-8\"?> <menu xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:android= \"http://schemas.android.com/apk/res/android\" > <group android:checkableBehavior= \"single\" > <item android:id= \"@+id/action_popular\" android:title= \"Popular\" /> <item android:id= \"@+id/action_showing\" android:title= \"Showing\" /> <item android:id= \"@+id/action_favorites\" android:title= \"Favorites\" /> </group> </menu> Note that you can set one of these elements to be default selected by using android:checked=\"true\" . You can also create subheaders too and group elements together: 1 2 3 4 5 6 7 8 9 10 11 12 <item android:title= \"Sub items\" > <menu> <group android:checkableBehavior= \"single\" > <item android:icon= \"@drawable/ic_dashboard\" android:title= \"Sub item 1\" /> <item android:icon= \"@drawable/ic_forum\" android:title= \"Sub item 2\" /> </group> </menu> </item> Define Fragments Next, you need to define your fragments that will be displayed within the drawer. These can be any support fragments you define within your application. Make sure that all the fragments extend from Android.Support.V4.App.Fragment . Setup Toolbar In order to slide our navigation drawer over the ActionBar, we need to use the new Toolbar widget as defined in the AppCompat v21 library. The Toolbar can be embedded into your view hierarchy which makes sure that the drawer slides over the ActionBar. Create a new layout file res/layout/toolbar.xml with the following code: 1 2 3 4 5 6 7 8 9 10 11 <android.support.v7.widget.Toolbar xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:id= \"@+id/toolbar\" android:layout_height= \"wrap_content\" android:layout_width= \"match_parent\" android:fitsSystemWindows= \"true\" android:minHeight= \"?attr/actionBarSize\" app:theme= \"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" android:background= \"?attr/colorPrimaryDark\" > </android.support.v7.widget.Toolbar> Note Note that when the android:fitsSystemWindows attribute is set to true for a view, the view would be laid out as if the StatusBar and the ActionBar were present i.e. the UI on top gets padding enough to not be obscured by the navigation bar. Without this attribute, there is not enough padding factored into consideration for the ToolBar: We want our main content view to have the navigation bar and hence android:fitsSystemWindows is set to true for the Toolbar . To use the Toolbar as an ActionBar , you need to disable the default ActionBar . This can be done by setting the app theme in styles.xml file. 1 2 3 4 5 6 7 8 <resources> <!-- Base application theme. --> <style name= \"AppTheme\" parent= \"Theme.AppCompat.Light.NoActionBar\" > <item name= \"colorPrimary\" > #673AB7 </item> <item name= \"colorPrimaryDark\" > #512DA8 </item> <item name= \"colorAccent\" > #FF4081 </item> </style> </resources> Warning If you forget to disable the ActionBar in styles.xml, you are likely to see an error message that reads \"This Activity already has an action bar supplied by the window decor. Do not request Window.FEATURE_ACTION_BAR and set windowActionBar to false in your theme to use a Toolbar instead\". If you see this message, you need to make sure to follow the previous steps. Setup Drawer in Activity Next, let\u2019s setup a basic navigation drawer based on the following layout file which has the entire drawer setup in res/layout/activity_main.xml . !!! Note that the Toolbar is added as the first child of the main content view by adding the include tag. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_height= \"match_parent\" > <include layout= \"@layout/toolbar\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <android.support.v4.widget.DrawerLayout android:id= \"@+id/drawer\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <FrameLayout android:id= \"@+id/container\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> <android.support.design.widget.NavigationView android:layout_width= \"wrap_content\" android:layout_height= \"match_parent\" android:id= \"@+id/navigationView\" android:layout_gravity= \"start\" app:menu= \"@menu/drawer_menu\" /> </android.support.v4.widget.DrawerLayout> </LinearLayout> Now, let\u2019s setup the drawer in our activity. We can also setup the menu icon too. Note Make sure you implement the correct OnPostCreate(Bundle savedInstanceState) method. There are 2 signatures and only OnPostCreate(Bundle state) shows the hamburger icon. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 using Android . App ; using Android . Widget ; using Android . OS ; using Android . Support . V7 . App ; using Android . Support . V4 . Widget ; using Android . Support . Design . Widget ; using Android . Support . V7 . Widget ; using Android . Support . V7 . Widget ; using Android . Support . V4 . View ; namespace NavigationDrawerDemoTest { [ Activity ( Label = \" Rotten Tomatoes \" , MainLauncher = true , Icon = \" @mipmap/icon \" , Theme = \" @style/NoActionBar \" ) ] public class MainActivity : AppCompatActivity { DrawerLayout drawer ; NavigationView navigationView ; ActionBarDrawerToggle toggle ; Android . Support . V7 . Widget . Toolbar toolbar ; protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ) ; // Set our view from the \" main \" layout resource SetContentView ( Resource . Layout . Main ) ; drawer = FindViewById < DrawerLayout > ( Resource . Id . drawer ) ; navigationView = FindViewById < NavigationView > ( Resource . Id . navigationView ) ; toolbar = FindViewById < Android . Support . V7 . Widget . Toolbar > ( Resource . Id . toolbar ) ; SetSupportActionBar ( toolbar ) ; toggle = new ActionBarDrawerToggle ( this , drawer , toolbar , Resource . String . drawer_open , Resource . String . drawer_close ) ; SupportActionBar . SetHomeButtonEnabled ( true ) ; SupportActionBar . SetDisplayShowTitleEnabled ( true ) ; drawer . AddDrawerListener ( toggle ) ; toggle . SyncState () ; navigationView . NavigationItemSelected += ( object sender , NavigationView . NavigationItemSelectedEventArgs e ) => { switch ( e . MenuItem . ItemId ) { case Resource . Id . action_showing : Toast . MakeText ( this , \" Showing \" , ToastLength . Short ) . Show () ; // Code to change the fragment here . // FragmentManager // . BeginTransaction () // . Replace ( Resource . Id . container , new PopularMoviesFragment ()) // . Commit () ; drawer . CloseDrawer ( GravityCompat . Start ) ; break ; case Resource . Id . action_popular : Toast . MakeText ( this , \" Popular \" , ToastLength . Short ) . Show () ; break ; case Resource . Id . action_favorites : Toast . MakeText ( this , \" showing \" , ToastLength . Short ) . Show () ; break ; } } ; } public override bool OnOptionsItemSelected ( Android . Views . IMenuItem item ) { if ( toggle . OnOptionsItemSelected ( item )) { return true ; } switch ( item . ItemId ) { case Android . Resource . Id . Home : drawer . OpenDrawer ( GravityCompat . Start ) ; break ; } return base . OnOptionsItemSelected ( item ) ; } protected override void OnPostCreate ( Bundle savedInstanceState ) { base . OnPostCreate ( savedInstanceState ) ; toggle . SyncState () ; } public override void OnConfigurationChanged ( Android . Content . Res . Configuration newConfig ) { base . OnConfigurationChanged ( newConfig ) ; toggle . OnConfigurationChanged ( newConfig ) ; } } } Navigating between menu items 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 navigationView . NavigationItemSelected += ( object sender , NavigationView . NavigationItemSelectedEventArgs e ) => { switch ( e . MenuItem . ItemId ) { case Resource . Id . action_showing : FragmentManager . BeginTransaction () . Replace ( Resource . Id . container , new MoviesShowingFragment ()) . Commit () ; drawer . CloseDrawer ( GravityCompat . Start ) ; e . MenuItem . setChecked ( true ) ; // Set action bar title SetTitle ( MenuItem . Title ) ; break ; case Resource . Id . action_popular : FragmentManager . BeginTransaction () . Replace ( Resource . Id . container , new PopularMoviesFragment ()) . Commit () ; drawer . CloseDrawer ( GravityCompat . Start ) ; e . MenuItem . setChecked ( true ) ; // Set action bar title SetTitle ( MenuItem . Title ) ; break ; case Resource . Id . action_favorites : FragmentManager . BeginTransaction () . Replace ( Resource . Id . container , new FavoriteMoviesFragment ()) . Commit () ; drawer . CloseDrawer ( GravityCompat . Start ) ; e . MenuItem . setChecked ( true ) ; // Set action bar title SetTitle ( MenuItem . Title ) ; break ; } } ; One thing to note is that the ActionBarDrawerToggle renders a custom DrawerArrowDrawable for you for the hamburger icon.","title":"Setup"},{"location":"navigation/#making-status-bar-translucent","text":"To have the status bar translucent and have our drawer slide over it, we need to set android:windowTranslucentStatus to true. Because this style is not available for pre Kitkat devices, we\u2019ll add res/values-v19/styles.xml file for API version 19 and onwards. Note: If you modify your res/values/styles.xml directly with this android:windowTranslucentStatus line, you are likely to need to build only for SDK versions 19 or higher, which will obviously limit you from supporting many older devices. In res/values-v19/styles.xml we can add the following: 1 2 3 4 5 6 7 <resources> <!-- Base application theme. --> <style name= \"AppTheme\" parent= \"Theme.AppCompat.Light.NoActionBar\" > <!-- Customize your theme here. --> <item name= \"android:windowTranslucentStatus\" > true </item> </style> </resources> Now if you run your app, you should see the navigation drawer and be able to select between your fragments.","title":"Making Status Bar Translucent"},{"location":"navigation/#adding-custom-views-to-navigation-drawer","text":"One improvement made to the design support library 23.1.0 is the addition of support for custom views for the navigation drawer items. For instance, we can create a custom switch like the navigation drawer from Google Play Movies for one of the rows: The approach is the same as adding custom menu items to the ActionBar. We simply need to define a separate layout such as the following snippet. We will call this file action_view_switch.xml : 1 2 3 4 5 6 7 8 9 10 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <android.support.v7.widget.SwitchCompat android:layout_width= \"fill_parent\" android:layout_height= \"match_parent\" android:text= \"Switch\" /> </LinearLayout> We then reference this layout using the app:actionLayout attribute. A title must be provided but can also be set to blank: 1 2 3 4 5 6 <menu xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:id= \"@+id/nav_switch\" app:actionLayout= \"@layout/action_view_switch\" android:title= \"Downloaded only\" /> </item> </menu> You can attach events directly in XML so long as your Activity will implement the method. To add an event handling to the toggle switch programmatically through Java, you will need to first get the menu instance and get access to the corresponding ActionView: 1 2 3 4 5 6 7 8 9 Menu menu = navigationView . getMenu (); MenuItem menuItem = menu . findItem ( R . id . nav_switch ); View actionView = MenuItemCompat . getActionView ( menuItem ); actionView . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { } } ); Custom widgets using app:actionViewClass can also be used too for menu items as well now too. For more details about how Action Views","title":"Adding custom views to navigation drawer"},{"location":"navigation/#persistent-navigation-drawer","text":"In certain situations, especially on tablets, the navigation drawer should be a permanent fixture on the activity acting as a sidebar: To achieve this effect, review the following links which describe one approach: * Static Nav Drawer * Related Stackoverflow Question * Sample Code Third-party libraries may also make this easier to achieve.","title":"Persistent Navigation Drawer"},{"location":"navigation/#limitations","text":"The current version of the design support library does come with its limitations. The main issue is with the system that highlights the current item in the navigation menu. The itemBackground attribute for the NavigationView does not handle the checked state of the item correctly: somehow either all items are highlighted or none of them are. This makes this attribute basically unusable for most apps.","title":"Limitations"},{"location":"navigation/#alternative-to-fragments","text":"Although many navigation drawer examples show how fragments can be used with the navigation drawer, you can also use a RelativeLayout/LinearLayout if you wish to use the drawer as an overlay to your currently displayed Activity. Instead of <FrameLayout> you can substitute that for a <LinearLayout> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 <android.support.v4.widget.DrawerLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:id= \"@+id/drawer_layout\" > <LinearLayout android:id= \"@+id/content_frame\" android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> <!-- The navigation drawer --> <ListView android:id= \"@+id/left_drawer\" android:layout_width= \"240dp\" android:layout_height= \"wrap_content\" android:layout_gravity= \"start\" android:choiceMode= \"singleChoice\" android:divider= \"@android:color/transparent\" android:dividerHeight= \"0dp\" android:background= \"#111\" /> </android.support.v4.widget.DrawerLayout> Instead of this: 1 2 3 4 // Insert the fragment by replacing any existing fragment getFragmentManager (). beginTransaction () . replace ( R . id . content_frame , fragment ) . commit (); You can instead use the LinearLayout container to inflate the Activity directly: 1 2 3 LayoutInflater inflater = getLayoutInflater (); LinearLayout container = ( LinearLayout ) findViewById ( R . id . content_frame ); inflater . inflate ( R . layout . activity_main , container );","title":"Alternative to Fragments"},{"location":"navigation/#references","text":"http://developer.android.com/guide/components/intents-filters.html http://developer.android.com/reference/android/content/Intent.html http://www.vogella.com/articles/AndroidIntent/article.html https://developer.android.com/training/app-links/index.html","title":"References"},{"location":"networking/","text":"Networking in Android \u00b6 Making a Networking Call \u00b6 Network requests are used to retrieve or modify API data or media from a server. This is a very common task in Android development especially for dynamic data-driven clients. Permissions \u00b6 In order to access the internet, be sure to specify the following permissions in AndroidManifest.xml : 1 2 3 4 5 6 7 8 9 10 <? xml version = \"1.0\" encoding = \"utf-8\" ?> < manifest xmlns : android = \"http://schemas.android.com/apk/res/android\" package = \"com.example.simplenetworking\" android : versionCode = \"1\" android : versionName = \"1.0\" > < uses - permission android : name = \"android.permission.INTERNET\" /> < uses - permission android : name = \"android.permission.ACCESS_NETWORK_STATE\" /> </ manifest > Performing a GET Request \u00b6 To make a network call, you can use the System.Net.Http.HttpClient . You will need to add the permissions in the AndroidManifest.xml file, <uses-permission android:name=\"android.permission.INTERNET\" /> 1 2 3 4 5 6 7 8 9 10 11 12 13 button . Click += async delegate { using ( var client = new HttpClient ()) { try { var content = await client . GetStringAsync ( \" http://api.icndb.com/jokes/random \" ) ; Console . WriteLine ( content ) ; } catch ( Exception ex ) { Console . WriteLine ( ex . Message ) ; } } } ; Performing a POST Request \u00b6 To send data to the server, you need to use the pass the parameters using FormUrlEncodedContent . The parameters will be sent as key/value pairs. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 button . Click += async delegate { using (var client = new HttpClient()) { client.BaseAddress = new Uri(\" http : // api . peruzal . com / \"); //Create a list of params var content = new FormUrlEncodedContent(new [] { //The parameters to post, in a key/value pair new KeyValuePair<string, string>(\" title \", \" Dawn of the Planet Earth \"), new KeyValuePair<string, string>(\" category \", \" Sci-Fi \") }); //Make the network call to post var result = await client.PostAsync(\" / api / movie \" , content ); string resultContent = await result.Content.ReadAsStringAsync() ; Console.WriteLine(resultContent) ; } } ; Checking for Network Connectivity \u00b6 First, make sure to setup the android.permission.ACCESS_NETWORK_STATE permission as shown above. To verify network availability you can then define and call this method: Get the ConnectivityManager 1 ConnectivityManager connectivityManager = ( ConnectivityManager ) GetSystemService ( ConnectivityService ); To check if the device is connected to any type of network the ActiveNetworkInfo property of ConnectivityManager returns information about the type of network the device is using. The app uses this NetworkInfo object to see if the device is connected: 1 2 NetworkInfo networkInfo = connectivityManager . ActiveNetworkInfo ; bool isOnline = networkInfo . IsConnected ; Connected to WiFi \u00b6 The property NetworkInfo.Type returns a ConnectivityType value which can be checked to see if the device is connected to a WiFi network: 1 2 3 4 5 6 7 8 9 10 bool isWifi = networkInfo . Type == ConnectivityType . Wifi ; if ( isWifi ) { Log . Debug ( TAG , \" Wifi connected. \" ) ; _wifiImage . SetImageResource ( Resource . Drawable . green_square ) ; } else { Log . Debug ( TAG , \" Wifi disconnected. \" ) ; _wifiImage . SetImageResource ( Resource . Drawable . red_square ) ; } Detect When Roaming \u00b6 The .IsRoaming property on the NetworkInfo class is a boolean value that is used to determine if they device is roaming while connected to a mobile network. 1 2 3 4 5 6 7 if ( networkInfo . IsRoaming ) { Log . Debug ( TAG , \" Roaming. \" ) ; } else { Log . Debug ( TAG , \" Not roaming. \" ) ; } Connected to mobile \u00b6 1 2 3 4 5 6 7 8 9 10 /** * Check if there is any connectivity to a mobile network * @param context // @param type * @return */ public static bool IsConnectedMobile ( Context context ) { NetworkInfo info = Connectivity . GetNetworkInfo ( context ) ; return ( info != null && info . IsConnected && info . Type == ConnectivityType . Mobile ) ; } Connected to a fast network \u00b6 1 2 3 4 5 6 7 8 9 10 /** * Check if there is fast connectivity * @param context * @return */ public static bool IsConnectedFast ( Context context ) { NetworkInfo info = Connectivity . GetNetworkInfo ( context ) ; TelephonyManager tm = TelephonyManager . FromContext ( context ) ; return ( info != null && info . IsConnected && Connectivity . IsConnectionFast ( info . Type , tm . NetworkType )) ; } Displaying Remote Images \u00b6 The Picasso and Glide libraries are by far the easiest to display remote images into an app. Add the Picasso library through Nuget. 1 2 3 var imageUri = \"https://i.imgur.com/tGbaZCY.jpg\" ; ImageView ivBasicImage = ( ImageView ) findViewById ( R . id . ivBasicImage ); Picasso . With ( context ) . Load ( imageUri ) . Into ( ivBasicImage ); Using Parse SDK \u00b6 The Parse Server allows you to create mobile backend quickly without writing the API yourself. Parse creates the REST API for you and you can use REST to access it or use their SDKs. The SDKs are available for several programming languages and platforms. To get started with Parse, you first you need to host the server either locally, on Heroku, Amazon AWS or Azure. Then you install the Nuget package and use the this guide .","title":"Networking"},{"location":"networking/#networking-in-android","text":"","title":"Networking in Android"},{"location":"networking/#making-a-networking-call","text":"Network requests are used to retrieve or modify API data or media from a server. This is a very common task in Android development especially for dynamic data-driven clients.","title":"Making a Networking Call"},{"location":"networking/#permissions","text":"In order to access the internet, be sure to specify the following permissions in AndroidManifest.xml : 1 2 3 4 5 6 7 8 9 10 <? xml version = \"1.0\" encoding = \"utf-8\" ?> < manifest xmlns : android = \"http://schemas.android.com/apk/res/android\" package = \"com.example.simplenetworking\" android : versionCode = \"1\" android : versionName = \"1.0\" > < uses - permission android : name = \"android.permission.INTERNET\" /> < uses - permission android : name = \"android.permission.ACCESS_NETWORK_STATE\" /> </ manifest >","title":"Permissions"},{"location":"networking/#performing-a-get-request","text":"To make a network call, you can use the System.Net.Http.HttpClient . You will need to add the permissions in the AndroidManifest.xml file, <uses-permission android:name=\"android.permission.INTERNET\" /> 1 2 3 4 5 6 7 8 9 10 11 12 13 button . Click += async delegate { using ( var client = new HttpClient ()) { try { var content = await client . GetStringAsync ( \" http://api.icndb.com/jokes/random \" ) ; Console . WriteLine ( content ) ; } catch ( Exception ex ) { Console . WriteLine ( ex . Message ) ; } } } ;","title":"Performing a GET Request"},{"location":"networking/#performing-a-post-request","text":"To send data to the server, you need to use the pass the parameters using FormUrlEncodedContent . The parameters will be sent as key/value pairs. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 button . Click += async delegate { using (var client = new HttpClient()) { client.BaseAddress = new Uri(\" http : // api . peruzal . com / \"); //Create a list of params var content = new FormUrlEncodedContent(new [] { //The parameters to post, in a key/value pair new KeyValuePair<string, string>(\" title \", \" Dawn of the Planet Earth \"), new KeyValuePair<string, string>(\" category \", \" Sci-Fi \") }); //Make the network call to post var result = await client.PostAsync(\" / api / movie \" , content ); string resultContent = await result.Content.ReadAsStringAsync() ; Console.WriteLine(resultContent) ; } } ;","title":"Performing a POST Request"},{"location":"networking/#checking-for-network-connectivity","text":"First, make sure to setup the android.permission.ACCESS_NETWORK_STATE permission as shown above. To verify network availability you can then define and call this method: Get the ConnectivityManager 1 ConnectivityManager connectivityManager = ( ConnectivityManager ) GetSystemService ( ConnectivityService ); To check if the device is connected to any type of network the ActiveNetworkInfo property of ConnectivityManager returns information about the type of network the device is using. The app uses this NetworkInfo object to see if the device is connected: 1 2 NetworkInfo networkInfo = connectivityManager . ActiveNetworkInfo ; bool isOnline = networkInfo . IsConnected ;","title":"Checking for Network Connectivity"},{"location":"networking/#connected-to-wifi","text":"The property NetworkInfo.Type returns a ConnectivityType value which can be checked to see if the device is connected to a WiFi network: 1 2 3 4 5 6 7 8 9 10 bool isWifi = networkInfo . Type == ConnectivityType . Wifi ; if ( isWifi ) { Log . Debug ( TAG , \" Wifi connected. \" ) ; _wifiImage . SetImageResource ( Resource . Drawable . green_square ) ; } else { Log . Debug ( TAG , \" Wifi disconnected. \" ) ; _wifiImage . SetImageResource ( Resource . Drawable . red_square ) ; }","title":"Connected to WiFi"},{"location":"networking/#detect-when-roaming","text":"The .IsRoaming property on the NetworkInfo class is a boolean value that is used to determine if they device is roaming while connected to a mobile network. 1 2 3 4 5 6 7 if ( networkInfo . IsRoaming ) { Log . Debug ( TAG , \" Roaming. \" ) ; } else { Log . Debug ( TAG , \" Not roaming. \" ) ; }","title":"Detect When Roaming"},{"location":"networking/#connected-to-mobile","text":"1 2 3 4 5 6 7 8 9 10 /** * Check if there is any connectivity to a mobile network * @param context // @param type * @return */ public static bool IsConnectedMobile ( Context context ) { NetworkInfo info = Connectivity . GetNetworkInfo ( context ) ; return ( info != null && info . IsConnected && info . Type == ConnectivityType . Mobile ) ; }","title":"Connected to mobile"},{"location":"networking/#connected-to-a-fast-network","text":"1 2 3 4 5 6 7 8 9 10 /** * Check if there is fast connectivity * @param context * @return */ public static bool IsConnectedFast ( Context context ) { NetworkInfo info = Connectivity . GetNetworkInfo ( context ) ; TelephonyManager tm = TelephonyManager . FromContext ( context ) ; return ( info != null && info . IsConnected && Connectivity . IsConnectionFast ( info . Type , tm . NetworkType )) ; }","title":"Connected to a fast network"},{"location":"networking/#displaying-remote-images","text":"The Picasso and Glide libraries are by far the easiest to display remote images into an app. Add the Picasso library through Nuget. 1 2 3 var imageUri = \"https://i.imgur.com/tGbaZCY.jpg\" ; ImageView ivBasicImage = ( ImageView ) findViewById ( R . id . ivBasicImage ); Picasso . With ( context ) . Load ( imageUri ) . Into ( ivBasicImage );","title":"Displaying Remote Images"},{"location":"networking/#using-parse-sdk","text":"The Parse Server allows you to create mobile backend quickly without writing the API yourself. Parse creates the REST API for you and you can use REST to access it or use their SDKs. The SDKs are available for several programming languages and platforms. To get started with Parse, you first you need to host the server either locally, on Heroku, Amazon AWS or Azure. Then you install the Nuget package and use the this guide .","title":"Using Parse SDK"},{"location":"notifications/","text":"Android Notifications \u00b6 What is a notification \u00b6 Types of notifications \u00b6 Creating notifications \u00b6 Delivering notifications \u00b6 Reusing notifications \u00b6 Clearing notifications \u00b6 Notification compatibility \u00b6 Local Notifications \u00b6 Remote Notifications with Firebase \u00b6","title":"Notifications"},{"location":"notifications/#android-notifications","text":"","title":"Android Notifications"},{"location":"notifications/#what-is-a-notification","text":"","title":"What is a notification"},{"location":"notifications/#types-of-notifications","text":"","title":"Types of notifications"},{"location":"notifications/#creating-notifications","text":"","title":"Creating notifications"},{"location":"notifications/#delivering-notifications","text":"","title":"Delivering notifications"},{"location":"notifications/#reusing-notifications","text":"","title":"Reusing notifications"},{"location":"notifications/#clearing-notifications","text":"","title":"Clearing notifications"},{"location":"notifications/#notification-compatibility","text":"","title":"Notification compatibility"},{"location":"notifications/#local-notifications","text":"","title":"Local Notifications"},{"location":"notifications/#remote-notifications-with-firebase","text":"","title":"Remote Notifications with Firebase"},{"location":"permissions/","text":"Understanding Android Permissions \u00b6","title":"Permissions"},{"location":"permissions/#understanding-android-permissions","text":"","title":"Understanding Android Permissions"},{"location":"persistence/","text":"Persistence in Android \u00b6 Shared Preferences \u00b6 You can use shared preferences to save arbitrarily data on the device. Saving sensitive information Please do not save sensitive information in shared preferences since they are stored in plain text files on the device. To save preferences you use the ISharedPreferences interface. Get the default shared preferences \u00b6 The default shared preferences are saved in a file thats prefixed your your app's package name. To get the default shared preferences use the the SharedPreferenceManager class as follows: 1 var sharedPreferences = PreferenceManager . GetDefaultSharedPreferences ( this ); Then you can use the ISharedPreferencesEditor to add the preferences as follows: 1 var editor = sharedPreferences . Edit (); You can now use the editor to put the preferences using a key/value pair as follows : 1 editor . PutString ( \"NICKNAME\" , \"joseph\" ); You should call Commit() or Apply() when done to apply the change. Apply() commits the changes asynchronously. Creating a shared preference file \u00b6 You can also create a named shared preferences file instead of using the default one. You use the GetSharedPreferences() method and supply a name of the preferences file and the mode to create it as follows: 1 var namesSharedPrefs = GetSharedPreferences ( \"colors\" , FileCreationMode . Private ); You can perform the same operations as with the default shared preferences. Restoring shared preferences \u00b6 To get the shared preferences, first get the shared preference and use the various get methods to retrieve the preferences as follows: 1 var nickname = sharedPreferences . GetString ( \"NICKNAME\" , \"defaultValue\" ); You need to specify a default value if the preference is not found. Clearing shared preferences \u00b6 You can clear all the preferences by calling the Clear() method on the ISharedPreferenceEditor of the shared preferences as follows: 1 sharedPreferences . Edit (). Clear (). Apply (); We also called Apply() to commit the changes. Listening for preference changes \u00b6 You can register a listener to be notified when the preferences changes using the RegisterOnSharedPreferenceChangeListener() method on the shared preferences. You will need to implement the interface ISharedPreferencesOnSharedPreferenceChangeListener as follows: 1 PreferenceManager . GetDefaultSharedPreferences ( this ). RegisterOnSharedPreferenceChangeListener ( this ); and then implementing the interface on the activity as follows : 1 2 3 4 5 6 public class LoginActivity : AppCompatActivity , ISharedPreferencesOnSharedPreferenceChangeListener { public void OnSharedPreferenceChanged ( ISharedPreferences sharedPreferences , string key ) { ... } } Adding a Setting Screen Using PreferenceFragmentCompat \u00b6 They are several ways to add a Settings/Preference Screen to your app : Use the PreferenceActivity Use the PreferenceFragment Use the PreferenceFragmentCompat Adding an xml Resource File \u00b6 For both methods you will need an an xml resource file to be added into the Resources folder under the xml directory. Create the xml folder if it does not yet exists under the Resources directory Create a new xml resource file into the just created xml resource directory or use the existing one. Add the preferences. The preferences have the equivalent names to their views with the additional Preference suffix, e.g to add an EditText preference you use EditTextPreference. Also preferences use keys instead of id since they are stored as key/value pairs Resources/xml/prefs.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 <?xml version=\"1.0\" encoding=\"utf-8\"?> <PreferenceScreen xmlns:android= \"http://schemas.android.com/apk/res/android\" > <PreferenceCategory android:title= \"General\" > <EditTextPreference android:key= \"nickname\" android:title= \"Nickname\" /> </PreferenceCategory> <PreferenceCategory android:title= \"Notifications\" > <SwitchPreference android:title= \"Notifications\" android:summary= \"Get notifications when you receive messages\" android:key= \"notifications\" android:defaultValue= \"true\" /> <RingtonePreference android:defaultValue= \"content://settings/system/notification_sound\" android:dependency= \"notifications\" android:key= \"user_joined\" android:title= \"User Joined\" android:summary= \"Alert for when a user joins the chat\" android:ringtoneType= \"notification\" /> <RingtonePreference android:defaultValue= \"content://settings/system/notification_sound\" android:dependency= \"notifications\" android:key= \"user_left\" android:title= \"User Left\" android:summary= \"Alert for when a user leaves the chat\" android:ringtoneType= \"notification\" /> <RingtonePreference android:defaultValue= \"content://settings/system/notification_sound\" android:dependency= \"notifications\" android:key= \"mew_message\" android:title= \"New Message\" android:summary= \"Alert for when a new message arrives\" android:ringtoneType= \"notification\" /> </PreferenceCategory> </PreferenceScreen> The settings UI is defined inside the following tags : 1 2 3 <PreferenceScreen xmlns:android= \"http://schemas.android.com/apk/res/android\" > ... </PreferenceScreen> Adding Categories \u00b6 We add categories to the settings UI by using the 1 2 3 <PreferenceCategory android:title= \"General\" > ... </PreferenceCategory> Adding a Switch Preference \u00b6 1 2 3 4 5 <SwitchPreference android:title= \"Notifications\" android:summary= \"Get notifications when you receive messages\" android:key= \"notifications\" android:defaultValue= \"true\" /> Adding a Ringtone Preference \u00b6 The ringtone preference will load the phone ringtones settings into your settings screen and lets the user pick a ringtone. You can also add a default ringtone 1 2 3 4 5 6 7 <RingtonePreference android:defaultValue= \"content://settings/system/notification_sound\" android:dependency= \"notifications\" android:key= \"user_joined\" android:title= \"User Joined\" android:summary= \"Alert for when a user joins the chat\" android:ringtoneType= \"notification\" /> Adding a Settings Screen using PreferenceActivity \u00b6 The easiest way to add a settings screen is to create an activity that inherits from the PreferenceActivity class. We will use the xml resource defined above. Create a new Activity Inherit from PreferenceActivity instead of Activity or AppCompatActivity n the OnCreate method, instead of setting the SetContentView method use AddPreferencesFromResource method. Notice this method is deprecated, so you will need to use the other methods. PrefsActivity.cs 1 2 3 4 5 6 7 8 9 [Activity(Label = \"PreActivity\")] public class PrefsActivity : PreferenceActivity { protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); AddPreferencesFromResource ( Resource . Xml . prefs ); } } Add a Menu option to Open the Settings Screen \u00b6 You will need to define a menu so you can use it to open the settings screen. Add the menu folder in the Resources folder if one does not yet exist Create a menu.xml file 1 2 3 4 5 6 <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:id= \"@+id/action_menu\" android:title= \"Settings\" /> </menu> We will use the defined id on the menu to find which menu option have been selected. Modify the activity you want to be able to access the settings from and create the menu. MainActivity.cs 1 2 3 4 5 6 //Create the options menu public override bool OnCreateOptionsMenu ( Android . Views . IMenu menu ) { MenuInflater . Inflate ( Resource . Menu . menu , menu ); return base . OnCreateOptionsMenu ( menu ); } Handle the menu selection as follows : 1 2 3 4 5 6 7 8 9 //Handle the selecting of the options menu public override bool OnOptionsItemSelected ( Android . Views . IMenuItem item ) { var id = item . ItemId ; if ( id == Resource . Id . action_menu ) { StartActivity ( new Android . Content . Intent ( this , typeof ( PrefsActivity ))); } return true ; } Now when you run you should be able to get an option item called Settings. When click it, the settings screen should load up. Adding a Settings Screen Using a PreferenceFragment \u00b6 Use the following steps to create a settings screen using the PreferenceFragment : Create a class that derives from PreferenceFragment In the OnCreate method use the AddPreferenceFromResource method to inflate the preference xml file PrefsFragment.cs 1 2 3 4 5 6 7 8 public class PrefsFrgament : PreferenceFragment { public override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); AddPreferencesFromResource ( Resource . Xml . prefs ); } } In the activity you would like to show the preference, replace an exisiting container, usually FrameLayout with the PrefsFragment Resources/layout/activity_main.axml 1 2 3 4 5 6 7 8 9 10 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <FrameLayout android:id= \"@+id/content\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> </LinearLayout> PrefsActivity.cs Use the FragmentManager to replace the FrameLayout with the PrefsFragment 1 2 3 4 FragmentManager . BeginTransaction () . Replace ( Resource . Id . content , new PrefsFragment ()) . Commit (); PrefsActivity.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 using Android.App ; using Android.OS ; using Android.Support.V4.App ; using Android.Support.V7.App ; using Android.Views ; namespace sharedPreferenceDemo { [Activity(Label = \"PrefsActivity\", Theme = \"@style/AppTheme\", ParentActivity = typeof(MainActivity))] [MetaData(\"android.support.PARENT_ACTIVITY\", Value = \"md51c3958e33f8e72dae9076079df527ba2.MainActivity\")] public class PrefsActivity : AppCompatActivity { protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); SetContentView ( Resource . Layout . activity_prefs ); FragmentManager . BeginTransaction () . Replace ( Resource . Id . content , new PFrgament ()) . Commit (); if ( SupportActionBar != null ) { SupportActionBar . SetDisplayHomeAsUpEnabled ( true ); } } public override bool OnOptionsItemSelected ( IMenuItem item ) { if ( item . ItemId == Android . Resource . Id . Home ) { NavUtils . NavigateUpFromSameTask ( this ); } return base . OnOptionsItemSelected ( item ); } } } Adding Up Arrow for Back Navigation \u00b6 In the Oncreate method we check if we have an ActionBar and set the up arrow to display : 1 2 3 if ( SupportActionBar != null ) { SupportActionBar . SetDisplayHomeAsUpEnabled ( true ); } Then we handle the clicking of the up arrow in the OnOptionsItemSelected methods : 1 2 3 4 5 6 7 public override bool OnOptionsItemSelected ( IMenuItem item ) { if ( item . ItemId == Android . Resource . Id . Home ) { NavUtils . NavigateUpFromSameTask ( this ); } return base . OnOptionsItemSelected ( item ); } Adding a Parent Activity \u00b6 In oder to go back to a parent activity when we click the up arrow, we need to add attribute to the activity. We specify the ParentActivity 1 [Activity(Label = \"PrefsActivity\", Theme = \"@style/AppTheme\", ParentActivity = typeof(MainActivity))] For this to also work on older devices, we have to use a MetaData attribute and use the the name as android.support.PARENT_ACTIVITY and the value to be fully qualified name of the activity to navigate back to. 1 [MetaData(\"android.support.PARENT_ACTIVITY\", Value = \"md51c3958e33f8e72dae9076079df527ba2.MainActivity\")] You can find the MD5Sum, md51c3958e33f8e72dae9076079df527ba2 of the activity by check the generated AndroidManifest.xml file in the obj folder","title":"Persistence"},{"location":"persistence/#persistence-in-android","text":"","title":"Persistence in Android"},{"location":"persistence/#shared-preferences","text":"You can use shared preferences to save arbitrarily data on the device. Saving sensitive information Please do not save sensitive information in shared preferences since they are stored in plain text files on the device. To save preferences you use the ISharedPreferences interface.","title":"Shared Preferences"},{"location":"persistence/#get-the-default-shared-preferences","text":"The default shared preferences are saved in a file thats prefixed your your app's package name. To get the default shared preferences use the the SharedPreferenceManager class as follows: 1 var sharedPreferences = PreferenceManager . GetDefaultSharedPreferences ( this ); Then you can use the ISharedPreferencesEditor to add the preferences as follows: 1 var editor = sharedPreferences . Edit (); You can now use the editor to put the preferences using a key/value pair as follows : 1 editor . PutString ( \"NICKNAME\" , \"joseph\" ); You should call Commit() or Apply() when done to apply the change. Apply() commits the changes asynchronously.","title":"Get the default shared preferences"},{"location":"persistence/#creating-a-shared-preference-file","text":"You can also create a named shared preferences file instead of using the default one. You use the GetSharedPreferences() method and supply a name of the preferences file and the mode to create it as follows: 1 var namesSharedPrefs = GetSharedPreferences ( \"colors\" , FileCreationMode . Private ); You can perform the same operations as with the default shared preferences.","title":"Creating a shared preference file"},{"location":"persistence/#restoring-shared-preferences","text":"To get the shared preferences, first get the shared preference and use the various get methods to retrieve the preferences as follows: 1 var nickname = sharedPreferences . GetString ( \"NICKNAME\" , \"defaultValue\" ); You need to specify a default value if the preference is not found.","title":"Restoring shared preferences"},{"location":"persistence/#clearing-shared-preferences","text":"You can clear all the preferences by calling the Clear() method on the ISharedPreferenceEditor of the shared preferences as follows: 1 sharedPreferences . Edit (). Clear (). Apply (); We also called Apply() to commit the changes.","title":"Clearing shared preferences"},{"location":"persistence/#listening-for-preference-changes","text":"You can register a listener to be notified when the preferences changes using the RegisterOnSharedPreferenceChangeListener() method on the shared preferences. You will need to implement the interface ISharedPreferencesOnSharedPreferenceChangeListener as follows: 1 PreferenceManager . GetDefaultSharedPreferences ( this ). RegisterOnSharedPreferenceChangeListener ( this ); and then implementing the interface on the activity as follows : 1 2 3 4 5 6 public class LoginActivity : AppCompatActivity , ISharedPreferencesOnSharedPreferenceChangeListener { public void OnSharedPreferenceChanged ( ISharedPreferences sharedPreferences , string key ) { ... } }","title":"Listening for preference changes"},{"location":"persistence/#adding-a-setting-screen-using-preferencefragmentcompat","text":"They are several ways to add a Settings/Preference Screen to your app : Use the PreferenceActivity Use the PreferenceFragment Use the PreferenceFragmentCompat","title":"Adding a Setting Screen Using PreferenceFragmentCompat"},{"location":"persistence/#adding-an-xml-resource-file","text":"For both methods you will need an an xml resource file to be added into the Resources folder under the xml directory. Create the xml folder if it does not yet exists under the Resources directory Create a new xml resource file into the just created xml resource directory or use the existing one. Add the preferences. The preferences have the equivalent names to their views with the additional Preference suffix, e.g to add an EditText preference you use EditTextPreference. Also preferences use keys instead of id since they are stored as key/value pairs Resources/xml/prefs.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 <?xml version=\"1.0\" encoding=\"utf-8\"?> <PreferenceScreen xmlns:android= \"http://schemas.android.com/apk/res/android\" > <PreferenceCategory android:title= \"General\" > <EditTextPreference android:key= \"nickname\" android:title= \"Nickname\" /> </PreferenceCategory> <PreferenceCategory android:title= \"Notifications\" > <SwitchPreference android:title= \"Notifications\" android:summary= \"Get notifications when you receive messages\" android:key= \"notifications\" android:defaultValue= \"true\" /> <RingtonePreference android:defaultValue= \"content://settings/system/notification_sound\" android:dependency= \"notifications\" android:key= \"user_joined\" android:title= \"User Joined\" android:summary= \"Alert for when a user joins the chat\" android:ringtoneType= \"notification\" /> <RingtonePreference android:defaultValue= \"content://settings/system/notification_sound\" android:dependency= \"notifications\" android:key= \"user_left\" android:title= \"User Left\" android:summary= \"Alert for when a user leaves the chat\" android:ringtoneType= \"notification\" /> <RingtonePreference android:defaultValue= \"content://settings/system/notification_sound\" android:dependency= \"notifications\" android:key= \"mew_message\" android:title= \"New Message\" android:summary= \"Alert for when a new message arrives\" android:ringtoneType= \"notification\" /> </PreferenceCategory> </PreferenceScreen> The settings UI is defined inside the following tags : 1 2 3 <PreferenceScreen xmlns:android= \"http://schemas.android.com/apk/res/android\" > ... </PreferenceScreen>","title":"Adding an xml Resource File"},{"location":"persistence/#adding-categories","text":"We add categories to the settings UI by using the 1 2 3 <PreferenceCategory android:title= \"General\" > ... </PreferenceCategory>","title":"Adding Categories"},{"location":"persistence/#adding-a-switch-preference","text":"1 2 3 4 5 <SwitchPreference android:title= \"Notifications\" android:summary= \"Get notifications when you receive messages\" android:key= \"notifications\" android:defaultValue= \"true\" />","title":"Adding a Switch Preference"},{"location":"persistence/#adding-a-ringtone-preference","text":"The ringtone preference will load the phone ringtones settings into your settings screen and lets the user pick a ringtone. You can also add a default ringtone 1 2 3 4 5 6 7 <RingtonePreference android:defaultValue= \"content://settings/system/notification_sound\" android:dependency= \"notifications\" android:key= \"user_joined\" android:title= \"User Joined\" android:summary= \"Alert for when a user joins the chat\" android:ringtoneType= \"notification\" />","title":"Adding a Ringtone Preference"},{"location":"persistence/#adding-a-settings-screen-using-preferenceactivity","text":"The easiest way to add a settings screen is to create an activity that inherits from the PreferenceActivity class. We will use the xml resource defined above. Create a new Activity Inherit from PreferenceActivity instead of Activity or AppCompatActivity n the OnCreate method, instead of setting the SetContentView method use AddPreferencesFromResource method. Notice this method is deprecated, so you will need to use the other methods. PrefsActivity.cs 1 2 3 4 5 6 7 8 9 [Activity(Label = \"PreActivity\")] public class PrefsActivity : PreferenceActivity { protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); AddPreferencesFromResource ( Resource . Xml . prefs ); } }","title":"Adding a Settings Screen using PreferenceActivity"},{"location":"persistence/#add-a-menu-option-to-open-the-settings-screen","text":"You will need to define a menu so you can use it to open the settings screen. Add the menu folder in the Resources folder if one does not yet exist Create a menu.xml file 1 2 3 4 5 6 <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:id= \"@+id/action_menu\" android:title= \"Settings\" /> </menu> We will use the defined id on the menu to find which menu option have been selected. Modify the activity you want to be able to access the settings from and create the menu. MainActivity.cs 1 2 3 4 5 6 //Create the options menu public override bool OnCreateOptionsMenu ( Android . Views . IMenu menu ) { MenuInflater . Inflate ( Resource . Menu . menu , menu ); return base . OnCreateOptionsMenu ( menu ); } Handle the menu selection as follows : 1 2 3 4 5 6 7 8 9 //Handle the selecting of the options menu public override bool OnOptionsItemSelected ( Android . Views . IMenuItem item ) { var id = item . ItemId ; if ( id == Resource . Id . action_menu ) { StartActivity ( new Android . Content . Intent ( this , typeof ( PrefsActivity ))); } return true ; } Now when you run you should be able to get an option item called Settings. When click it, the settings screen should load up.","title":"Add a Menu option to Open the Settings Screen"},{"location":"persistence/#adding-a-settings-screen-using-a-preferencefragment","text":"Use the following steps to create a settings screen using the PreferenceFragment : Create a class that derives from PreferenceFragment In the OnCreate method use the AddPreferenceFromResource method to inflate the preference xml file PrefsFragment.cs 1 2 3 4 5 6 7 8 public class PrefsFrgament : PreferenceFragment { public override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); AddPreferencesFromResource ( Resource . Xml . prefs ); } } In the activity you would like to show the preference, replace an exisiting container, usually FrameLayout with the PrefsFragment Resources/layout/activity_main.axml 1 2 3 4 5 6 7 8 9 10 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <FrameLayout android:id= \"@+id/content\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> </LinearLayout> PrefsActivity.cs Use the FragmentManager to replace the FrameLayout with the PrefsFragment 1 2 3 4 FragmentManager . BeginTransaction () . Replace ( Resource . Id . content , new PrefsFragment ()) . Commit (); PrefsActivity.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 using Android.App ; using Android.OS ; using Android.Support.V4.App ; using Android.Support.V7.App ; using Android.Views ; namespace sharedPreferenceDemo { [Activity(Label = \"PrefsActivity\", Theme = \"@style/AppTheme\", ParentActivity = typeof(MainActivity))] [MetaData(\"android.support.PARENT_ACTIVITY\", Value = \"md51c3958e33f8e72dae9076079df527ba2.MainActivity\")] public class PrefsActivity : AppCompatActivity { protected override void OnCreate ( Bundle savedInstanceState ) { base . OnCreate ( savedInstanceState ); SetContentView ( Resource . Layout . activity_prefs ); FragmentManager . BeginTransaction () . Replace ( Resource . Id . content , new PFrgament ()) . Commit (); if ( SupportActionBar != null ) { SupportActionBar . SetDisplayHomeAsUpEnabled ( true ); } } public override bool OnOptionsItemSelected ( IMenuItem item ) { if ( item . ItemId == Android . Resource . Id . Home ) { NavUtils . NavigateUpFromSameTask ( this ); } return base . OnOptionsItemSelected ( item ); } } }","title":"Adding a Settings Screen Using a PreferenceFragment"},{"location":"persistence/#adding-up-arrow-for-back-navigation","text":"In the Oncreate method we check if we have an ActionBar and set the up arrow to display : 1 2 3 if ( SupportActionBar != null ) { SupportActionBar . SetDisplayHomeAsUpEnabled ( true ); } Then we handle the clicking of the up arrow in the OnOptionsItemSelected methods : 1 2 3 4 5 6 7 public override bool OnOptionsItemSelected ( IMenuItem item ) { if ( item . ItemId == Android . Resource . Id . Home ) { NavUtils . NavigateUpFromSameTask ( this ); } return base . OnOptionsItemSelected ( item ); }","title":"Adding Up Arrow for Back Navigation"},{"location":"persistence/#adding-a-parent-activity","text":"In oder to go back to a parent activity when we click the up arrow, we need to add attribute to the activity. We specify the ParentActivity 1 [Activity(Label = \"PrefsActivity\", Theme = \"@style/AppTheme\", ParentActivity = typeof(MainActivity))] For this to also work on older devices, we have to use a MetaData attribute and use the the name as android.support.PARENT_ACTIVITY and the value to be fully qualified name of the activity to navigate back to. 1 [MetaData(\"android.support.PARENT_ACTIVITY\", Value = \"md51c3958e33f8e72dae9076079df527ba2.MainActivity\")] You can find the MD5Sum, md51c3958e33f8e72dae9076079df527ba2 of the activity by check the generated AndroidManifest.xml file in the obj folder","title":"Adding a Parent Activity"},{"location":"recyclerview/","text":"RecyclerView \u00b6 The RecyclerView class is a more advanced and flexible version of ListView. It's a container for displaying large, scrollable data sets efficiently by maintaining a limited number of View items. RecyclerView or ListView Use RecyclerView when you need to display a large amount of scrollable data, or data collections whose elements change at runtime based on user action or network events. Use a ListView to display a short list with static data. A RecyclerView requires a lot of code to implement but offers performance benefits compared to the ListView . RecyclerView components \u00b6 A RecyclerView is made up of several components. This is what adds to the complexity of the RecyclerView: Adapter : Use an extension of RecyclerView.Adapter to connect your data to the RecyclerView . It prepares the data and how will be displayed in a ViewHolder. When the data changes, the adapter updates the contents of the respective list item view in the RecyclerView . ViewHolder : Use an extension of RecyclerView.ViewHolder to contain the information for displaying one View item using the item's layout. LayoutManager : The layout manager handles the organization (layout) of user interface components in a View. This could be a LinearLayoutManager , GridLayout or a StaggeredGridLayoutManager RecyclerView : he scrolling list that contains the list items. An instance of RecyclerView as defined in the Activity layout file to act as the container for the View items. Data : The data shown in the RecyclerView Layout for one item of data : The layout for a list item is kept in a separate XML layout file so that the adapter can create View items and edit their contents independently from the layout of the Activity. Animations : Animations for adding and removing items are enabled by default in RecyclerView . To customize these animations, extend the RecyclerView.ItemAnimator class Implementing a RecyclerView \u00b6 Implementing a RecyclerView requires the following steps: Add the RecyclerView dependency if needed. Add the RecyclerView to the Activity layout. Create a layout XML file for one View item. Extend RecyclerView.Adapter and implement the OnCreateViewHolder() and OnBindViewHolder() methods. Extend RecyclerView.ViewHolder to create a ViewHolder for your item layout. In the Activity , inside the OnCreate() method, create a RecyclerView and initialize it with the adapter and a layout manager. Adding the package dependency \u00b6 Using the project template from Visual Studio 2019, the support libraries will already be installed, there's nothing to configure. If the support package is not installed, open the nuget packager manager and search for Xamarin.Android.Support.v7.RecyclerView Adding Recycler to layout file \u00b6 Add the RecyclerView to the activity layout file as follows: 1 2 3 4 <android.support.v7.widget.RecyclerView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:id= \"@+id/recyclerView\" /> Create the layout to hold each item \u00b6 Create the layout to hold once item use by the ViewHolder.We will create a simple layout here follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <TextView android:text= \"Popular Movies\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> </LinearLayout> Height is wrap_content Note that we are wrapping the contents of the height here since this is just the layout for a single item. If you forget and use match_parent each RecyclerView item will take the full screen height. Creating the view holder \u00b6 The ViewHolder looks up and stores view references. The view holder also helps with detecting item-view clicks. The RecyclerView force you to use the view holder pattern. To create the view holder, create a class that derives from the RecyclerView.ViewHolder and add all the view references. 1 2 3 4 5 6 7 8 9 10 11 12 // Class should derive from RecyclerView.ViewHolder public class MovieViewHolder : RecyclerView . ViewHolder { public TextView Title { get ; private set ; } // Use the constructor that takes in a View public MovieViewHolder ( View itemView ) : base ( itemView ) { // Locate and cache view references Title = itemView . FindViewById < TextView >( Resource . Id . txtTitle ); } } Create an adapter \u00b6 The adapter loads each RecyclerView row with data. Create a class that extends the RecyclerView.Adapter and implement the OnBindViewHolder() , OnCreateViewHolder() methods the property ItemCount as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class MovieAdapter : RecyclerView . Adapter { public override int ItemCount => throw new NotImplementedException (); public override void OnBindViewHolder ( RecyclerView . ViewHolder holder , int position ) { throw new NotImplementedException (); } public override RecyclerView . ViewHolder OnCreateViewHolder ( ViewGroup parent , int viewType ) { throw new NotImplementedException (); } } The following required RecyclerView.Adapter methods should be implemented: OnCreateViewHolder \u2013 Instantiates the item layout file and view holder. OnBindViewHolder \u2013 Loads the data at the specified position into the views whose references are stored in the given view holder. ItemCount \u2013 Returns the number of items in the data source. Implement OnCreateViewHolder \u00b6 In the OnCreateViewHolder , add the code to inflate the layout file for the individual row as follows: 1 2 3 4 5 6 7 8 public override RecyclerView . ViewHolder OnCreateViewHolder ( ViewGroup parent , int viewType ) { // Inflate the layout file var itemView = LayoutInflater . From ( parent . Context ). Inflate ( Resource . Layout . item_row_moview , parent , false ); // Return the view holder return new MovieViewHolder ( itemView ); } Implement OnBindViewHolder \u00b6 In the OnBindViewHolder you retrieve the view holder and set the data on it. The following code first casts the generic view holder to the MovieViewHolder and then sets the title. You are also passed the position, use it to retrieve the right data from your list. 1 2 3 4 5 6 7 8 9 public override void OnBindViewHolder ( RecyclerView . ViewHolder holder , int position ) { // Cast the holder to the right type MovieViewHolder mv = holder as MovieViewHolder ; // Setup the title view var title = _titles [ position ]; mv . Title . Text = title ; } Implement the ItemCount \u00b6 Add a custom constructor that you pass in the data to the adapter. Use the size of the data for the ItemCount as follows: 1 public override int ItemCount => _titles == null ? 0 : _titles . Count ; and the custom constructor that we use to pass in the data to the adapter: 1 2 3 4 5 6 private List < string > _titles ; public MovieAdapter ( List < string > titles ) { _titles = titles ; } The complete adater class should be as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 public class MovieAdapter : RecyclerView . Adapter { private List < string > _titles ; public MovieAdapter ( List < string > titles ) { _titles = titles ; } public override int ItemCount => _titles == null ? 0 : _titles . Count ; public override void OnBindViewHolder ( RecyclerView . ViewHolder holder , int position ) { // Cast the holder to the right type MovieViewHolder mv = holder as MovieViewHolder ; // Setup the title view var title = _titles [ position ]; mv . Title . Text = title ; } public override RecyclerView . ViewHolder OnCreateViewHolder ( ViewGroup parent , int viewType ) { // Inflate the layout file var itemView = LayoutInflater . From ( parent . Context ). Inflate ( Resource . Layout . item_row_moview , parent , false ); // Return the view holder return new MovieViewHolder ( itemView ); } } Creating the RecyclerView \u00b6 Finally, you now can wire everything together now. Declare the RecyclerView , the adapter and the titles list. 1 2 3 private RecyclerView _recyclerView ; private MovieAdapter _movieAdapter ; private List < string > _titles ; Find the RecyclerView 1 _recyclerView = FindViewById < RecyclerView >( Resource . Id . recyclerView ); Create the adaper 1 _movieAdapter = new MovieAdapter ( _titles ); Connect the adapter to the RecyclerView 1 _recyclerView . SetAdapter ( _movieAdapter ); Setup the RecyclerView with the default layout manager 1 _recyclerView . SetLayoutManager ( new LinearLayoutManager ( this ));","title":"RecyclerView"},{"location":"recyclerview/#recyclerview","text":"The RecyclerView class is a more advanced and flexible version of ListView. It's a container for displaying large, scrollable data sets efficiently by maintaining a limited number of View items. RecyclerView or ListView Use RecyclerView when you need to display a large amount of scrollable data, or data collections whose elements change at runtime based on user action or network events. Use a ListView to display a short list with static data. A RecyclerView requires a lot of code to implement but offers performance benefits compared to the ListView .","title":"RecyclerView"},{"location":"recyclerview/#recyclerview-components","text":"A RecyclerView is made up of several components. This is what adds to the complexity of the RecyclerView: Adapter : Use an extension of RecyclerView.Adapter to connect your data to the RecyclerView . It prepares the data and how will be displayed in a ViewHolder. When the data changes, the adapter updates the contents of the respective list item view in the RecyclerView . ViewHolder : Use an extension of RecyclerView.ViewHolder to contain the information for displaying one View item using the item's layout. LayoutManager : The layout manager handles the organization (layout) of user interface components in a View. This could be a LinearLayoutManager , GridLayout or a StaggeredGridLayoutManager RecyclerView : he scrolling list that contains the list items. An instance of RecyclerView as defined in the Activity layout file to act as the container for the View items. Data : The data shown in the RecyclerView Layout for one item of data : The layout for a list item is kept in a separate XML layout file so that the adapter can create View items and edit their contents independently from the layout of the Activity. Animations : Animations for adding and removing items are enabled by default in RecyclerView . To customize these animations, extend the RecyclerView.ItemAnimator class","title":"RecyclerView components"},{"location":"recyclerview/#implementing-a-recyclerview","text":"Implementing a RecyclerView requires the following steps: Add the RecyclerView dependency if needed. Add the RecyclerView to the Activity layout. Create a layout XML file for one View item. Extend RecyclerView.Adapter and implement the OnCreateViewHolder() and OnBindViewHolder() methods. Extend RecyclerView.ViewHolder to create a ViewHolder for your item layout. In the Activity , inside the OnCreate() method, create a RecyclerView and initialize it with the adapter and a layout manager.","title":"Implementing a RecyclerView"},{"location":"recyclerview/#adding-the-package-dependency","text":"Using the project template from Visual Studio 2019, the support libraries will already be installed, there's nothing to configure. If the support package is not installed, open the nuget packager manager and search for Xamarin.Android.Support.v7.RecyclerView","title":"Adding the package dependency"},{"location":"recyclerview/#adding-recycler-to-layout-file","text":"Add the RecyclerView to the activity layout file as follows: 1 2 3 4 <android.support.v7.widget.RecyclerView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:id= \"@+id/recyclerView\" />","title":"Adding Recycler to layout file"},{"location":"recyclerview/#create-the-layout-to-hold-each-item","text":"Create the layout to hold once item use by the ViewHolder.We will create a simple layout here follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <TextView android:text= \"Popular Movies\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> </LinearLayout> Height is wrap_content Note that we are wrapping the contents of the height here since this is just the layout for a single item. If you forget and use match_parent each RecyclerView item will take the full screen height.","title":"Create the layout to hold each item"},{"location":"recyclerview/#creating-the-view-holder","text":"The ViewHolder looks up and stores view references. The view holder also helps with detecting item-view clicks. The RecyclerView force you to use the view holder pattern. To create the view holder, create a class that derives from the RecyclerView.ViewHolder and add all the view references. 1 2 3 4 5 6 7 8 9 10 11 12 // Class should derive from RecyclerView.ViewHolder public class MovieViewHolder : RecyclerView . ViewHolder { public TextView Title { get ; private set ; } // Use the constructor that takes in a View public MovieViewHolder ( View itemView ) : base ( itemView ) { // Locate and cache view references Title = itemView . FindViewById < TextView >( Resource . Id . txtTitle ); } }","title":"Creating the view holder"},{"location":"recyclerview/#create-an-adapter","text":"The adapter loads each RecyclerView row with data. Create a class that extends the RecyclerView.Adapter and implement the OnBindViewHolder() , OnCreateViewHolder() methods the property ItemCount as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class MovieAdapter : RecyclerView . Adapter { public override int ItemCount => throw new NotImplementedException (); public override void OnBindViewHolder ( RecyclerView . ViewHolder holder , int position ) { throw new NotImplementedException (); } public override RecyclerView . ViewHolder OnCreateViewHolder ( ViewGroup parent , int viewType ) { throw new NotImplementedException (); } } The following required RecyclerView.Adapter methods should be implemented: OnCreateViewHolder \u2013 Instantiates the item layout file and view holder. OnBindViewHolder \u2013 Loads the data at the specified position into the views whose references are stored in the given view holder. ItemCount \u2013 Returns the number of items in the data source.","title":"Create an adapter"},{"location":"recyclerview/#implement-oncreateviewholder","text":"In the OnCreateViewHolder , add the code to inflate the layout file for the individual row as follows: 1 2 3 4 5 6 7 8 public override RecyclerView . ViewHolder OnCreateViewHolder ( ViewGroup parent , int viewType ) { // Inflate the layout file var itemView = LayoutInflater . From ( parent . Context ). Inflate ( Resource . Layout . item_row_moview , parent , false ); // Return the view holder return new MovieViewHolder ( itemView ); }","title":"Implement OnCreateViewHolder"},{"location":"recyclerview/#implement-onbindviewholder","text":"In the OnBindViewHolder you retrieve the view holder and set the data on it. The following code first casts the generic view holder to the MovieViewHolder and then sets the title. You are also passed the position, use it to retrieve the right data from your list. 1 2 3 4 5 6 7 8 9 public override void OnBindViewHolder ( RecyclerView . ViewHolder holder , int position ) { // Cast the holder to the right type MovieViewHolder mv = holder as MovieViewHolder ; // Setup the title view var title = _titles [ position ]; mv . Title . Text = title ; }","title":"Implement OnBindViewHolder"},{"location":"recyclerview/#implement-the-itemcount","text":"Add a custom constructor that you pass in the data to the adapter. Use the size of the data for the ItemCount as follows: 1 public override int ItemCount => _titles == null ? 0 : _titles . Count ; and the custom constructor that we use to pass in the data to the adapter: 1 2 3 4 5 6 private List < string > _titles ; public MovieAdapter ( List < string > titles ) { _titles = titles ; } The complete adater class should be as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 public class MovieAdapter : RecyclerView . Adapter { private List < string > _titles ; public MovieAdapter ( List < string > titles ) { _titles = titles ; } public override int ItemCount => _titles == null ? 0 : _titles . Count ; public override void OnBindViewHolder ( RecyclerView . ViewHolder holder , int position ) { // Cast the holder to the right type MovieViewHolder mv = holder as MovieViewHolder ; // Setup the title view var title = _titles [ position ]; mv . Title . Text = title ; } public override RecyclerView . ViewHolder OnCreateViewHolder ( ViewGroup parent , int viewType ) { // Inflate the layout file var itemView = LayoutInflater . From ( parent . Context ). Inflate ( Resource . Layout . item_row_moview , parent , false ); // Return the view holder return new MovieViewHolder ( itemView ); } }","title":"Implement the ItemCount"},{"location":"recyclerview/#creating-the-recyclerview","text":"Finally, you now can wire everything together now. Declare the RecyclerView , the adapter and the titles list. 1 2 3 private RecyclerView _recyclerView ; private MovieAdapter _movieAdapter ; private List < string > _titles ; Find the RecyclerView 1 _recyclerView = FindViewById < RecyclerView >( Resource . Id . recyclerView ); Create the adaper 1 _movieAdapter = new MovieAdapter ( _titles ); Connect the adapter to the RecyclerView 1 _recyclerView . SetAdapter ( _movieAdapter ); Setup the RecyclerView with the default layout manager 1 _recyclerView . SetLayoutManager ( new LinearLayoutManager ( this ));","title":"Creating the RecyclerView"},{"location":"scheduling-alarms/","text":"Scheduling Alarms \u00b6 Alarm types \u00b6 Scheduling an alarm \u00b6 Checking for an existing alarm \u00b6 Cancelling an alarm \u00b6 User-visible alarms(\"alarm clocks\") \u00b6","title":"Scheduling Alarms"},{"location":"scheduling-alarms/#scheduling-alarms","text":"","title":"Scheduling Alarms"},{"location":"scheduling-alarms/#alarm-types","text":"","title":"Alarm types"},{"location":"scheduling-alarms/#scheduling-an-alarm","text":"","title":"Scheduling an alarm"},{"location":"scheduling-alarms/#checking-for-an-existing-alarm","text":"","title":"Checking for an existing alarm"},{"location":"scheduling-alarms/#cancelling-an-alarm","text":"","title":"Cancelling an alarm"},{"location":"scheduling-alarms/#user-visible-alarmsalarm-clocks","text":"","title":"User-visible alarms(\"alarm clocks\")"},{"location":"services/","text":"Services \u00b6 What are Services \u00b6 Services are used to perform long running tasks. Services do not have a UI. They are three different types of services: Foreground : A foreground service performs some operation that is noticeable to the user. For example, an audio app would use a foreground service to play an audio track. Foreground services must display a Notification . Foreground services continue running even when the user isn't interacting with the app. Background : A background service performs an operation that isn't directly noticed by the user. For example, if an app used a service to compact its storage, that would usually be a background service. Bound : A service is bound when an application component binds to it by calling BindService() . A bound service offers a client-server interface that allows components to interact with the service, send requests, receive results, and even do so across processes with interprocess communication (IPC). A bound service runs only as long as another application component is bound to it. Multiple components can bind to the service at once, but when all of them unbind, the service is destroyed. A service can be started, bound, or both: A started service is a service that an application component starts by calling StartService() . Use started services for tasks that run in the background to perform long-running operations. Also use started services for tasks that perform work for remote processes. A bound service is a service that an application component binds to itself by calling BindService() . Use bound services for tasks that another app component interacts with to perform interprocess communication (IPC). Threads in services A service runs in the main thread of its hosting process\u2014the service doesn't create its own thread and doesn't run in a separate process unless you specify that it should. If your service is going to do any CPU-intensive work or blocking operations (such as MP3 playback or networking), create a new thread within the service to do that work Android defines two types of services: Service : Normal service that runs on the same thread as the UI thread of the application IntentService : Inherits from the Service . Automatically provides a worker thread and handles the boilerplate code in the normal server. Services have a simple life cycle, they can be in either running or stopped state. Started services \u00b6 How a service starts: An application component such as an activity calls startService() and passes in an Intent . The Intent specifies the service and includes any data for the service to use. The system calls the service's onCreate() method and any other appropriate callbacks on the main thread. It's up to the service to implement these callbacks with the appropriate behavior, such as creating a secondary thread in which to work. The system calls the service's onStartCommand() method, passing in the Intent supplied by the client in step 1. (The client in this context is the application component that calls the service.) IntentService \u00b6 Most started services don't need to handle multiple requests simultaneously, and if they did it could be a dangerous multithreading scenario. For this reason, it's probably best if you implement your service using the IntentService class. IntentService is a useful subclass of Service : IntentService automatically provides a worker thread to handle your Intent . IntentService handles some of the boilerplate code that regular services need (such as starting and stopping the service). IntentService can create a work queue that passes one intent at a time to your onHandleIntent() implementation, so you don't have to worry about multi-threading. To implement IntentService : Provide a small constructor for the service. Create an implementation of onHandleIntent() to do the work that the client provides. IntentService on Android 8.0 Note:IntentService is subject to the new restrictions on background services in Android 8.0 (API 26). For this reason, Android Support Library 26.0.0 introduces a new JobIntentService class, which provides the same functionality as IntentService but uses jobs instead of services when running on Android 8.0 or higher. Declaring services in the manifest \u00b6 The service will need to be registered in the AndroidManifest.xml . To register the service, you use the [Service] attribute on the class that derives from the Service or IntentService class as follows: 1 2 3 4 [Service(Label = \"ChatService\")] public class ChatService : Service { ... } Bound services \u00b6 A service is bound when an application component binds to it by calling BindService() . A bound service offers a client server interface that allows components to interact with the service, send requests, and get results, sometimes using interprocess communication (IPC) to send and receive information across processes. A bound service runs only as long as another application component is bound to it. Multiple components can bind to the service at once, but when all of them unbind, the service is destroyed. A bound service generally does not allow components to start it by calling StartService() . Implement a bound service \u00b6 To implement a bound service, define the interface that specifies how a client can communicate with the service. This interface, which your service returns from the OnBind() callback method, must be an implementation of IBinder . To retrieve the IBinder interface, a client application component calls BindService() . Once the client receives the IBinder , the client interacts with the service through that interface. Implicit intents with bound services Do not use an implicit intent to bind to a service. Doing so is a security hazard, because you can't be certain what service will respond to your intent, and the user can't see which service starts. Beginning with Android 5.0 (API level 21), the system throws an exception if you call bindService() with an implicit Intent . The default template from the Add -> New File -> Service creates a bound service. Life cycle of started services vs. bound services \u00b6 A service have a simple life cycle. The service can be either in the running state or stopped state. A bound service exists only to serve the application component that's bound to it, so when no more components are bound to the service, the system destroys it. Bound services don't need to be explicitly stopped the way started services do (using StopService() or StopSelf() ). The diagram below shows a comparison between the started and bound service lifecycles. Foreground services \u00b6 To request that a service run in the foreground, call StartForeground() instead of StartService() . This method takes two parameters: an integer that uniquely identifies the notification and the Notification object for the status bar notification. This notification is ongoing, meaning that it can't be dismissed. It stays in the status bar until the service is stopped or removed from the foreground. When starting a foreground service, you will need to create a notification that shown to the user. Create the notification \u00b6 Scheduled services \u00b6 Android 8.0 imposes restrictions on started services. You might need to use the WorkManager class or the JobScheduler to run background jobs.","title":"Services"},{"location":"services/#services","text":"","title":"Services"},{"location":"services/#what-are-services","text":"Services are used to perform long running tasks. Services do not have a UI. They are three different types of services: Foreground : A foreground service performs some operation that is noticeable to the user. For example, an audio app would use a foreground service to play an audio track. Foreground services must display a Notification . Foreground services continue running even when the user isn't interacting with the app. Background : A background service performs an operation that isn't directly noticed by the user. For example, if an app used a service to compact its storage, that would usually be a background service. Bound : A service is bound when an application component binds to it by calling BindService() . A bound service offers a client-server interface that allows components to interact with the service, send requests, receive results, and even do so across processes with interprocess communication (IPC). A bound service runs only as long as another application component is bound to it. Multiple components can bind to the service at once, but when all of them unbind, the service is destroyed. A service can be started, bound, or both: A started service is a service that an application component starts by calling StartService() . Use started services for tasks that run in the background to perform long-running operations. Also use started services for tasks that perform work for remote processes. A bound service is a service that an application component binds to itself by calling BindService() . Use bound services for tasks that another app component interacts with to perform interprocess communication (IPC). Threads in services A service runs in the main thread of its hosting process\u2014the service doesn't create its own thread and doesn't run in a separate process unless you specify that it should. If your service is going to do any CPU-intensive work or blocking operations (such as MP3 playback or networking), create a new thread within the service to do that work Android defines two types of services: Service : Normal service that runs on the same thread as the UI thread of the application IntentService : Inherits from the Service . Automatically provides a worker thread and handles the boilerplate code in the normal server. Services have a simple life cycle, they can be in either running or stopped state.","title":"What are Services"},{"location":"services/#started-services","text":"How a service starts: An application component such as an activity calls startService() and passes in an Intent . The Intent specifies the service and includes any data for the service to use. The system calls the service's onCreate() method and any other appropriate callbacks on the main thread. It's up to the service to implement these callbacks with the appropriate behavior, such as creating a secondary thread in which to work. The system calls the service's onStartCommand() method, passing in the Intent supplied by the client in step 1. (The client in this context is the application component that calls the service.)","title":"Started services"},{"location":"services/#intentservice","text":"Most started services don't need to handle multiple requests simultaneously, and if they did it could be a dangerous multithreading scenario. For this reason, it's probably best if you implement your service using the IntentService class. IntentService is a useful subclass of Service : IntentService automatically provides a worker thread to handle your Intent . IntentService handles some of the boilerplate code that regular services need (such as starting and stopping the service). IntentService can create a work queue that passes one intent at a time to your onHandleIntent() implementation, so you don't have to worry about multi-threading. To implement IntentService : Provide a small constructor for the service. Create an implementation of onHandleIntent() to do the work that the client provides. IntentService on Android 8.0 Note:IntentService is subject to the new restrictions on background services in Android 8.0 (API 26). For this reason, Android Support Library 26.0.0 introduces a new JobIntentService class, which provides the same functionality as IntentService but uses jobs instead of services when running on Android 8.0 or higher.","title":"IntentService"},{"location":"services/#declaring-services-in-the-manifest","text":"The service will need to be registered in the AndroidManifest.xml . To register the service, you use the [Service] attribute on the class that derives from the Service or IntentService class as follows: 1 2 3 4 [Service(Label = \"ChatService\")] public class ChatService : Service { ... }","title":"Declaring services in the manifest"},{"location":"services/#bound-services","text":"A service is bound when an application component binds to it by calling BindService() . A bound service offers a client server interface that allows components to interact with the service, send requests, and get results, sometimes using interprocess communication (IPC) to send and receive information across processes. A bound service runs only as long as another application component is bound to it. Multiple components can bind to the service at once, but when all of them unbind, the service is destroyed. A bound service generally does not allow components to start it by calling StartService() .","title":"Bound services"},{"location":"services/#implement-a-bound-service","text":"To implement a bound service, define the interface that specifies how a client can communicate with the service. This interface, which your service returns from the OnBind() callback method, must be an implementation of IBinder . To retrieve the IBinder interface, a client application component calls BindService() . Once the client receives the IBinder , the client interacts with the service through that interface. Implicit intents with bound services Do not use an implicit intent to bind to a service. Doing so is a security hazard, because you can't be certain what service will respond to your intent, and the user can't see which service starts. Beginning with Android 5.0 (API level 21), the system throws an exception if you call bindService() with an implicit Intent . The default template from the Add -> New File -> Service creates a bound service.","title":"Implement a bound service"},{"location":"services/#life-cycle-of-started-services-vs-bound-services","text":"A service have a simple life cycle. The service can be either in the running state or stopped state. A bound service exists only to serve the application component that's bound to it, so when no more components are bound to the service, the system destroys it. Bound services don't need to be explicitly stopped the way started services do (using StopService() or StopSelf() ). The diagram below shows a comparison between the started and bound service lifecycles.","title":"Life cycle of started services vs. bound services"},{"location":"services/#foreground-services","text":"To request that a service run in the foreground, call StartForeground() instead of StartService() . This method takes two parameters: an integer that uniquely identifies the notification and the Notification object for the status bar notification. This notification is ongoing, meaning that it can't be dismissed. It stays in the status bar until the service is stopped or removed from the foreground. When starting a foreground service, you will need to create a notification that shown to the user.","title":"Foreground services"},{"location":"services/#create-the-notification","text":"","title":"Create the notification"},{"location":"services/#scheduled-services","text":"Android 8.0 imposes restrictions on started services. You might need to use the WorkManager class or the JobScheduler to run background jobs.","title":"Scheduled services"},{"location":"styles-and-themes/","text":"Android Styles and Themes \u00b6 Drawables \u00b6 Images \u00b6 Styles \u00b6 Themes \u00b6 Styling Buttons \u00b6 A button can styled be by applying a theme, e.g we can style the button so that its borderless : 1 2 3 4 5 6 7 <Button android:id= \"@+id/button_send\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/button_send\" android:onClick= \"sendMessage\" style= \"?android:attr/borderlessButtonStyle\" /> We can also give the button a custom background for the different states : 1 2 3 4 5 6 7 8 <?xml version=\"1.0\" encoding=\"utf-8\"?> <selector xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:drawable= \"@drawable/button_pressed\" android:state_pressed= \"true\" /> <item android:drawable= \"@drawable/button_focused\" android:state_focused= \"true\" /> <item android:drawable= \"@drawable/button_default\" /> </selector> {{< note title=\"Note\" >}} The xml file needs to be placed in the Resources/drawable folder. The order of the item is important. Android will search them by order, and only apply the button normal state after checking the state_pressed and state_focused. {{ }} If you want to customize the background color without changing the accent color in your main theme you can create a custom theme for your Button using the android:theme attribute and extending the ThemeOverlay theme. 1 2 3 4 5 6 <Button style= \"@style/Widget.AppCompat.Button.Colored\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_margin= \"16dp\" android:theme= \"@style/MyButtonTheme\" /> defining the following theme: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 <!-- res/values/themes.xml --> <style name= \"MyButtonTheme\" parent= \"ThemeOverlay.AppCompat.Light\" > <item name= \"colorAccent\" > @color/my_color </item> </style> ``` ## Styling TextInputLayout Make sure you have the `app` namespace (`xmlns:app=\"http://schemas.android.com/apk/res-auto\"` defined in your outer layout. You can type `appNS` as a shortcut in Android Studio to be declared. The hint text can be styled by defining `app:hintTextAppearance`, and the error text can be changed with `app:errorTextAppearance.` The counter text and overflow text can also have their own text styles by defining `app:counterTextAppearance` and `app:counterOverflowTextAppearance`. We can use `textColor`, `textSize`, and `fontFamily` to help change the color, size, or font: ```xml <style name= \"counterText\" > <item name= \"android:textColor\" > #aa5353cc </item> </style> <style name= \"counterOverride\" > <item name= \"android:textColor\" > #ff0000 </item> </style>","title":"Styles and Themes"},{"location":"styles-and-themes/#android-styles-and-themes","text":"","title":"Android Styles and Themes"},{"location":"styles-and-themes/#drawables","text":"","title":"Drawables"},{"location":"styles-and-themes/#images","text":"","title":"Images"},{"location":"styles-and-themes/#styles","text":"","title":"Styles"},{"location":"styles-and-themes/#themes","text":"","title":"Themes"},{"location":"styles-and-themes/#styling-buttons","text":"A button can styled be by applying a theme, e.g we can style the button so that its borderless : 1 2 3 4 5 6 7 <Button android:id= \"@+id/button_send\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/button_send\" android:onClick= \"sendMessage\" style= \"?android:attr/borderlessButtonStyle\" /> We can also give the button a custom background for the different states : 1 2 3 4 5 6 7 8 <?xml version=\"1.0\" encoding=\"utf-8\"?> <selector xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:drawable= \"@drawable/button_pressed\" android:state_pressed= \"true\" /> <item android:drawable= \"@drawable/button_focused\" android:state_focused= \"true\" /> <item android:drawable= \"@drawable/button_default\" /> </selector> {{< note title=\"Note\" >}} The xml file needs to be placed in the Resources/drawable folder. The order of the item is important. Android will search them by order, and only apply the button normal state after checking the state_pressed and state_focused. {{ }} If you want to customize the background color without changing the accent color in your main theme you can create a custom theme for your Button using the android:theme attribute and extending the ThemeOverlay theme. 1 2 3 4 5 6 <Button style= \"@style/Widget.AppCompat.Button.Colored\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_margin= \"16dp\" android:theme= \"@style/MyButtonTheme\" /> defining the following theme: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 <!-- res/values/themes.xml --> <style name= \"MyButtonTheme\" parent= \"ThemeOverlay.AppCompat.Light\" > <item name= \"colorAccent\" > @color/my_color </item> </style> ``` ## Styling TextInputLayout Make sure you have the `app` namespace (`xmlns:app=\"http://schemas.android.com/apk/res-auto\"` defined in your outer layout. You can type `appNS` as a shortcut in Android Studio to be declared. The hint text can be styled by defining `app:hintTextAppearance`, and the error text can be changed with `app:errorTextAppearance.` The counter text and overflow text can also have their own text styles by defining `app:counterTextAppearance` and `app:counterOverflowTextAppearance`. We can use `textColor`, `textSize`, and `fontFamily` to help change the color, size, or font: ```xml <style name= \"counterText\" > <item name= \"android:textColor\" > #aa5353cc </item> </style> <style name= \"counterOverride\" > <item name= \"android:textColor\" > #ff0000 </item> </style>","title":"Styling Buttons"},{"location":"testing/","text":"Unit and UI Testing \u00b6 Unit Testing \u00b6 UI Testing \u00b6","title":"Testing"},{"location":"testing/#unit-and-ui-testing","text":"","title":"Unit and UI Testing"},{"location":"testing/#unit-testing","text":"","title":"Unit Testing"},{"location":"testing/#ui-testing","text":"","title":"UI Testing"},{"location":"third-party-libraries/","text":"Common Third Party Android Libraries \u00b6 ExoPlayer \u00b6","title":"Third Party Libraries"},{"location":"third-party-libraries/#common-third-party-android-libraries","text":"","title":"Common Third Party Android Libraries"},{"location":"third-party-libraries/#exoplayer","text":"","title":"ExoPlayer"}]}