<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Transactions on Introduction to SQL</title>
    <link>http://guides.peruzal.com/introduction-to-sql/transactions/index.xml</link>
    <description>Recent content in Transactions on Introduction to SQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2017 Peruzal</copyright>
    <lastBuildDate>Tue, 28 Feb 2017 21:53:24 +0200</lastBuildDate>
    <atom:link href="http://guides.peruzal.com/introduction-to-sql/transactions/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Transactions</title>
      <link>http://guides.peruzal.com/introduction-to-sql/transactions/</link>
      <pubDate>Tue, 28 Feb 2017 21:53:24 +0200</pubDate>
      
      <guid>http://guides.peruzal.com/introduction-to-sql/transactions/</guid>
      <description>

&lt;h2 id=&#34;understanding-transaction-processing&#34;&gt;Understanding Transaction Processing&lt;/h2&gt;

&lt;p&gt;Transaction processing is used to maintain database integrity by ensuring that batches of SQL operations execute completely or not at all.&lt;/p&gt;

&lt;p&gt;Common terms when working with transactions :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Transaction&lt;/strong&gt; A block of SQL statements&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rollback&lt;/strong&gt; The process of undoing specified SQL statements&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Commit&lt;/strong&gt; Writing unsaved SQL statements to the database tables&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Savepoint&lt;/strong&gt; A temporary placeholder in a transaction set to which you can issue a rollback (as opposed to rolling back an entire transaction)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Tip: Which Statements Can You Roll Back?&lt;/p&gt;
&lt;p&gt;Transaction processing is used to manage &lt;strong&gt;INSERT&lt;/strong&gt;, &lt;strong&gt;UPDATE&lt;/strong&gt;, and &lt;strong&gt;DELETE&lt;/strong&gt; statements. You cannot roll back &lt;strong&gt;SELECT&lt;/strong&gt; statements. (There would not be much point in doing so anyway.) You cannot roll back &lt;strong&gt;CREATE&lt;/strong&gt; or &lt;strong&gt;DROP&lt;/strong&gt; operations. These statements may be used in a transaction block, but if you perform a rollback they will not be undone.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;controlling-transactions&#34;&gt;Controlling Transactions&lt;/h2&gt;

&lt;p&gt;The key to managing transactions involves breaking your SQL statements into logical chunks and explicitly stating when data should be rolled back and when it should not. To start a transaction you use the &lt;strong&gt;BEGIN TRANSACTION&lt;/strong&gt; and when you are done and need to commit the changes, you use the &lt;strong&gt;COMMIT TRANSACTION&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the following example, any SQL between the &lt;strong&gt;BEGIN TRANSACTION&lt;/strong&gt; and &lt;strong&gt;COMMIT TRANSACTION&lt;/strong&gt; statements must be executed entirely or not at all.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;BEGIN TRANSACTION
...
COMMIT TRANSACTION
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;using-rollback&#34;&gt;Using ROLLBACK&lt;/h3&gt;

&lt;p&gt;The SQL &lt;strong&gt;ROLLBACK&lt;/strong&gt; command is used to roll back (undo) SQL statements, as seen in this next statement:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;DELETE FROM Orders;
ROLLBACK;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, a &lt;strong&gt;DELETE&lt;/strong&gt; operation is performed and then undone using a &lt;strong&gt;ROLLBACK&lt;/strong&gt; statement. Although not the most useful example, it does demonstrate that, within a transaction block, &lt;strong&gt;DELETE&lt;/strong&gt; operations (like &lt;strong&gt;INSERT&lt;/strong&gt; and &lt;strong&gt;UPDATE&lt;/strong&gt; operations) are never final.&lt;/p&gt;

&lt;h2 id=&#34;using-commit&#34;&gt;Using COMMIT&lt;/h2&gt;

&lt;p&gt;Usually SQL statements are executed and written directly to the database tables. This is known as an implicit commitâ€”the commit (write or save) operation happens automatically.&lt;/p&gt;

&lt;p&gt;To force an explicit commit, the COMMIT statement is used. The following is a SQL Server example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;BEGIN TRANSACTION
DELETE OrderItems WHERE order_num = 12345
DELETE Orders WHERE order_num = 12345
COMMIT TRANSACTION
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this SQL Server example, order number &lt;em&gt;12345&lt;/em&gt; is deleted entirely from the system. Because this involves updating two database tables, Orders and &lt;em&gt;OrderItems&lt;/em&gt;, a transaction block is used to ensure that the order is not partially deleted. The final &lt;strong&gt;COMMIT&lt;/strong&gt; statement writes the change only if no error occurred. If the first &lt;strong&gt;DELETE&lt;/strong&gt; worked, but the second failed, the &lt;strong&gt;DELETE&lt;/strong&gt; would not be committed.&lt;/p&gt;

&lt;p&gt;Using Savepoints&lt;/p&gt;

&lt;p&gt;Simple ROLLBACK and COMMIT statements enable you to write or undo an entire transaction. Although this works for simple transactions, more complex transactions might require partial commits or rollbacks.&lt;/p&gt;

&lt;p&gt;For example, the process of adding an order described previously is a single transaction. If an error occurs, you only want to roll back to the point before the Orders row was added. You do not want to roll back the addition to the Customers table (if there was one).&lt;/p&gt;

&lt;p&gt;To support the rollback of partial transactions, you must be able to put placeholders at strategic locations in the transaction block. Then, if a rollback is required, you can roll back to one of the placeholders.&lt;/p&gt;

&lt;p&gt;In SQL, these placeholders are called savepoints.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SAVEPOINT delete1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In SQL Server you do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SAVE TRANSACTION delete1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each savepoint takes a unique name that identifies it so that, when you roll back, the DBMS knows where you are rolling back to. To roll back to this savepoint, do the following in SQL Server:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ROLLBACK TRANSACTION delete1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following is a complete SQL Server example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;BEGIN TRANSACTION
INSERT INTO Customers(cust_id, cust_name)
VALUES(&#39;1000000010&#39;, &#39;Toys Emporium&#39;);
SAVE TRANSACTION StartOrder;
INSERT INTO Orders(order_num, order_date, cust_id)
VALUES(20100,&#39;2001/12/1&#39;,&#39;1000000010&#39;);
IF @@ERROR &amp;lt;&amp;gt; 0 ROLLBACK TRANSACTION StartOrder;
INSERT INTO OrderItems(order_num, order_item, prod_id, quantity, item_price)
VALUES(20100, 1, &#39;BR01&#39;, 100, 5.49);
IF @@ERROR &amp;lt;&amp;gt; 0 ROLLBACK TRANSACTION StartOrder;
INSERT INTO OrderItems(order_num, order_item, prod_id, quantity, item_price)
VALUES(20100, 2, &#39;BR03&#39;, 100, 10.99);
IF @@ERROR &amp;lt;&amp;gt; 0 ROLLBACK TRANSACTION StartOrder;
COMMIT TRANSACTION
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are a set of four &lt;strong&gt;INSERT&lt;/strong&gt; statements enclosed within a transaction block. A &lt;em&gt;savepoint&lt;/em&gt; is defined after the first &lt;strong&gt;INSERT&lt;/strong&gt; so that, if any of the subsequent &lt;strong&gt;INSERT&lt;/strong&gt; operations fail, the transaction is only rolled back that far. In SQL Server, a variable named &lt;strong&gt;@@ERROR&lt;/strong&gt; can be inspected to see if an operation succeeded&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>