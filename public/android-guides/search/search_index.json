{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Android Guides \u00b6 Welcome to the guides to support the Android Guides. The guides are intended to be used to support the course. Target Audience \u00b6 Developers Some development knowledge is required as most of the tools required reading at code. You don't need to proficient but be in a position to write and compile programs.","title":"Getting Started"},{"location":"#welcome-to-android-guides","text":"Welcome to the guides to support the Android Guides. The guides are intended to be used to support the course.","title":"Welcome to Android Guides"},{"location":"#target-audience","text":"Developers Some development knowledge is required as most of the tools required reading at code. You don't need to proficient but be in a position to write and compile programs.","title":"Target Audience"},{"location":"activities/","text":"Activity Lifecycle Background \u00b6 As a user navigates throughout an app, Android maintains the visited activities in a stack, with the currently visible activity always placed at the top of the stack. At any point in time a particular activity can be in one of the following 4 states: Activity State Description Running Activity is visible and interacting with the user Paused Activity is still visible, but no longer interacting with the user Stopped Activity is no longer visible Killed Activity has been killed by the system (low memory) or its finish() method has been called Activity Lifecycle \u00b6 The following diagram shows the important state paths of an Activity. The square rectangles represent callback methods you can implement to perform operations when the Activity moves between states. These are described further in the table below the diagram. Lifecycle Method Description Common Uses onCreate() The activity is starting (but not visible to the user) Most of the activity initialization code goes here. This is where you setContentView() for the activity, initialize views, set up any adapters, etc. onStart() The activity is now visible (but not ready for user interaction) This lifecycle method isn't used much, but can come in handy to register a BroadcastReceiver to monitor for changes that impact the UI (since the UI is now visible to the user). onResume() The activity is now in the foreground and ready for user interaction This is a good place to start animations, open exclusive-access devices like the camera, etc. onPause() Counterpart to onResume() . The activity is about to go into the background and has stopped interacting with the user. This can happen when another activity is launched in front of the current activity. It's common to undo anything that was done in onResume() and to save any global state (such as writing to a file). onStop() Counterpart to onStart() . The activity is no longer visible to the user. It's common to undo anything that was done in onStart() . onDestroy() Counterpart to onCreate(...) . This can be triggered because finish() was called on the activity or the system needed to free up some memory. It's common to do any cleanup here. For example, if the activity has a thread running in the background to download data from the network, it may create that thread in onCreate() and then stop the thread here in onDestroy() onRestart() Called when the activity has been stopped, before it is started again It isn't very common to need to implement this callback. Handling Configuration Changes \u00b6 The Activity lifecycle is especially important because whenever an activity leaves the screen, the activity can be destroyed . When an activity is destroyed, when the user returns to the activity, the activity will be re-created and the lifecycle methods will be called again. Activities are also re-created whenever the orientation changes (i.e the screen is rotated). In order to ensure your application is robust to recreation amongst a wide variety of situations, be sure to review the [[handling configuration changes|Handling-Configuration-Changes]]. Calling the super class \u00b6 When overriding any of the methods, you may need to call the superclass implementation. The rule of thumb is that during initialization, you should always call the superclass first: public void onCreate () { super . onCreate (); // do work after super class function // setContentView(R.layout.main); } During de-initialization, you should do the work first before calling the super class: public void onPause () { // do work here first before super class function // LocalBroadcastManager.getInstance(this).unregisterReceiver(mMessageReceiver); super . onPause (); } See this Stack Overflow article for more context. Handling Configuration Changes \u00b6 There are various situations such as when the screen orientation is rotated where the Activity can actually be destroyed and removed from memory and then re-created from scratch again. In these situations, the best practice is to prepare for cases where the Activity is re-created by properly saving and restoring the state. Saving and Restoring Activity State \u00b6 As your activity begins to stop, the system calls onSaveInstanceState() so your activity can save state information with a collection of key-value pairs. The default implementation of this method automatically saves information about the state of the activity's view hierarchy , such as the text in an EditText widget or the scroll position of a ListView . To save additional state information for your activity, you must implement onSaveInstanceState() and add key-value pairs to the Bundle object. For example: public class MainActivity extends Activity { static final String SOME_VALUE = \"int_value\" ; static final String SOME_OTHER_VALUE = \"string_value\" ; @Override protected void onSaveInstanceState ( Bundle savedInstanceState ) { // Save custom values into the bundle savedInstanceState . putInt ( SOME_VALUE , someIntValue ); savedInstanceState . putString ( SOME_OTHER_VALUE , someStringValue ); // Always call the superclass so it can save the view hierarchy state super . onSaveInstanceState ( savedInstanceState ); } } The system will call that method before an Activity is destroyed. Then later the system will call onRestoreInstanceState where we can restore state from the bundle: @Override protected void onRestoreInstanceState ( Bundle savedInstanceState ) { // Always call the superclass so it can restore the view hierarchy super . onRestoreInstanceState ( savedInstanceState ); // Restore state members from saved instance someIntValue = savedInstanceState . getInt ( SOME_VALUE ); someStringValue = savedInstanceState . getString ( SOME_OTHER_VALUE ); } Instance state can also be restored in the standard Activity#onCreate method but it is convenient to do it in onRestoreInstanceState which ensures all of the initialization has been done and allows subclasses to decide whether to use the default implementation. Read this stackoverflow post for details. Note that onSaveInstanceState and onRestoreInstanceState are not guaranteed to be called together. Android invokes onSaveInstanceState() when there's a chance the activity might be destroyed. However, there are cases where onSaveInstanceState is called but the activity is not destroyed and as a result onRestoreInstanceState is not invoked. Read more on the Recreating an Activity guide. Saving and Restoring Fragment State \u00b6 Fragments also have a onSaveInstanceState() method which is called when their state needs to be saved: public class MySimpleFragment extends Fragment { private int someStateValue ; private final String SOME_VALUE_KEY = \"someValueToSave\" ; // Fires when a configuration change occurs and fragment needs to save state @Override protected void onSaveInstanceState ( Bundle outState ) { outState . putInt ( SOME_VALUE_KEY , someStateValue ); super . onSaveInstanceState ( outState ); } } Then we can pull data out of this saved state in onCreateView : public class MySimpleFragment extends Fragment { // ... // Inflate the view for the fragment based on layout XML @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . my_simple_fragment , container , false ); if ( savedInstanceState != null ) { someStateValue = savedInstanceState . getInt ( SOME_VALUE_KEY ); // Do something with value if needed } return view ; } } For the fragment state to be saved properly, we need to be sure that we aren't unnecessarily recreating the fragment on configuration changes. This means being careful not to reinitialize existing fragments when they already exist. Any fragments being initialized in an Activity need to be looked up by tag after a configuration change: public class ParentActivity extends AppCompatActivity { private MySimpleFragment fragmentSimple ; private final String SIMPLE_FRAGMENT_TAG = \"myfragmenttag\" ; @Override protected void onCreate ( Bundle savedInstanceState ) { if ( savedInstanceState != null ) { // saved instance state, fragment may exist // look up the instance that already exists by tag fragmentSimple = ( MySimpleFragment ) getSupportFragmentManager (). findFragmentByTag ( SIMPLE_FRAGMENT_TAG ); } else if ( fragmentSimple == null ) { // only create fragment if they haven't been instantiated already fragmentSimple = new MySimpleFragment (); } } } This requires us to be careful to include a tag for lookup whenever putting a fragment into the activity within a transaction: public class ParentActivity extends AppCompatActivity { private MySimpleFragment fragmentSimple ; private final String SIMPLE_FRAGMENT_TAG = \"myfragmenttag\" ; @Override protected void onCreate ( Bundle savedInstanceState ) { // ... fragment lookup or instantation from above... // Always add a tag to a fragment being inserted into container if (! fragmentSimple . isInLayout ()) { getSupportFragmentManager () . beginTransaction () . replace ( R . id . container , fragmentSimple , SIMPLE_FRAGMENT_TAG ) . commit (); } } } With this simple pattern, we can properly re-use fragments and restore their state across configuration changes. Locking Screen Orientation \u00b6 If you want to lock the screen orientation change of any screen (activity) of your android application you just need to set the android:screenOrientation property of an <activity> within the AndroidManifest.xml : <activity android:name= \"com.techblogon.screenorientationexample.MainActivity\" android:screenOrientation= \"portrait\" android:label= \"@string/app_name\" > <!-- ... --> </activity> Now that activity is forced to always be displayed in \"portrait\" mode. Manually Managing Configuration Changes \u00b6 If your application doesn't need to update resources during a specific configuration change and you have a performance limitation that requires you to avoid the activity restart, then you can declare that your activity handles the configuration change itself, which prevents the system from restarting your activity. However, this technique should be considered a last resort when you must avoid restarts due to a configuration change and is not recommended for most applications. To take this approach, we must add the android:configChanges node to the activity within the AndroidManifest.xml : <activity android:name= \".MyActivity\" android:configChanges= \"orientation|screenSize|keyboardHidden\" android:label= \"@string/app_name\" > Now, when one of these configurations change, the activity does not restart but instead receives a call to onConfigurationChanged() : // Within the activity which receives these changes // Checks the current device orientation, and toasts accordingly @Override public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ); // Checks the orientation of the screen if ( newConfig . orientation == Configuration . ORIENTATION_LANDSCAPE ) { Toast . makeText ( this , \"landscape\" , Toast . LENGTH_SHORT ). show (); } else if ( newConfig . orientation == Configuration . ORIENTATION_PORTRAIT ){ Toast . makeText ( this , \"portrait\" , Toast . LENGTH_SHORT ). show (); } } See the Handling the Change docs. For more about which configuration changes you can handle in your activity, see the android:configChanges documentation and the Configuration class. Migrating to the AppCompat Library \u00b6 The AppCompat support library enables the use of the ActionBar and Material Design specific implementations such as Toolbar for older devices down to Android v2.1. Currently, new projects created through Android Studio incorporate this library by default. You can confirm by looking at the build.gradle file to see the AppCompat library being set: android { compileSdkVersion 25 buildToolsVersion \"25.0.2\" } dependencies { compile 'com.android.support:appcompat-v7:25.2.0' } Note that the AppCompat library has an implicit dependency on the support-v4 library. The support-v4 declaration however does not necessarily need to be declared. Since the release of the support-v4 version 24.2.0, the library has been divided into separate modules : support-compat , support-core-utils , support-core-ui , support-media-compat , and support-fragment . However, because the AppCompat library usually depends on support-fragment , which still contains a dependency to all the other modules, you currently cannot take advantage of this change to reduce the number of overall dependencies. Also notice that once you upgrade to AppCompat v7 v24, you will also be forced to update your Build Tools and compileSDKVersion to API 24 too. There is a current bug that precludes you from compiling to lower versions. Once you are using this API version 23 or higher, be aware that the Apache HTTP Client library has been removed . Search and replacing changes \u00b6 Older projects may not include this library, so migrating requires changing the theme references and many of the main imports described in this blog post . Because the support class declarations are not compatible with the standard Android ones, you need to make sure you are using the imports from the support library entirely. Otherwise your app is likely to crash. The simplest is often to do a search-and-replace to start changing the following statements to start using the support libraries. Activities Changes \u00b6 import android.app.Activity -> import android.support.v7.app.AppCompatActivity extends Activity -> extends AppCompatActivity Fragment Changes \u00b6 extends FragmentActivity -> extends AppCompatActivity import android.support.v4.app.FragmentActivity -> import android.support.v7.app.AppCompatActivity import android.app.Fragment -> import android.support.v4.app.Fragment getFragmentManager() -> getSupportFragmentManager() ActionBar Changes \u00b6 import android.app.ActionBar -> import android.support.v7.app.ActionBar getActionBar() -> getSupportActionBar() AlertDialog Changes \u00b6 Your AlertDialogs should import from the AppCompat support library instead, which takes advantage of the new Material Design theme. import android.app.AlertDialog -> import android.support.v7.app.AlertDialog Theme XML Changes \u00b6 If you were migrating from the Holo theme, your new theme would inherit from Theme.AppCompat instead of android:Theme.Holo.Light : <style name= \"AppTheme\" parent= \"Theme.AppCompat.Light.DarkActionBar\" > If you wish to have a style that disables the ActionBar in certain Activity screens but still wish to use many of the ones you custom defined, you can inherit from AppTheme and apply the same styles declared in Theme.AppCompat.NoActionBar : <style name= \"AppTheme.NoActionBar\" > <item name= \"windowActionBar\" > false </item> <item name= \"windowNoTitle\" > true </item> </style> If you see AppCompat does not support the current theme features , it's likely the windowNoTitle setting has not been set or is set to false. There is more strict enforcement on what this value must be set on newer AppCompat libraries. See this Stack Overflow article for more context. Menu XML Changes \u00b6 For your menu/ layout files, add an app: namespace . For menu items, the showAsAction must be from the app namespace instead of android namespace. It is considered a custom attribute of the support library and will no otherwise be processed correctly without making this change. <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" > <item android:id= \"@+id/myMenuItem\" android:title= \"@string/select\" android:showAsAction= \"ifRoom\" app:showAsAction= \"ifRoom\" If you are using widgets such as the SearchView, you must also use android.support.v7.widget.SearchView instead of android.widget.SearchView . Note that the app namespace must also be used. + <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" > <item android:id= \"@+id/contentSearch\" android:orderInCategory= \"2\" android:title= \"@string/search\" app:showAsAction= \"ifRoom\" app:actionViewClass= \"android.support.v7.widget.SearchView\" > Changes to Menu Options \u00b6 The MenuItemCompat helper class has a few static methods that should be used in lieu of MenuItem : @Override public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . my_menu , menu ); mSearchView = ( SearchView ) MenuItemCompat . getActionView ( menu . findItem ( R . id . contentSearch )); Changing targetSDKVersion \u00b6 In addition, setting the targetSdkVersion to the latest SDK version ensures that the AppCompat library will attempt to apply the Material Design assuming the device itself can support it. The support library will still check to see if the minimum SDK version is being used on the device. android { targetSdkVersion 24 Known issues \u00b6 The AppCompat library has issues with Samsung v4.2.2 devices. See this issue for more details.","title":"Activities"},{"location":"activities/#activity-lifecycle-background","text":"As a user navigates throughout an app, Android maintains the visited activities in a stack, with the currently visible activity always placed at the top of the stack. At any point in time a particular activity can be in one of the following 4 states: Activity State Description Running Activity is visible and interacting with the user Paused Activity is still visible, but no longer interacting with the user Stopped Activity is no longer visible Killed Activity has been killed by the system (low memory) or its finish() method has been called","title":"Activity Lifecycle Background"},{"location":"activities/#activity-lifecycle","text":"The following diagram shows the important state paths of an Activity. The square rectangles represent callback methods you can implement to perform operations when the Activity moves between states. These are described further in the table below the diagram. Lifecycle Method Description Common Uses onCreate() The activity is starting (but not visible to the user) Most of the activity initialization code goes here. This is where you setContentView() for the activity, initialize views, set up any adapters, etc. onStart() The activity is now visible (but not ready for user interaction) This lifecycle method isn't used much, but can come in handy to register a BroadcastReceiver to monitor for changes that impact the UI (since the UI is now visible to the user). onResume() The activity is now in the foreground and ready for user interaction This is a good place to start animations, open exclusive-access devices like the camera, etc. onPause() Counterpart to onResume() . The activity is about to go into the background and has stopped interacting with the user. This can happen when another activity is launched in front of the current activity. It's common to undo anything that was done in onResume() and to save any global state (such as writing to a file). onStop() Counterpart to onStart() . The activity is no longer visible to the user. It's common to undo anything that was done in onStart() . onDestroy() Counterpart to onCreate(...) . This can be triggered because finish() was called on the activity or the system needed to free up some memory. It's common to do any cleanup here. For example, if the activity has a thread running in the background to download data from the network, it may create that thread in onCreate() and then stop the thread here in onDestroy() onRestart() Called when the activity has been stopped, before it is started again It isn't very common to need to implement this callback.","title":"Activity Lifecycle"},{"location":"activities/#handling-configuration-changes","text":"The Activity lifecycle is especially important because whenever an activity leaves the screen, the activity can be destroyed . When an activity is destroyed, when the user returns to the activity, the activity will be re-created and the lifecycle methods will be called again. Activities are also re-created whenever the orientation changes (i.e the screen is rotated). In order to ensure your application is robust to recreation amongst a wide variety of situations, be sure to review the [[handling configuration changes|Handling-Configuration-Changes]].","title":"Handling Configuration Changes"},{"location":"activities/#calling-the-super-class","text":"When overriding any of the methods, you may need to call the superclass implementation. The rule of thumb is that during initialization, you should always call the superclass first: public void onCreate () { super . onCreate (); // do work after super class function // setContentView(R.layout.main); } During de-initialization, you should do the work first before calling the super class: public void onPause () { // do work here first before super class function // LocalBroadcastManager.getInstance(this).unregisterReceiver(mMessageReceiver); super . onPause (); } See this Stack Overflow article for more context.","title":"Calling the super class"},{"location":"activities/#handling-configuration-changes_1","text":"There are various situations such as when the screen orientation is rotated where the Activity can actually be destroyed and removed from memory and then re-created from scratch again. In these situations, the best practice is to prepare for cases where the Activity is re-created by properly saving and restoring the state.","title":"Handling Configuration Changes"},{"location":"activities/#saving-and-restoring-activity-state","text":"As your activity begins to stop, the system calls onSaveInstanceState() so your activity can save state information with a collection of key-value pairs. The default implementation of this method automatically saves information about the state of the activity's view hierarchy , such as the text in an EditText widget or the scroll position of a ListView . To save additional state information for your activity, you must implement onSaveInstanceState() and add key-value pairs to the Bundle object. For example: public class MainActivity extends Activity { static final String SOME_VALUE = \"int_value\" ; static final String SOME_OTHER_VALUE = \"string_value\" ; @Override protected void onSaveInstanceState ( Bundle savedInstanceState ) { // Save custom values into the bundle savedInstanceState . putInt ( SOME_VALUE , someIntValue ); savedInstanceState . putString ( SOME_OTHER_VALUE , someStringValue ); // Always call the superclass so it can save the view hierarchy state super . onSaveInstanceState ( savedInstanceState ); } } The system will call that method before an Activity is destroyed. Then later the system will call onRestoreInstanceState where we can restore state from the bundle: @Override protected void onRestoreInstanceState ( Bundle savedInstanceState ) { // Always call the superclass so it can restore the view hierarchy super . onRestoreInstanceState ( savedInstanceState ); // Restore state members from saved instance someIntValue = savedInstanceState . getInt ( SOME_VALUE ); someStringValue = savedInstanceState . getString ( SOME_OTHER_VALUE ); } Instance state can also be restored in the standard Activity#onCreate method but it is convenient to do it in onRestoreInstanceState which ensures all of the initialization has been done and allows subclasses to decide whether to use the default implementation. Read this stackoverflow post for details. Note that onSaveInstanceState and onRestoreInstanceState are not guaranteed to be called together. Android invokes onSaveInstanceState() when there's a chance the activity might be destroyed. However, there are cases where onSaveInstanceState is called but the activity is not destroyed and as a result onRestoreInstanceState is not invoked. Read more on the Recreating an Activity guide.","title":"Saving and Restoring Activity State"},{"location":"activities/#saving-and-restoring-fragment-state","text":"Fragments also have a onSaveInstanceState() method which is called when their state needs to be saved: public class MySimpleFragment extends Fragment { private int someStateValue ; private final String SOME_VALUE_KEY = \"someValueToSave\" ; // Fires when a configuration change occurs and fragment needs to save state @Override protected void onSaveInstanceState ( Bundle outState ) { outState . putInt ( SOME_VALUE_KEY , someStateValue ); super . onSaveInstanceState ( outState ); } } Then we can pull data out of this saved state in onCreateView : public class MySimpleFragment extends Fragment { // ... // Inflate the view for the fragment based on layout XML @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . my_simple_fragment , container , false ); if ( savedInstanceState != null ) { someStateValue = savedInstanceState . getInt ( SOME_VALUE_KEY ); // Do something with value if needed } return view ; } } For the fragment state to be saved properly, we need to be sure that we aren't unnecessarily recreating the fragment on configuration changes. This means being careful not to reinitialize existing fragments when they already exist. Any fragments being initialized in an Activity need to be looked up by tag after a configuration change: public class ParentActivity extends AppCompatActivity { private MySimpleFragment fragmentSimple ; private final String SIMPLE_FRAGMENT_TAG = \"myfragmenttag\" ; @Override protected void onCreate ( Bundle savedInstanceState ) { if ( savedInstanceState != null ) { // saved instance state, fragment may exist // look up the instance that already exists by tag fragmentSimple = ( MySimpleFragment ) getSupportFragmentManager (). findFragmentByTag ( SIMPLE_FRAGMENT_TAG ); } else if ( fragmentSimple == null ) { // only create fragment if they haven't been instantiated already fragmentSimple = new MySimpleFragment (); } } } This requires us to be careful to include a tag for lookup whenever putting a fragment into the activity within a transaction: public class ParentActivity extends AppCompatActivity { private MySimpleFragment fragmentSimple ; private final String SIMPLE_FRAGMENT_TAG = \"myfragmenttag\" ; @Override protected void onCreate ( Bundle savedInstanceState ) { // ... fragment lookup or instantation from above... // Always add a tag to a fragment being inserted into container if (! fragmentSimple . isInLayout ()) { getSupportFragmentManager () . beginTransaction () . replace ( R . id . container , fragmentSimple , SIMPLE_FRAGMENT_TAG ) . commit (); } } } With this simple pattern, we can properly re-use fragments and restore their state across configuration changes.","title":"Saving and Restoring Fragment State"},{"location":"activities/#locking-screen-orientation","text":"If you want to lock the screen orientation change of any screen (activity) of your android application you just need to set the android:screenOrientation property of an <activity> within the AndroidManifest.xml : <activity android:name= \"com.techblogon.screenorientationexample.MainActivity\" android:screenOrientation= \"portrait\" android:label= \"@string/app_name\" > <!-- ... --> </activity> Now that activity is forced to always be displayed in \"portrait\" mode.","title":"Locking Screen Orientation"},{"location":"activities/#manually-managing-configuration-changes","text":"If your application doesn't need to update resources during a specific configuration change and you have a performance limitation that requires you to avoid the activity restart, then you can declare that your activity handles the configuration change itself, which prevents the system from restarting your activity. However, this technique should be considered a last resort when you must avoid restarts due to a configuration change and is not recommended for most applications. To take this approach, we must add the android:configChanges node to the activity within the AndroidManifest.xml : <activity android:name= \".MyActivity\" android:configChanges= \"orientation|screenSize|keyboardHidden\" android:label= \"@string/app_name\" > Now, when one of these configurations change, the activity does not restart but instead receives a call to onConfigurationChanged() : // Within the activity which receives these changes // Checks the current device orientation, and toasts accordingly @Override public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ); // Checks the orientation of the screen if ( newConfig . orientation == Configuration . ORIENTATION_LANDSCAPE ) { Toast . makeText ( this , \"landscape\" , Toast . LENGTH_SHORT ). show (); } else if ( newConfig . orientation == Configuration . ORIENTATION_PORTRAIT ){ Toast . makeText ( this , \"portrait\" , Toast . LENGTH_SHORT ). show (); } } See the Handling the Change docs. For more about which configuration changes you can handle in your activity, see the android:configChanges documentation and the Configuration class.","title":"Manually Managing Configuration Changes"},{"location":"activities/#migrating-to-the-appcompat-library","text":"The AppCompat support library enables the use of the ActionBar and Material Design specific implementations such as Toolbar for older devices down to Android v2.1. Currently, new projects created through Android Studio incorporate this library by default. You can confirm by looking at the build.gradle file to see the AppCompat library being set: android { compileSdkVersion 25 buildToolsVersion \"25.0.2\" } dependencies { compile 'com.android.support:appcompat-v7:25.2.0' } Note that the AppCompat library has an implicit dependency on the support-v4 library. The support-v4 declaration however does not necessarily need to be declared. Since the release of the support-v4 version 24.2.0, the library has been divided into separate modules : support-compat , support-core-utils , support-core-ui , support-media-compat , and support-fragment . However, because the AppCompat library usually depends on support-fragment , which still contains a dependency to all the other modules, you currently cannot take advantage of this change to reduce the number of overall dependencies. Also notice that once you upgrade to AppCompat v7 v24, you will also be forced to update your Build Tools and compileSDKVersion to API 24 too. There is a current bug that precludes you from compiling to lower versions. Once you are using this API version 23 or higher, be aware that the Apache HTTP Client library has been removed .","title":"Migrating to the AppCompat Library"},{"location":"activities/#search-and-replacing-changes","text":"Older projects may not include this library, so migrating requires changing the theme references and many of the main imports described in this blog post . Because the support class declarations are not compatible with the standard Android ones, you need to make sure you are using the imports from the support library entirely. Otherwise your app is likely to crash. The simplest is often to do a search-and-replace to start changing the following statements to start using the support libraries.","title":"Search and replacing changes"},{"location":"activities/#activities-changes","text":"import android.app.Activity -> import android.support.v7.app.AppCompatActivity extends Activity -> extends AppCompatActivity","title":"Activities Changes"},{"location":"activities/#fragment-changes","text":"extends FragmentActivity -> extends AppCompatActivity import android.support.v4.app.FragmentActivity -> import android.support.v7.app.AppCompatActivity import android.app.Fragment -> import android.support.v4.app.Fragment getFragmentManager() -> getSupportFragmentManager()","title":"Fragment Changes"},{"location":"activities/#actionbar-changes","text":"import android.app.ActionBar -> import android.support.v7.app.ActionBar getActionBar() -> getSupportActionBar()","title":"ActionBar Changes"},{"location":"activities/#alertdialog-changes","text":"Your AlertDialogs should import from the AppCompat support library instead, which takes advantage of the new Material Design theme. import android.app.AlertDialog -> import android.support.v7.app.AlertDialog","title":"AlertDialog Changes"},{"location":"activities/#theme-xml-changes","text":"If you were migrating from the Holo theme, your new theme would inherit from Theme.AppCompat instead of android:Theme.Holo.Light : <style name= \"AppTheme\" parent= \"Theme.AppCompat.Light.DarkActionBar\" > If you wish to have a style that disables the ActionBar in certain Activity screens but still wish to use many of the ones you custom defined, you can inherit from AppTheme and apply the same styles declared in Theme.AppCompat.NoActionBar : <style name= \"AppTheme.NoActionBar\" > <item name= \"windowActionBar\" > false </item> <item name= \"windowNoTitle\" > true </item> </style> If you see AppCompat does not support the current theme features , it's likely the windowNoTitle setting has not been set or is set to false. There is more strict enforcement on what this value must be set on newer AppCompat libraries. See this Stack Overflow article for more context.","title":"Theme XML Changes"},{"location":"activities/#menu-xml-changes","text":"For your menu/ layout files, add an app: namespace . For menu items, the showAsAction must be from the app namespace instead of android namespace. It is considered a custom attribute of the support library and will no otherwise be processed correctly without making this change. <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" > <item android:id= \"@+id/myMenuItem\" android:title= \"@string/select\" android:showAsAction= \"ifRoom\" app:showAsAction= \"ifRoom\" If you are using widgets such as the SearchView, you must also use android.support.v7.widget.SearchView instead of android.widget.SearchView . Note that the app namespace must also be used. + <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" > <item android:id= \"@+id/contentSearch\" android:orderInCategory= \"2\" android:title= \"@string/search\" app:showAsAction= \"ifRoom\" app:actionViewClass= \"android.support.v7.widget.SearchView\" >","title":"Menu XML Changes"},{"location":"activities/#changes-to-menu-options","text":"The MenuItemCompat helper class has a few static methods that should be used in lieu of MenuItem : @Override public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . my_menu , menu ); mSearchView = ( SearchView ) MenuItemCompat . getActionView ( menu . findItem ( R . id . contentSearch ));","title":"Changes to Menu Options"},{"location":"activities/#changing-targetsdkversion","text":"In addition, setting the targetSdkVersion to the latest SDK version ensures that the AppCompat library will attempt to apply the Material Design assuming the device itself can support it. The support library will still check to see if the minimum SDK version is being used on the device. android { targetSdkVersion 24","title":"Changing targetSDKVersion"},{"location":"activities/#known-issues","text":"The AppCompat library has issues with Samsung v4.2.2 devices. See this issue for more details.","title":"Known issues"},{"location":"android-components/","text":"Component that make and Android App \u00b6","title":"Component that make and Android App"},{"location":"android-components/#component-that-make-and-android-app","text":"","title":"Component that make and Android App"},{"location":"android-permissions/","text":"Android Permissions \u00b6 Understanding App Permissions \u00b6 By default, an Android app starts with zero permissions granted to it. When the app needs to use any of the protected features of the device (sending network requests, accessing the camera, sending an SMS, etc) it must obtain the appropriate permission from the user to do so. Before Marshmallow, permissions were handled at install-time and specified in the AndroidManifest.xml within the project. Full list of permissions can be found here . After Marshmallow, permissions must now be requested at runtime before being used. There are a number of libraries available to make runtime permissions easier. If you to get started quickly, check out our guide on [[managing runtime permissions with PermissionsDispatcher]]. Permissions before Marshmallow \u00b6 Permissions were much simpler before Marshmallow (API 23). All permissions were handled at install-time. When a user went to install an app from the Google Play Store , the user was presented a list of permissions that the app required (some people referred to this as a \"wall of permissions\". The user could either accept all the permissions and continue to install the app or decide not to install the app. It was an all or nothing approach. There was no way to grant only certain permissions to the app and no way for the user to revoke certain permissions after the app was installed. Example of pre-Marshmallow permissions requested by the Dropbox app: For an app developer, permissions were very simple. To request one of the many permissions , simply specify it in the AndroidManifest.xml : For example, an application that needs to read the user's contacts would add the following to it's AndroidManifest.xml : <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" package= \"com.android.app.myapp\" > <uses-permission android:name= \"android.permission.READ_CONTACTS\" /> ... </manifest> That's all there was to it. The user had no way of changing permissions, even after installing the app. This made it easy for developers to deal with permissions, but wasn't the best user experience. Permission Updates in Marshmallow \u00b6 Marshmallow brought large changes to the permissions model. It introduced the concept of runtime permissions. These are permissions that are requested while the app is running (instead of before the app is installed). These permission can then be allowed or denied by the user. For approved permissions, these can also be revoked at a later time. This means there are a couple more things to consider when working with permissions for a Marshmallow app. Keep in mind that your targetSdkVersion must be >= 23 and your emulator / device must be running Marshmallow to see the new permissions model. If this isn't the case, see the [[backwards compatibility|Understanding App Permissions#backwards-compatibility]] section to understand how permissions will behave on your configuration. Normal Permissions \u00b6 When you need to add a new permission, first check this page to see if the permission is considered a PROTECTION_NORMAL permission. In Marshmallow, Google has designated certain permissions to be \"safe\" and called these \"Normal Permissions\". These are things like ACCESS_NETWORK_STATE , INTERNET , etc. which can't do much harm. Normal permissions are automatically granted at install time and never prompt the user asking for permission. Important: Normal Permissions must be added to the AndroidManifest : <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" package= \"com.android.app.myapp\" > <uses-permission android:name= \"android.permission.INTERNET\" /> ... </manifest> Runtime Permissions \u00b6 If the permission you need to add isn't listed under the normal permissions, you'll need to deal with \"Runtime Permissions\". Runtime permissions are permissions that are requested as they are needed while the app is running. These permissions will show a dialog to the user, similar to the following one: The first step when adding a \"Runtime Permission\" is to add it to the AndroidManifest : <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" package= \"com.codepath.androidpermissionsdemo\" > <uses-permission android:name= \"android.permission.READ_CONTACTS\" /> ... </manifest> Next, you'll need to initiate the permission request and handle the result. The following code shows how to do this in the context of an Activity , but this is also possible from within a Fragment . // MainActivity.java public class MainActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); // In an actual app, you'd want to request a permission when the user performs an action // that requires that permission. getPermissionToReadUserContacts (); } // Identifier for the permission request private static final int READ_CONTACTS_PERMISSIONS_REQUEST = 1 ; // Called when the user is performing an action which requires the app to read the // user's contacts public void getPermissionToReadUserContacts () { // 1) Use the support library version ContextCompat.checkSelfPermission(...) to avoid // checking the build version since Context.checkSelfPermission(...) is only available // in Marshmallow // 2) Always check for permission (even if permission has already been granted) // since the user can revoke permissions at any time through Settings if ( ContextCompat . checkSelfPermission ( this , Manifest . permission . READ_CONTACTS ) != PackageManager . PERMISSION_GRANTED ) { // The permission is NOT already granted. // Check if the user has been asked about this permission already and denied // it. If so, we want to give more explanation about why the permission is needed. if ( shouldShowRequestPermissionRationale ( Manifest . permission . READ_CONTACTS )) { // Show our own UI to explain to the user why we need to read the contacts // before actually requesting the permission and showing the default UI } // Fire off an async request to actually get the permission // This will show the standard permission request dialog UI requestPermissions ( new String []{ Manifest . permission . READ_CONTACTS }, READ_CONTACTS_PERMISSIONS_REQUEST ); } } // Callback with the request from calling requestPermissions(...) @Override public void onRequestPermissionsResult ( int requestCode , @NonNull String permissions [], @NonNull int [] grantResults ) { // Make sure it's our original READ_CONTACTS request if ( requestCode == READ_CONTACTS_PERMISSIONS_REQUEST ) { if ( grantResults . length == 1 && grantResults [ 0 ] == PackageManager . PERMISSION_GRANTED ) { Toast . makeText ( this , \"Read Contacts permission granted\" , Toast . LENGTH_SHORT ). show (); } else { // showRationale = false if user clicks Never Ask Again, otherwise true boolean showRationale = shouldShowRequestPermissionRationale ( this , Manifest . permission . READ_CONTACTS ); if ( showRationale ) { // do something here to handle degraded mode } else { Toast . makeText ( this , \"Read Contacts permission denied\" , Toast . LENGTH_SHORT ). show (); } } } else { super . onRequestPermissionsResult ( requestCode , permissions , grantResults ); } } } Permission Groups \u00b6 Permission Groups avoids spamming the user with a lot of permission requests while allowing the app developer to only request the minimal amount of permissions needed at any point in time. Related permissions are grouped into one of the permission groups . When an app requests a permission that belongs to a particular permission group (i.e. READ_CONTACTS ), Android asks the user about the higher level group instead ( CONTACTS ). This way when the app later needs the WRITE_CONTACTS permission, Android can automatically grant this itself without prompting the user. In most of your interaction with the permission API's you'll be working with the individual permissions and not the permission groups, but pay close attention to what the API expects as both permissions and permission groups are Strings. Backwards Compatibility \u00b6 There are 2 main scenarios to think about when it comes to backwards compatibility: Your app is targeting an API less than Marshmallow ( TargetSdkVersion < 23 ), but the emulator / device is Marshmallow: Your app will continue to use the old permissions model. All permissions listed in the AndroidManifest will be asked for at install time. Users will be able to revoke permissions after the app is installed. It's important to test this scenario since the results of certain actions without the appropriate permission can be unexpected. The emulator / device is running something older than Marshmallow, but you app targets Marshmallow ( TargetSdkVersion >= 23 ): Your app will continue to use the old permissions model. All permissions listed in the AndroidManifest will be asked for at install time. How to Ask For Permissions \u00b6 Google recommends in this video that there are four patterns to consider when thinking about permissions: Each pattern dictates a different way of requesting permissions. For instance, when requesting for critical but unclear permissions, use a warm welcome screen to help understand a permission is requested. For critical permissions, such as a camera app that needs camera permission, ask up-front for it. Secondary features can be requested later in context, such as a geotagging app when asking for a location permission. For permissions that are secondary and unclear, you should include a rationale explanation if you really need them. Storage permissions \u00b6 Rethink about whether you need read/write storage permissions (i.e. android.permission.WRITE_EXTERNAL_STORAGE or android.permission.READ_EXTERNAL_STORAGE ), which give you all files on the SD card. Instead, you should use methods on Context to access package-specific directories on external storage. Your app always have access to read/write to these directories,so there is no need to permissions to request it: // Application-specific call that doesn't require external storage permissions // Can be Environment.DIRECTORY_PICTURES, Environment.DIRECTORY_PODCASTS, Environment.DIRECTORY_RINGTONES, // Environment.DIRECTORY_NOTIFICATIONS, Environment.DIRECTORY_PICTURES, or Environment.MOVIES File dir = MyActivity . this . getExternalFilesDir ( Environment . DIRECTORY_PICTURES ); Managing Permissions using ADB \u00b6 Permissions can also be managed on the command-line using adb with the following commands. Show all Android permissions: $ adb shell pm list permissions -d -g Dumping app permission state: $adb shell dumpsys package com.PackageName.enterprise Granting and revoking runtime permissions: $adb shell pm grant com.PackageName.enterprise some.permission.NAME $adb shell pm revoke com.PackageName.enterprise android.permission.READ_CONTACTS Installing an app with all permissions granted: $adb install -g myAPP.apk Managing Runtime Permissions with PermissionsDispatcher \u00b6 As of API 23 (Marshmallow), the permission model for Android [[has changed significantly|Understanding-App-Permissions]]. Now, rather than all being setup at install-time, certain dangerous permissions must be checked and activated at runtime instead. For a full breakdown of how runtime permissions work, check out the [[understanding app permissions|Understanding-App-Permissions#permission-updates-in-marshmallow]] guide. This guide is focused on the practical approach for managing runtime permissions, requesting access to a feature, and managing error cases where the permission is denied. The easiest way to manage runtime permissions is by using third-party libraries. In this guide, we will be taking a look at the PermissionsDispatcher library. The library is 100% reflection-free and as such does not cause significant performance penalties. Dangerous Permissions \u00b6 First, we need to recognize the dangerous permissions that require us to request runtime permissions. This includes but is not limited to the following common permissions: Name Description Manifest.permission.READ_CALENDAR Read calendar events Manifest.permission.WRITE_CALENDAR Write calendar events Manifest.permission.CAMERA Access camera object Manifest.permission.READ_CONTACTS Read phone contacts Manifest.permission.WRITE_CONTACTS Write phone contacts Manifest.permission.ACCESS_FINE_LOCATION Access precise location Manifest.permission.ACCESS_COARSE_LOCATION Access general location Manifest.permission.RECORD_AUDIO Record with microphone Manifest.permission.CALL_PHONE Call using the dialer Manifest.permission.READ_EXTERNAL_STORAGE Read external or SD Manifest.permission.WRITE_EXTERNAL_STORAGE Write to external or SD The full list of dangerous permissions contains all permissions that require runtime management. Please note that permissions in the normal permission group do not require run-time checks as [[outlined here|Understanding-App-Permissions#normal-permissions]]. Installation \u00b6 Make sure to [[upgrade|Getting-Started-with-Gradle#upgrading-gradle]] to the latest Gradle version. And on your app module in app/build.gradle : dependencies { compile 'com.github.hotchemi:permissionsdispatcher:2.0.7' annotationProcessor 'com.github.hotchemi:permissionsdispatcher-processor:2.0.7' } Be sure to use the latest version: available. Usage \u00b6 Suppose we wanted to record be able to call a number using the phone's dialer. Since this is a dangerous permission, we need to ask the user for the permission at runtime with the Manifest.permission.CALL_PHONE permission. This requires us to do the following: Annotate the activity or fragment with @RuntimePermissions Annotate the method that requires the permission with @NeedsPermission Delegate the permissions events to a compiled helper class Invoke the helper class in order to trigger the action with permission request Optional: Annotate a method which explains the reasoning with a dialog Optional: Annotate a method which fires if the permission is denied Optional: Annotate a method which fires if the permission will never be asked for again. First, we need to annotate the activity or fragment with @RuntimePermissions : @RuntimePermissions public class MainActivity extends AppCompatActivity { // ... } Next, we need to annotate the method that requires the permission with @NeedsPermission tag: @RuntimePermissions public class MainActivity extends AppCompatActivity { @NeedsPermission ( Manifest . permission . CALL_PHONE ) void callPhone () { // Trigger the calling of a number here } } After compiling the project, we need to delegate the permission events to the generated helper class ([Activity Name] + PermissionsDispatcher): @RuntimePermissions public class MainActivity extends AppCompatActivity { // ... @Override public void onRequestPermissionsResult ( int requestCode , String [] permissions , int [] grantResults ) { super . onRequestPermissionsResult ( requestCode , permissions , grantResults ); // NOTE: delegate the permission handling to generated method MainActivityPermissionsDispatcher . onRequestPermissionsResult ( this , requestCode , grantResults ); } } In the code base, we can trigger the call with the appropriate runtime permission checks using the generated methods suffixed with WithCheck on the helper class: // NOTE: delegate the permission handling to generated method MainActivityPermissionsDispatcher . callPhoneWithCheck ( this ); This will invoke the callPhone method wrapped with the appropriate permission checks. Permission Event Handling \u00b6 We can also optionally configure the rationale dialog, handle the denial of a permission or manage when the user requests never to be asked again: @RuntimePermissions public class MainActivity extends AppCompatActivity { // ... // Annotate a method which explains why the permission/s is/are needed. // It passes in a `PermissionRequest` object which can continue or abort the current permission @OnShowRationale ( Manifest . permission . CALL_PHONE ) void showRationaleForPhoneCall ( PermissionRequest request ) { new AlertDialog . Builder ( this ) . setMessage ( R . string . permission_phone_rationale ) . setPositiveButton ( R . string . button_allow , ( dialog , button ) -> request . proceed ()) . setNegativeButton ( R . string . button_deny , ( dialog , button ) -> request . cancel ()) . show (); } // Annotate a method which is invoked if the user doesn't grant the permissions @OnPermissionDenied ( Manifest . permission . CALL_PHONE ) void showDeniedForPhoneCall () { Toast . makeText ( this , R . string . permission_call_denied , Toast . LENGTH_SHORT ). show (); } // Annotates a method which is invoked if the user // chose to have the device \"never ask again\" about a permission @OnNeverAskAgain ( Manifest . permission . CALL_PHONE ) void showNeverAskForPhoneCall () { Toast . makeText ( this , R . string . permission_call_neverask , Toast . LENGTH_SHORT ). show (); } } With that we can easily handle all of our runtime permission needs. Alternatives \u00b6 In addition the the PermissionsDispatcher outlined above, there are many other popular permissions libraries with various APIs and alternate designs including the following: Dexter easypermissions let AndroidPermissions Grant Assent Ask A full list of permissions libraries can be found here .","title":"Understanding Android Permissions"},{"location":"android-permissions/#android-permissions","text":"","title":"Android Permissions"},{"location":"android-permissions/#understanding-app-permissions","text":"By default, an Android app starts with zero permissions granted to it. When the app needs to use any of the protected features of the device (sending network requests, accessing the camera, sending an SMS, etc) it must obtain the appropriate permission from the user to do so. Before Marshmallow, permissions were handled at install-time and specified in the AndroidManifest.xml within the project. Full list of permissions can be found here . After Marshmallow, permissions must now be requested at runtime before being used. There are a number of libraries available to make runtime permissions easier. If you to get started quickly, check out our guide on [[managing runtime permissions with PermissionsDispatcher]].","title":"Understanding App Permissions"},{"location":"android-permissions/#permissions-before-marshmallow","text":"Permissions were much simpler before Marshmallow (API 23). All permissions were handled at install-time. When a user went to install an app from the Google Play Store , the user was presented a list of permissions that the app required (some people referred to this as a \"wall of permissions\". The user could either accept all the permissions and continue to install the app or decide not to install the app. It was an all or nothing approach. There was no way to grant only certain permissions to the app and no way for the user to revoke certain permissions after the app was installed. Example of pre-Marshmallow permissions requested by the Dropbox app: For an app developer, permissions were very simple. To request one of the many permissions , simply specify it in the AndroidManifest.xml : For example, an application that needs to read the user's contacts would add the following to it's AndroidManifest.xml : <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" package= \"com.android.app.myapp\" > <uses-permission android:name= \"android.permission.READ_CONTACTS\" /> ... </manifest> That's all there was to it. The user had no way of changing permissions, even after installing the app. This made it easy for developers to deal with permissions, but wasn't the best user experience.","title":"Permissions before Marshmallow"},{"location":"android-permissions/#permission-updates-in-marshmallow","text":"Marshmallow brought large changes to the permissions model. It introduced the concept of runtime permissions. These are permissions that are requested while the app is running (instead of before the app is installed). These permission can then be allowed or denied by the user. For approved permissions, these can also be revoked at a later time. This means there are a couple more things to consider when working with permissions for a Marshmallow app. Keep in mind that your targetSdkVersion must be >= 23 and your emulator / device must be running Marshmallow to see the new permissions model. If this isn't the case, see the [[backwards compatibility|Understanding App Permissions#backwards-compatibility]] section to understand how permissions will behave on your configuration.","title":"Permission Updates in Marshmallow"},{"location":"android-permissions/#normal-permissions","text":"When you need to add a new permission, first check this page to see if the permission is considered a PROTECTION_NORMAL permission. In Marshmallow, Google has designated certain permissions to be \"safe\" and called these \"Normal Permissions\". These are things like ACCESS_NETWORK_STATE , INTERNET , etc. which can't do much harm. Normal permissions are automatically granted at install time and never prompt the user asking for permission. Important: Normal Permissions must be added to the AndroidManifest : <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" package= \"com.android.app.myapp\" > <uses-permission android:name= \"android.permission.INTERNET\" /> ... </manifest>","title":"Normal Permissions"},{"location":"android-permissions/#runtime-permissions","text":"If the permission you need to add isn't listed under the normal permissions, you'll need to deal with \"Runtime Permissions\". Runtime permissions are permissions that are requested as they are needed while the app is running. These permissions will show a dialog to the user, similar to the following one: The first step when adding a \"Runtime Permission\" is to add it to the AndroidManifest : <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" package= \"com.codepath.androidpermissionsdemo\" > <uses-permission android:name= \"android.permission.READ_CONTACTS\" /> ... </manifest> Next, you'll need to initiate the permission request and handle the result. The following code shows how to do this in the context of an Activity , but this is also possible from within a Fragment . // MainActivity.java public class MainActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); // In an actual app, you'd want to request a permission when the user performs an action // that requires that permission. getPermissionToReadUserContacts (); } // Identifier for the permission request private static final int READ_CONTACTS_PERMISSIONS_REQUEST = 1 ; // Called when the user is performing an action which requires the app to read the // user's contacts public void getPermissionToReadUserContacts () { // 1) Use the support library version ContextCompat.checkSelfPermission(...) to avoid // checking the build version since Context.checkSelfPermission(...) is only available // in Marshmallow // 2) Always check for permission (even if permission has already been granted) // since the user can revoke permissions at any time through Settings if ( ContextCompat . checkSelfPermission ( this , Manifest . permission . READ_CONTACTS ) != PackageManager . PERMISSION_GRANTED ) { // The permission is NOT already granted. // Check if the user has been asked about this permission already and denied // it. If so, we want to give more explanation about why the permission is needed. if ( shouldShowRequestPermissionRationale ( Manifest . permission . READ_CONTACTS )) { // Show our own UI to explain to the user why we need to read the contacts // before actually requesting the permission and showing the default UI } // Fire off an async request to actually get the permission // This will show the standard permission request dialog UI requestPermissions ( new String []{ Manifest . permission . READ_CONTACTS }, READ_CONTACTS_PERMISSIONS_REQUEST ); } } // Callback with the request from calling requestPermissions(...) @Override public void onRequestPermissionsResult ( int requestCode , @NonNull String permissions [], @NonNull int [] grantResults ) { // Make sure it's our original READ_CONTACTS request if ( requestCode == READ_CONTACTS_PERMISSIONS_REQUEST ) { if ( grantResults . length == 1 && grantResults [ 0 ] == PackageManager . PERMISSION_GRANTED ) { Toast . makeText ( this , \"Read Contacts permission granted\" , Toast . LENGTH_SHORT ). show (); } else { // showRationale = false if user clicks Never Ask Again, otherwise true boolean showRationale = shouldShowRequestPermissionRationale ( this , Manifest . permission . READ_CONTACTS ); if ( showRationale ) { // do something here to handle degraded mode } else { Toast . makeText ( this , \"Read Contacts permission denied\" , Toast . LENGTH_SHORT ). show (); } } } else { super . onRequestPermissionsResult ( requestCode , permissions , grantResults ); } } }","title":"Runtime Permissions"},{"location":"android-permissions/#permission-groups","text":"Permission Groups avoids spamming the user with a lot of permission requests while allowing the app developer to only request the minimal amount of permissions needed at any point in time. Related permissions are grouped into one of the permission groups . When an app requests a permission that belongs to a particular permission group (i.e. READ_CONTACTS ), Android asks the user about the higher level group instead ( CONTACTS ). This way when the app later needs the WRITE_CONTACTS permission, Android can automatically grant this itself without prompting the user. In most of your interaction with the permission API's you'll be working with the individual permissions and not the permission groups, but pay close attention to what the API expects as both permissions and permission groups are Strings.","title":"Permission Groups"},{"location":"android-permissions/#backwards-compatibility","text":"There are 2 main scenarios to think about when it comes to backwards compatibility: Your app is targeting an API less than Marshmallow ( TargetSdkVersion < 23 ), but the emulator / device is Marshmallow: Your app will continue to use the old permissions model. All permissions listed in the AndroidManifest will be asked for at install time. Users will be able to revoke permissions after the app is installed. It's important to test this scenario since the results of certain actions without the appropriate permission can be unexpected. The emulator / device is running something older than Marshmallow, but you app targets Marshmallow ( TargetSdkVersion >= 23 ): Your app will continue to use the old permissions model. All permissions listed in the AndroidManifest will be asked for at install time.","title":"Backwards Compatibility"},{"location":"android-permissions/#how-to-ask-for-permissions","text":"Google recommends in this video that there are four patterns to consider when thinking about permissions: Each pattern dictates a different way of requesting permissions. For instance, when requesting for critical but unclear permissions, use a warm welcome screen to help understand a permission is requested. For critical permissions, such as a camera app that needs camera permission, ask up-front for it. Secondary features can be requested later in context, such as a geotagging app when asking for a location permission. For permissions that are secondary and unclear, you should include a rationale explanation if you really need them.","title":"How to Ask For Permissions"},{"location":"android-permissions/#storage-permissions","text":"Rethink about whether you need read/write storage permissions (i.e. android.permission.WRITE_EXTERNAL_STORAGE or android.permission.READ_EXTERNAL_STORAGE ), which give you all files on the SD card. Instead, you should use methods on Context to access package-specific directories on external storage. Your app always have access to read/write to these directories,so there is no need to permissions to request it: // Application-specific call that doesn't require external storage permissions // Can be Environment.DIRECTORY_PICTURES, Environment.DIRECTORY_PODCASTS, Environment.DIRECTORY_RINGTONES, // Environment.DIRECTORY_NOTIFICATIONS, Environment.DIRECTORY_PICTURES, or Environment.MOVIES File dir = MyActivity . this . getExternalFilesDir ( Environment . DIRECTORY_PICTURES );","title":"Storage permissions"},{"location":"android-permissions/#managing-permissions-using-adb","text":"Permissions can also be managed on the command-line using adb with the following commands. Show all Android permissions: $ adb shell pm list permissions -d -g Dumping app permission state: $adb shell dumpsys package com.PackageName.enterprise Granting and revoking runtime permissions: $adb shell pm grant com.PackageName.enterprise some.permission.NAME $adb shell pm revoke com.PackageName.enterprise android.permission.READ_CONTACTS Installing an app with all permissions granted: $adb install -g myAPP.apk","title":"Managing Permissions using ADB"},{"location":"android-permissions/#managing-runtime-permissions-with-permissionsdispatcher","text":"As of API 23 (Marshmallow), the permission model for Android [[has changed significantly|Understanding-App-Permissions]]. Now, rather than all being setup at install-time, certain dangerous permissions must be checked and activated at runtime instead. For a full breakdown of how runtime permissions work, check out the [[understanding app permissions|Understanding-App-Permissions#permission-updates-in-marshmallow]] guide. This guide is focused on the practical approach for managing runtime permissions, requesting access to a feature, and managing error cases where the permission is denied. The easiest way to manage runtime permissions is by using third-party libraries. In this guide, we will be taking a look at the PermissionsDispatcher library. The library is 100% reflection-free and as such does not cause significant performance penalties.","title":"Managing Runtime Permissions with PermissionsDispatcher"},{"location":"android-permissions/#dangerous-permissions","text":"First, we need to recognize the dangerous permissions that require us to request runtime permissions. This includes but is not limited to the following common permissions: Name Description Manifest.permission.READ_CALENDAR Read calendar events Manifest.permission.WRITE_CALENDAR Write calendar events Manifest.permission.CAMERA Access camera object Manifest.permission.READ_CONTACTS Read phone contacts Manifest.permission.WRITE_CONTACTS Write phone contacts Manifest.permission.ACCESS_FINE_LOCATION Access precise location Manifest.permission.ACCESS_COARSE_LOCATION Access general location Manifest.permission.RECORD_AUDIO Record with microphone Manifest.permission.CALL_PHONE Call using the dialer Manifest.permission.READ_EXTERNAL_STORAGE Read external or SD Manifest.permission.WRITE_EXTERNAL_STORAGE Write to external or SD The full list of dangerous permissions contains all permissions that require runtime management. Please note that permissions in the normal permission group do not require run-time checks as [[outlined here|Understanding-App-Permissions#normal-permissions]].","title":"Dangerous Permissions"},{"location":"android-permissions/#installation","text":"Make sure to [[upgrade|Getting-Started-with-Gradle#upgrading-gradle]] to the latest Gradle version. And on your app module in app/build.gradle : dependencies { compile 'com.github.hotchemi:permissionsdispatcher:2.0.7' annotationProcessor 'com.github.hotchemi:permissionsdispatcher-processor:2.0.7' } Be sure to use the latest version: available.","title":"Installation"},{"location":"android-permissions/#usage","text":"Suppose we wanted to record be able to call a number using the phone's dialer. Since this is a dangerous permission, we need to ask the user for the permission at runtime with the Manifest.permission.CALL_PHONE permission. This requires us to do the following: Annotate the activity or fragment with @RuntimePermissions Annotate the method that requires the permission with @NeedsPermission Delegate the permissions events to a compiled helper class Invoke the helper class in order to trigger the action with permission request Optional: Annotate a method which explains the reasoning with a dialog Optional: Annotate a method which fires if the permission is denied Optional: Annotate a method which fires if the permission will never be asked for again. First, we need to annotate the activity or fragment with @RuntimePermissions : @RuntimePermissions public class MainActivity extends AppCompatActivity { // ... } Next, we need to annotate the method that requires the permission with @NeedsPermission tag: @RuntimePermissions public class MainActivity extends AppCompatActivity { @NeedsPermission ( Manifest . permission . CALL_PHONE ) void callPhone () { // Trigger the calling of a number here } } After compiling the project, we need to delegate the permission events to the generated helper class ([Activity Name] + PermissionsDispatcher): @RuntimePermissions public class MainActivity extends AppCompatActivity { // ... @Override public void onRequestPermissionsResult ( int requestCode , String [] permissions , int [] grantResults ) { super . onRequestPermissionsResult ( requestCode , permissions , grantResults ); // NOTE: delegate the permission handling to generated method MainActivityPermissionsDispatcher . onRequestPermissionsResult ( this , requestCode , grantResults ); } } In the code base, we can trigger the call with the appropriate runtime permission checks using the generated methods suffixed with WithCheck on the helper class: // NOTE: delegate the permission handling to generated method MainActivityPermissionsDispatcher . callPhoneWithCheck ( this ); This will invoke the callPhone method wrapped with the appropriate permission checks.","title":"Usage"},{"location":"android-permissions/#permission-event-handling","text":"We can also optionally configure the rationale dialog, handle the denial of a permission or manage when the user requests never to be asked again: @RuntimePermissions public class MainActivity extends AppCompatActivity { // ... // Annotate a method which explains why the permission/s is/are needed. // It passes in a `PermissionRequest` object which can continue or abort the current permission @OnShowRationale ( Manifest . permission . CALL_PHONE ) void showRationaleForPhoneCall ( PermissionRequest request ) { new AlertDialog . Builder ( this ) . setMessage ( R . string . permission_phone_rationale ) . setPositiveButton ( R . string . button_allow , ( dialog , button ) -> request . proceed ()) . setNegativeButton ( R . string . button_deny , ( dialog , button ) -> request . cancel ()) . show (); } // Annotate a method which is invoked if the user doesn't grant the permissions @OnPermissionDenied ( Manifest . permission . CALL_PHONE ) void showDeniedForPhoneCall () { Toast . makeText ( this , R . string . permission_call_denied , Toast . LENGTH_SHORT ). show (); } // Annotates a method which is invoked if the user // chose to have the device \"never ask again\" about a permission @OnNeverAskAgain ( Manifest . permission . CALL_PHONE ) void showNeverAskForPhoneCall () { Toast . makeText ( this , R . string . permission_call_neverask , Toast . LENGTH_SHORT ). show (); } } With that we can easily handle all of our runtime permission needs.","title":"Permission Event Handling"},{"location":"android-permissions/#alternatives","text":"In addition the the PermissionsDispatcher outlined above, there are many other popular permissions libraries with various APIs and alternate designs including the following: Dexter easypermissions let AndroidPermissions Grant Assent Ask A full list of permissions libraries can be found here .","title":"Alternatives"},{"location":"android-resources/","text":"Android Resources \u00b6 Understanding App Resources \u00b6 In Android, almost everything is a resource . Defining resources that you can then access in your app is an essential part of Android development. Resources are used for anything from defining colors, images, layouts, menus, and string values. The value of this is that nothing is hardcoded. Everything is defined in these resource files and then can be referenced within your application's code. The simplest of these resources and the most common is using string resources to allow for flexible, localized text. Types of Resources \u00b6 The following are the most common types of resources within Android apps: Name Folder Description Property Animations animator XML files that define property animations. Tween Animations anim XML files that define tween animations. Drawables drawable Bitmap files or XML files that act as graphics Layout layout XML files that define a user interface layout Menu menu XML files that define menus or action bar items Values values XML files with values such as strings, integers, and colors. In addition, note the following key files stored within the values folder mentioned above: Name File Description Colors res/values/colors.xml For color definitions such as text color Dimensions res/values/dimens.xml For dimension values such as padding Strings res/values/strings.xml For string values such as the text for a title Styles res/values/styles.xml For style values such as color of the AppBar For the full list of resource types, check out the Providing a Resource guide. Organizing Resources \u00b6 Resources should be split up into the following key files and folders: Name Path Description XML Layouts res/layout/ This is where we put our XML layout files. XML Menus res/menu/ This is where we put our AppBar menu actions. Drawables res/drawable This is where we put images and XML drawables. Colors res/values/colors.xml This is where we put color definitions . Dimensions res/values/dimens.xml This is where we put dimension values . Strings res/values/strings.xml This is where we put strings. Styles res/values/styles.xml This is where we put style values. Providing App Resources \u00b6 Defining a String Resource \u00b6 For every piece of text you want to display within your application (i.e the label of a button, or the text inside a TextView), you should first define the text in the res/values/strings.xml file. Each entry is a key (representing the id of the text) and a value (the text itself). For example, if I want a button to display \"Submit\", I might add the following string resource to res/values/strings.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string name= \"hello\" > Hello! </string> <string name= \"submit_label\" > Submit </string> </resources> Now if I ever reference the string resource for submit_label , the default will be for \"Submit\" to be displayed. Later though, you could create qualified resource files that change this value for different countries or between devices. We can also store more complex strings (with html or special characters) by using CDATA to escape the string such as: <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string name= \"feedback_label\" > <![CDATA[ Please <a href=\"http://highlight.com\">let us know</a> if you have feedback on this or if you would like to log in with another identity service. Thanks! This is a longer string! ]]> </string> </resources> For more details on defining string resources, check this guide . You can also refer to this guide for style resources and this guide for other types . Referencing an App Resource \u00b6 Now that we have defined our string resource, we can access that resource in either our Java code or our XML layouts at any time. To access, the resource in the XML Layout file, simply use the @ syntax used to access any resource: <Button android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"@string/submit_label\" /> To access the resource directly in your Java code, simply use the getResources.getString or getString methods to access the value given the resource id: String submitText = getResources (). getString ( R . string . submit_label ) And the string value will be retrieved. This similar pattern works for almost any resource from images (drawables) to colors. The getResources() method returns a Resources object with many resource fetching methods. Each resource is defined within different folders and files within the res directory depending on their type. Defining Color Resources \u00b6 In addition to string resources shown above, the following common resource types can be found below. First, let's take a look at the colors file which is used to define all colors used within an application. Colors should be defined within res/values/colors.xml and the XML file looks like the following: <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <color name= \"white\" > #FFFFFF </color> <color name= \"yellow\" > #FFFF00 </color> <color name= \"fuchsia\" > #FF00FF </color> </resources> The colors can be accessed in Java code with: // getResources().getColor() is now deprecated // Resources res = getResources(); // int color = res.getColor(R.color.yellow); // Use ContextCompatResources instead of getColor() int color = ContextCompat . getColor ( context , R . color . yellow ); It is important to note that the most current way of accessing color resources (since API 24) requires providing context in order to resolve any custom [[theme|Styles and Themes]] attributes. See this article for more context. and referenced within any view in the XML using: <TextView android:layout_width= \"fill_parent\" android:layout_height= \"wrap_content\" android:textColor= \"@color/fuchsia\" android:text= \"Hello\" /> That's all you need for color resources. Be sure to keep hardcoded colors out of your layout files. Defining Dimension Resources \u00b6 Next, let's take a look at the dimensions file which is used to define all size dimensions used within an app. A dimension is specified with a number followed by a unit of measure. For example: 10px , 5sp . Dimensions should be defined within res/values/dimens.xml and the XML file looks like the following: <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <dimen name= \"textview_height\" > 25dp </dimen> <dimen name= \"textview_width\" > 150dp </dimen> <dimen name= \"ball_radius\" > 30dp </dimen> <dimen name= \"font_size\" > 16sp </dimen> </resources> The dimensions can be accessed in Java code with: Resources res = getResources (); float fontSize = res . getDimension ( R . dimen . font_size ); and referenced within any view in the XML layouts using: <TextView android:layout_height= \"@dimen/textview_height\" android:layout_width= \"@dimen/textview_width\" android:textSize= \"@dimen/font_size\" /> That's all you need for dimension resources. Be sure to use this to keep hardcoded font sizes, padding and margin values out of your layout files. There are many other resource types to explore . Dynamic Resource Retrieval \u00b6 In certain cases, you might want to dynamically retrieve resources using just the key name rather than by \"hardcoding\" the resource id. For example, suppose I wanted to retrieve the \"submit_label\" string based on just that key name alone. This can be achieved using the getIdentifier method within an Activity: public String getStringValue ( String key ) { // Retrieve the resource id String packageName = getBaseContext (). getPackageName (); Resources resources = getBaseContext (). getResources (); int stringId = resources . getIdentifier ( key , \"string\" , packageName ); if ( stringId == 0 ) { return null ; } // Return the string value based on the res id return resources . getString ( stringId ); } Now you can reference your string resources dynamically using: public String myKey = \"submit_label\" ; // Maps to R.string.submit_label public String myStringValue = getStringValue ( myKey ); // Returns string text This can be done similarly for other types of resources as well. For example, for dynamically retrieving a view by a string ID: // getViewById(\"tvTest\"); public View getViewById ( String id ) { // Retrieve the resource id String packageName = getBaseContext (). getPackageName (); Resources resources = getBaseContext (). getResources (); int viewId = resources . getIdentifier ( id , \"id\" , packageName ); if ( viewId == 0 ) { return null ; } // Return the string value based on the res id return findViewById ( viewId ); } Check out the getResources object and getIdentifier for more details. More Resource Types \u00b6 Bool \u00b6 A boolean value defined in XML. Note: A bool is a simple resource that is referenced using the value provided in the name attribute (not the name of the XML file). As such, you can combine bool resources with other simple resources in the one XML file, under one <resources> element. File Location \u00b6 The file should be in res/values/filename.xml . The filename is arbitrary. The element's name will be used as the resource ID. Resource Reference \u00b6 In Java: R.bool.bool_name In XML: @[package:]bool/bool_name Syntax \u00b6 <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <bool name= \"bool_name\" > [true | false] </bool> </resources> Example \u00b6 XML file saved at res/values-small/bools.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <bool name= \"screen_small\" > true </bool> <bool name= \"adjust_view_bounds\" > true </bool> </resources> This application code retrieves the boolean: Resources res = getResources (); boolean screenIsSmall = res . getBoolean ( R . bool . screen_small ); This layout XML uses the boolean for an attribute: <ImageView android:layout_height= \"fill_parent\" android:layout_width= \"fill_parent\" android:src= \"@drawable/logo\" android:adjustViewBounds= \"@bool/adjust_view_bounds\" /> Color \u00b6 A color value defined in XML. The color is specified with an RGB value and alpha channel. You can use a color resource any place that accepts a hexadecimal color value. You can also use a color resource when a drawable resource is expected in XML (for example, android:drawable=\"@color/green\" ). The value always begins with a pound (#) character and then followed by the Alpha-Red-Green-Blue information in one of the following formats: #RGB #ARGB #RRGGBB #AARRGGBB Note A color is a simple resource that is referenced using the value provided in the name attribute (not the name of the XML file). As such, you can combine color resources with other simple resources in the one XML file, under one <resources> element. File Location - res/values/colors.xml . The filename is arbitrary. The <color> element's name will be used as the resource ID. Resource Reference \u00b6 In Java: R.color.color_name In XML: @[package:]color/color_name Syntax \u00b6 <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <color name= \"color_name\" > hex_color </color> </resources> Example \u00b6 XML file saved at res/values/colors.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <color name= \"opaque_red\" > #f00 </color> <color name= \"translucent_red\" > #80ff0000 </color> </resources> This application code retrieves the color resource: Resources res = getResources (); int color = res . getColor ( R . color . opaque_red ); This layout XML applies the color to an attribute: <TextView android:layout_width= \"fill_parent\" android:layout_height= \"wrap_content\" android:textColor= \"@color/translucent_red\" android:text= \"Hello\" /> Dimension \u00b6 A dimension value defined in XML. A dimension is specified with a number followed by a unit of measure. For example: 10px, 2in, 5sp. The following units of measure are supported by Android: dp - Density-independent Pixels - An abstract unit that is based on the physical density of the screen. These units are relative to a 160 dpi (dots per inch) screen, on which 1dp is roughly equal to 1px. When running on a higher density screen, the number of pixels used to draw 1dp is scaled up by a factor appropriate for the screen's dpi. Likewise, when on a lower density screen, the number of pixels used for 1dp is scaled down. The ratio of dp-to-pixel will change with the screen density, but not necessarily in direct proportion. Using dp units (instead of px units) is a simple solution to making the view dimensions in your layout resize properly for different screen densities. In other words, it provides consistency for the real-world sizes of your UI elements across different devices. sp - Scale-independent Pixels - This is like the dp unit, but it is also scaled by the user's font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user's preference. pt - Points - 1/72 of an inch based on the physical size of the screen, assuming a 72dpi density screen. px - Pixels - Corresponds to actual pixels on the screen. This unit of measure is not recommended because the actual representation can vary across devices; each devices may have a different number of pixels per inch and may have more or fewer total pixels available on the screen. mm - Millimeters - Based on the physical size of the screen. in - Inches - Based on the physical size of the screen. Note: A dimension is a simple resource that is referenced using the value provided in the name attribute (not the name of the XML file). As such, you can combine dimension resources with other simple resources in the one XML file, under one <resources> element. File Location - res/values/filename.xml . The filename is arbitrary. The element's name will be used as the resource ID. Resource Reference \u00b6 In Java: R.dimen.dimension_name In XML: @[package:]dimen/dimension_name Syntax \u00b6 <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <dimen name= \"dimension_name\" > dimension </dimen> </resources> Example \u00b6 XML file saved at res/values/dimens.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <dimen name= \"textview_height\" > 25dp </dimen> <dimen name= \"textview_width\" > 150dp </dimen> <dimen name= \"ball_radius\" > 30dp </dimen> <dimen name= \"font_size\" > 16sp </dimen> </resources> This application code retrieves a dimension: Resources res = getResources (); float fontSize = res . getDimension ( R . dimen . font_size ); This layout XML applies dimensions to attributes: <TextView android:layout_height= \"@dimen/textview_height\" android:layout_width= \"@dimen/textview_width\" android:textSize= \"@dimen/font_size\" /> ID \u00b6 A unique resource ID defined in XML. Using the name you provide in the <item> element, the Android developer tools create a unique integer in your project's R.java class, which you can use as an identifier for an application resources (for example, a View in your UI layout) or a unique integer for use in your application code (for example, as an ID for a dialog or a result code). Note: An ID is a simple resource that is referenced using the value provided in the name attribute (not the name of the XML file). As such, you can combine ID resources with other simple resources in the one XML file, under one <resources> element. Also, remember that an ID resources does not reference an actual resource item; it is simply a unique ID that you can attach to other resources or use as a unique integer in your application. File location - res/values/filename.xml . The filename is arbitrary. Resource reference In Java: R.id.name In XML: @[package:]id/name Syntax <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <item type= \"id\" name= \"id_name\" /> </resources> Example \u00b6 XML file saved at res/values/ids.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <item type= \"id\" name= \"button_ok\" /> <item type= \"id\" name= \"dialog_exit\" /> </resources> Then, this layout snippet uses the \"button_ok\" ID for a Button widget: <Button android:id= \"@id/button_ok\" style= \"@style/button_style\" /> Notice that the android:id value does not include the plus sign in the ID reference, because the ID already exists, as defined in the ids.xml example above. (When you specify an ID to an XML resource using the plus sign\u2014in the format android:id=\"@+id/name\" \u2014 it means that the \"name\" ID does not exist and should be created.) As another example, the following code snippet uses the \"dialog_exit\" ID as a unique identifier for a dialog: showDialog ( R . id . dialog_exit ); In the same application, the \"dialog_exit\" ID is compared when creating a dialog: protected Dialog onCreateDialog ( int id ) { Dialog dialog ; switch ( id ) { case R . id . dialog_exit : ... break ; default : dialog = null ; } return dialog ; } Integer \u00b6 An integer defined in XML. Note: An integer is a simple resource that is referenced using the value provided in the name attribute (not the name of the XML file). As such, you can combine integer resources with other simple resources in the one XML file, under one <resources> element. File location - res/values/filename.xml The filename is arbitrary. The <integer> element's name will be used as the resource ID. Resource Reference In Java: R.integer.integer_name In XML: @[package:]integer/integer_name Syntax <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <integer name= \"integer_name\" > integer </integer> </resources> Example XML file saved at res/values/integers.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <integer name= \"max_speed\" > 75 </integer> <integer name= \"min_speed\" > 5 </integer> </resources> This application code retrieves an integer: Resources res = getResources (); int maxSpeed = res . getInteger ( R . integer . max_speed ); Integer Array \u00b6 An array of integers defined in XML. Note: An integer array is a simple resource that is referenced using the value provided in the name attribute (not the name of the XML file). As such, you can combine integer array resources with other simple resources in the one XML file, under one <resources> element. File location - res/values/filename.xml . The filename is arbitrary. The <integer-array> element's name will be used as the resource ID. Compiled resource data type - Resource pointer to an array of integers. Resource reference In Java: R.array.integer_array_name In XML: @[package:]array.integer_array_name Syntax <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <integer-array name= \"integer_array_name\" > <item > integer </item> </integer-array> </resources> Example XML file saved at res/values/integers.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <integer-array name= \"bits\" > <item> 4 </item> <item> 8 </item> <item> 16 </item> <item> 32 </item> </integer-array> </resources> This application code retrieves the integer array: Resources res = getResources (); int [] bits = res . getIntArray ( R . array . bits ); Typed Array \u00b6 A TypedArray defined in XML. You can use this to create an array of other resources, such as drawables. Note that the array is not required to be homogeneous, so you can create an array of mixed resource types, but you must be aware of what and where the data types are in the array so that you can properly obtain each item with the TypedArray's get...() methods. Note: A typed array is a simple resource that is referenced using the value provided in the name attribute (not the name of the XML file). As such, you can combine typed array resources with other simple resources in the one XML file, under one <resources> element. File location - res/values/filename.xml . The filename is arbitrary. The <array> element's name will be used as the resource ID. Compiled resource data type - Resource pointer to a TypedArray . Resource reference In Java: R.array.array_name In XML: @[package:]array.array_name Syntax <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <array name= \"integer_array_name\" > <item> resource </item> </array> </resources> Example XML file saved at res/values/arrays.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <array name= \"icons\" > <item> @drawable/home </item> <item> @drawable/settings </item> <item> @drawable/logout </item> </array> <array name= \"colors\" > <item> #FFFF0000 </item> <item> #FF00FF00 </item> <item> #FF0000FF </item> </array> </resources> This application code retrieves each array and then obtains the first entry in each array: Resources res = getResources (); TypedArray icons = res . obtainTypedArray ( R . array . icons ); Drawable drawable = icons . getDrawable ( 0 ); TypedArray colors = res . obtainTypedArray ( R . array . colors ); int color = colors . getColor ( 0 , 0 ); Providing Alternate Resources \u00b6 Responsive Design \u00b6 In order to create an outstanding UI design, it is essential for app developers to create apps that work properly across a wide variety of devices. To do this, we first divide android mobile devices into various categories (buckets) based on screen size and display as shown below: Apps must be designed to work across any different screen densities as well as screen sizes. This can be done leveraging a variety of systems provided by the Android framework. Introducing Alternate Resources \u00b6 One of the most powerful tools available to developers is the option to provide \"alternate resources\" based on specific qualifiers such as phone size, language, density, and others. Common uses for alternate resources include: Alternative layout files for different form factors (i.e phone vs tablet) Alternative string resources for different languages (i.e English vs Italian) Alternative drawable resources for different screen densities (shown below) Alternate style resources for different platform versions (Holo vs Material) Alternate layout files for different screen orientations (i.e portrait vs landscape) To specify configuration-specific alternatives for a set of resources, we create a new directory in res in the form of [resource]-[qualifiers] . For example, one best practice is to ensure that all images are provided for [[multiple screen densities|Working-with-the-ImageView#supporting-multiple-densities]]. This is achieved by having res/drawable-hdpi , res/drawable-xhdpi , and res/drawable-xxhdpi folders with different versions of the same image. The correct resource is then selected automatically by the system based on the device density. The directory listing might look like the following: res / drawable / icon . png background . png drawable - hdpi / icon . png background . png Note the resource files need to all have the same name within the different folders. This system works for any type of resource with a wide variety of qualifiers. Understanding Qualifiers \u00b6 Android supports several configuration qualifiers and you can add multiple qualifiers to one directory name, by separating each qualifier with a dash. The most common qualifiers are listed below: Configuration Examples Description Language en , fr Language code selected on the device Screen size sw480dp , sw600dp Minimum width of the screen's height or width. Screen orientation port , land Screen is in portrait or landscape mode. Screen density hdpi , xhdpi Screen density often used for alternate images. Platform version v7 , v11 , v21 Platform version often used for styles. You can specify multiple qualifiers for a single set of resources, separated by dashes. For example, drawable-en-sw600dp-land applies to English tablets in landscape orientation. Note that if you use multiple qualifiers for a resource directory, you must add them to the directory name in the order they are listed in the table above. See the official docs for the complete set of qualifiers available . Creating Alternate Resources \u00b6 In Android Studio, the easiest way to create alternate resources is to right-click on a resource subfolder (i.e layout ) in the Android project sidebar and then use the New => Layout resource file wizard to specify the qualifiers you'd like (i.e orientation ): This will create two versions of the layout file , one for \"portrait\" mode (vertical) and one for \"landscape\" (horizontal). If you were to add a different label into the second version of the layout then you would see this effect automatically when the screen is rotated: To summarize, you can create as many versions of a resource file as is needed for different situations and then the most appropriate version of the resource file is selected automatically by the system. Determining Configuration at Runtime \u00b6 When the app is running, we can always check the current configuration (orientation, screen size, etc) by accessing the Configuration object through getResources().getConfiguration() within an activity or context object. For example, to determine the orientation (portrait or landscape) inside an activity, we can do: String image ; int orientation = getResources (). getConfiguration (). orientation ; if ( orientation == Configuration . ORIENTATION_PORTRAIT ) { image = \"image_portrait.png\" ; // ... } else if ( orientation == Configuration . ORIENTATION_LANDSCAPE ) { image = \"image_landscape.png\" ; // ... } We can similarly access this within any object by getting access to a [[Context object|Using-Context]]. For example, within an ArrayAdapter by using getContext().getResources().getConfiguration() to access the configurations. Alternate Layout Files \u00b6 Often alternative resources are used to specify different layout files for phones and tablets. This can be done using the \"smallest width\" qualifier of sw . The folder structure might be set up as follows: res / layout / activity_main . xml item_photo . xml layout - sw600dp / activity_main . xml layout - sw600dp - land / activity_main . xml layout - sw720dp / activity_main . xml item_photo . xml layout - land / activity_main . xml item_photo . xml Generally speaking phones and phablets are between sw240 and sw480 . 7\" tablets are sw600 and 10\" tablets are sw720 . You can also simply add qualifiers such as layout-land to be applied for all devices in landscape mode. Here\u2019s an illustrated example of the above procedure: For a detailed tutorial on how to manage responsive layouts for tablets, review our [[Flexible User Interfaces]] guide. You can also review this article on UI design best practices and this official doc on resources for more details. There's also a list of Android phone screens and dimensions each one use that you can find here Layout Best Practices \u00b6 Here is a quick checklist about how you can ensure that your application displays properly on different screens: Avoid using hard coded pixel values in your application code Use RelativeLayout properly and never use AbsoluteLayout Use wrap_content , match_parent , or dp units when specifying dimensions Use alternate layouts and drawables to ensure a responsive design when needed Review the rest of the best practices for screen independence on the official guide. Alias Resources \u00b6 When you have a resource that you'd like to use for more than one device configuration, you do not need to put the same resource in more than one alternative resource directory. Instead, you can create an alternative resource that acts as an alias for a resource saved in your default resource directory. Best Resource Match \u00b6 When you request a resource for which you provide alternatives, Android selects which alternative resource to use at runtime, depending on the current device configuration. Read the official resource guide for a detailed overview of how the match is selected.","title":"Understanding App Resources"},{"location":"android-resources/#android-resources","text":"","title":"Android Resources"},{"location":"android-resources/#understanding-app-resources","text":"In Android, almost everything is a resource . Defining resources that you can then access in your app is an essential part of Android development. Resources are used for anything from defining colors, images, layouts, menus, and string values. The value of this is that nothing is hardcoded. Everything is defined in these resource files and then can be referenced within your application's code. The simplest of these resources and the most common is using string resources to allow for flexible, localized text.","title":"Understanding App Resources"},{"location":"android-resources/#types-of-resources","text":"The following are the most common types of resources within Android apps: Name Folder Description Property Animations animator XML files that define property animations. Tween Animations anim XML files that define tween animations. Drawables drawable Bitmap files or XML files that act as graphics Layout layout XML files that define a user interface layout Menu menu XML files that define menus or action bar items Values values XML files with values such as strings, integers, and colors. In addition, note the following key files stored within the values folder mentioned above: Name File Description Colors res/values/colors.xml For color definitions such as text color Dimensions res/values/dimens.xml For dimension values such as padding Strings res/values/strings.xml For string values such as the text for a title Styles res/values/styles.xml For style values such as color of the AppBar For the full list of resource types, check out the Providing a Resource guide.","title":"Types of Resources"},{"location":"android-resources/#organizing-resources","text":"Resources should be split up into the following key files and folders: Name Path Description XML Layouts res/layout/ This is where we put our XML layout files. XML Menus res/menu/ This is where we put our AppBar menu actions. Drawables res/drawable This is where we put images and XML drawables. Colors res/values/colors.xml This is where we put color definitions . Dimensions res/values/dimens.xml This is where we put dimension values . Strings res/values/strings.xml This is where we put strings. Styles res/values/styles.xml This is where we put style values.","title":"Organizing Resources"},{"location":"android-resources/#providing-app-resources","text":"","title":"Providing App Resources"},{"location":"android-resources/#defining-a-string-resource","text":"For every piece of text you want to display within your application (i.e the label of a button, or the text inside a TextView), you should first define the text in the res/values/strings.xml file. Each entry is a key (representing the id of the text) and a value (the text itself). For example, if I want a button to display \"Submit\", I might add the following string resource to res/values/strings.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string name= \"hello\" > Hello! </string> <string name= \"submit_label\" > Submit </string> </resources> Now if I ever reference the string resource for submit_label , the default will be for \"Submit\" to be displayed. Later though, you could create qualified resource files that change this value for different countries or between devices. We can also store more complex strings (with html or special characters) by using CDATA to escape the string such as: <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string name= \"feedback_label\" > <![CDATA[ Please <a href=\"http://highlight.com\">let us know</a> if you have feedback on this or if you would like to log in with another identity service. Thanks! This is a longer string! ]]> </string> </resources> For more details on defining string resources, check this guide . You can also refer to this guide for style resources and this guide for other types .","title":"Defining a String Resource"},{"location":"android-resources/#referencing-an-app-resource","text":"Now that we have defined our string resource, we can access that resource in either our Java code or our XML layouts at any time. To access, the resource in the XML Layout file, simply use the @ syntax used to access any resource: <Button android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"@string/submit_label\" /> To access the resource directly in your Java code, simply use the getResources.getString or getString methods to access the value given the resource id: String submitText = getResources (). getString ( R . string . submit_label ) And the string value will be retrieved. This similar pattern works for almost any resource from images (drawables) to colors. The getResources() method returns a Resources object with many resource fetching methods. Each resource is defined within different folders and files within the res directory depending on their type.","title":"Referencing an App Resource"},{"location":"android-resources/#defining-color-resources","text":"In addition to string resources shown above, the following common resource types can be found below. First, let's take a look at the colors file which is used to define all colors used within an application. Colors should be defined within res/values/colors.xml and the XML file looks like the following: <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <color name= \"white\" > #FFFFFF </color> <color name= \"yellow\" > #FFFF00 </color> <color name= \"fuchsia\" > #FF00FF </color> </resources> The colors can be accessed in Java code with: // getResources().getColor() is now deprecated // Resources res = getResources(); // int color = res.getColor(R.color.yellow); // Use ContextCompatResources instead of getColor() int color = ContextCompat . getColor ( context , R . color . yellow ); It is important to note that the most current way of accessing color resources (since API 24) requires providing context in order to resolve any custom [[theme|Styles and Themes]] attributes. See this article for more context. and referenced within any view in the XML using: <TextView android:layout_width= \"fill_parent\" android:layout_height= \"wrap_content\" android:textColor= \"@color/fuchsia\" android:text= \"Hello\" /> That's all you need for color resources. Be sure to keep hardcoded colors out of your layout files.","title":"Defining Color Resources"},{"location":"android-resources/#defining-dimension-resources","text":"Next, let's take a look at the dimensions file which is used to define all size dimensions used within an app. A dimension is specified with a number followed by a unit of measure. For example: 10px , 5sp . Dimensions should be defined within res/values/dimens.xml and the XML file looks like the following: <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <dimen name= \"textview_height\" > 25dp </dimen> <dimen name= \"textview_width\" > 150dp </dimen> <dimen name= \"ball_radius\" > 30dp </dimen> <dimen name= \"font_size\" > 16sp </dimen> </resources> The dimensions can be accessed in Java code with: Resources res = getResources (); float fontSize = res . getDimension ( R . dimen . font_size ); and referenced within any view in the XML layouts using: <TextView android:layout_height= \"@dimen/textview_height\" android:layout_width= \"@dimen/textview_width\" android:textSize= \"@dimen/font_size\" /> That's all you need for dimension resources. Be sure to use this to keep hardcoded font sizes, padding and margin values out of your layout files. There are many other resource types to explore .","title":"Defining Dimension Resources"},{"location":"android-resources/#dynamic-resource-retrieval","text":"In certain cases, you might want to dynamically retrieve resources using just the key name rather than by \"hardcoding\" the resource id. For example, suppose I wanted to retrieve the \"submit_label\" string based on just that key name alone. This can be achieved using the getIdentifier method within an Activity: public String getStringValue ( String key ) { // Retrieve the resource id String packageName = getBaseContext (). getPackageName (); Resources resources = getBaseContext (). getResources (); int stringId = resources . getIdentifier ( key , \"string\" , packageName ); if ( stringId == 0 ) { return null ; } // Return the string value based on the res id return resources . getString ( stringId ); } Now you can reference your string resources dynamically using: public String myKey = \"submit_label\" ; // Maps to R.string.submit_label public String myStringValue = getStringValue ( myKey ); // Returns string text This can be done similarly for other types of resources as well. For example, for dynamically retrieving a view by a string ID: // getViewById(\"tvTest\"); public View getViewById ( String id ) { // Retrieve the resource id String packageName = getBaseContext (). getPackageName (); Resources resources = getBaseContext (). getResources (); int viewId = resources . getIdentifier ( id , \"id\" , packageName ); if ( viewId == 0 ) { return null ; } // Return the string value based on the res id return findViewById ( viewId ); } Check out the getResources object and getIdentifier for more details.","title":"Dynamic Resource Retrieval"},{"location":"android-resources/#more-resource-types","text":"","title":"More Resource Types"},{"location":"android-resources/#bool","text":"A boolean value defined in XML. Note: A bool is a simple resource that is referenced using the value provided in the name attribute (not the name of the XML file). As such, you can combine bool resources with other simple resources in the one XML file, under one <resources> element.","title":"Bool"},{"location":"android-resources/#file-location","text":"The file should be in res/values/filename.xml . The filename is arbitrary. The element's name will be used as the resource ID.","title":"File Location"},{"location":"android-resources/#resource-reference","text":"In Java: R.bool.bool_name In XML: @[package:]bool/bool_name","title":"Resource Reference"},{"location":"android-resources/#syntax","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <bool name= \"bool_name\" > [true | false] </bool> </resources>","title":"Syntax"},{"location":"android-resources/#example","text":"XML file saved at res/values-small/bools.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <bool name= \"screen_small\" > true </bool> <bool name= \"adjust_view_bounds\" > true </bool> </resources> This application code retrieves the boolean: Resources res = getResources (); boolean screenIsSmall = res . getBoolean ( R . bool . screen_small ); This layout XML uses the boolean for an attribute: <ImageView android:layout_height= \"fill_parent\" android:layout_width= \"fill_parent\" android:src= \"@drawable/logo\" android:adjustViewBounds= \"@bool/adjust_view_bounds\" />","title":"Example"},{"location":"android-resources/#color","text":"A color value defined in XML. The color is specified with an RGB value and alpha channel. You can use a color resource any place that accepts a hexadecimal color value. You can also use a color resource when a drawable resource is expected in XML (for example, android:drawable=\"@color/green\" ). The value always begins with a pound (#) character and then followed by the Alpha-Red-Green-Blue information in one of the following formats: #RGB #ARGB #RRGGBB #AARRGGBB Note A color is a simple resource that is referenced using the value provided in the name attribute (not the name of the XML file). As such, you can combine color resources with other simple resources in the one XML file, under one <resources> element. File Location - res/values/colors.xml . The filename is arbitrary. The <color> element's name will be used as the resource ID.","title":"Color"},{"location":"android-resources/#resource-reference_1","text":"In Java: R.color.color_name In XML: @[package:]color/color_name","title":"Resource Reference"},{"location":"android-resources/#syntax_1","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <color name= \"color_name\" > hex_color </color> </resources>","title":"Syntax"},{"location":"android-resources/#example_1","text":"XML file saved at res/values/colors.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <color name= \"opaque_red\" > #f00 </color> <color name= \"translucent_red\" > #80ff0000 </color> </resources> This application code retrieves the color resource: Resources res = getResources (); int color = res . getColor ( R . color . opaque_red ); This layout XML applies the color to an attribute: <TextView android:layout_width= \"fill_parent\" android:layout_height= \"wrap_content\" android:textColor= \"@color/translucent_red\" android:text= \"Hello\" />","title":"Example"},{"location":"android-resources/#dimension","text":"A dimension value defined in XML. A dimension is specified with a number followed by a unit of measure. For example: 10px, 2in, 5sp. The following units of measure are supported by Android: dp - Density-independent Pixels - An abstract unit that is based on the physical density of the screen. These units are relative to a 160 dpi (dots per inch) screen, on which 1dp is roughly equal to 1px. When running on a higher density screen, the number of pixels used to draw 1dp is scaled up by a factor appropriate for the screen's dpi. Likewise, when on a lower density screen, the number of pixels used for 1dp is scaled down. The ratio of dp-to-pixel will change with the screen density, but not necessarily in direct proportion. Using dp units (instead of px units) is a simple solution to making the view dimensions in your layout resize properly for different screen densities. In other words, it provides consistency for the real-world sizes of your UI elements across different devices. sp - Scale-independent Pixels - This is like the dp unit, but it is also scaled by the user's font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user's preference. pt - Points - 1/72 of an inch based on the physical size of the screen, assuming a 72dpi density screen. px - Pixels - Corresponds to actual pixels on the screen. This unit of measure is not recommended because the actual representation can vary across devices; each devices may have a different number of pixels per inch and may have more or fewer total pixels available on the screen. mm - Millimeters - Based on the physical size of the screen. in - Inches - Based on the physical size of the screen. Note: A dimension is a simple resource that is referenced using the value provided in the name attribute (not the name of the XML file). As such, you can combine dimension resources with other simple resources in the one XML file, under one <resources> element. File Location - res/values/filename.xml . The filename is arbitrary. The element's name will be used as the resource ID.","title":"Dimension"},{"location":"android-resources/#resource-reference_2","text":"In Java: R.dimen.dimension_name In XML: @[package:]dimen/dimension_name","title":"Resource Reference"},{"location":"android-resources/#syntax_2","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <dimen name= \"dimension_name\" > dimension </dimen> </resources>","title":"Syntax"},{"location":"android-resources/#example_2","text":"XML file saved at res/values/dimens.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <dimen name= \"textview_height\" > 25dp </dimen> <dimen name= \"textview_width\" > 150dp </dimen> <dimen name= \"ball_radius\" > 30dp </dimen> <dimen name= \"font_size\" > 16sp </dimen> </resources> This application code retrieves a dimension: Resources res = getResources (); float fontSize = res . getDimension ( R . dimen . font_size ); This layout XML applies dimensions to attributes: <TextView android:layout_height= \"@dimen/textview_height\" android:layout_width= \"@dimen/textview_width\" android:textSize= \"@dimen/font_size\" />","title":"Example"},{"location":"android-resources/#id","text":"A unique resource ID defined in XML. Using the name you provide in the <item> element, the Android developer tools create a unique integer in your project's R.java class, which you can use as an identifier for an application resources (for example, a View in your UI layout) or a unique integer for use in your application code (for example, as an ID for a dialog or a result code). Note: An ID is a simple resource that is referenced using the value provided in the name attribute (not the name of the XML file). As such, you can combine ID resources with other simple resources in the one XML file, under one <resources> element. Also, remember that an ID resources does not reference an actual resource item; it is simply a unique ID that you can attach to other resources or use as a unique integer in your application. File location - res/values/filename.xml . The filename is arbitrary. Resource reference In Java: R.id.name In XML: @[package:]id/name Syntax <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <item type= \"id\" name= \"id_name\" /> </resources>","title":"ID"},{"location":"android-resources/#example_3","text":"XML file saved at res/values/ids.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <item type= \"id\" name= \"button_ok\" /> <item type= \"id\" name= \"dialog_exit\" /> </resources> Then, this layout snippet uses the \"button_ok\" ID for a Button widget: <Button android:id= \"@id/button_ok\" style= \"@style/button_style\" /> Notice that the android:id value does not include the plus sign in the ID reference, because the ID already exists, as defined in the ids.xml example above. (When you specify an ID to an XML resource using the plus sign\u2014in the format android:id=\"@+id/name\" \u2014 it means that the \"name\" ID does not exist and should be created.) As another example, the following code snippet uses the \"dialog_exit\" ID as a unique identifier for a dialog: showDialog ( R . id . dialog_exit ); In the same application, the \"dialog_exit\" ID is compared when creating a dialog: protected Dialog onCreateDialog ( int id ) { Dialog dialog ; switch ( id ) { case R . id . dialog_exit : ... break ; default : dialog = null ; } return dialog ; }","title":"Example"},{"location":"android-resources/#integer","text":"An integer defined in XML. Note: An integer is a simple resource that is referenced using the value provided in the name attribute (not the name of the XML file). As such, you can combine integer resources with other simple resources in the one XML file, under one <resources> element. File location - res/values/filename.xml The filename is arbitrary. The <integer> element's name will be used as the resource ID. Resource Reference In Java: R.integer.integer_name In XML: @[package:]integer/integer_name Syntax <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <integer name= \"integer_name\" > integer </integer> </resources> Example XML file saved at res/values/integers.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <integer name= \"max_speed\" > 75 </integer> <integer name= \"min_speed\" > 5 </integer> </resources> This application code retrieves an integer: Resources res = getResources (); int maxSpeed = res . getInteger ( R . integer . max_speed );","title":"Integer"},{"location":"android-resources/#integer-array","text":"An array of integers defined in XML. Note: An integer array is a simple resource that is referenced using the value provided in the name attribute (not the name of the XML file). As such, you can combine integer array resources with other simple resources in the one XML file, under one <resources> element. File location - res/values/filename.xml . The filename is arbitrary. The <integer-array> element's name will be used as the resource ID. Compiled resource data type - Resource pointer to an array of integers. Resource reference In Java: R.array.integer_array_name In XML: @[package:]array.integer_array_name Syntax <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <integer-array name= \"integer_array_name\" > <item > integer </item> </integer-array> </resources> Example XML file saved at res/values/integers.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <integer-array name= \"bits\" > <item> 4 </item> <item> 8 </item> <item> 16 </item> <item> 32 </item> </integer-array> </resources> This application code retrieves the integer array: Resources res = getResources (); int [] bits = res . getIntArray ( R . array . bits );","title":"Integer Array"},{"location":"android-resources/#typed-array","text":"A TypedArray defined in XML. You can use this to create an array of other resources, such as drawables. Note that the array is not required to be homogeneous, so you can create an array of mixed resource types, but you must be aware of what and where the data types are in the array so that you can properly obtain each item with the TypedArray's get...() methods. Note: A typed array is a simple resource that is referenced using the value provided in the name attribute (not the name of the XML file). As such, you can combine typed array resources with other simple resources in the one XML file, under one <resources> element. File location - res/values/filename.xml . The filename is arbitrary. The <array> element's name will be used as the resource ID. Compiled resource data type - Resource pointer to a TypedArray . Resource reference In Java: R.array.array_name In XML: @[package:]array.array_name Syntax <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <array name= \"integer_array_name\" > <item> resource </item> </array> </resources> Example XML file saved at res/values/arrays.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <array name= \"icons\" > <item> @drawable/home </item> <item> @drawable/settings </item> <item> @drawable/logout </item> </array> <array name= \"colors\" > <item> #FFFF0000 </item> <item> #FF00FF00 </item> <item> #FF0000FF </item> </array> </resources> This application code retrieves each array and then obtains the first entry in each array: Resources res = getResources (); TypedArray icons = res . obtainTypedArray ( R . array . icons ); Drawable drawable = icons . getDrawable ( 0 ); TypedArray colors = res . obtainTypedArray ( R . array . colors ); int color = colors . getColor ( 0 , 0 );","title":"Typed Array"},{"location":"android-resources/#providing-alternate-resources","text":"","title":"Providing Alternate Resources"},{"location":"android-resources/#responsive-design","text":"In order to create an outstanding UI design, it is essential for app developers to create apps that work properly across a wide variety of devices. To do this, we first divide android mobile devices into various categories (buckets) based on screen size and display as shown below: Apps must be designed to work across any different screen densities as well as screen sizes. This can be done leveraging a variety of systems provided by the Android framework.","title":"Responsive Design"},{"location":"android-resources/#introducing-alternate-resources","text":"One of the most powerful tools available to developers is the option to provide \"alternate resources\" based on specific qualifiers such as phone size, language, density, and others. Common uses for alternate resources include: Alternative layout files for different form factors (i.e phone vs tablet) Alternative string resources for different languages (i.e English vs Italian) Alternative drawable resources for different screen densities (shown below) Alternate style resources for different platform versions (Holo vs Material) Alternate layout files for different screen orientations (i.e portrait vs landscape) To specify configuration-specific alternatives for a set of resources, we create a new directory in res in the form of [resource]-[qualifiers] . For example, one best practice is to ensure that all images are provided for [[multiple screen densities|Working-with-the-ImageView#supporting-multiple-densities]]. This is achieved by having res/drawable-hdpi , res/drawable-xhdpi , and res/drawable-xxhdpi folders with different versions of the same image. The correct resource is then selected automatically by the system based on the device density. The directory listing might look like the following: res / drawable / icon . png background . png drawable - hdpi / icon . png background . png Note the resource files need to all have the same name within the different folders. This system works for any type of resource with a wide variety of qualifiers.","title":"Introducing Alternate Resources"},{"location":"android-resources/#understanding-qualifiers","text":"Android supports several configuration qualifiers and you can add multiple qualifiers to one directory name, by separating each qualifier with a dash. The most common qualifiers are listed below: Configuration Examples Description Language en , fr Language code selected on the device Screen size sw480dp , sw600dp Minimum width of the screen's height or width. Screen orientation port , land Screen is in portrait or landscape mode. Screen density hdpi , xhdpi Screen density often used for alternate images. Platform version v7 , v11 , v21 Platform version often used for styles. You can specify multiple qualifiers for a single set of resources, separated by dashes. For example, drawable-en-sw600dp-land applies to English tablets in landscape orientation. Note that if you use multiple qualifiers for a resource directory, you must add them to the directory name in the order they are listed in the table above. See the official docs for the complete set of qualifiers available .","title":"Understanding Qualifiers"},{"location":"android-resources/#creating-alternate-resources","text":"In Android Studio, the easiest way to create alternate resources is to right-click on a resource subfolder (i.e layout ) in the Android project sidebar and then use the New => Layout resource file wizard to specify the qualifiers you'd like (i.e orientation ): This will create two versions of the layout file , one for \"portrait\" mode (vertical) and one for \"landscape\" (horizontal). If you were to add a different label into the second version of the layout then you would see this effect automatically when the screen is rotated: To summarize, you can create as many versions of a resource file as is needed for different situations and then the most appropriate version of the resource file is selected automatically by the system.","title":"Creating Alternate Resources"},{"location":"android-resources/#determining-configuration-at-runtime","text":"When the app is running, we can always check the current configuration (orientation, screen size, etc) by accessing the Configuration object through getResources().getConfiguration() within an activity or context object. For example, to determine the orientation (portrait or landscape) inside an activity, we can do: String image ; int orientation = getResources (). getConfiguration (). orientation ; if ( orientation == Configuration . ORIENTATION_PORTRAIT ) { image = \"image_portrait.png\" ; // ... } else if ( orientation == Configuration . ORIENTATION_LANDSCAPE ) { image = \"image_landscape.png\" ; // ... } We can similarly access this within any object by getting access to a [[Context object|Using-Context]]. For example, within an ArrayAdapter by using getContext().getResources().getConfiguration() to access the configurations.","title":"Determining Configuration at Runtime"},{"location":"android-resources/#alternate-layout-files","text":"Often alternative resources are used to specify different layout files for phones and tablets. This can be done using the \"smallest width\" qualifier of sw . The folder structure might be set up as follows: res / layout / activity_main . xml item_photo . xml layout - sw600dp / activity_main . xml layout - sw600dp - land / activity_main . xml layout - sw720dp / activity_main . xml item_photo . xml layout - land / activity_main . xml item_photo . xml Generally speaking phones and phablets are between sw240 and sw480 . 7\" tablets are sw600 and 10\" tablets are sw720 . You can also simply add qualifiers such as layout-land to be applied for all devices in landscape mode. Here\u2019s an illustrated example of the above procedure: For a detailed tutorial on how to manage responsive layouts for tablets, review our [[Flexible User Interfaces]] guide. You can also review this article on UI design best practices and this official doc on resources for more details. There's also a list of Android phone screens and dimensions each one use that you can find here","title":"Alternate Layout Files"},{"location":"android-resources/#layout-best-practices","text":"Here is a quick checklist about how you can ensure that your application displays properly on different screens: Avoid using hard coded pixel values in your application code Use RelativeLayout properly and never use AbsoluteLayout Use wrap_content , match_parent , or dp units when specifying dimensions Use alternate layouts and drawables to ensure a responsive design when needed Review the rest of the best practices for screen independence on the official guide.","title":"Layout Best Practices"},{"location":"android-resources/#alias-resources","text":"When you have a resource that you'd like to use for more than one device configuration, you do not need to put the same resource in more than one alternative resource directory. Instead, you can create an alternative resource that acts as an alias for a resource saved in your default resource directory.","title":"Alias Resources"},{"location":"android-resources/#best-resource-match","text":"When you request a resource for which you provide alternatives, Android selects which alternative resource to use at runtime, depending on the current device configuration. Read the official resource guide for a detailed overview of how the match is selected.","title":"Best Resource Match"},{"location":"animation/","text":"","title":"Animation"},{"location":"common-intents/","text":"Common Implicit Intents \u00b6 Let's take a look at the most common implicit intents such as making a phone call, launching a web address, sending an email, etc. Phone Call \u00b6 Permissions: <uses-permission android:name= \"android.permission.CALL_PHONE\" /> ``` 0o9 Intent: ```java Intent callIntent = new Intent(Intent.ACTION_CALL); callIntent.setData(Uri.parse(\"tel:0377778888\")); if (callIntent.resolveActivity(getPackageManager()) != null) { startActivity(callIntent); } Danger It's possible that a user won't have any apps that handle the implicit intent you send to startActivity() . If that happens, the call will fail and your app will crash. To verify that an activity will receive the intent, call resolveActivity() on your Intent object. If the result is non-null, then there is at least one app that can handle the intent and it's safe to call startActivity() . If the result is null, you should not use the intent and, if possible, you should disable the feature that issue the intent. Send Email (to Phone Email Client) \u00b6 Compose an email in the phone email client: Intent intent = new Intent ( Intent . ACTION_SEND ); intent . setType ( \"plain/text\" ); intent . putExtra ( Intent . EXTRA_EMAIL , new String [] { \"some@email.address\" }); intent . putExtra ( Intent . EXTRA_SUBJECT , \"subject\" ); intent . putExtra ( Intent . EXTRA_TEXT , \"mail body\" ); if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( Intent . createChooser ( intent , \"\" )); } Send Email (to Gmail) \u00b6 Gmail does not examine the extra Intent fields, so in order to use this intent, you need to use the Intent.ACTION_SENDTO and pass a mailto: URI with the subject and body URL encoded. String uriText = \"mailto:youremail@gmail.com\" + \"?subject=\" + Uri . encode ( \"some subject text here\" ) + \"&body=\" + Uri . encode ( \"some text here\" ); Uri uri = Uri . parse ( uriText ); Intent sendIntent = new Intent ( Intent . ACTION_SENDTO ); sendIntent . setData ( uri ); if ( sendIntent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( Intent . createChooser ( sendIntent , \"Send email\" )); } Launch Website \u00b6 Launch a website in the phone browser: Intent browserIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( \"http://www.google.com\" )); if ( browserIntent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( browserIntent ); } You can also launch a Chrome tab if the app. Take a look at [[this guide|Chrome-Custom-Tabs#setup]] for how to launch this implicit intent. Open Google Play Store \u00b6 Open app page on Google Play: Intent intent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( \"market://details?id=\" + context . getPackageName ())); if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( intent ); } Compose SMS \u00b6 Uri smsUri = Uri . parse ( \"tel:\" + to ); Intent intent = new Intent ( Intent . ACTION_VIEW , smsUri ); intent . putExtra ( \"address\" , to ); intent . putExtra ( \"sms_body\" , message ); intent . setType ( \"vnd.android-dir/mms-sms\" ); //here setType will set the previous data null. if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( intent ); } Google Maps \u00b6 Show location in maps application: Intent intent = new Intent (); intent . setAction ( Intent . ACTION_VIEW ); String data = String . format ( \"geo:%s,%s\" , latitude , longitude ); if ( zoomLevel != null ) { data = String . format ( \"%s?z=%s\" , data , zoomLevel ); } intent . setData ( Uri . parse ( data )); if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( intent ); } Capture Photo \u00b6 Uri uri = Uri . fromFile ( new File ( file )); Intent intent = new Intent ( MediaStore . ACTION_IMAGE_CAPTURE ); intent . putExtra ( MediaStore . EXTRA_OUTPUT , uri ); if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( intent ); } Sharing Content \u00b6 Images or binary data: Intent sharingIntent = new Intent ( Intent . ACTION_SEND ); sharingIntent . setType ( \"image/jpg\" ); Uri uri = Uri . fromFile ( new File ( getFilesDir (), \"foo.jpg\" )); sharingIntent . putExtra ( Intent . EXTRA_STREAM , uri . toString ()); if ( sharingIntent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( Intent . createChooser ( sharingIntent , \"Share image using\" )); } or HTML: Intent sharingIntent = new Intent ( Intent . ACTION_SEND ); sharingIntent . setType ( \"text/html\" ); sharingIntent . putExtra ( android . content . Intent . EXTRA_TEXT , Html . fromHtml ( \"<p>This is the text shared.</p>\" )); if ( sharingIntent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( Intent . createChooser ( sharingIntent , \"Share using\" )); } Sharing Content with Intents \u00b6 Intents allow us to communicate data between Android apps and implicit intents can also accept actions. One of those actions is the ACTION_SEND command which indicates we want to send data across apps. To send data, all you need to do is specify the data and its type, and the system will identify compatible receiving activities and display them to the user. Sending and receiving data between applications with intents is most commonly used for social sharing of content. Intents allow users to share information quickly and easily, using their favorite applications. Sharing Local Content \u00b6 You can send content by invoking an implicit intent with ACTION_SEND . Sending HTML \u00b6 Intent sharingIntent = new Intent ( Intent . ACTION_SEND ); sharingIntent . setType ( \"text/html\" ); sharingIntent . putExtra ( android . content . Intent . EXTRA_TEXT , Html . fromHtml ( \"<p>This is the text shared.</p>\" )); startActivity ( Intent . createChooser ( sharingIntent , \"Share using\" )); Sending Images \u00b6 To send images or binary data: final Intent shareIntent = new Intent ( Intent . ACTION_SEND ); shareIntent . setType ( \"image/jpg\" ); final File photoFile = new File ( getFilesDir (), \"foo.jpg\" ); shareIntent . putExtra ( Intent . EXTRA_STREAM , Uri . fromFile ( photoFile )); startActivity ( Intent . createChooser ( shareIntent , \"Share image using\" )); Sending Links \u00b6 Sending URL links should simply use text/plain type: Intent shareIntent = new Intent ( Intent . ACTION_SEND ); shareIntent . setType ( \"text/plain\" ); shareIntent . putExtra ( Intent . EXTRA_TEXT , \"http://codepath.com\" ); startActivity ( Intent . createChooser ( shareIntent , \"Share link using\" )); Sharing Multiple Types \u00b6 In certain cases, we might want to send an image along with text. This can be done with: String text = \"Look at my awesome picture\" ; Uri pictureUri = Uri . parse ( \"file://my_picture\" ); Intent shareIntent = new Intent (); shareIntent . setAction ( Intent . ACTION_SEND ); shareIntent . putExtra ( Intent . EXTRA_TEXT , text ); shareIntent . putExtra ( Intent . EXTRA_STREAM , imageUri ); shareIntent . setType ( \"image/*\" ); shareIntent . addFlags ( Intent . FLAG_GRANT_READ_URI_PERMISSION ); startActivity ( Intent . createChooser ( shareIntent , \"Share images...\" )); Sharing multiple images can be done with: Intent shareIntent = new Intent ( Intent . ACTION_SEND_MULTIPLE ); shareIntent . putParcelableArrayListExtra ( Intent . EXTRA_STREAM , imageUris ); shareIntent . setType ( \"image/*\" ); See this stackoverflow post for more details. Note: Facebook does not properly recognize multiple shared elements. See this facebook specific bug for more details and share using their SDK. Share in Facebook \u00b6 Facebook doesn't work well with normal sharing intents when sharing multiple content elements as discussed in this bug . To share posts with facebook, we need to: Create a new Facebook app here (follow the instructions) Add the Facebook SDK to your Android project Share using this code snippet: public void setupFacebookShareIntent () { ShareDialog shareDialog ; FacebookSdk . sdkInitialize ( getApplicationContext ()); shareDialog = new ShareDialog ( this ); ShareLinkContent linkContent = new ShareLinkContent . Builder () . setContentTitle ( \"Title\" ) . setContentDescription ( \"\\\"Body Of Test Post\\\"\" ) . setContentUrl ( Uri . parse ( \"http://someurl.com/here\" )) . build (); shareDialog . show ( linkContent ); } Sharing Remote Images \u00b6 You may want to send an image that were loaded from a remote URL. Assuming you are using a third party library like Picasso , here is how you might share an image that came from the network and was loaded into an ImageView. There are two ways to accomplish this. The first way, shown below, takes the bitmap from the view and loads it into a file. // Get access to ImageView ImageView ivImage = ( ImageView ) findViewById ( R . id . ivResult ); // Fire async request to load image Picasso . with ( context ). load ( imageUrl ). into ( ivImage ); and then later assuming after the image has completed loading, this is how you can trigger a share: // Can be triggered by a view event such as a button press public void onShareItem ( View v ) { // Get access to bitmap image from view ImageView ivImage = ( ImageView ) findViewById ( R . id . ivResult ); // Get access to the URI for the bitmap Uri bmpUri = getLocalBitmapUri ( ivImage ); if ( bmpUri != null ) { // Construct a ShareIntent with link to image Intent shareIntent = new Intent (); shareIntent . setAction ( Intent . ACTION_SEND ); shareIntent . putExtra ( Intent . EXTRA_STREAM , bmpUri ); shareIntent . setType ( \"image/*\" ); // Launch sharing dialog for image startActivity ( Intent . createChooser ( shareIntent , \"Share Image\" )); } else { // ...sharing failed, handle error } } // Returns the URI path to the Bitmap displayed in specified ImageView public Uri getLocalBitmapUri ( ImageView imageView ) { // Extract Bitmap from ImageView drawable Drawable drawable = imageView . getDrawable (); Bitmap bmp = null ; if ( drawable instanceof BitmapDrawable ){ bmp = (( BitmapDrawable ) imageView . getDrawable ()). getBitmap (); } else { return null ; } // Store image to default external storage directory Uri bmpUri = null ; try { // Use methods on Context to access package-specific directories on external storage. // This way, you don't need to request external read/write permission. // See https://youtu.be/5xVh-7ywKpE?t=25m25s File file = new File ( getExternalFilesDir ( Environment . DIRECTORY_PICTURES ), \"share_image_\" + System . currentTimeMillis () + \".png\" ); FileOutputStream out = new FileOutputStream ( file ); bmp . compress ( Bitmap . CompressFormat . PNG , 90 , out ); out . close (); // **Warning:** This will fail for API >= 24, use a FileProvider as shown below instead. bmpUri = Uri . fromFile ( file ); } catch ( IOException e ) { e . printStackTrace (); } return bmpUri ; } Make sure to setup the \"SD Card\" within the emulator device settings: Note that if you are using API 24 or above , see the section below on using a FileProvider to work around new file restrictions. Sharing Files with API 24 or higher \u00b6 If you are using Android API 24 or higher, private File URI resources (file:///) cannot be shared. You must instead wrap the File object as a content provider (content://) using the FileProvider class. First, you must declare this FileProvider in your AndroidManifest.xml file within the <application> tag: <provider android:name= \"android.support.v4.content.FileProvider\" android:authorities= \"com.codepath.fileprovider\" android:exported= \"false\" android:grantUriPermissions= \"true\" > <meta-data android:name= \"android.support.FILE_PROVIDER_PATHS\" android:resource= \"@xml/fileprovider\" /> </provider> Next, create a resource directory called xml and create a fileprovider.xml . Assuming you wish to grant access to the application's specific external storage directory, which requires requesting no additional permissions, you can declare this line as follows: <?xml version=\"1.0\" encoding=\"utf-8\"?> <paths> <external-files-path name= \"images\" path= \"Pictures\" /> <!--Uncomment below to share the entire application specific directory --> <!--<external-path name=\"all_dirs\" path=\".\"/>--> </paths> Finally, you will convert the File object into a content provider using the FileProvider class: // getExternalFilesDir() + \"/Pictures\" should match the declaration in fileprovider.xml paths File file = new File ( getExternalFilesDir ( Environment . DIRECTORY_PICTURES ), \"share_image_\" + System . currentTimeMillis () + \".png\" ); // wrap File object into a content provider. NOTE: authority here should match authority in manifest declaration bmpUri = FileProvider . getUriForFile ( MyActivity . this , \"com.codepath.fileprovider\" , file ); Note that there are other XML tags you can use in the fileprovider.xml , which map to the File directory specified. In the example above, we use Context.getExternalFilesDir(Environment.DIRECTORY_PICTURES) , which corresponded to the <external-files-dir> XML tag in the declaration with the Pictures path explicitly specified. Here are all the options you can use too: XML tag Corresponding storage call When to use <files-path> Context.getFilesDir() data can only be viewed by app, deleted when uninstalled ( /data/data/[packagename]/files ) <external-files-dir> Context.getExternalFilesDir() data can be read/write by the app, any apps granted with READ_STORAGE permission can read too, deleted when uninstalled ( /Android/data/[packagename]/files ) <cache-path> Context.getCacheDir() temporary file storage <external-path> Environment.getExternalStoragePublicDirectory() data can be read/write by the app, any apps can view, files not deleted when uninstalled <external-cache-path> Context.getExternalCacheDir() temporary file storage with usually larger space If you are using API 23 or above , then you'll need to [[request runtime permissions|Managing-Runtime-Permissions-with-PermissionsDispatcher]] for Manifest.permission.READ_EXTERNAL_STORAGE and Manifest.permission.WRITE_EXTERNAL_STORAGE in order to share the image as shown above since newer versions require explicit permisions at runtime for accessing external storage. Note: There is a common bug on emulators that will cause MediaStore.Images.Media.insertImage to fail with E/MediaStore\ufe55 Failed to insert image unless the media directory is first initialized as described in the link. ShareActionProvider \u00b6 This is how you can easily use an ActionBar share icon to activate a ShareIntent. The below focuses on the support ShareActionProvider for use with AppCompatActivity . Note: This is an alternative to using a sharing intent as described in the previous section. You either can use a sharing intent or the provider as described below. First, we need to add an ActionBar menu item in res/menu/ in the XML specifying the ShareActionProvider class. <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" > <item android:id= \"@+id/menu_item_share\" app:showAsAction= \"ifRoom\" android:title= \"Share\" app:actionProviderClass= \"android.support.v7.widget.ShareActionProvider\" /> ... </menu> Next, get access to share provider menu item in the Activity so we can attach the share intent later: private ShareActionProvider miShareAction ; @Override public boolean onCreateOptionsMenu ( Menu menu ) { // Inflate menu resource file. getMenuInflater (). inflate ( R . menu . second_activity , menu ); // Locate MenuItem with ShareActionProvider MenuItem item = menu . findItem ( R . id . menu_item_share ); // Fetch reference to the share action provider miShareAction = ( ShareActionProvider ) MenuItemCompat . getActionProvider ( item ); // Return true to display menu return true ; } Note : ShareActionProvider does not respond to onOptionsItemSelected() events, so you set the share action provider as soon as it is possible. Attach Share Intent for Remote Image \u00b6 Now, once you've setup the ShareActionProvider menu item, construct and attach the share intent for the provider but only after image has been loaded as shown below using the Callback for Picasso . private Intent shareIntent ; @Override protected void onCreate ( Bundle savedInstanceState ) { // ... // Get access to ImageView ImageView ivImage = ( ImageView ) findViewById ( R . id . ivResult ); // Load image async from remote URL, setup share when completed Picasso . with ( this ). load ( result . getFullUrl ()). into ( ivImage , new Callback () { @Override public void onSuccess () { // Setup share intent now that image has loaded prepareShareIntent (); attachShareIntentAction (); } @Override public void onError () { // ... } }); } // Gets the image URI and setup the associated share intent to hook into the provider public void prepareShareIntent () { // Fetch Bitmap Uri locally ImageView ivImage = ( ImageView ) findViewById ( R . id . ivResult ); Uri bmpUri = getLocalBitmapUri ( ivImage ); // see previous remote images section // Construct share intent as described above based on bitmap shareIntent = new Intent (); shareIntent . setAction ( Intent . ACTION_SEND ); shareIntent . putExtra ( Intent . EXTRA_STREAM , bmpUri ); shareIntent . setType ( \"image/*\" ); } // Attaches the share intent to the share menu item provider public void attachShareIntentAction () { if ( miShareAction != null && shareIntent != null ) miShareAction . setShareIntent ( shareIntent ); } @Override public boolean onCreateOptionsMenu ( Menu menu ) { // Inflate menu resource file. getMenuInflater (). inflate ( R . menu . second_activity , menu ); // Locate MenuItem with ShareActionProvider MenuItem item = menu . findItem ( R . id . menu_item_share ); // Fetch reference to the share action provider miShareAction = ( ShareActionProvider ) MenuItemCompat . getActionProvider ( item ); attachShareIntentAction (); // call here in case this method fires second // Return true to display menu return true ; } Note: Be sure to call attachShareIntentAction method both inside onCreateOptionsMenu AND inside the onSuccess for Picasso to ensure that the share attaches properly. Attach Share for a WebView URL \u00b6 We can use a similar approach if we wish to create a share action for the current URL that is being loaded in a [[WebView|Working-with-the-WebView]]: @Override public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater (); inflater . inflate ( R . menu . menu_article , menu ); MenuItem item = menu . findItem ( R . id . menu_item_share ); ShareActionProvider miShare = ( ShareActionProvider ) MenuItemCompat . getActionProvider ( item ); Intent shareIntent = new Intent ( Intent . ACTION_SEND ); shareIntent . setType ( \"text/plain\" ); // get reference to WebView WebView wvArticle = ( WebView ) findViewById ( R . id . wvArticle ); // pass in the URL currently being used by the WebView shareIntent . putExtra ( Intent . EXTRA_TEXT , wvArticle . getUrl ()); miShare . setShareIntent ( shareIntent ); return super . onCreateOptionsMenu ( menu ); } Check out the official guide for easy sharing for more information.","title":"Common Intents"},{"location":"common-intents/#common-implicit-intents","text":"Let's take a look at the most common implicit intents such as making a phone call, launching a web address, sending an email, etc.","title":"Common Implicit Intents"},{"location":"common-intents/#phone-call","text":"Permissions: <uses-permission android:name= \"android.permission.CALL_PHONE\" /> ``` 0o9 Intent: ```java Intent callIntent = new Intent(Intent.ACTION_CALL); callIntent.setData(Uri.parse(\"tel:0377778888\")); if (callIntent.resolveActivity(getPackageManager()) != null) { startActivity(callIntent); } Danger It's possible that a user won't have any apps that handle the implicit intent you send to startActivity() . If that happens, the call will fail and your app will crash. To verify that an activity will receive the intent, call resolveActivity() on your Intent object. If the result is non-null, then there is at least one app that can handle the intent and it's safe to call startActivity() . If the result is null, you should not use the intent and, if possible, you should disable the feature that issue the intent.","title":"Phone Call"},{"location":"common-intents/#send-email-to-phone-email-client","text":"Compose an email in the phone email client: Intent intent = new Intent ( Intent . ACTION_SEND ); intent . setType ( \"plain/text\" ); intent . putExtra ( Intent . EXTRA_EMAIL , new String [] { \"some@email.address\" }); intent . putExtra ( Intent . EXTRA_SUBJECT , \"subject\" ); intent . putExtra ( Intent . EXTRA_TEXT , \"mail body\" ); if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( Intent . createChooser ( intent , \"\" )); }","title":"Send Email (to Phone Email Client)"},{"location":"common-intents/#send-email-to-gmail","text":"Gmail does not examine the extra Intent fields, so in order to use this intent, you need to use the Intent.ACTION_SENDTO and pass a mailto: URI with the subject and body URL encoded. String uriText = \"mailto:youremail@gmail.com\" + \"?subject=\" + Uri . encode ( \"some subject text here\" ) + \"&body=\" + Uri . encode ( \"some text here\" ); Uri uri = Uri . parse ( uriText ); Intent sendIntent = new Intent ( Intent . ACTION_SENDTO ); sendIntent . setData ( uri ); if ( sendIntent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( Intent . createChooser ( sendIntent , \"Send email\" )); }","title":"Send Email (to Gmail)"},{"location":"common-intents/#launch-website","text":"Launch a website in the phone browser: Intent browserIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( \"http://www.google.com\" )); if ( browserIntent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( browserIntent ); } You can also launch a Chrome tab if the app. Take a look at [[this guide|Chrome-Custom-Tabs#setup]] for how to launch this implicit intent.","title":"Launch Website"},{"location":"common-intents/#open-google-play-store","text":"Open app page on Google Play: Intent intent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( \"market://details?id=\" + context . getPackageName ())); if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( intent ); }","title":"Open Google Play Store"},{"location":"common-intents/#compose-sms","text":"Uri smsUri = Uri . parse ( \"tel:\" + to ); Intent intent = new Intent ( Intent . ACTION_VIEW , smsUri ); intent . putExtra ( \"address\" , to ); intent . putExtra ( \"sms_body\" , message ); intent . setType ( \"vnd.android-dir/mms-sms\" ); //here setType will set the previous data null. if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( intent ); }","title":"Compose SMS"},{"location":"common-intents/#google-maps","text":"Show location in maps application: Intent intent = new Intent (); intent . setAction ( Intent . ACTION_VIEW ); String data = String . format ( \"geo:%s,%s\" , latitude , longitude ); if ( zoomLevel != null ) { data = String . format ( \"%s?z=%s\" , data , zoomLevel ); } intent . setData ( Uri . parse ( data )); if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( intent ); }","title":"Google Maps"},{"location":"common-intents/#capture-photo","text":"Uri uri = Uri . fromFile ( new File ( file )); Intent intent = new Intent ( MediaStore . ACTION_IMAGE_CAPTURE ); intent . putExtra ( MediaStore . EXTRA_OUTPUT , uri ); if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( intent ); }","title":"Capture Photo"},{"location":"common-intents/#sharing-content","text":"Images or binary data: Intent sharingIntent = new Intent ( Intent . ACTION_SEND ); sharingIntent . setType ( \"image/jpg\" ); Uri uri = Uri . fromFile ( new File ( getFilesDir (), \"foo.jpg\" )); sharingIntent . putExtra ( Intent . EXTRA_STREAM , uri . toString ()); if ( sharingIntent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( Intent . createChooser ( sharingIntent , \"Share image using\" )); } or HTML: Intent sharingIntent = new Intent ( Intent . ACTION_SEND ); sharingIntent . setType ( \"text/html\" ); sharingIntent . putExtra ( android . content . Intent . EXTRA_TEXT , Html . fromHtml ( \"<p>This is the text shared.</p>\" )); if ( sharingIntent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( Intent . createChooser ( sharingIntent , \"Share using\" )); }","title":"Sharing Content"},{"location":"common-intents/#sharing-content-with-intents","text":"Intents allow us to communicate data between Android apps and implicit intents can also accept actions. One of those actions is the ACTION_SEND command which indicates we want to send data across apps. To send data, all you need to do is specify the data and its type, and the system will identify compatible receiving activities and display them to the user. Sending and receiving data between applications with intents is most commonly used for social sharing of content. Intents allow users to share information quickly and easily, using their favorite applications.","title":"Sharing Content with Intents"},{"location":"common-intents/#sharing-local-content","text":"You can send content by invoking an implicit intent with ACTION_SEND .","title":"Sharing Local Content"},{"location":"common-intents/#sending-html","text":"Intent sharingIntent = new Intent ( Intent . ACTION_SEND ); sharingIntent . setType ( \"text/html\" ); sharingIntent . putExtra ( android . content . Intent . EXTRA_TEXT , Html . fromHtml ( \"<p>This is the text shared.</p>\" )); startActivity ( Intent . createChooser ( sharingIntent , \"Share using\" ));","title":"Sending HTML"},{"location":"common-intents/#sending-images","text":"To send images or binary data: final Intent shareIntent = new Intent ( Intent . ACTION_SEND ); shareIntent . setType ( \"image/jpg\" ); final File photoFile = new File ( getFilesDir (), \"foo.jpg\" ); shareIntent . putExtra ( Intent . EXTRA_STREAM , Uri . fromFile ( photoFile )); startActivity ( Intent . createChooser ( shareIntent , \"Share image using\" ));","title":"Sending Images"},{"location":"common-intents/#sending-links","text":"Sending URL links should simply use text/plain type: Intent shareIntent = new Intent ( Intent . ACTION_SEND ); shareIntent . setType ( \"text/plain\" ); shareIntent . putExtra ( Intent . EXTRA_TEXT , \"http://codepath.com\" ); startActivity ( Intent . createChooser ( shareIntent , \"Share link using\" ));","title":"Sending Links"},{"location":"common-intents/#sharing-multiple-types","text":"In certain cases, we might want to send an image along with text. This can be done with: String text = \"Look at my awesome picture\" ; Uri pictureUri = Uri . parse ( \"file://my_picture\" ); Intent shareIntent = new Intent (); shareIntent . setAction ( Intent . ACTION_SEND ); shareIntent . putExtra ( Intent . EXTRA_TEXT , text ); shareIntent . putExtra ( Intent . EXTRA_STREAM , imageUri ); shareIntent . setType ( \"image/*\" ); shareIntent . addFlags ( Intent . FLAG_GRANT_READ_URI_PERMISSION ); startActivity ( Intent . createChooser ( shareIntent , \"Share images...\" )); Sharing multiple images can be done with: Intent shareIntent = new Intent ( Intent . ACTION_SEND_MULTIPLE ); shareIntent . putParcelableArrayListExtra ( Intent . EXTRA_STREAM , imageUris ); shareIntent . setType ( \"image/*\" ); See this stackoverflow post for more details. Note: Facebook does not properly recognize multiple shared elements. See this facebook specific bug for more details and share using their SDK.","title":"Sharing Multiple Types"},{"location":"common-intents/#share-in-facebook","text":"Facebook doesn't work well with normal sharing intents when sharing multiple content elements as discussed in this bug . To share posts with facebook, we need to: Create a new Facebook app here (follow the instructions) Add the Facebook SDK to your Android project Share using this code snippet: public void setupFacebookShareIntent () { ShareDialog shareDialog ; FacebookSdk . sdkInitialize ( getApplicationContext ()); shareDialog = new ShareDialog ( this ); ShareLinkContent linkContent = new ShareLinkContent . Builder () . setContentTitle ( \"Title\" ) . setContentDescription ( \"\\\"Body Of Test Post\\\"\" ) . setContentUrl ( Uri . parse ( \"http://someurl.com/here\" )) . build (); shareDialog . show ( linkContent ); }","title":"Share in Facebook"},{"location":"common-intents/#sharing-remote-images","text":"You may want to send an image that were loaded from a remote URL. Assuming you are using a third party library like Picasso , here is how you might share an image that came from the network and was loaded into an ImageView. There are two ways to accomplish this. The first way, shown below, takes the bitmap from the view and loads it into a file. // Get access to ImageView ImageView ivImage = ( ImageView ) findViewById ( R . id . ivResult ); // Fire async request to load image Picasso . with ( context ). load ( imageUrl ). into ( ivImage ); and then later assuming after the image has completed loading, this is how you can trigger a share: // Can be triggered by a view event such as a button press public void onShareItem ( View v ) { // Get access to bitmap image from view ImageView ivImage = ( ImageView ) findViewById ( R . id . ivResult ); // Get access to the URI for the bitmap Uri bmpUri = getLocalBitmapUri ( ivImage ); if ( bmpUri != null ) { // Construct a ShareIntent with link to image Intent shareIntent = new Intent (); shareIntent . setAction ( Intent . ACTION_SEND ); shareIntent . putExtra ( Intent . EXTRA_STREAM , bmpUri ); shareIntent . setType ( \"image/*\" ); // Launch sharing dialog for image startActivity ( Intent . createChooser ( shareIntent , \"Share Image\" )); } else { // ...sharing failed, handle error } } // Returns the URI path to the Bitmap displayed in specified ImageView public Uri getLocalBitmapUri ( ImageView imageView ) { // Extract Bitmap from ImageView drawable Drawable drawable = imageView . getDrawable (); Bitmap bmp = null ; if ( drawable instanceof BitmapDrawable ){ bmp = (( BitmapDrawable ) imageView . getDrawable ()). getBitmap (); } else { return null ; } // Store image to default external storage directory Uri bmpUri = null ; try { // Use methods on Context to access package-specific directories on external storage. // This way, you don't need to request external read/write permission. // See https://youtu.be/5xVh-7ywKpE?t=25m25s File file = new File ( getExternalFilesDir ( Environment . DIRECTORY_PICTURES ), \"share_image_\" + System . currentTimeMillis () + \".png\" ); FileOutputStream out = new FileOutputStream ( file ); bmp . compress ( Bitmap . CompressFormat . PNG , 90 , out ); out . close (); // **Warning:** This will fail for API >= 24, use a FileProvider as shown below instead. bmpUri = Uri . fromFile ( file ); } catch ( IOException e ) { e . printStackTrace (); } return bmpUri ; } Make sure to setup the \"SD Card\" within the emulator device settings: Note that if you are using API 24 or above , see the section below on using a FileProvider to work around new file restrictions.","title":"Sharing Remote Images"},{"location":"common-intents/#sharing-files-with-api-24-or-higher","text":"If you are using Android API 24 or higher, private File URI resources (file:///) cannot be shared. You must instead wrap the File object as a content provider (content://) using the FileProvider class. First, you must declare this FileProvider in your AndroidManifest.xml file within the <application> tag: <provider android:name= \"android.support.v4.content.FileProvider\" android:authorities= \"com.codepath.fileprovider\" android:exported= \"false\" android:grantUriPermissions= \"true\" > <meta-data android:name= \"android.support.FILE_PROVIDER_PATHS\" android:resource= \"@xml/fileprovider\" /> </provider> Next, create a resource directory called xml and create a fileprovider.xml . Assuming you wish to grant access to the application's specific external storage directory, which requires requesting no additional permissions, you can declare this line as follows: <?xml version=\"1.0\" encoding=\"utf-8\"?> <paths> <external-files-path name= \"images\" path= \"Pictures\" /> <!--Uncomment below to share the entire application specific directory --> <!--<external-path name=\"all_dirs\" path=\".\"/>--> </paths> Finally, you will convert the File object into a content provider using the FileProvider class: // getExternalFilesDir() + \"/Pictures\" should match the declaration in fileprovider.xml paths File file = new File ( getExternalFilesDir ( Environment . DIRECTORY_PICTURES ), \"share_image_\" + System . currentTimeMillis () + \".png\" ); // wrap File object into a content provider. NOTE: authority here should match authority in manifest declaration bmpUri = FileProvider . getUriForFile ( MyActivity . this , \"com.codepath.fileprovider\" , file ); Note that there are other XML tags you can use in the fileprovider.xml , which map to the File directory specified. In the example above, we use Context.getExternalFilesDir(Environment.DIRECTORY_PICTURES) , which corresponded to the <external-files-dir> XML tag in the declaration with the Pictures path explicitly specified. Here are all the options you can use too: XML tag Corresponding storage call When to use <files-path> Context.getFilesDir() data can only be viewed by app, deleted when uninstalled ( /data/data/[packagename]/files ) <external-files-dir> Context.getExternalFilesDir() data can be read/write by the app, any apps granted with READ_STORAGE permission can read too, deleted when uninstalled ( /Android/data/[packagename]/files ) <cache-path> Context.getCacheDir() temporary file storage <external-path> Environment.getExternalStoragePublicDirectory() data can be read/write by the app, any apps can view, files not deleted when uninstalled <external-cache-path> Context.getExternalCacheDir() temporary file storage with usually larger space If you are using API 23 or above , then you'll need to [[request runtime permissions|Managing-Runtime-Permissions-with-PermissionsDispatcher]] for Manifest.permission.READ_EXTERNAL_STORAGE and Manifest.permission.WRITE_EXTERNAL_STORAGE in order to share the image as shown above since newer versions require explicit permisions at runtime for accessing external storage. Note: There is a common bug on emulators that will cause MediaStore.Images.Media.insertImage to fail with E/MediaStore\ufe55 Failed to insert image unless the media directory is first initialized as described in the link.","title":"Sharing Files with API 24 or higher"},{"location":"common-intents/#shareactionprovider","text":"This is how you can easily use an ActionBar share icon to activate a ShareIntent. The below focuses on the support ShareActionProvider for use with AppCompatActivity . Note: This is an alternative to using a sharing intent as described in the previous section. You either can use a sharing intent or the provider as described below. First, we need to add an ActionBar menu item in res/menu/ in the XML specifying the ShareActionProvider class. <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" > <item android:id= \"@+id/menu_item_share\" app:showAsAction= \"ifRoom\" android:title= \"Share\" app:actionProviderClass= \"android.support.v7.widget.ShareActionProvider\" /> ... </menu> Next, get access to share provider menu item in the Activity so we can attach the share intent later: private ShareActionProvider miShareAction ; @Override public boolean onCreateOptionsMenu ( Menu menu ) { // Inflate menu resource file. getMenuInflater (). inflate ( R . menu . second_activity , menu ); // Locate MenuItem with ShareActionProvider MenuItem item = menu . findItem ( R . id . menu_item_share ); // Fetch reference to the share action provider miShareAction = ( ShareActionProvider ) MenuItemCompat . getActionProvider ( item ); // Return true to display menu return true ; } Note : ShareActionProvider does not respond to onOptionsItemSelected() events, so you set the share action provider as soon as it is possible.","title":"ShareActionProvider"},{"location":"common-intents/#attach-share-intent-for-remote-image","text":"Now, once you've setup the ShareActionProvider menu item, construct and attach the share intent for the provider but only after image has been loaded as shown below using the Callback for Picasso . private Intent shareIntent ; @Override protected void onCreate ( Bundle savedInstanceState ) { // ... // Get access to ImageView ImageView ivImage = ( ImageView ) findViewById ( R . id . ivResult ); // Load image async from remote URL, setup share when completed Picasso . with ( this ). load ( result . getFullUrl ()). into ( ivImage , new Callback () { @Override public void onSuccess () { // Setup share intent now that image has loaded prepareShareIntent (); attachShareIntentAction (); } @Override public void onError () { // ... } }); } // Gets the image URI and setup the associated share intent to hook into the provider public void prepareShareIntent () { // Fetch Bitmap Uri locally ImageView ivImage = ( ImageView ) findViewById ( R . id . ivResult ); Uri bmpUri = getLocalBitmapUri ( ivImage ); // see previous remote images section // Construct share intent as described above based on bitmap shareIntent = new Intent (); shareIntent . setAction ( Intent . ACTION_SEND ); shareIntent . putExtra ( Intent . EXTRA_STREAM , bmpUri ); shareIntent . setType ( \"image/*\" ); } // Attaches the share intent to the share menu item provider public void attachShareIntentAction () { if ( miShareAction != null && shareIntent != null ) miShareAction . setShareIntent ( shareIntent ); } @Override public boolean onCreateOptionsMenu ( Menu menu ) { // Inflate menu resource file. getMenuInflater (). inflate ( R . menu . second_activity , menu ); // Locate MenuItem with ShareActionProvider MenuItem item = menu . findItem ( R . id . menu_item_share ); // Fetch reference to the share action provider miShareAction = ( ShareActionProvider ) MenuItemCompat . getActionProvider ( item ); attachShareIntentAction (); // call here in case this method fires second // Return true to display menu return true ; } Note: Be sure to call attachShareIntentAction method both inside onCreateOptionsMenu AND inside the onSuccess for Picasso to ensure that the share attaches properly.","title":"Attach Share Intent for Remote Image"},{"location":"common-intents/#attach-share-for-a-webview-url","text":"We can use a similar approach if we wish to create a share action for the current URL that is being loaded in a [[WebView|Working-with-the-WebView]]: @Override public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater (); inflater . inflate ( R . menu . menu_article , menu ); MenuItem item = menu . findItem ( R . id . menu_item_share ); ShareActionProvider miShare = ( ShareActionProvider ) MenuItemCompat . getActionProvider ( item ); Intent shareIntent = new Intent ( Intent . ACTION_SEND ); shareIntent . setType ( \"text/plain\" ); // get reference to WebView WebView wvArticle = ( WebView ) findViewById ( R . id . wvArticle ); // pass in the URL currently being used by the WebView shareIntent . putExtra ( Intent . EXTRA_TEXT , wvArticle . getUrl ()); miShare . setShareIntent ( shareIntent ); return super . onCreateOptionsMenu ( menu ); } Check out the official guide for easy sharing for more information.","title":"Attach Share for a WebView URL"},{"location":"common-libraries/","text":"","title":"Common libraries"},{"location":"deployment/","text":"","title":"Deployment"},{"location":"dialogs-pickers/","text":"","title":"Dialogs pickers"},{"location":"espresso/","text":"","title":"Espresso"},{"location":"fragments/","text":"Overview \u00b6 A fragment is a reusable class implementing a portion of an activity. A Fragment typically defines a part of a user interface. Fragments must be embedded in activities; they cannot run independently of activities. Understanding Fragments \u00b6 Here are the important things to understand about fragments: A Fragment is a combination of an XML layout file and a java class much like an Activity . Using the support library, fragments are supported back to all relevant Android versions. Fragments encapsulate views and logic so that it is easier to reuse within activities. Fragments are standalone components that can contain views, events and logic. Within a fragment-oriented architecture, activities become navigational containers that are primarily responsible for navigation to other activities, presenting fragments and passing data. Importance of Fragments \u00b6 There are many use cases for fragments but the most common use cases include: Reusing View and Logic Components - Fragments enable re-use of parts of your screen including views and event logic over and over in different ways across many disparate activities. For example, using the same list across different data sources within an app. Tablet Support - Often within apps, the tablet version of an activity has a substantially different layout from the phone version which is different from the TV version. Fragments enable device-specific activities to reuse shared elements while also having differences. Screen Orientation - Often within apps, the portrait version of an activity has a substantially different layout from the landscape version. Fragments enable both orientations to reuse shared elements while also having differences. Organizing your Code \u00b6 Within a fragment-heavy app, we need to remember to organize our code according to architectural best practices. Inside of an app which uses fragments extensively, we need to keep in mind that the role of an activity shifts. Activities are navigation controllers primarily responsible for: Navigation to other activities through intents. Presenting navigational components such as the [[navigation drawer|Fragment Navigation Drawer]] or the [[viewpager|ViewPager-with-FragmentPagerAdapter]]. Hiding and showing relevant fragments using the fragment manager. Receiving data from intents and passing data between fragments. Fragments are content controllers and contain most views, layouts, and event logic including: Layouts and views displaying relevant app content. Event handling logic associated with relevant views. View state management logic such as visibility or error handling. Triggering of network request through a client object. Retrieval and storage of data from persistence through model objects. To reiterate, in a fragment-based architecture, the activities are for navigation and the fragments are for views and logic . Usage \u00b6 Defining a Fragment \u00b6 A fragment, like an activity, has an XML layout file and a Java class that represents the Fragment controller. The XML layout file is just like any other layout file, and can be named fragment_foo.xml . Think of them as a partial (re-usable) activity: <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" > <TextView android:id= \"@+id/textView1\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"TextView\" /> <Button android:id= \"@+id/button1\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Button\" /> </LinearLayout> The Java controller for a fragment looks like: import android.support.v4.app.Fragment ; public class FooFragment extends Fragment { // The onCreateView method is called when Fragment should create its View object hierarchy, // either dynamically or via XML layout inflation. @Override public View onCreateView ( LayoutInflater inflater , ViewGroup parent , Bundle savedInstanceState ) { // Defines the xml file for the fragment return inflater . inflate ( R . layout . fragment_foo , parent , false ); } // This event is triggered soon after onCreateView(). // Any view setup should occur here. E.g., view lookups and attaching view listeners. @Override public void onViewCreated ( View view , Bundle savedInstanceState ) { // Setup any handles to view objects here // EditText etFoo = (EditText) view.findViewById(R.id.etFoo); } } Embedding a Fragment in an Activity \u00b6 There are two ways to add a fragment to an activity: dynamically using Java and statically using XML . Before embedding a \"support\" fragment in an Activity make sure the Activity is changed to extend from FragmentActivity or AppCompatActivity which adds support for the fragment manager to all Android versions. Any activity using fragments should make sure to extend from FragmentActivity or AppCompatActivity : import android.support.v7.app.AppCompatActivity ; public class MainActivity extends AppCompatActivity { // ... } Statically \u00b6 To add the fragment statically , simply embed the fragment in the activity's xml layout file: <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" > <fragment android:name= \"com.example.android.FooFragment\" android:id= \"@+id/fooFragment\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </LinearLayout> Note: * You will likely need to change the path for FooFragment based on your project setup. * You cannot replace a fragment defined statically in the layout file via a FragmentTransaction. You can only replace fragments that you added dynamically. Dynamically \u00b6 The second way is by adding the fragment dynamically in Java using the FragmentManager . The FragmentManager class and the FragmentTransaction class allow you to add, remove and replace fragments in the layout of your activity at runtime. In this case, you want to add a \"placeholder\" container (usually a FrameLayout ) to your activity where the fragment is inserted at runtime: <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" > <FrameLayout android:id= \"@+id/your_placeholder\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > </FrameLayout> </LinearLayout> and then you can use the FragmentManager to create a FragmentTransaction which allows us to add fragments to the FrameLayout at runtime: // Begin the transaction FragmentTransaction ft = getSupportFragmentManager (). beginTransaction (); // Replace the contents of the container with the new fragment ft . replace ( R . id . your_placeholder , new FooFragment ()); // or ft.add(R.id.your_placeholder, new FooFragment()); // Complete the changes added above ft . commit (); If the fragment should always be within the activity, use XML to statically add the fragment but in more complex cases be sure to use the Java-based approach. Fragment Lifecycle \u00b6 Fragment has many methods which can be overridden to plug into the lifecycle ( [[similar to an Activity|Activity-Lifecycle]] ): onAttach() is called when a fragment is connected to an activity. onCreate() is called to do initial creation of the fragment. onCreateView() is called by Android once the Fragment should inflate a view. onViewCreated() is called after onCreateView() and ensures that the fragment's root view is non-null . Any view setup should happen here. E.g., view lookups, attaching listeners. onActivityCreated() is called when host activity has completed its onCreate() method. onStart() is called once the fragment is ready to be displayed on screen. onResume() - Allocate \u201cexpensive\u201d resources such as registering for location, sensor updates, etc. onPause() - Release \u201cexpensive\u201d resources. Commit any changes. onDestroyView() is called when fragment's view is being destroyed, but the fragment is still kept around. onDestroy() is called when fragment is no longer in use. onDetach() is called when fragment is no longer connected to the activity. The lifecycle execution order is mapped out below: The most common ones to override are onCreateView which is in almost every fragment to setup the inflated view, onCreate for any data initialization and onActivityCreated used for setting up things that can only take place once the Activity has been fully created. Here's an example of how you might use the various fragment lifecycle events: public class SomeFragment extends Fragment { ThingsAdapter adapter ; FragmentActivity listener ; // This event fires 1st, before creation of fragment or any views // The onAttach method is called when the Fragment instance is associated with an Activity. // This does not mean the Activity is fully initialized. @Override public void onAttach ( Context context ) { super . onAttach ( context ); if ( context instanceof Activity ){ this . listener = ( FragmentActivity ) context ; } } // This event fires 2nd, before views are created for the fragment // The onCreate method is called when the Fragment instance is being created, or re-created. // Use onCreate for any standard setup that does not require the activity to be fully created @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); ArrayList < Thing > things = new ArrayList < Thing >(); adapter = new ThingsAdapter ( getActivity (), things ); } // The onCreateView method is called when Fragment should create its View object hierarchy, // either dynamically or via XML layout inflation. @Override public View onCreateView ( LayoutInflater inflater , ViewGroup parent , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_some , parent , false ); } // This event is triggered soon after onCreateView(). // onViewCreated() is only called if the view returned from onCreateView() is non-null. // Any view setup should occur here. E.g., view lookups and attaching view listeners. @Override public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ); ListView lv = ( ListView ) view . findViewById ( R . id . lvSome ); lv . setAdapter ( adapter ); } // This method is called when the fragment is no longer connected to the Activity // Any references saved in onAttach should be nulled out here to prevent memory leaks. @Override public void onDetach () { super . onDetach (); this . listener = null ; } // This method is called after the parent Activity's onCreate() method has completed. // Accessing the view hierarchy of the parent activity must be done in the onActivityCreated. // At this point, it is safe to search for activity View objects by their ID, for example. @Override public void onActivityCreated ( Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ); } } Refer to this detailed lifecycle chart to view the lifecycle of a fragment more visually. Looking Up a Fragment Instance \u00b6 Often we need to lookup or find a fragment instance within an activity layout file. There are a few methods for looking up an existing fragment instance: ID - Lookup a fragment by calling findFragmentById on the FragmentManager Tag - Lookup a fragment by calling findFragmentByTag on the FragmentManager Pager - Lookup a fragment by calling getRegisteredFragment on a PagerAdapter (not part of the Android APIs but there is a custom implementation here https://stackoverflow.com/a/30594487) Each method is outlined in more detail below. Finding Fragment By ID \u00b6 If the fragment was statically embedded in the XML within an activity and given an android:id such as fragmentDemo then we can lookup this fragment by id by calling findFragmentById on the FragmentManager : public class MainActivity extends AppCompatActivity { @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); if ( savedInstanceState == null ) { DemoFragment fragmentDemo = ( DemoFragment ) getSupportFragmentManager (). findFragmentById ( R . id . fragmentDemo ); } } } Finding Fragment By Tag \u00b6 If the fragment was dynamically added at runtime within an activity then we can lookup this fragment by tag by calling findFragmentByTag on the FragmentManager : public class MainActivity extends AppCompatActivity { @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); if ( savedInstanceState == null ) { // Let's first dynamically add a fragment into a frame container getSupportFragmentManager (). beginTransaction (). replace ( R . id . flContainer , new DemoFragment (), \"SOMETAG\" ). commit (); // Now later we can lookup the fragment by tag DemoFragment fragmentDemo = ( DemoFragment ) getSupportFragmentManager (). findFragmentByTag ( \"SOMETAG\" ); } } } Finding Fragment Within Pager \u00b6 If the fragment was dynamically added at runtime within an activity into a ViewPager using a [[FragmentPagerAdapter|ViewPager-with-FragmentPagerAdapter#setup-fragmentpageradapter]] then we can lookup the fragment by upgrading to a SmartFragmentStatePagerAdapter as [[described in the ViewPager guide|ViewPager-with-FragmentPagerAdapter#setup-smartfragmentstatepageradapter]]. Now with the adapter in place, we can also easily access any fragments within the ViewPager using getRegisteredFragment : // returns first Fragment item within the pager adapterViewPager . getRegisteredFragment ( 0 ); Note that the ViewPager loads the fragment instances lazily similar to the a ListView recycling items as they appear on screen. If you attempt to access a fragment that is not on screen, the lookup will return null . Communicating with Fragments \u00b6 Fragments should generally only communicate with their direct parent activity. Fragments communicate through their parent activity allowing the activity to manage the inputs and outputs of data from that fragment coordinating with other fragments or activities. Think of the Activity as the controller managing all interaction with each of the fragments contained within. A few exceptions to this are [[dialog fragments|Using-DialogFragment#passing-data-to-parent-fragment]] presented from within another fragment or [[nested child fragments|Creating-and-Using-Fragments#nesting-fragments-within-fragments]]. Both of these cases are situations where a fragment has nested child fragments and that are therefore allowed to communicate upward to their parent (which is a fragment). The important thing to keep in mind is that fragments should not directly communicate with each other and should generally only communicate with their parent activity . Fragments should be modular, standalone and reusable components. The fragments allow their parent activity to respond to intents and callbacks in most cases. There are three ways a fragment and an activity can communicate: Bundle - Activity can construct a fragment and set arguments Methods - Activity can call methods on a fragment instance Listener - Fragment can fire listener events on an activity via an interface In other words, communication should generally follow these principles: Activities can initialize fragments with [[data during construction|Creating-and-Using-Fragments#fragment-with-arguments]] Activities can pass data to fragments [[using methods on the fragment instance|Creating-and-Using-Fragments#fragment-methods]] Fragments can communicate up to their parent activity [[using an interface and listeners|Creating-and-Using-Fragments#fragment-listener]] Fragments should pass data to other fragments only routed through their parent activity Fragments can pass data to and from [[dialog fragments as outlined here|Using-DialogFragment#passing-data-to-parent-fragment]] Fragments can contain [[nested child fragments as outlined here|Creating-and-Using-Fragments#nesting-fragments-within-fragments]] Fragment with Arguments \u00b6 In certain cases, your fragment may want to accept certain arguments. A common pattern is to create a static newInstance method for creating a Fragment with arguments. This is because a Fragment must have only a constructor with no arguments . Instead, we want to use the setArguments method such as: public class DemoFragment extends Fragment { // Creates a new fragment given an int and title // DemoFragment.newInstance(5, \"Hello\"); public static DemoFragment newInstance ( int someInt , String someTitle ) { DemoFragment fragmentDemo = new DemoFragment (); Bundle args = new Bundle (); args . putInt ( \"someInt\" , someInt ); args . putString ( \"someTitle\" , someTitle ); fragmentDemo . setArguments ( args ); return fragmentDemo ; } } This sets certain arguments into the Fragment for later access within onCreate . You can access the arguments later by using: public class DemoFragment extends Fragment { @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); // Get back arguments int SomeInt = getArguments (). getInt ( \"someInt\" , 0 ); String someTitle = getArguments (). getString ( \"someTitle\" , \"\" ); } } Now we can load a fragment dynamically in an Activity with: // Within the activity FragmentTransaction ft = getSupportFragmentManager (). beginTransaction (); DemoFragment fragmentDemo = DemoFragment . newInstance ( 5 , \"my title\" ); ft . replace ( R . id . your_placeholder , fragmentDemo ); ft . commit (); This pattern makes passing arguments to fragments for initialization fairly straightforward. Fragment Methods \u00b6 If an activity needs to make a fragment perform an action after initialization, the easiest way is by having the activity invoke a method on the fragment instance. In the fragment, add a method: public class DemoFragment extends Fragment { public void doSomething ( String param ) { // do something in fragment } } and then in the activity, get access to the fragment using the fragment manager and call the method: public class MainActivity extends AppCompatActivity { @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); DemoFragment fragmentDemo = ( DemoFragment ) getSupportFragmentManager (). findFragmentById ( R . id . fragmentDemo ); fragmentDemo . doSomething ( \"some param\" ); } } and then the activity can communicate directly with the fragment by invoking this method. Fragment Listener \u00b6 If a fragment needs to communicate events to the activity, the fragment should [[define an interface|Creating-Custom-Listeners]] as an inner type and require that the activity must implement this interface: import android.support.v4.app.Fragment ; public class MyListFragment extends Fragment { // ... // Define the listener of the interface type // listener will the activity instance containing fragment private OnItemSelectedListener listener ; // Define the events that the fragment will use to communicate public interface OnItemSelectedListener { // This can be any number of events to be sent to the activity public void onRssItemSelected ( String link ); } // Store the listener (activity) that will have events fired once the fragment is attached @Override public void onAttach ( Context context ) { super . onAttach ( context ); if ( context instanceof OnItemSelectedListener ) { listener = ( OnItemSelectedListener ) context ; } else { throw new ClassCastException ( context . toString () + \" must implement MyListFragment.OnItemSelectedListener\" ); } } // Now we can fire the event when the user selects something in the fragment public void onSomeClick ( View v ) { listener . onRssItemSelected ( \"some link\" ); } } and then in the activity we have to implement the OnItemSelectedListener listener: import android.support.v7.app.AppCompatActivity ; // Activity implements the fragment listener to handle events public class RssfeedActivity extends AppCompatActivity implements MyListFragment . OnItemSelectedListener { // Can be any fragment, `DetailFragment` is just an example DetailFragment fragment ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_rssfeed ); // Get access to the detail view fragment by id fragment = ( DetailFragment ) getSupportFragmentManager () . findFragmentById ( R . id . detailFragment ); } // Now we can define the action to take in the activity when the fragment event fires // This is implementing the `OnItemSelectedListener` interface methods @Override public void onRssItemSelected ( String link ) { if ( fragment != null && fragment . isInLayout ()) { fragment . setText ( link ); } } } in order to keep the fragment as re-usable as possible. For more details about this pattern, check out our detailed [[Creating Custom Listeners]] guide. Understanding the FragmentManager \u00b6 The FragmentManager is responsible for all runtime management of fragments including adding, removing, hiding, showing, or otherwise navigating between fragments. As shown above, the fragment manager is also responsible for finding fragments within an activity. Important available methods are outlined below: Method Description addOnBackStackChangedListener Add a new listener for changes to the fragment back stack. beginTransaction() Creates a new transaction to change fragments at runtime. findFragmentById(int id) Finds a fragment by id usually inflated from activity XML layout. findFragmentByTag(String tag) Finds a fragment by tag usually for a runtime added fragment. popBackStack() Remove a fragment from the backstack. executePendingTransactions() Forces committed transactions to be applied. See the official documentation for more information. You can also review the FragmentTransaction to take a closer look at what modifications can be made at run-time through the manager. ActionBar Menu Items and Fragments \u00b6 One common case is the need for fragment-specific menu items that only show up for that fragment. This can be done by adding an onCreateOptionsMenu method to the fragment directly. This works just like the one for the activity: @Override public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . fragment_menu , menu ); } You then also need to notify the fragment that it's menu items should be loaded within the fragment's onCreate method: @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setHasOptionsMenu ( true ); } Clicks can be handled using onClick property as usual or more typically in this case, using the onOptionsItemSelected method in the fragment: @Override public boolean onOptionsItemSelected ( MenuItem item ) { // handle item selection switch ( item . getItemId ()) { case R . id . edit_item : // do s.th. return true ; default : return super . onOptionsItemSelected ( item ); } } Note that the fragment\u2019s method is called only when the Activity didn\u2019t consume the event first. Be sure to check out a more detailed guide about fragments and action bar if you have more questions. Navigating Between Fragments \u00b6 There are several methods for navigating between different fragments within a single Activity. The primary options are: [[TabLayout| Google Play Style Tabs using TabLayout]] - Tabs at the top [[Fragment Navigation Drawer]] - Slide out navigation menu [[ViewPager | ViewPager with FragmentPagerAdapter]] - Swiping between fragments Check the guides linked above for detailed steps for each of these approaches. Managing Fragment Backstack \u00b6 A record of all Fragment transactions is kept for each Activity by the FragmentManager. When used properly, this allows the user to hit the device\u2019s back button to remove previously added Fragments (not unlike how the back button removes an Activity). Simply call addToBackstack on each FragmentTransaction that should be recorded: // Create the transaction FragmentTransaction fts = getSupportFragmentManager (). beginTransaction (); // Replace the content of the container fts . replace ( R . id . flContainer , new FirstFragment ()); // Append this transaction to the backstack fts . addToBackStack ( \"optional tag\" ); // Commit the changes fts . commit (); Programmatically, you can also pop from the back stack at any time through the manager: FragmentManager fragmentManager = getSupportFragmentManager (); if ( fragmentManager . getBackStackEntryCount () > 0 ) { fragmentManager . popBackStack (); } With this approach, we can easily keep the history of which fragments have appeared dynamically on screen and allow the user to easily navigate to previous fragments. Fragment Hiding vs Replace \u00b6 In many of the examples above, we call transaction.replace(...) to load a dynamic fragment which first removes the existing fragment from the activity invoking onStop and onDestroy for that fragment before adding the new fragment to the container. This can be good because this will release memory and make the UI snappier. However, in many cases, we may want to keep both fragments around in the container and simply toggle their visibility. This allows all fragments to maintain their state because they are never removed from the container. To do this, we might modify this code: // Within an activity private FragmentA fragmentA ; private FragmentB fragmentB ; private FragmentC fragmentC ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); if ( savedInstanceState == null ) { fragmentA = FragmentA . newInstance ( \"foo\" ); fragmentB = FragmentB . newInstance ( \"bar\" ); fragmentC = FragmentC . newInstance ( \"baz\" ); } } protected void displayFragmentA () { FragmentTransaction ft = getSupportFragmentManager (). beginTransaction (); // removes the existing fragment calling onDestroy ft . replace ( R . id . flContainer , fragmentA ); ft . commit (); } to this approach instead leveraging add , show , and hide in the FragmentTransaction : // ...onCreate stays the same // Replace the switch method protected void displayFragmentA () { FragmentTransaction ft = getSupportFragmentManager (). beginTransaction (); if ( fragmentA . isAdded ()) { // if the fragment is already in container ft . show ( fragmentA ); } else { // fragment needs to be added to frame container ft . add ( R . id . flContainer , fragmentA , \"A\" ); } // Hide fragment B if ( fragmentB . isAdded ()) { ft . hide ( fragmentB ); } // Hide fragment C if ( fragmentC . isAdded ()) { ft . hide ( fragmentC ); } // Commit changes ft . commit (); } Using this approach, all three fragments will remain in the container once added initially and then we are simply revealing the desired fragment and hiding the others within the container. Check out this stackoverflow for a discussion on deciding when to replace vs hide and show. Nesting Fragments within Fragments \u00b6 Inevitably in certain cases you will want to embed a fragment within another fragment . Since Android 4.2 , you have the ability to embed a fragment within another fragment. This nested fragment is known as a child fragment . A common situation where you might want to nest fragments is when you are using a sliding drawer for top-level navigation and one of the fragments needs to display tabs. Note that one limitation is that nested (or child) fragments must be dynamically added at runtime to their parent fragment and cannot be statically added using the <fragment> tag. To nest a fragment in another fragment, first we need a <FrameLayout> or alternatively a [[ViewPager|ViewPager-with-FragmentPagerAdapter]] to contain the dynamic child fragment in the res/layout/fragment_parent.xml layout: <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"fill_parent\" android:layout_height= \"fill_parent\" android:orientation= \"vertical\" > <TextView android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"I am the parent fragment\" /> <FrameLayout android:id= \"@+id/child_fragment_container\" android:layout_width= \"fill_parent\" android:layout_height= \"wrap_content\" /> </LinearLayout> Notice that there's a FrameLayout with the id of @+id/child_fragment_container in which the child fragment will be inserted. Inflation of the ParentFragment view is within the onCreateView method, just as was outlined in earlier sections. In addition, we would also define a ChildFragment that would have its own distinct layout file: // Top-level fragment that will contain the child public class ParentFragment extends Fragment { @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_parent , container , false ); } } // Child fragment that will be dynamically embedded in the parent public class ChildFragment extends Fragment { @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { // Need to define the child fragment layout return inflater . inflate ( R . layout . fragment_child , container , false ); } } Now we can add the child fragment to the parent at runtime using the getChildFragmentManager method: // Top-level fragment that will contain the child public class ParentFragment extends Fragment { @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_parent , container , false ); } // This event is triggered soon after onCreateView(). // onViewCreated() is only called if the view returned from onCreateView() is non-null. // Any view setup should occur here. E.g., view lookups and attaching view listeners. @Override public void onViewCreated ( View view , Bundle savedInstanceState ) { insertNestedFragment (); } // Embeds the child fragment dynamically private void insertNestedFragment () { Fragment childFragment = new ChildFragment (); FragmentTransaction transaction = getChildFragmentManager (). beginTransaction (); transaction . replace ( R . id . child_fragment_container , childFragment ). commit (); } } Note that you must always use getChildFragmentManager when interacting with nested fragments instead of using getSupportFragmentManager . Read this stackoverflow post for an explanation of the difference between the two. In the child fragment, we can use getParentFragment() to get the reference to the parent fragment, similar to a fragment's getActivity() method that gives reference to the parent Activity. See the docs for more information. Managing Configuration Changes \u00b6 When you are working with fragment as with activities, you need to make sure to [[handle configuration changes|Handling-Configuration-Changes#saving-and-restoring-fragment-state]] such as screen rotation or the activity being closed. Be sure to review [[the configuration changes guide|Handling-Configuration-Changes#saving-and-restoring-fragment-state]] for more details on how to save and restore fragment state. References \u00b6 http://developer.android.com/reference/android/app/Fragment.html http://developer.android.com/training/basics/fragments/creating.html http://developer.android.com/guide/components/fragments.html http://www.vogella.com/articles/AndroidFragments/article.html http://xperiment-andro.blogspot.com/2013/02/nested-fragments.html","title":"Fragments"},{"location":"fragments/#overview","text":"A fragment is a reusable class implementing a portion of an activity. A Fragment typically defines a part of a user interface. Fragments must be embedded in activities; they cannot run independently of activities.","title":"Overview"},{"location":"fragments/#understanding-fragments","text":"Here are the important things to understand about fragments: A Fragment is a combination of an XML layout file and a java class much like an Activity . Using the support library, fragments are supported back to all relevant Android versions. Fragments encapsulate views and logic so that it is easier to reuse within activities. Fragments are standalone components that can contain views, events and logic. Within a fragment-oriented architecture, activities become navigational containers that are primarily responsible for navigation to other activities, presenting fragments and passing data.","title":"Understanding Fragments"},{"location":"fragments/#importance-of-fragments","text":"There are many use cases for fragments but the most common use cases include: Reusing View and Logic Components - Fragments enable re-use of parts of your screen including views and event logic over and over in different ways across many disparate activities. For example, using the same list across different data sources within an app. Tablet Support - Often within apps, the tablet version of an activity has a substantially different layout from the phone version which is different from the TV version. Fragments enable device-specific activities to reuse shared elements while also having differences. Screen Orientation - Often within apps, the portrait version of an activity has a substantially different layout from the landscape version. Fragments enable both orientations to reuse shared elements while also having differences.","title":"Importance of Fragments"},{"location":"fragments/#organizing-your-code","text":"Within a fragment-heavy app, we need to remember to organize our code according to architectural best practices. Inside of an app which uses fragments extensively, we need to keep in mind that the role of an activity shifts. Activities are navigation controllers primarily responsible for: Navigation to other activities through intents. Presenting navigational components such as the [[navigation drawer|Fragment Navigation Drawer]] or the [[viewpager|ViewPager-with-FragmentPagerAdapter]]. Hiding and showing relevant fragments using the fragment manager. Receiving data from intents and passing data between fragments. Fragments are content controllers and contain most views, layouts, and event logic including: Layouts and views displaying relevant app content. Event handling logic associated with relevant views. View state management logic such as visibility or error handling. Triggering of network request through a client object. Retrieval and storage of data from persistence through model objects. To reiterate, in a fragment-based architecture, the activities are for navigation and the fragments are for views and logic .","title":"Organizing your Code"},{"location":"fragments/#usage","text":"","title":"Usage"},{"location":"fragments/#defining-a-fragment","text":"A fragment, like an activity, has an XML layout file and a Java class that represents the Fragment controller. The XML layout file is just like any other layout file, and can be named fragment_foo.xml . Think of them as a partial (re-usable) activity: <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" > <TextView android:id= \"@+id/textView1\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"TextView\" /> <Button android:id= \"@+id/button1\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Button\" /> </LinearLayout> The Java controller for a fragment looks like: import android.support.v4.app.Fragment ; public class FooFragment extends Fragment { // The onCreateView method is called when Fragment should create its View object hierarchy, // either dynamically or via XML layout inflation. @Override public View onCreateView ( LayoutInflater inflater , ViewGroup parent , Bundle savedInstanceState ) { // Defines the xml file for the fragment return inflater . inflate ( R . layout . fragment_foo , parent , false ); } // This event is triggered soon after onCreateView(). // Any view setup should occur here. E.g., view lookups and attaching view listeners. @Override public void onViewCreated ( View view , Bundle savedInstanceState ) { // Setup any handles to view objects here // EditText etFoo = (EditText) view.findViewById(R.id.etFoo); } }","title":"Defining a Fragment"},{"location":"fragments/#embedding-a-fragment-in-an-activity","text":"There are two ways to add a fragment to an activity: dynamically using Java and statically using XML . Before embedding a \"support\" fragment in an Activity make sure the Activity is changed to extend from FragmentActivity or AppCompatActivity which adds support for the fragment manager to all Android versions. Any activity using fragments should make sure to extend from FragmentActivity or AppCompatActivity : import android.support.v7.app.AppCompatActivity ; public class MainActivity extends AppCompatActivity { // ... }","title":"Embedding a Fragment in an Activity"},{"location":"fragments/#statically","text":"To add the fragment statically , simply embed the fragment in the activity's xml layout file: <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" > <fragment android:name= \"com.example.android.FooFragment\" android:id= \"@+id/fooFragment\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </LinearLayout> Note: * You will likely need to change the path for FooFragment based on your project setup. * You cannot replace a fragment defined statically in the layout file via a FragmentTransaction. You can only replace fragments that you added dynamically.","title":"Statically"},{"location":"fragments/#dynamically","text":"The second way is by adding the fragment dynamically in Java using the FragmentManager . The FragmentManager class and the FragmentTransaction class allow you to add, remove and replace fragments in the layout of your activity at runtime. In this case, you want to add a \"placeholder\" container (usually a FrameLayout ) to your activity where the fragment is inserted at runtime: <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" > <FrameLayout android:id= \"@+id/your_placeholder\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > </FrameLayout> </LinearLayout> and then you can use the FragmentManager to create a FragmentTransaction which allows us to add fragments to the FrameLayout at runtime: // Begin the transaction FragmentTransaction ft = getSupportFragmentManager (). beginTransaction (); // Replace the contents of the container with the new fragment ft . replace ( R . id . your_placeholder , new FooFragment ()); // or ft.add(R.id.your_placeholder, new FooFragment()); // Complete the changes added above ft . commit (); If the fragment should always be within the activity, use XML to statically add the fragment but in more complex cases be sure to use the Java-based approach.","title":"Dynamically"},{"location":"fragments/#fragment-lifecycle","text":"Fragment has many methods which can be overridden to plug into the lifecycle ( [[similar to an Activity|Activity-Lifecycle]] ): onAttach() is called when a fragment is connected to an activity. onCreate() is called to do initial creation of the fragment. onCreateView() is called by Android once the Fragment should inflate a view. onViewCreated() is called after onCreateView() and ensures that the fragment's root view is non-null . Any view setup should happen here. E.g., view lookups, attaching listeners. onActivityCreated() is called when host activity has completed its onCreate() method. onStart() is called once the fragment is ready to be displayed on screen. onResume() - Allocate \u201cexpensive\u201d resources such as registering for location, sensor updates, etc. onPause() - Release \u201cexpensive\u201d resources. Commit any changes. onDestroyView() is called when fragment's view is being destroyed, but the fragment is still kept around. onDestroy() is called when fragment is no longer in use. onDetach() is called when fragment is no longer connected to the activity. The lifecycle execution order is mapped out below: The most common ones to override are onCreateView which is in almost every fragment to setup the inflated view, onCreate for any data initialization and onActivityCreated used for setting up things that can only take place once the Activity has been fully created. Here's an example of how you might use the various fragment lifecycle events: public class SomeFragment extends Fragment { ThingsAdapter adapter ; FragmentActivity listener ; // This event fires 1st, before creation of fragment or any views // The onAttach method is called when the Fragment instance is associated with an Activity. // This does not mean the Activity is fully initialized. @Override public void onAttach ( Context context ) { super . onAttach ( context ); if ( context instanceof Activity ){ this . listener = ( FragmentActivity ) context ; } } // This event fires 2nd, before views are created for the fragment // The onCreate method is called when the Fragment instance is being created, or re-created. // Use onCreate for any standard setup that does not require the activity to be fully created @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); ArrayList < Thing > things = new ArrayList < Thing >(); adapter = new ThingsAdapter ( getActivity (), things ); } // The onCreateView method is called when Fragment should create its View object hierarchy, // either dynamically or via XML layout inflation. @Override public View onCreateView ( LayoutInflater inflater , ViewGroup parent , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_some , parent , false ); } // This event is triggered soon after onCreateView(). // onViewCreated() is only called if the view returned from onCreateView() is non-null. // Any view setup should occur here. E.g., view lookups and attaching view listeners. @Override public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ); ListView lv = ( ListView ) view . findViewById ( R . id . lvSome ); lv . setAdapter ( adapter ); } // This method is called when the fragment is no longer connected to the Activity // Any references saved in onAttach should be nulled out here to prevent memory leaks. @Override public void onDetach () { super . onDetach (); this . listener = null ; } // This method is called after the parent Activity's onCreate() method has completed. // Accessing the view hierarchy of the parent activity must be done in the onActivityCreated. // At this point, it is safe to search for activity View objects by their ID, for example. @Override public void onActivityCreated ( Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ); } } Refer to this detailed lifecycle chart to view the lifecycle of a fragment more visually.","title":"Fragment Lifecycle"},{"location":"fragments/#looking-up-a-fragment-instance","text":"Often we need to lookup or find a fragment instance within an activity layout file. There are a few methods for looking up an existing fragment instance: ID - Lookup a fragment by calling findFragmentById on the FragmentManager Tag - Lookup a fragment by calling findFragmentByTag on the FragmentManager Pager - Lookup a fragment by calling getRegisteredFragment on a PagerAdapter (not part of the Android APIs but there is a custom implementation here https://stackoverflow.com/a/30594487) Each method is outlined in more detail below.","title":"Looking Up a Fragment Instance"},{"location":"fragments/#finding-fragment-by-id","text":"If the fragment was statically embedded in the XML within an activity and given an android:id such as fragmentDemo then we can lookup this fragment by id by calling findFragmentById on the FragmentManager : public class MainActivity extends AppCompatActivity { @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); if ( savedInstanceState == null ) { DemoFragment fragmentDemo = ( DemoFragment ) getSupportFragmentManager (). findFragmentById ( R . id . fragmentDemo ); } } }","title":"Finding Fragment By ID"},{"location":"fragments/#finding-fragment-by-tag","text":"If the fragment was dynamically added at runtime within an activity then we can lookup this fragment by tag by calling findFragmentByTag on the FragmentManager : public class MainActivity extends AppCompatActivity { @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); if ( savedInstanceState == null ) { // Let's first dynamically add a fragment into a frame container getSupportFragmentManager (). beginTransaction (). replace ( R . id . flContainer , new DemoFragment (), \"SOMETAG\" ). commit (); // Now later we can lookup the fragment by tag DemoFragment fragmentDemo = ( DemoFragment ) getSupportFragmentManager (). findFragmentByTag ( \"SOMETAG\" ); } } }","title":"Finding Fragment By Tag"},{"location":"fragments/#finding-fragment-within-pager","text":"If the fragment was dynamically added at runtime within an activity into a ViewPager using a [[FragmentPagerAdapter|ViewPager-with-FragmentPagerAdapter#setup-fragmentpageradapter]] then we can lookup the fragment by upgrading to a SmartFragmentStatePagerAdapter as [[described in the ViewPager guide|ViewPager-with-FragmentPagerAdapter#setup-smartfragmentstatepageradapter]]. Now with the adapter in place, we can also easily access any fragments within the ViewPager using getRegisteredFragment : // returns first Fragment item within the pager adapterViewPager . getRegisteredFragment ( 0 ); Note that the ViewPager loads the fragment instances lazily similar to the a ListView recycling items as they appear on screen. If you attempt to access a fragment that is not on screen, the lookup will return null .","title":"Finding Fragment Within Pager"},{"location":"fragments/#communicating-with-fragments","text":"Fragments should generally only communicate with their direct parent activity. Fragments communicate through their parent activity allowing the activity to manage the inputs and outputs of data from that fragment coordinating with other fragments or activities. Think of the Activity as the controller managing all interaction with each of the fragments contained within. A few exceptions to this are [[dialog fragments|Using-DialogFragment#passing-data-to-parent-fragment]] presented from within another fragment or [[nested child fragments|Creating-and-Using-Fragments#nesting-fragments-within-fragments]]. Both of these cases are situations where a fragment has nested child fragments and that are therefore allowed to communicate upward to their parent (which is a fragment). The important thing to keep in mind is that fragments should not directly communicate with each other and should generally only communicate with their parent activity . Fragments should be modular, standalone and reusable components. The fragments allow their parent activity to respond to intents and callbacks in most cases. There are three ways a fragment and an activity can communicate: Bundle - Activity can construct a fragment and set arguments Methods - Activity can call methods on a fragment instance Listener - Fragment can fire listener events on an activity via an interface In other words, communication should generally follow these principles: Activities can initialize fragments with [[data during construction|Creating-and-Using-Fragments#fragment-with-arguments]] Activities can pass data to fragments [[using methods on the fragment instance|Creating-and-Using-Fragments#fragment-methods]] Fragments can communicate up to their parent activity [[using an interface and listeners|Creating-and-Using-Fragments#fragment-listener]] Fragments should pass data to other fragments only routed through their parent activity Fragments can pass data to and from [[dialog fragments as outlined here|Using-DialogFragment#passing-data-to-parent-fragment]] Fragments can contain [[nested child fragments as outlined here|Creating-and-Using-Fragments#nesting-fragments-within-fragments]]","title":"Communicating with Fragments"},{"location":"fragments/#fragment-with-arguments","text":"In certain cases, your fragment may want to accept certain arguments. A common pattern is to create a static newInstance method for creating a Fragment with arguments. This is because a Fragment must have only a constructor with no arguments . Instead, we want to use the setArguments method such as: public class DemoFragment extends Fragment { // Creates a new fragment given an int and title // DemoFragment.newInstance(5, \"Hello\"); public static DemoFragment newInstance ( int someInt , String someTitle ) { DemoFragment fragmentDemo = new DemoFragment (); Bundle args = new Bundle (); args . putInt ( \"someInt\" , someInt ); args . putString ( \"someTitle\" , someTitle ); fragmentDemo . setArguments ( args ); return fragmentDemo ; } } This sets certain arguments into the Fragment for later access within onCreate . You can access the arguments later by using: public class DemoFragment extends Fragment { @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); // Get back arguments int SomeInt = getArguments (). getInt ( \"someInt\" , 0 ); String someTitle = getArguments (). getString ( \"someTitle\" , \"\" ); } } Now we can load a fragment dynamically in an Activity with: // Within the activity FragmentTransaction ft = getSupportFragmentManager (). beginTransaction (); DemoFragment fragmentDemo = DemoFragment . newInstance ( 5 , \"my title\" ); ft . replace ( R . id . your_placeholder , fragmentDemo ); ft . commit (); This pattern makes passing arguments to fragments for initialization fairly straightforward.","title":"Fragment with Arguments"},{"location":"fragments/#fragment-methods","text":"If an activity needs to make a fragment perform an action after initialization, the easiest way is by having the activity invoke a method on the fragment instance. In the fragment, add a method: public class DemoFragment extends Fragment { public void doSomething ( String param ) { // do something in fragment } } and then in the activity, get access to the fragment using the fragment manager and call the method: public class MainActivity extends AppCompatActivity { @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); DemoFragment fragmentDemo = ( DemoFragment ) getSupportFragmentManager (). findFragmentById ( R . id . fragmentDemo ); fragmentDemo . doSomething ( \"some param\" ); } } and then the activity can communicate directly with the fragment by invoking this method.","title":"Fragment Methods"},{"location":"fragments/#fragment-listener","text":"If a fragment needs to communicate events to the activity, the fragment should [[define an interface|Creating-Custom-Listeners]] as an inner type and require that the activity must implement this interface: import android.support.v4.app.Fragment ; public class MyListFragment extends Fragment { // ... // Define the listener of the interface type // listener will the activity instance containing fragment private OnItemSelectedListener listener ; // Define the events that the fragment will use to communicate public interface OnItemSelectedListener { // This can be any number of events to be sent to the activity public void onRssItemSelected ( String link ); } // Store the listener (activity) that will have events fired once the fragment is attached @Override public void onAttach ( Context context ) { super . onAttach ( context ); if ( context instanceof OnItemSelectedListener ) { listener = ( OnItemSelectedListener ) context ; } else { throw new ClassCastException ( context . toString () + \" must implement MyListFragment.OnItemSelectedListener\" ); } } // Now we can fire the event when the user selects something in the fragment public void onSomeClick ( View v ) { listener . onRssItemSelected ( \"some link\" ); } } and then in the activity we have to implement the OnItemSelectedListener listener: import android.support.v7.app.AppCompatActivity ; // Activity implements the fragment listener to handle events public class RssfeedActivity extends AppCompatActivity implements MyListFragment . OnItemSelectedListener { // Can be any fragment, `DetailFragment` is just an example DetailFragment fragment ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_rssfeed ); // Get access to the detail view fragment by id fragment = ( DetailFragment ) getSupportFragmentManager () . findFragmentById ( R . id . detailFragment ); } // Now we can define the action to take in the activity when the fragment event fires // This is implementing the `OnItemSelectedListener` interface methods @Override public void onRssItemSelected ( String link ) { if ( fragment != null && fragment . isInLayout ()) { fragment . setText ( link ); } } } in order to keep the fragment as re-usable as possible. For more details about this pattern, check out our detailed [[Creating Custom Listeners]] guide.","title":"Fragment Listener"},{"location":"fragments/#understanding-the-fragmentmanager","text":"The FragmentManager is responsible for all runtime management of fragments including adding, removing, hiding, showing, or otherwise navigating between fragments. As shown above, the fragment manager is also responsible for finding fragments within an activity. Important available methods are outlined below: Method Description addOnBackStackChangedListener Add a new listener for changes to the fragment back stack. beginTransaction() Creates a new transaction to change fragments at runtime. findFragmentById(int id) Finds a fragment by id usually inflated from activity XML layout. findFragmentByTag(String tag) Finds a fragment by tag usually for a runtime added fragment. popBackStack() Remove a fragment from the backstack. executePendingTransactions() Forces committed transactions to be applied. See the official documentation for more information. You can also review the FragmentTransaction to take a closer look at what modifications can be made at run-time through the manager.","title":"Understanding the FragmentManager"},{"location":"fragments/#actionbar-menu-items-and-fragments","text":"One common case is the need for fragment-specific menu items that only show up for that fragment. This can be done by adding an onCreateOptionsMenu method to the fragment directly. This works just like the one for the activity: @Override public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . fragment_menu , menu ); } You then also need to notify the fragment that it's menu items should be loaded within the fragment's onCreate method: @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setHasOptionsMenu ( true ); } Clicks can be handled using onClick property as usual or more typically in this case, using the onOptionsItemSelected method in the fragment: @Override public boolean onOptionsItemSelected ( MenuItem item ) { // handle item selection switch ( item . getItemId ()) { case R . id . edit_item : // do s.th. return true ; default : return super . onOptionsItemSelected ( item ); } } Note that the fragment\u2019s method is called only when the Activity didn\u2019t consume the event first. Be sure to check out a more detailed guide about fragments and action bar if you have more questions.","title":"ActionBar Menu Items and Fragments"},{"location":"fragments/#navigating-between-fragments","text":"There are several methods for navigating between different fragments within a single Activity. The primary options are: [[TabLayout| Google Play Style Tabs using TabLayout]] - Tabs at the top [[Fragment Navigation Drawer]] - Slide out navigation menu [[ViewPager | ViewPager with FragmentPagerAdapter]] - Swiping between fragments Check the guides linked above for detailed steps for each of these approaches.","title":"Navigating Between Fragments"},{"location":"fragments/#managing-fragment-backstack","text":"A record of all Fragment transactions is kept for each Activity by the FragmentManager. When used properly, this allows the user to hit the device\u2019s back button to remove previously added Fragments (not unlike how the back button removes an Activity). Simply call addToBackstack on each FragmentTransaction that should be recorded: // Create the transaction FragmentTransaction fts = getSupportFragmentManager (). beginTransaction (); // Replace the content of the container fts . replace ( R . id . flContainer , new FirstFragment ()); // Append this transaction to the backstack fts . addToBackStack ( \"optional tag\" ); // Commit the changes fts . commit (); Programmatically, you can also pop from the back stack at any time through the manager: FragmentManager fragmentManager = getSupportFragmentManager (); if ( fragmentManager . getBackStackEntryCount () > 0 ) { fragmentManager . popBackStack (); } With this approach, we can easily keep the history of which fragments have appeared dynamically on screen and allow the user to easily navigate to previous fragments.","title":"Managing Fragment Backstack"},{"location":"fragments/#fragment-hiding-vs-replace","text":"In many of the examples above, we call transaction.replace(...) to load a dynamic fragment which first removes the existing fragment from the activity invoking onStop and onDestroy for that fragment before adding the new fragment to the container. This can be good because this will release memory and make the UI snappier. However, in many cases, we may want to keep both fragments around in the container and simply toggle their visibility. This allows all fragments to maintain their state because they are never removed from the container. To do this, we might modify this code: // Within an activity private FragmentA fragmentA ; private FragmentB fragmentB ; private FragmentC fragmentC ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); if ( savedInstanceState == null ) { fragmentA = FragmentA . newInstance ( \"foo\" ); fragmentB = FragmentB . newInstance ( \"bar\" ); fragmentC = FragmentC . newInstance ( \"baz\" ); } } protected void displayFragmentA () { FragmentTransaction ft = getSupportFragmentManager (). beginTransaction (); // removes the existing fragment calling onDestroy ft . replace ( R . id . flContainer , fragmentA ); ft . commit (); } to this approach instead leveraging add , show , and hide in the FragmentTransaction : // ...onCreate stays the same // Replace the switch method protected void displayFragmentA () { FragmentTransaction ft = getSupportFragmentManager (). beginTransaction (); if ( fragmentA . isAdded ()) { // if the fragment is already in container ft . show ( fragmentA ); } else { // fragment needs to be added to frame container ft . add ( R . id . flContainer , fragmentA , \"A\" ); } // Hide fragment B if ( fragmentB . isAdded ()) { ft . hide ( fragmentB ); } // Hide fragment C if ( fragmentC . isAdded ()) { ft . hide ( fragmentC ); } // Commit changes ft . commit (); } Using this approach, all three fragments will remain in the container once added initially and then we are simply revealing the desired fragment and hiding the others within the container. Check out this stackoverflow for a discussion on deciding when to replace vs hide and show.","title":"Fragment Hiding vs Replace"},{"location":"fragments/#nesting-fragments-within-fragments","text":"Inevitably in certain cases you will want to embed a fragment within another fragment . Since Android 4.2 , you have the ability to embed a fragment within another fragment. This nested fragment is known as a child fragment . A common situation where you might want to nest fragments is when you are using a sliding drawer for top-level navigation and one of the fragments needs to display tabs. Note that one limitation is that nested (or child) fragments must be dynamically added at runtime to their parent fragment and cannot be statically added using the <fragment> tag. To nest a fragment in another fragment, first we need a <FrameLayout> or alternatively a [[ViewPager|ViewPager-with-FragmentPagerAdapter]] to contain the dynamic child fragment in the res/layout/fragment_parent.xml layout: <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"fill_parent\" android:layout_height= \"fill_parent\" android:orientation= \"vertical\" > <TextView android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"I am the parent fragment\" /> <FrameLayout android:id= \"@+id/child_fragment_container\" android:layout_width= \"fill_parent\" android:layout_height= \"wrap_content\" /> </LinearLayout> Notice that there's a FrameLayout with the id of @+id/child_fragment_container in which the child fragment will be inserted. Inflation of the ParentFragment view is within the onCreateView method, just as was outlined in earlier sections. In addition, we would also define a ChildFragment that would have its own distinct layout file: // Top-level fragment that will contain the child public class ParentFragment extends Fragment { @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_parent , container , false ); } } // Child fragment that will be dynamically embedded in the parent public class ChildFragment extends Fragment { @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { // Need to define the child fragment layout return inflater . inflate ( R . layout . fragment_child , container , false ); } } Now we can add the child fragment to the parent at runtime using the getChildFragmentManager method: // Top-level fragment that will contain the child public class ParentFragment extends Fragment { @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_parent , container , false ); } // This event is triggered soon after onCreateView(). // onViewCreated() is only called if the view returned from onCreateView() is non-null. // Any view setup should occur here. E.g., view lookups and attaching view listeners. @Override public void onViewCreated ( View view , Bundle savedInstanceState ) { insertNestedFragment (); } // Embeds the child fragment dynamically private void insertNestedFragment () { Fragment childFragment = new ChildFragment (); FragmentTransaction transaction = getChildFragmentManager (). beginTransaction (); transaction . replace ( R . id . child_fragment_container , childFragment ). commit (); } } Note that you must always use getChildFragmentManager when interacting with nested fragments instead of using getSupportFragmentManager . Read this stackoverflow post for an explanation of the difference between the two. In the child fragment, we can use getParentFragment() to get the reference to the parent fragment, similar to a fragment's getActivity() method that gives reference to the parent Activity. See the docs for more information.","title":"Nesting Fragments within Fragments"},{"location":"fragments/#managing-configuration-changes","text":"When you are working with fragment as with activities, you need to make sure to [[handle configuration changes|Handling-Configuration-Changes#saving-and-restoring-fragment-state]] such as screen rotation or the activity being closed. Be sure to review [[the configuration changes guide|Handling-Configuration-Changes#saving-and-restoring-fragment-state]] for more details on how to save and restore fragment state.","title":"Managing Configuration Changes"},{"location":"fragments/#references","text":"http://developer.android.com/reference/android/app/Fragment.html http://developer.android.com/training/basics/fragments/creating.html http://developer.android.com/guide/components/fragments.html http://www.vogella.com/articles/AndroidFragments/article.html http://xperiment-andro.blogspot.com/2013/02/nested-fragments.html","title":"References"},{"location":"location-notifications/","text":"","title":"Location notifications"},{"location":"maps-location/","text":"","title":"Maps location"},{"location":"networking/","text":"Sending and Managing Network Requests \u00b6 Network requests are used to retrieve or modify API data or media from a server. This is a very common task in Android development especially for dynamic data-driven clients. The underlying Java class used for network connections is DefaultHTTPClient or HttpUrlConnection . Both of these are lower-level and require completely manual management of parsing the data from the input stream and executing the request asynchronously. DefaultHTTPClient, otherwise known as the Apache HTTP Client, has been deprecated since Android 6.0. The reason for two different HTTP clients is described in this blog article . A historical perspective is also discussed in this podcast . For most common cases, we are better off using a popular third-party library called android-async-http or OkHttp which will handle the entire process of sending and parsing network requests for us in a more robust and easy-to-use way. Permissions \u00b6 In order to access the internet, be sure to specify the following permissions in AndroidManifest.xml : <? xml version = \"1.0\" encoding = \"utf-8\" ?> < manifest xmlns : android = \"http://schemas.android.com/apk/res/android\" package = \"com.example.simplenetworking\" android : versionCode = \"1\" android : versionName = \"1.0\" > < uses - permission android : name = \"android.permission.INTERNET\" /> < uses - permission android : name = \"android.permission.ACCESS_NETWORK_STATE\" /> </ manifest > Sending an HTTP Request (Third Party) \u00b6 There are at least three major third-party networking libraries you should consider using. The Android Async Http Client for making basic network calls. It is the library often used for learning Android but would not be used in a production application. OkHttp for making synchronous and asynchronous calls. Volley , a library built by Google that has fallen out of favor for OkHttp. It was one of the first networking libraries released for Android and provides a more convenient way to make networking requests than using AsyncTask . There can be a bit of a learning curve when using these libraries, so your best bet when first learning is to use Android Async Http Client or Volley. With OkHttp you also have to deal with the complexity of whether your callbacks need to be run on the main thread to update the UI, as explained in the guide. Here is a comparison of the different aspects of the libraries. Android Async Http OkHttp Volley Debugging Requires Proxy server Use LogInterceptor Use verbose mode Disk Caching Yes Yes Yes Request Queueing No No Included Remote Image Fetching Manual Requires Picasso or Glide Included Animated GIF Support No Requires Glide Requires Glide Release Cadence Infrequent Monthly Infrequent Transport Layer Apache HTTP Client OkHttp HttpUrlConnection (or OkHttp) Synchronous Calls use SyncHttpClient execute() instead of enqueue() use RequestFuture HTTP/2 No Yes Works with OkHttp Automatic Gzip processing Yes Yes No (unless using OkHttp) Author James Smith Square Google One issue with Android Async Http Client is that the library has very limited ways to observe network traces that are useful for debugging. Volley provides remote fetching images out of the box, while Android Async Http client requires more manual work and OkHttp needs the Picasso or Glide library in order to do so. Another important point is that OkHttp is not only a standalone networking library but also can be used for the underlying implementation for HttpUrlConnection . For this reason, Volley can also leverage OkHttp to support automatic Gzip and HTTP/2 processing. Sending an HTTP Request (The \"Hard\" Way) \u00b6 Sending an HTTP Request involves the following conceptual steps: Declare a URL Connection Open InputStream to connection Download and decode based on data type Wrap in AsyncTask and execute in background thread This would translate to the following networking code to send a simple request (with try-catch structured exceptions not shown here for brevity): // 1. Declare a URL Connection URL url = new URL ( \"http://www.google.com\" ); HttpURLConnection conn = ( HttpURLConnection ) url . openConnection (); // 2. Open InputStream to connection conn . connect (); InputStream in = conn . getInputStream (); // 3. Download and decode the string response using builder StringBuilder stringBuilder = new StringBuilder (); BufferedReader reader = new BufferedReader ( new InputStreamReader ( in )); String line ; while (( line = reader . readLine ()) != null ) { stringBuilder . append ( line ); } The fourth step requires this networking request to be executed in a background task using AsyncTasks such as shown below: // The types specified here are the input data type, the progress type, and the result type // Subclass AsyncTask to execute the network request // String == URL, Void == Progress Tracking, String == Response Received private class NetworkAsyncTask extends AsyncTask < String , Void , Bitmap > { protected String doInBackground ( String ... strings ) { // Some long-running task like downloading an image. // ... code shown above to send request and retrieve string builder return stringBuilder . toString (); } protected void onPostExecute ( String result ) { // This method is executed in the UIThread // with access to the result of the long running task // DO SOMETHING WITH STRING RESPONSE } } private void downloadResponseFromNetwork () { // 4. Wrap in AsyncTask and execute in background thread new NetworkAsyncTask (). execute ( \"http://google.com\" ); } Displaying Remote Images (The \"Easy\" Way) \u00b6 Displaying images is easiest using a third party library such as Picasso from Square which will download and cache remote images and abstract the complexity behind an easy to use DSL: String imageUri = \"https://i.imgur.com/tGbaZCY.jpg\" ; ImageView ivBasicImage = ( ImageView ) findViewById ( R . id . ivBasicImage ); Picasso . with ( context ). load ( imageUri ). into ( ivBasicImage ); Refer to our [[Picasso Guide|Displaying-Images-with-the-Picasso-Library]] for more detailed usage information and configuration. Displaying Remote Images (The \"Hard\" Way) \u00b6 Suppose we wanted to load an image using only the built-in Android network constructs. In order to download an image from the network, convert the bytes into a bitmap and then insert the bitmap into an ImageView , you would use the following pseudo-code: // 1. Declare a URL Connection URL url = new URL ( \"https://i.imgur.com/tGbaZCY.jpg\" ); HttpURLConnection conn = ( HttpURLConnection ) url . openConnection (); // 2. Open InputStream to connection conn . connect (); InputStream in = conn . getInputStream (); // 3. Download and decode the bitmap using BitmapFactory Bitmap bitmap = BitmapFactory . decodeStream ( in ); in . close (); // 4. Insert into an ImageView ImageView imageView = ( ImageView ) findViewById ( R . id . imageView ); imageView . setImageBitmap ( bitmap ); Here's the complete code needed to construct an AsyncTask that downloads a remote image and displays the image in an ImageView using just the official Google Android SDK. See the [[Creating and Executing Async Tasks]] for more information about executing asynchronous background tasks: public class MainActivity extends Activity { private ImageView ivBasicImage ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); ivBasicImage = ( ImageView ) findViewById ( R . id . ivBasicImage ); String url = \"https://i.imgur.com/tGbaZCY.jpg\" ; // Download image from URL and display within ImageView new ImageDownloadTask ( ivBasicImage ). execute ( url ); } // Defines the background task to download and then load the image within the ImageView private class ImageDownloadTask extends AsyncTask < String , Void , Bitmap > { ImageView imageView ; public ImageDownloadTask ( ImageView imageView ) { this . imageView = imageView ; } protected Bitmap doInBackground ( String ... addresses ) { Bitmap bitmap = null ; InputStream in ; try { // 1. Declare a URL Connection URL url = new URL ( addresses [ 0 ]); HttpURLConnection conn = ( HttpURLConnection ) url . openConnection (); // 2. Open InputStream to connection conn . connect (); in = conn . getInputStream (); // 3. Download and decode the bitmap using BitmapFactory bitmap = BitmapFactory . decodeStream ( in ); } catch ( IOException e ) { e . printStackTrace (); } finally { if ( in != null ) in . close (); } return bitmap ; } // Fires after the task is completed, displaying the bitmap into the ImageView @Override protected void onPostExecute ( Bitmap result ) { // Set bitmap image for the result imageView . setImageBitmap ( result ); } } } We could even create our own basic version of a library for loading images by wrapping up this logic into an object as outlined here . Of course, doing this the \"hard\" way is not recommended. In most cases, to avoid having to manually manage caching and download management, we are better off creating your own libraries or in most cases utilizing existing third-party libraries . Note: If you use the approach above to download and display many images within a ListView, you might run into some threading issues that cause buggy loading of images. The blog post Multithreading for Performance offers a solution in which you manage the active remote downloading background tasks to ensure that too many tasks are not being spun up at once. Checking for Network Connectivity \u00b6 Checking Network is Connected \u00b6 First, make sure to setup the android.permission.ACCESS_NETWORK_STATE permission as shown above. To verify network availability you can then define and call this method: private Boolean isNetworkAvailable () { ConnectivityManager connectivityManager = ( ConnectivityManager ) getSystemService ( Context . CONNECTIVITY_SERVICE ); NetworkInfo activeNetworkInfo = connectivityManager . getActiveNetworkInfo (); return activeNetworkInfo != null && activeNetworkInfo . isConnectedOrConnecting (); } Note Having an active network interface doesn't guarantee that a particular networked service is available or that the internet is actually connected . Network issues, server downtime, low signal, captive portals, content filters and the like can all prevent your app from reaching a server. For instance you can't tell for sure if your app can reach Twitter until you receive a valid response from the Twitter service. See this official connectivity guide for more details. Checking the Internet is Connected \u00b6 To verify if the device is actually connected to the internet, we can use the following method of pinging the Google DNS servers to check for the expected exit value: public boolean isOnline () { Runtime runtime = Runtime . getRuntime (); try { Process ipProcess = runtime . exec ( \"/system/bin/ping -c 1 8.8.8.8\" ); int exitValue = ipProcess . waitFor (); return ( exitValue == 0 ); } catch ( IOException e ) { e . printStackTrace (); } catch ( InterruptedException e ) { e . printStackTrace (); } return false ; } Note that this does not need to be run in background and does not require special privileges. See this stackoverflow post for the source of this solution. Networking with the Volley Library \u00b6 Volley is a library that makes networking for Android apps easier and most importantly, faster. Volley Library was announced by Ficus Kirkpatrick at Google I/O '13. It was first used by the Play Store team in Play Store Application and then they released it as an open source library. Although it is part of the Android Open Source Project (AOSP), Google announced in January 2017 that Volley will move to a standalone library . Why Volley? \u00b6 Volley can pretty much do everything with that has to do with Networking in Android. Volley automatically schedules all network requests such as fetching responses for image from web. Volley provides transparent disk and memory caching. Volley provides powerful cancellation request API for canceling a single request or you can set blocks of requests to cancel. Volley provides powerful customization abilities. Volley provides debugging and tracing tools. Setup Volley \u00b6 Adding Volley to our app/build.gradle file: dependencies { compile 'com.android.volley:volley:1.0.0' } And add the internet permission in AndroidManifest.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" package= \"com.example.simplenetworking\" android:versionCode= \"1\" android:versionName= \"1.0\" > <!-- Add permissions here --> <uses-permission android:name= \"android.permission.INTERNET\" /> <uses-permission android:name= \"android.permission.ACCESS_NETWORK_STATE\" /> </manifest> How to use Volley? \u00b6 Volley has two classes that you will have to deal with: RequestQueue - Requests are queued up here to be executed Request (and any extension of it) - Constructing an network request A Request object comes in three major types: JsonObjectRequest \u2014 To send and receive JSON Object from the server JsonArrayRequest \u2014 To receive JSON Array from the server ImageRequest - To receive an image from the server StringRequest \u2014 To retrieve response body as String (ideally if you intend to parse the response by yourself) Constructing a RequestQueue \u00b6 All requests in Volley are placed in a queue first and then processed, here is how you will be creating a request queue: public MainActivity extends AppCompatActivity { private RequestQueue mRequestQueue ; protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . main_screen_layout ); // ... mRequestQueue = Volley . newRequestQueue ( this ); } } Creating a Singleton Queue \u00b6 See this guide for creating a singleton to use for sending requests . Requesting images \u00b6 Volley provides the ability to make image requests and receive back as bitmap. You can use this bitmap to set directly onto an ImageView. ImageRequest imageRequest = new ImageRequest ( \"http://i.imgur.com/Nwk25LA.jpg\" , new Response . Listener < Bitmap >() { @Override public void onResponse ( Bitmap response ) { }, // Image width & height equals 0 means to use the actual size 0 , 0 , // ImageView scale type ImageView . ScaleType . FIT_XY , // 8 bytes per pixel image Bitmap . Config . ARGB_8888 , new Response . ErrorListener () { @Override public void onErrorResponse ( VolleyError error ) { error . printStackTrace (); } }); Accessing JSON Data \u00b6 After this step you are ready to create your Request objects which represents a desired request to be executed. Then we add that request onto the queue. public class MainActivity extends Activity { private RequestQueue mRequestQueue ; // ... private void fetchJsonResponse () { // Pass second argument as \"null\" for GET requests JsonObjectRequest req = new JsonObjectRequest ( Request . Method . GET , \"http://ip.jsontest.com/\" , null , new Response . Listener < JSONObject >() { @Override public void onResponse ( JSONObject response ) { try { String result = \"Your IP Address is \" + response . getString ( \"ip\" ); Toast . makeText ( MainActivity . this , result , Toast . LENGTH_SHORT ). show (); } catch ( JSONException e ) { e . printStackTrace (); } } }, new Response . ErrorListener () { @Override public void onErrorResponse ( VolleyError error ) { VolleyLog . e ( \"Error: \" , error . getMessage ()); } }); /* Add your Requests to the RequestQueue to execute */ mRequestQueue . add ( req ); } } And that will execute the request to the server and respond back with the result as specified in the Response.Listener callback. For a more detailed look at Volley, check out this volley tutorial . Canceling Requests \u00b6 You can tag a request with: StringRequest stringRequest = ...; RequestQueue mRequestQueue = ...; // Set the tag on the request. stringRequest . setTag ( TAG ); // Add the request to the RequestQueue. mRequestQueue . add ( stringRequest ); You can now cancel all requests with this tag using the cancelAll on the request queue: @Override protected void onStop () { super . onStop (); if ( mRequestQueue != null ) { mRequestQueue . cancelAll ( TAG ); } } Using with OkHttp \u00b6 Although Volley uses the HttpUrlConnection interface for networking calls, the OkHttp library instead can be used instead since it also provides an implementation of this interface: public class OkHttpStack extends HurlStack { private final OkHttpClient client ; public OkHttpStack () { this ( new OkHttpClient ()); } public OkHttpStack ( OkHttpClient client ) { if ( client == null ) { throw new NullPointerException ( \"Client must not be null.\" ); } this . client = client ; } @Override protected HttpURLConnection createConnection ( URL url ) throws IOException { return client . open ( url ); } } You can then generate a request queue: Volley . newRequestQueue ( context , new OkHttpStack ()); Follow this gist for more information. Troubleshooting \u00b6 You can enable verbose logging by simplify setting VolleyLog.DEBUG to be true before issuing network requests: VolleyLog . DEBUG = true ; You can also activate verbose logging after an app has already been running by typing this command using the Android Debug Shell (ADB): adb shell setprop log.tag.Volley VERBOSE The output will show cache hits, queue additions, and network latency calls: 03 - 13 23 : 32 : 11 . 382 2565 - 2565 / com . test D / Volley : [ 1 ] MarkerLog . finish : ( 1494 ms ) [ ] http : // i . imgur . com / Nwk25LA . jpg 0 x189700ee LOW 1 03 - 13 23 : 32 : 11 . 382 2565 - 2565 / com . test D / Volley : [ 1 ] MarkerLog . finish : ( + 0 ) [ 1 ] add - to - queue 03 - 13 23 : 32 : 11 . 382 2565 - 2565 / com . test D / Volley : [ 1 ] MarkerLog . finish : ( + 85 ) [ 191 ] cache - queue - take 03 - 13 23 : 32 : 11 . 382 2565 - 2565 / com . test D / Volley : [ 1 ] MarkerLog . finish : ( + 107 ) [ 191 ] cache - hit 03 - 13 23 : 32 : 11 . 383 2565 - 2565 / com . test D / Volley : [ 1 ] MarkerLog . finish : ( + 957 ) [ 191 ] cache - hit - parsed 03 - 13 23 : 32 : 11 . 383 2565 - 2565 / com . test D / Volley : [ 1 ] MarkerLog . finish : ( + 0 ) [ 191 ] post - response 03 - 13 23 : 32 : 11 . 383 2565 - 2565 / com . test D / Volley : [ 1 ] MarkerLog . finish : ( + 345 ) [ 1 ] done Creating and Executing Async Tasks \u00b6 AsyncTask is a mechanism for executing operations in a background thread without having to manually handle thread creation or execution. AsyncTasks were designed to be used for short operations (a few seconds at the most) and you might want to use a `Service Executor for very long running tasks. This is typically used for long running tasks that cannot be done on UIThread, such as downloading network data from an API or indexing data from elsewhere on the device. An AsyncTask streamlines the following common background process: Pre - Execute code on the UI thread before starting a task (e.g show ProgressBar) Task - Run a background task on a thread given certain inputs (e.g fetch data) Updates - Display progress updates during the task (optional) Post - Execute code on UI thread following completion of the task (e.g show data) See [[Displaying Remote Images the Hard Way|Sending-and-Managing-Network-Requests#displaying-remote-images-the-hard-way]] for an example of how AsyncTask can be used for retrieving a remote image. Defining an AsyncTask \u00b6 Creating an AsyncTask is as simple as defining a class that extends from AsyncTask such as: // The types specified here are the input data type, the progress type, and the result type private class MyAsyncTask extends AsyncTask < String , Void , Bitmap > { protected void onPreExecute () { // Runs on the UI thread before doInBackground // Good for toggling visibility of a progress indicator progressBar . setVisibility ( ProgressBar . VISIBLE ); } protected Bitmap doInBackground ( String ... strings ) { // Some long-running task like downloading an image. Bitmap = downloadImageFromUrl ( strings [ 0 ]); return someBitmap ; } protected void onProgressUpdate ( Progress ... values ) { // Executes whenever publishProgress is called from doInBackground // Used to update the progress indicator progressBar . setProgress ( values [ 0 ]); } protected void onPostExecute ( Bitmap result ) { // This method is executed in the UIThread // with access to the result of the long running task imageView . setImageBitmap ( result ); // Hide the progress bar progressBar . setVisibility ( ProgressBar . INVISIBLE ); } } Executing the AsyncTask \u00b6 The worker once defined can be started anytime by creating an instance of the class and then invoke .execute to start the task: public void onCreate ( Bundle b ) { // ... // Initiate the background task downloadImageAsync (); } private void downloadImageAsync () { // Now we can execute the long-running task at any time. new MyAsyncTask (). execute ( \"http://images.com/image.jpg\" ); } Understanding the AsyncTask \u00b6 AsyncTask accepts three generic types to inform the background work being done: AsyncTask<Params, Progress, Result> Params - the type that is passed into the execute() method. Progress - the type that is used within the task to track progress. Result - the type that is returned by doInBackground(). For example AsyncTask<String, Void, Bitmap> means that the task requires a string input to execute, does not record progress and returns a Bitmap after the task is complete. AsyncTask has multiple events that can be overridden to control different behavior: onPreExecute - executed in the main thread to do things like create the initial progress bar view. doInBackground - executed in the background thread to do things like network downloads. onProgressUpdate - executed in the main thread when publishProgress is called from doInBackground. onPostExecute - executed in the main thread to do things like set image views. Limitations \u00b6 An AsyncTask is tightly bound to a particular Activity . In other words, if the Activity is destroyed or the configuration changes then the AsyncTask will not be able to update the UI on completion. As a result, for short one-off background tasks tightly coupled to updating an Activity , we should consider using an AsyncTask as outlined above. A good example is for a several second network request that will populate data into a ListView within an activity. Custom Thread Management \u00b6 Using the AsyncTask is the easiest and most convenient way to manage background tasks from within an Activity. However, in cases where tasks need to be processed in parallel with more control, or the tasks need to continue executing even when the activity leaves the screen , you'll need to create a [[background service|Starting-Background-Services]] or [[manage threaded operations|Managing-Threads-and-Custom-Services]] more manually. Displaying Images with the Picasso Library \u00b6 Displaying images is easiest using a third party library such as Picasso from Square which will download and cache remote images and abstract the complexity behind an easy to use DSL. Setup Picasso \u00b6 Adding Picasso to our app/build.gradle file: dependencies { compile 'com.squareup.picasso:picasso:2.5.2' } Note : there is a bug with the current version of Picasso that prevents large images (i.e. 10MB) from being loaded, especially with newer camera phones that have larger resolutions. If you are experiencing this issue , you may need to upgrade to the Picasso 2.6.0 snapshot. To use this snapshot version, you need to add a custom separate Maven repo first: repositories { maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" } } // add directly below repositories section dependencies { compile 'com.squareup.picasso:picasso:2.6.0-SNAPSHOT' } Loading an Image from Url \u00b6 We can then load a remote image into any ImageView with: String imageUri = \"https://i.imgur.com/tGbaZCY.jpg\" ; ImageView ivBasicImage = ( ImageView ) findViewById ( R . id . ivBasicImage ); Picasso . with ( context ). load ( imageUri ). into ( ivBasicImage ); Configuring Picasso \u00b6 We can do more sophisticated work with Picasso configuring placeholders, error handling, adjusting size of the image, and scale type with: Picasso . with ( context ). load ( imageUri ). fit (). centerCrop () . placeholder ( R . drawable . user_placeholder ) . error ( R . drawable . user_placeholder_error ) . into ( imageView ); Be sure to use fit() to resize the image before loading into the ImageView. Otherwise, you will consume extra memory, experience sluggish scrolling, or encounter out of memory issues if you render a lot of pictures. In addition to placeholder and error , there is also other configuration options such as noFade() and noPlaceholder() . Note Placeholders and error images are not resized and must be fairly small images. Open up your static placeholder or error images in your drawable folders and make sure that the dimensions of the images are relatively small (i.e < 500px width). If not, resize those static images first and save them back to the project. Resizing with Picasso \u00b6 We can resize an image with respect to the aspect ratio using resize and specifying 0 for the other dimension as outlined here : // Resize to the width specified maintaining aspect ratio Picasso . with ( this ). load ( imageUrl ). resize ( someWidth , 0 ). into ( imageView ); We can combine resizing with certain transforms to make the image appear differently. For example, we can do a center cropping with: Picasso . with ( context ). load ( url ). resize ( 50 , 50 ). centerCrop (). into ( imageView ); Transform options include centerCrop() (Crops an image inside of the bounds), centerInside() (Centers an image inside of the bounds), fit() (Attempt to resize the image to fit exactly into the target). See this post for more details . Troubleshooting \u00b6 OutOfMemoryError Loading Errors \u00b6 If an image or set of images aren't loading, make sure to check the Android monitor log in Android Studio. There's a good chance you might see an java.lang.OutOfMemoryError \"Failed to allocate a [...] byte allocation with [...] free bytes\" or a Out of memory on a 51121168-byte allocation. . This is quite common and means that you are loading one or more large images that have not been properly resized. First, you have to find which image(s) being loaded are likely causing this error. For any given Picasso call, we can fix this by one or more of the following approaches : Add an explicit width or height to the ImageView by setting layout_width=500dp in the layout file and then be sure to call fit() during your load: Picasso.with(...).load(imageUri).fit().into(...) Call .resize(width, height) during the Picasso load and explicitly set a width or height for the image such as: Picasso.with(...).load(imageUri).resize(500, 0).into(...) . By passing 0, the correct height is automatically calculated. Try removing android:adjustViewBounds=\"true\" from your ImageView if present if you are calling .fit() rather than using .resize(width, 0) Open up your static placeholder or error images and make sure their dimensions are relatively small (< 500px width). If not, resize those static images and save them back to your project. Applying these tips to all of your Picasso image loads should resolve any out of memory issues. As a fallback, you might want to open up your AndroidManifest.xml and then add android:largeHeap to your manifest: <application android:name= \".MyApplication\" ... android:largeHeap= \"true\" ... Note that this is not generally a good idea, but can be used temporarily to trigger less out of memory errors. Loading Errors \u00b6 If you experience errors loading images, you can attach a listener to the Builder object to print the stack trace. Picasso . Builder builder = new Picasso . Builder ( getApplicationContext ()); builder . listener ( new Picasso . Listener () { @Override public void onImageLoadFailed ( Picasso picasso , Uri uri , Exception exception ) { exception . printStackTrace (); }); Advanced Usages \u00b6 Showing ProgressBar with Picasso \u00b6 We can add a progress bar or otherwise handle callbacks for an image that is loading with: // Show progress bar progressBar . setVisibility ( View . VISIBLE ); // Hide progress bar on successful load Picasso . with ( this ). load ( imageUrl ) . into ( imageView , new com . squareup . picasso . Callback () { @Override public void onSuccess () { if ( progressBar != null ) { progressBar . setVisibility ( View . GONE ); } } @Override public void onError () { } }); Adjusting Image Size Dynamically \u00b6 If we wish to readjust the ImageView size after the image has been retrieved, we first define a Target object that governs how the Bitmap is handled: private Target target = new Target () { @Override public void onBitmapLoaded ( Bitmap bitmap , Picasso . LoadedFrom from ) { // Bitmap is loaded, use image here imageView . setImageBitmap ( bitmap ); } @Override public void onBitmapFailed () { // Fires if bitmap couldn't be loaded. } } Next, we can use the Target with a Picasso call with: Picasso . with ( this ). load ( \"url\" ). into ( target ); You can still use all normal Picasso options like resize , fit , etc. Note The Target object must be stored as a member field or method and cannot be an anonymous class otherwise this won't work as expected. The reason is that Picasso accepts this parameter as a weak memory reference. Because anonymous classes are eligible for garbage collection when there are no more references, the network request to fetch the image may finish after this anonymous class has already been reclaimed. See this Stack Overflow discussion for more details. In other words, you are not allowed to do Picasso.with(this).load(\"url\").into(new Target() { ... }) . Creating Staggered Grid Images with RecyclerView \u00b6 We can use this custom Target approach to create a staggered image view using RecyclerView . We first need to replace the ImageView with the DynamicHeightImageView.java that enables us to update the ImageView width and height while still preserving the aspect ratio when new images are replaced with old recycled views. We can then set the ratio before the image has loaded if we already know the height:width ratio using onBindViewHolder as shown below: public class PhotosAdapter extends RecyclerView . Adapter < PhotoViewHolder > { // implement other methods here @Override public void onBindViewHolder ( PhotoViewHolder holder , int position ) { Photo photo = mPhotos . get ( position ); // `holder.ivPhoto` should be of type `DynamicHeightImageView` // Set the height ratio before loading in image into Picasso holder . ivPhoto . setHeightRatio ((( double ) photo . getHeight ())/ photo . getWidth ()); // Load the image into the view using Picasso Picasso . with ( mContext ). load ( photo . getUrl ()). into ( holder . ivPhoto ); } } Alternatively, we can set the ratio after the bitmap has loaded if we don't know that ratio ahead of time. To avoid using an anonymous class, we will implement the Target interface on the ViewHolder class itself for RecyclerView. When the callback is fired, we will calculate and update the image aspect ratio: public class ViewHolder extends RecyclerView . ViewHolder implements View . OnClickListener , Target { DynamicHeightImageView ivImage ; // implement ViewHolder methods here @Override public void onBitmapLoaded ( Bitmap bitmap , Picasso . LoadedFrom from ) { // Calculate the image ratio of the loaded bitmap float ratio = ( float ) bitmap . getHeight () / ( float ) bitmap . getWidth (); // Set the ratio for the image ivImage . setHeightRatio ( ratio ); // Load the image into the view ivImage . setImageBitmap ( bitmap ); } } With either of these approaches the staggered grid of images should now render as expected. Other Transformations \u00b6 You can also use this third-party library for other transformations, such as blur, crop, color, and mask. dependencies { compile ' jp.wasabeef:picasso-transformations:2.1.0 ' // If you want to use the GPU Filters compile ' jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1 ' } To do a rounded corner transformation, you would do the following: Picasso . with ( mContext ). load ( R . drawable . demo ) . transform ( new RoundedCornersTransformation ( 10 , 10 )). into (( ImageView ) findViewById ( R . id . image )); Converting JSON to Models \u00b6 This guide describes the process of converting JSON data retrieved from a network request and converting that data to simple Model objects. This approach will be compatible with nearly any basic data-driven application and fits well with any ORM solution for persistence such as DBFlow or SugarORM that may be introduced. For this guide, we will be using the Yelp API as the example. The goal of this guide is to perform a Yelp API Search and then process the results into Java objects which we can then use to populate information within our application. The model in this case is Business and for our application, let's suppose we just need the name , phone , and image of the business which are all provided by the Search API . Fetching JSON Results \u00b6 The first step in retrieving any API-based model data is to execute a network request to retrieve the JSON response that represents the underlying data that we want to use. In this case, we want to execute a request to http://api.yelp.com/v2/search?term=food&location=San+Francisco and then this will return us a JSON dictionary that looks like: { \"businesses\" : [ { \"id\" : \"yelp-tropisueno\" , \"name\" : \"Tropisueno\" , \"display_phone\" : \"+1-415-908-3801\" , \"image_url\" : \"http://s3-media2.ak.yelpcdn.com/bphoto/7DIHu8a0AHhw-BffrDIxPA/ms.jpg\" , ... } ] } Sending out this API request can be done in any number of ways but first requires us to register for a Yelp developer account and use OAuth 1.0a to authenticate with our provided access_token. You might for example use the rest-client-template to manage this authentication and then construct a YelpClient that has a search method: public class YelpClient extends OAuthBaseClient { // LOTS OF TOKENS AND STUFF ... // Setting up the search endpoint public void search ( String term , String location , AsyncHttpResponseHandler handler ) { // http://api.yelp.com/v2/search?term=food&location=San+Francisco String apiUrl = getApiUrl ( \"search\" ); RequestParams params = new RequestParams (); params . put ( \"term\" , term ); params . put ( \"location\" , location ); client . get ( apiUrl , params , handler ); } } This search method will take care of executing our JSON request to the Yelp API. The API call might be executed in an Activity now when the user performs a search. Executing the API request would look like: YelpClient client = YelpClientApp . getRestClient (); client . search ( \"food\" , \"san francisco\" , new JsonHttpResponseHandler () { @Override public void onSuccess ( int code , Header [] headers , JSONObject body ) { try { JSONArray businessesJson = body . getJSONArray ( \"businesses\" ); // Here we now have the json array of businesses! Log . d ( \"DEBUG\" , businesses . toString ()); } catch ( JSONException e ) { e . printStackTrace (); } } @Override public void onFailure ( Throwable arg0 ) { Toast . makeText ( SearchActivity . this , \"FAIL\" , Toast . LENGTH_LONG ). show (); } }); We could now run the app and verify that the JSON array of business has the format we expect from the provided sample response in the documentation. Setting up our Model \u00b6 The primary resource in the Yelp API is the Business . Let's create a Java class that will act as the Business model in our application: public class Business { private String id ; private String name ; private String phone ; private String imageUrl ; public String getName () { return this . name ; } public String getPhone () { return this . phone ; } public String getImageUrl () { return this . imageUrl ; } } So far, the business model is just a series of declared fields and then getters to access those fields. Next, we need to add method that would manage the deserialization of a JSON dictionary into a populated Business object: public class Business { // ... // Decodes business json into business model object public static Business fromJson ( JSONObject jsonObject ) { Business b = new Business (); // Deserialize json into object fields try { b . id = jsonObject . getString ( \"id\" ); b . name = jsonObject . getString ( \"name\" ); b . phone = jsonObject . getString ( \"display_phone\" ); b . imageUrl = jsonObject . getString ( \"image_url\" ); } catch ( JSONException e ) { e . printStackTrace (); return null ; } // Return new object return b ; } } With this method in place, we could take a single business JSON dictionary such as: { \"id\" : \"yelp-tropisueno\" , \"name\" : \"Tropisueno\" , \"display_phone\" : \"+1-415-908-3801\" , \"image_url\" : \"http://s3-media2.ak.yelpcdn.com/bphoto/7DIHu8a0AHhw-BffrDIxPA/ms.jpg\" , ... } and successfully create a Business with Business.fromJson(json) . However, in the API response, we actually get a collection of business JSON in an array. So ideally we also would have an easy way of processing an array of businesses into an ArrayList of Business objects . That might look like: public class Business { // ...fields and getters // ...fromJson for an object // Decodes array of business json results into business model objects public static ArrayList < Business > fromJson ( JSONArray jsonArray ) { JSONObject businessJson ; ArrayList < Business > businesses = new ArrayList < Business >( jsonArray . length ()); // Process each result in json array, decode and convert to business object for ( int i = 0 ; i < jsonArray . length (); i ++) { try { businessJson = jsonArray . getJSONObject ( i ); } catch ( Exception e ) { e . printStackTrace (); continue ; } Business business = Business . fromJson ( businessJson ); if ( business != null ) { businesses . add ( business ); } } return businesses ; } } With that in place, we can now pass an JSONArray of business json data and process that easily into a nice ArrayList object for easy use in our application with Business.fromJson(myJsonArray) . Putting It All Together \u00b6 Now, we can return to our Activity where we are executing the network request and use the new Model to get easy access to our Business data. Let's tweak the network request handler in our activity: // Within an activity or fragment YelpClient client = YelpClientApp . getRestClient (); client . search ( \"food\" , \"san francisco\" , new JsonHttpResponseHandler () { @Override public void onSuccess ( int statusCode , Header [] headers , JSONObject response ) { try { JSONArray businessesJson = body . getJSONArray ( \"businesses\" ); ArrayList < Business > businesses = Business . fromJson ( businessesJson ); // Now we have an array of business objects // Might now create an adapter BusinessArrayAdapter<Business> to load the businesses into a list // You might also simply update the data in an existing array and then notify the adapter } catch ( JSONException e ) { e . printStackTrace (); } } @Override public void onFailure ( int statusCode , Header [] headers , String res , Throwable t ) { Toast . makeText ( getBaseContext (), \"FAIL\" , Toast . LENGTH_LONG ). show (); } }); This approach works very similarly for any simple API data which often is returned in collections whether it be images on Instagram, tweets on Twitter, or auctions on Ebay. Bonus: Setting Up Your Adapter \u00b6 The next step might be to create an adapter and populate these new model objects into a ListView or RecyclerView . // Within an activity ArrayList < Business > businesses ; BusinessRecyclerViewAdapter adapter ; @Override protected void onCreate ( Bundle savedInstanceState ) { // ... // Lookup the recyclerview in activity layout RecyclerView rvBusinesses = ( RecyclerView ) findViewById (...); // Initialize default business array businesses = new ArrayList < Business >(); // Create adapter passing in the sample user data adapter = new BusinessRecyclerViewAdapter ( business ); rvBusinesses . setAdapter ( adapter ); // Set layout manager to position the items rvBusinesses . setLayoutManager ( new LinearLayoutManager ( this )); } // Anywhere in your activity client . search ( \"food\" , \"san francisco\" , new JsonHttpResponseHandler () { @Override public void onSuccess ( int statusCode , Header [] headers , JSONObject response ) { try { // Get and store decoded array of business results JSONArray businessesJson = response . getJSONArray ( \"businesses\" ); businesses . clear (); // clear existing items if needed businesses . addAll ( Business . fromJson ( businessesJson )); // add new items adapter . notifyDataSetChanged (); } catch ( JSONException e ) { e . printStackTrace (); } } } Leveraging the Gson Librarys \u00b6 Overview \u00b6 Google's Gson library provides a powerful framework for converting between JSON strings and Java objects. This library helps to avoid needing to write boilerplate code to parse JSON responses yourself. It can be used with any networking library, including the Android Async HTTP Client and OkHttp . Setup \u00b6 Add the following line to your Gradle configuration: dependencies { compile 'com.google.code.gson:gson:2.8.0' } Auto-generating Model Classes \u00b6 You can auto-generate much of the model code . Generating Models Manually \u00b6 First, we need to know what type of JSON response we will be receiving. The following example uses the Rotten Tomatoes API as an example and show how to create Java objects that will be able to parse the latest box office movies . Based on the JSON response returned for this API call, let's first define how a basic movie representation should look like: class Movie { String id ; String title ; int year ; Production production ; public String getId () { return id ; } public String getTitle () { return title ; } public int getYear () { return year ; } public Production getProduction () { return production ; } }; class Production { String director ; String screenplay ; public String getDirector () { return director ; } public String getScreenplay () { return screenplay ; } }; By default, the Gson library will map the fields defined in the class to the JSON keys defined in the response. For instance, the fields id , title , and year will be mapped automatically. We do not need any special annotations unless the field names and JSON keys are different. In this specific case, the Movie class will correspond to each individual movie element and the Production class corresponds to the nested JSON object under movie's production element: movies: [ { id: \"771305050\" , title: \"Straight Outta Compton\" , production: { director: \"F. Gary Gray\" screenplay : \"Jonathan Herman\" }, year: 2015 , } , { id: \"771357161\" , title: \"Mission: Impossible Rogue Nation\" , production: { director: \"Christopher McQuarrie\" , screenplay: \"Christopher McQuarrie\" }, year: 2015 } ] Initializing collections \u00b6 Because the API returns a list of movies and not just an individual one, we also need to create a class that will map the movies key to a list of Movie objects. public class BoxOfficeMovieResponse { List < Movie > movies ; // public constructor is necessary for collections public BoxOfficeMovieResponse () { movies = new ArrayList < Movie >(); } Note below that a public constructor may be needed to initialize the list. To avoid null pointer exceptions that may result from trying to get back the movie lists, it is highly recommended to initialize these objects in the empty constructor. Parsing the response \u00b6 Assuming we have the JSON response in string form, we simply need to use the Gson library and using the fromJson method. The first parameter for this method is the JSON response in text form, and the second parameter is the class that should be mapped. We can create a static method that returns back a BoxOfficeMovieResponse class as shown below: public class BoxOfficeMovieResponse { . . . public static BoxOfficeMovieResponse parseJSON ( String response ) { Gson gson = new GsonBuilder (). create (); BoxOfficeMovieResponse boxOfficeMovieResponse = gson . fromJson ( response , BoxOfficeMovieResponse . class ); return boxOfficeMovieResponse ; } } Custom options \u00b6 The Gson Builder class enables a variety of different options that help provide more flexibility for the JSON parsing. Before we instantiate a Gson parser, it's important to know what options are available using the Builder class. GsonBuilder gsonBuilder = new GsonBuilder (); // register type adapters here, specify field naming policy, etc. Gson Gson = gsonBuilder . create (); Matching variable names to JSON keys \u00b6 For instance, if our property name matches that of the JSON key, then we do not need to annotate the attributes. However, if we have a different name we wish to use, we can simply annotate the declaration with @SerializedName : public class BoxOfficeMovieResponse { @SerializedName ( \"movies\" ) List < Movie > movieList ; Mapping Enums \u00b6 Enums are not necessarily recommended by Google as described in this section . However, if you need to use them for decoding JSON responses, you can map them from string names. Suppose we had an enum of different colors: public ColorTypes colorType ; public enum ColorTypes { RED , WHITE , BLUE }; We can annotate these attributes with @SerializedName too: @SerializedName ( \"color\" ) public ColorTypes colorType ; public enum ColorTypes { @SerializedName ( \"red\" ) RED , @SerializedName ( \"white\" ) WHITE , @SerializedName ( \"blue\" ) BLUE }; Mapping camel case field names \u00b6 There is also the option to specify how Java field names should map to JSON keys by default. For instance, the Rotten Tomatoes API response includes an mpaa_rating key in the JSON response. If we followed Java conventions and named this variable as mpaaRating , then we would have to add a SerializedName decorator to map them correctly: public class BoxOfficeMovieResponse { @SerializedName ( \"mpaa_rating\" ) String mpaaRating ; } An alternate way, especially if we have many cases similar to this one, is to set the field naming policy in the Gson library. We can specify that all field names should be converted to lower cases and separated with underscores, which would caused camel case field names to be converted from mpaaRating to mpaa_rating : GsonBuilder gsonBuilder = new GsonBuilder (); gsonBuilder . setFieldNamingPolicy ( FieldNamingPolicy . LOWER_CASE_WITH_UNDERSCORES ); Gson gson = gsonBuilder . create (); Mapping Java Date objects \u00b6 If we know what date format is used in the response by default, we also specify this date format. The Rotten Tomatoes API for instance returns a release date for theaters (i.e. \"2015-08-14\"). If we wanted to map the data directly from a String to a Date object, we could specify the date format: public String DATE_FORMAT = \"yyyy-MM-dd\" ; GsonBuilder gsonBuilder = new GsonBuilder (); gsonBuilder . setDateFormat ( DATE_FORMAT ); Gson gson = gsonBuilder . create (); Similarly, the date format could also be used for parsing standard ISO format time directly into a Date object: public String ISO_FORMAT = \"yyyy-MM-dd'T'HH:mm:ssZ\" ; GsonBuilder gsonBuilder = new GsonBuilder (); gsonBuilder . setDateFormat ( ISO_FORMAT ); Gson gson = gsonBuilder . create (); In the event that Date fields need to mapped depending on the format, you are likely to need to need to use the custom deserializer approach described in the next section. Mapping custom Java types \u00b6 By default, the Gson library is not aware of many Java types such as Timestamps. If we wish to convert these types, we can also create a custom deserializer class that will handle this work for us. Here is an example of a deserializer that will convert any JSON data that needs to be converted to a Java field declared as a Timestamp: import com.google.gson.JsonDeserializationContext ; import com.google.gson.JsonDeserializer ; import com.google.gson.JsonElement ; import com.google.gson.JsonParseException ; import java.lang.reflect.Type ; import java.sql.Timestamp ; public class TimestampDeserializer implements JsonDeserializer < Timestamp > { public Timestamp deserialize ( JsonElement json , Type typeOfT , JsonDeserializationContext context ) throws JsonParseException { return new Timestamp ( json . getAsJsonPrimitive (). getAsLong ()); } } Then we simply need to register this new type adapter and enable the Gson library to map any JSON value that needs to be converted into a Java Timestamp. GsonBuilder gsonBuilder = new GsonBuilder (); gsonBuilder . registerTypeAdapter ( Timestamp . class , new TimestampDeserializer ()); Gson Gson = gsonBuilder . create (); Mapping multiple Date formats \u00b6 If an API uses different Date formats, then a custom type adapter can be used to make parsing more robust. To use this approach, a default date policy should not be set by calling the method setDateFormat() as described in the earlier section . In addition, a custom deserializer should be registered and created: GsonBuilder gsonBuilder = new GsonBuilder (); gsonBuilder . registerTypeAdapter ( Date . class , new DateDeserializer ()); Gson Gson = gsonBuilder . create (); Leveraging the DateUtils class in the Apache Commons Language library, we can try multiple formats when attempting to parse a value to a Date field: Add this line to your Gradle file: compile 'org.apache.commons:commons-lang3:3.3.2' We can then use the parseDate() method to try multiple date formats: final class DateAdapter implements JsonDeserializer < Date > { DateAdapter () { } public static Date convertISO8601ToDate ( String date ) throws ParseException { return DateUtils . parseDate ( date , Locale . getDefault (), DateFormatUtils . ISO_DATETIME_FORMAT . getPattern (), DateFormatUtils . ISO_DATETIME_TIME_ZONE_FORMAT . getPattern ()); } private Date deserializeToDate ( JsonElement json ) { try { return convertISO8601ToDate ( json . getAsString ()); } catch ( ParseException e ) { throw new JsonSyntaxException ( json . getAsString (), e ); } } } Decoding collections of items \u00b6 Sometimes our JSON response will be a list of items. We may also have declared a Java object and want to map the JSON response to a collection of these objects. Since the Gson library needs to know what type should be used for decoding a string, we want to pass a type that defines a list of these objects. Because Java normally doesn't retain generic types because of type erasure , we need to implement a workaround. This workaround involves subclassing TypeToken with a parameterized type and creating an anonymous class: Type collectionType = new TypeToken < List < Multimedia >>(){}. getType (); GsonBuilder gsonBuilder = new GsonBuilder (); gsonBuilder . registerTypeAdapter ( collectionType , new MultimediaDeserializer ()); Gson gson = gsonBuilder . create (); If are deserializing the string directly, we can use this custom type using the fromJson() method: Type collectionType = new TypeToken < List < ImageResult >>(){}. getType (); Gson gson = gsonBuilder . create (); List < ImageResult > imageResults = gson . fromJson ( jsonObject , collectionType ); This approach essentially creates a custom type for a list of objects for the Gson library. See this Stack Overflow discussion for more details. HTTP Client Libraries \u00b6 We can use any type of HTTP client library with Gson, such as Android Async HTTP Client or Square's OkHttp library. Android Async HTTP Client \u00b6 String apiKey = \"YOUR-API-KEY-HERE\" ; AsyncHttpClient client = new AsyncHttpClient (); client . get ( \"http://api.rottentomatoes.com/api/public/v1.0/lists/movies/box_office.json?apikey=\" + apiKey , new TextHttpResponseHandler () { @Override public void onSuccess ( int statusCode , Header [] headers , String response ) { Gson gson = new GsonBuilder (). create (); Movie movie = gson . fromJson ( response , Movie . class ); } }); } Be sure to use the TextHttpResponseHandler rather than JsonHttpResponseHandler . Then you can access the response model to access the parsed data model. Retrofit 2 \u00b6 Retrofit uses OkHttp for the underlying networking library and can use the Gson library to decode API-based responses. To use it, we first need to define an interface file called RottenTomatoesService.java . To ensure that the API call will be made asynchronously, we also define a callback interface. Note that if this API call required other parameters, we should always make sure that the Callback declaration is last. public interface RottenTomatoesService { @GET ( \"/lists/movies/box_office.json\" ) public Call < BoxOfficeMovieResponse > listMovies (); } Then we can make sure to always inject the API key for each request by defining a RequestInterceptor . class. In this way, we can avoid needing to have it be defined for each API call. String apiKey = \"YOUR-API-KEY-HERE\" ; RequestInterceptor requestInterceptor = new RequestInterceptor () { @Override public void intercept ( RequestFacade request ) { request . addQueryParam ( \"apikey\" , apiKey ); } }; Next, we need to create a Retrofit instance with a Gson converter and make sure to associate the adapter to this RequestInterceptor : // Add the interceptor to OkHttpClient OkHttpClient client = new OkHttpClient (); client . interceptors (). add ( requestInterceptor ); Retrofit retrofit = new Retrofit . Builder () . client ( client ) . baseUrl ( \"http://api.rottentomatoes.com/api/public/v1.0\" ) . addConverterFactory ( GsonConverterFactory . create ()) . build (); We then simply need to create a service class that will enable us to make API calls: RottenTomatoesService service = retrofit . create ( RottenTomatoesService . class ); Call < BoxOfficeMovieResponse > call = service . listMovies (); call . enqueue ( new Callback < BoxOfficeMovieResponse >() { @Override public void onResponse ( Call < BoxOfficeMovieresponse > call , Response response ) { // handle response here BoxOfficeMovieResponse boxOfficeMovieResponse = response . body (); } @Override public void onFailure ( Throwable t ) { } }); Displaying Images with the Fresco Library \u00b6 [[Fresco|http://frescolib.org]] is a powerful library for displaying images in Android, supporting applications all the way back to GingerBread (API 9). It downloads and caches remote images in a memory efficient manner, using a special region of non-garbage collected memory on Android called ashmem . Terms \u00b6 When working with Fresco , it's helpful to be familiar with the following terms: * ImagePipeline - Responsible for getting you the image. It fetches from the network, a local file, a content provider, or a local resource. It keeps a cache of compressed images in local storage, and a second cache of decompressed images in memory. * Drawee - Drawees deal with rendering images on screen and are made up of 3 parts. * DraweeView - The view that shows the image. It extends from ImageView , but only for convenience (see the [[gotchas|Displaying-Images-with-the-Fresco-Library#gotchas]] below for more info on this). Most of the time you'll be using a SimpleDraweeView in your code. * DraweeHierarchy - Fresco provides a lot of customization. You can add a placeholderImage, a retryImage, a failureImage, a backgroundImage, etc. The hierarchy is what keeps track of all these drawables and when they should be shown. * DraweeController - This is the class responsible for dealing with the image loader. Fresco allows you to customize the image loader if you don't want to use the provided ImagePipeline . Getting Started \u00b6 First, make sure to add the Fresco dependency in your app/build.gradle file: dependencies { compile 'com.facebook.fresco:fresco:0.6.1' } Then, in your AndroidManifest.xml make you have the Internet permission if you plan to fetch any images from the network: <uses-permission android:name= \"android.permission.INTERNET\" /> Next, make sure to initialize Fresco. Fresco needs to be initialized before you call setContentView() in any Activity that uses Fresco . Fresco . initialize ( context ); And then include it in your layout: < com . facebook . drawee . view . SimpleDraweeView android : id = \"@+id/sdvImage\" android : layout_width = \"130dp\" android : layout_height = \"130dp\" fresco : placeholderImage = \"@drawable/myPlaceholderImage\" /> Note: If you want to use any Fresco defined properties, you'll need to add a custom namespace definition: xmlns:fresco=\"http://schemas.android.com/apk/res-auto\" Finally, set the actual image URI: Uri imageUri = Uri . parse ( \"https://i.imgur.com/tGbaZCY.jpg\" ); SimpleDraweeView draweeView = ( SimpleDraweeView ) findViewById ( R . id . sdvImage ); draweeView . setImageURI ( imageUri ); Customization \u00b6 That's all you need to get started using Fresco, but Fresco can do much more than that. Below you can find a majority of the properties that Fresco supports. < com . facebook . drawee . view . SimpleDraweeView android : id = \"@+id/my_image_view\" android : layout_width = \"20dp\" android : layout_height = \"20dp\" fresco : fadeDuration = \"300\" fresco : actualImageScaleType = \"focusCrop\" fresco : placeholderImage = \"@color/wait_color\" fresco : placeholderImageScaleType = \"fitCenter\" fresco : failureImage = \"@drawable/error\" fresco : failureImageScaleType = \"centerInside\" fresco : retryImage = \"@drawable/retrying\" fresco : retryImageScaleType = \"centerCrop\" fresco : progressBarImage = \"@drawable/progress_bar\" fresco : progressBarImageScaleType = \"centerInside\" fresco : progressBarAutoRotateInterval = \"1000\" fresco : backgroundImage = \"@color/blue\" fresco : overlayImage = \"@drawable/watermark\" fresco : pressedStateOverlayImage = \"@color/red\" fresco : roundAsCircle = \"false\" fresco : roundedCornerRadius = \"1dp\" fresco : roundTopLeft = \"true\" fresco : roundTopRight = \"false\" fresco : roundBottomLeft = \"false\" fresco : roundBottomRight = \"true\" fresco : roundWithOverlayColor = \"@color/corner_color\" fresco : roundingBorderWidth = \"2dp\" fresco : roundingBorderColor = \"@color/border_color\" /> Note DraweeView doesn't support specifying wrap_content for the layout_width or layout_height attributes. This is to prevent situations where your placeholder image might be a different size than your actual image, forcing Android to do another layout pass once the actual image comes in. There is only one case where DraweeView supports wrap_content and this is for the helpful viewAspectRatio property, allowing you to configure an aspect ratio. < com . facebook . drawee . view . SimpleDraweeView android : id = \"@+id/my_image_view\" android : layout_width = \"20dp\" android : layout_height = \"wrap_content\" fresco : viewAspectRatio = \"1.33\" /> You can read more about Fresco's capabilities in the [[Fresco docs|http://frescolib.org/docs/index.html]]. Getting the underlying Bitmap out of a DraweeView \u00b6 Getting the bitmap out of a SimpleDraweeView requires working with the ImagePipeline instead of the DraweeView itself. The code below shows how to get a bitmap out of the ImagePipeline , which comes in useful when you want to share an image with another user. ImagePipeline imagePipeline = Fresco . getImagePipeline (); ImageRequest imageRequest = ImageRequestBuilder . newBuilderWithSource ( imageUri ) . setRequestPriority ( Priority . HIGH ) . setLowestPermittedRequestLevel ( ImageRequest . RequestLevel . FULL_FETCH ) . build (); DataSource < CloseableReference < CloseableImage >> dataSource = imagePipeline . fetchDecodedImage ( imageRequest , mContext ); try { dataSource . subscribe ( new BaseBitmapDataSubscriber () { @Override public void onNewResultImpl ( @Nullable Bitmap bitmap ) { if ( bitmap == null ) { Log . d ( TAG , \"Bitmap data source returned success, but bitmap null.\" ); return ; } // The bitmap provided to this method is only guaranteed to be around // for the lifespan of this method. The image pipeline frees the // bitmap's memory after this method has completed. // // This is fine when passing the bitmap to a system process as // Android automatically creates a copy. // // If you need to keep the bitmap around, look into using a // BaseDataSubscriber instead of a BaseBitmapDataSubscriber. } @Override public void onFailureImpl ( DataSource dataSource ) { // No cleanup required here } }, CallerThreadExecutor . getInstance ()); } finally { if ( dataSource != null ) { dataSource . close (); } } Sharing an Image from Fresco \u00b6 Make sure to add the following permissions to your AndroidManifest.xml : <uses-permission android:name= \"android.permission.WRITE_EXTERNAL_STORAGE\" /> <uses-permission android:name= \"android.permission.READ_EXTERNAL_STORAGE\" /> Note: The permissions model has changed starting in Marshmallow. If your targetSdkVersion >= 23 and you are running on a Marshmallow (or later) device, you may need to [[enable runtime permissions|Managing-Runtime-Permissions-with-PermissionsDispatcher]]. You can also read more about the [[runtime permissions changes here|Understanding-App-Permissions#runtime-permissions]]. To share an image from Fresco, you first need to get the bitmap from the ImagePipeline . Then you can use the following code to save the bitmap to the Media image store and pass the path into a share intent. public void shareBitmap ( Bitmap bitmap ) { String path = MediaStore . Images . Media . insertImage ( mContext . getContentResolver (), bitmap , \"Image Description\" , null ); Uri bmpUri = Uri . parse ( path ); Intent shareIntent = new Intent ( Intent . ACTION_SEND ); shareIntent . putExtra ( Intent . EXTRA_STREAM , bmpUri ); shareIntent . setType ( \"image/*\" ); mContext . startActivity ( Intent . createChooser ( shareIntent , \"Share Image\" )); } See the [[guide on sharing|Sharing-Content-with-Intents]] if you want to read more about the different sharing options. Gotchas \u00b6 Make sure you review the list of [[gotchas|http://frescolib.org/docs/gotchas.html]] in the Fresco documentation. The most notable one is to avoid ImageView methods and properties when dealing with a DraweeView (even though DraweeView extends ImageView ). * Don't call ImageView methods setImageBitmap , setImageDrawable , etc as this will wipe out the DraweeHierarchy * Don't set ImageView properties like scaleType , src , etc. Instead use the DraweeView counterparts for these properties. Configuring a Parse Server \u00b6 Parse provides a cloud-based backend service to build data-driven mobile apps quickly. Facebook, which acquired the company more than 3 years ago, announced that the service would be shutting down on January 28, 2017 . An open source version enables developers to continue using Parse to build apps. While there are many alternate options to Parse , most of them lack either the functionality, documentation, or sample code to enable quick prototyping. For this reason, the open source Parse version is a good option to use with minimal deployment/configuration needed. Differences with Open Source Parse \u00b6 You can review this Wiki to understand the current development progress of this app. There are a few notable differences in the open source version: Authentication : By default, only an application ID is needed to authenticate with open source Parse. The base configuration that comes with the one-click deploy options does not require authenticating with any other types of keys. Therefore, specifying client keys on Android or iOS is not needed. Push notifications : Because of the implicit security issues with allowing push notifications to be sent through Android or iOS directly to other devices, this feature is disabled. Note that for open source Parse, you must implement pre-defined code written in JavaScript that can be called by the clients to execute, otherwise known as Parse Cloud . Single app aware : The current version only supports single app instances. There is ongoing work to make this version multi-app aware. However, if you intend to run many different apps with different datastores, you currently would need to instantiate separate instances. File upload limitations : The backend for open source is backed by MongoDB, and the default storage layer relies on Mongo's GridFS layer. The current limit is set for 20 MB but if you depend on storing large files, you should really configure the server to use Amazon's Simple Storage Service (S3). Many of the options need to be configured by tweaking your own configuration. You may wish to fork the code that helps instantiate a Parse server and change them based on your own needs. The guide below includes instructions on [[how to add push notifications|Configuring-a-Parse-Server#enabling push notifications]] and [[storing files with Parse|Configuring-a-Parse-Server#storing files with parse]]. Setting a new Parse Server \u00b6 The steps described this guide walk through most of the process of setting an open source version with Parse. There are obviously many other hosting options, but the one-click deploys made available with Heroku as discussed in this guide are the simplest. In both cases, you are likely to need a credit card attached to your account to activate. Signing up with Heroku \u00b6 Use Heroku if you have little or no experience with setting up web sites. Heroku allows you to manage changes to deploy easily by specifying a GitHub repository to use. In addition, it comes with a UI data viewer from mLab. Sign Up / Sign In at Heroku Click on the button below to create a Parse App Make sure to enter an App Name. Scroll to the bottom of the page. Make sure to change the config values. Leave PARSE_MOUNT to be /parse . It does not need to be changed. Set APP_ID for the app identifier. If you do not set one, the default is set as myAppId . You will need this info for the Client SDK setup. Set MASTER_KEY to be the master key used to read/write all data. Note : in hosted Parse, client keys are not used by default. Set SERVER_URL to be http://yourappname.herokuapp.com/parse . Assuming you have left PARSE_MOUNT to be /parse, this will enable the use of Parse Cloud to work correctly. If you intend to use Parse's Facebook authentication, set FACEBOOK_APP_ID to be the FB application ID . If you intend to setup push notifications, there are additional environment variables such as GCM_SENDER_KEY and GCM_API_KEY that will need to be configured. See [[this section|Configuring-a-Parse-Server#enabling-push-notifications]] for the required steps. Deploy the Heroku app. The app should be hosted at https://<app name>.herokuapp.com where <app name> represents your App Name that you provided (or if one was assigned to you if you left this field blank). If you ever need to change these values later, you can go to ( https://dashboard.heroku.com/apps/<app name>/settings ). Check out this guide for a more detailed set of steps for deploying Parse to Heroku. Now, we can [[test our deployment|Configuring-a-Parse-Server#testing-deployment]] to verify that the Parse deployment is working as expected! Testing Deployment \u00b6 After deployment, try to connect to the site. You should see I dream of being a website. Please star the parse-server repo on GitHub! if the site loaded correctly. If you try to connect to the /parse endpoint, you should see {error: \"unauthorized\"} . If both tests pass, the basic configuration is successful. Next, make sure you can create Parse objects. You do not need a client Key to write new data: curl -X POST -H \"X-Parse-Application-Id: myAppId\" \\ -H \"Content-Type: application/json\" \\ -d '{\"score\":1337,\"playerName\":\"Sean Plott\",\"cheatMode\":false}' \\ https://yourappname.herokuapp.com/parse/classes/GameScore Be sure to replace the values for myAppId and the server URL. If you see Cannot POST error then be sure both the X-Parse-Application-Id and the URL are correct for your application. To read data back, you will need to specify your master key as well: curl -X GET -H \"X-Parse-Application-Id: myAppId\" -H \"X-Parse-Master-Key: abc\" \\ https://yourappname.herokuapp.com/parse/classes/GameScore Be sure to replace the values for myAppId and the server URL. If these commands work as expected, then your Parse instance is now setup and ready to be used! Browsing Parse Data \u00b6 There are several options that allow you to view the data. First, you can use the mLab viewer to examine the store data. Second, you can setup the open source verson of the Parse Dashboard, which gives you a similar UI used in hosted Parse. Finally, you can use Robomongo. mLab \u00b6 The hosted Parse instance deployed uses mLab (previously called MongoLab) to store all of your data. mLab is a hosted version of MongoDB which is a document-store which uses JSON to store your data. If you are using Heroku, you can verify whether the objects were created by clicking on the MongoDB instance in the Heroku panel: Parse Dashboard \u00b6 You can also install Parse's open source dashboard locally. Download NodeJS v4.3 or higher. Make sure you have at least Parse server v2.1.3 or higher (later versions include a /parse/serverInfo that is needed). npm install -g parse-dashboard parse-dashboard --appId myAppId --masterKey myMasterKey --serverURL \"https://yourapp.herokuapp.com/parse\" Connect to your dashboard at http://localhost:4040/apps . Assuming you have specified the correct application ID, master Key, and server URL, as well as installed a Parse open source version v2.1.3 or higher, you should see the app appear correctly: Robomongo \u00b6 You can also setup Robomongo to connect to your remote mongo database hosted on Heroku to get a better data browser and dashboard for your app. To access mLab databases using Robomongo, be sure to go the MongoDB instance in the Heroku panel as shown above. Look for the following URL: mongodb://<dbuser>:<dbpassword>@ds017212.mlab.com:11218/heroku_2flx41aa . Use that to identify the login credentials: address : ds017212 . mlab . com port : 11218 db : heroku_2flx41aa user : dbuser password : dbpassword Note that the user and password provided are for a database user you configure and are not your mLab login credentials . Using that cross-platform app to easily access and modify the data for your Parse MongoDB data. Adding Support for Live Queries \u00b6 One of the newer features of Parse is that you can monitor for live changes made to objects in your database To get started, make sure you have defined the ParseObjects that you want in your NodeJS server. Make sure to define a list of all the objects by declaring it in the liveQuery and classNames listing : let api = new ParseServer ({ ..., // Make sure to define liveQuery AND classNames liveQuery : { // define your ParseObject names here classNames : [ 'Post' , 'Comment' ] } }); See this guide for more details. Parse Live Queries rely on the websocket protocol, which creates a bidirectional channel between the client and server and periodically exchange ping/pong frames to validate the connection is still alive. Websocket URLs are usually prefixed with ws:// or wss:// (secure) URLs. Heroku instances already provide websocket support, but if you are deploying to a different server (Amazon), you may need to make sure that TCP port 80 or TCP port 443 are available. Enabling Client SDK integration \u00b6 Follow the [[setup guide|Building-Data-driven-Apps-with-Parse#setup]]. Make sure you have the latest Parse-Android SDK in your app/build.gradle file. Troubleshooting Parse Server \u00b6 If you see Application Error or An error occurred in the application and your page could not be served. Please try again in a few moments. , double-check that you set a MASTER_KEY in the environment settings for that app. If you are using Heroku, download the Heroku Toolbelt app here to help view system logs. First, you must login with your Heroku login and password: bash heroku login You can then view the system logs by specifying the app name: bash heroku logs --app <app name> The logs should show the response from any types of network requests made to the site. Check the status code. 2016-02-07T08:28:14.292475+00:00 heroku[router]: at=info method=POST path=\"/parse/classes/Message\" host=parse-testing-port.herokuapp.com request_id=804c2533-ac56-4107-ad05-962d287537e9 fwd=\"101.12.34.12\" dyno=web.1 connect=1ms service=2ms status=404 bytes=179 If you are seeing Master key is invalid, you should only use master key to send push , chances are you are trying to send Push notifications without enable client push. On hosted parse there is an outstanding issue that must be resolved to start supporting it. If you see the exception Error Loading Messagescom.parse.ParseException: java.lang.IllegalArgumentException: value == null , try setting the clientKey to a blank string such as Parse.initialize(...).applicationId(...).clientKey(\"\") rather than null . Review this issue and this issue for further details. You can also use Facebook's Stetho interceptor to watch network logs with Chrome: gradle dependencies { compile 'com.facebook.stetho:stetho:1.3.0' } And add this network interceptor as well: ```java Stetho.initializeWithDefaults(this); // init Stetho before Parse Parse . initialize ( new Parse . Configuration . Builder ( this ) . addNetworkInterceptor ( new ParseStethoInterceptor ()) ``` If you wish to troubleshoot your Parse JavaScript code is to run the Parse server locally (see instructions ). You should also install node-inspector for Node.js, which allows you to use Chrome or Safari to step through the code yourself: bash npm install node-inspector node --debug index.js node_modules/.bin/node-inspector Open up http://127.0.0.1:8080/?port=5858 locally. You can use the Chrome debugging tools to set breakpoints in the JavaScript code. Point your Android client to this server:: java Parse.initialize(new Parse.Configuration.Builder(this) .applicationId(\"myAppId\") .server(\"http://192.168.3.116:1337/parse/\") // lookup your IP address of your machine Running into issues with mLab and MongoDB or MONGODB_URL ? Check the more detailed instructions here for getting the MONGODB_URL setup properly. Enabling Push Notifications \u00b6 See [[this guide|Push-Notifications-Setup-for-Parse]] for more details about how to setup both the Parse open source version and the Parse Android SDK Client. Storing Files with Parse \u00b6 You can continue to save large files to your Parse backend using ParseFile without any major changes: byte [] data = \"Working at Parse is great!\" . getBytes (); ParseFile file = new ParseFile ( \"resume.txt\" , data ); file . saveInBackground (); By default, the open source version of Parse relies on the MongoDB GridStore adapter to store large files. There is an alternate option to leverage Amazon's Simple Storage Service (S3) but still should be considered experimental. Using Amazon S3 \u00b6 If you wish to store the files in an Amazon S3 bucket, you will need to make sure to setup your Parse server to use the S3 adapter instead of the default GridStore adapter. See this Wiki for how to configure your setup. The steps basically include: Modify the Parse server to use the S3 adapter. See these changes as an example. Create an Amazon S3 bucket. Create an Amazon user with access to this S3 bucket. Generate an authorized key/secret pair to write to this bucket. Set the environment variables: Set S3_ENABLE to be 1. Set AWS_BUCKET_NAME to be the AWS bucket name. Set AWS_ACCESS_KEY and AWS_SECRET_ACCESS_KEY to be the user that has access to read/write to this S3 bucket. When testing, try to write a file and use the Amazon S3 console to see if the files were created in the right place. Building Data driven Apps with Parse \u00b6 Parse is an open-source platform that provides one of the easiest ways to get a database and RESTful API up and running. If you want to build a mobile app and don't want to code the back-end by hand, give Parse a try. Parse on Heroku \u00b6 We can deploy our own Parse data store and push notifications systems to Heroku leveraging the server open-sourced by Parse . Parse is built on top of the MongoDB database which can be added to Heroku using MongoLab. To get started setting up our own Parse backend, check out our [[configuring a Parse Server]] guide. Once the Parse server is configured, we can initialize Parse within our Android app pointing the client to our self-hosted URL. After that, the functions demonstrated in this guide work the same as they did before. Alternatives to Parse \u00b6 A comprehensive list of alternatives can be reviewed here . One of the primary alternatives is Google's Firebase , which provides a hosted solution for analytics, crash reporting, and a realtime JSON database. One major difference is that Parse still provides many powerful constructs for querying data, whereas Firebase requires you to perform this querying based on child/parent relations. See this guide for more information to porting Parse applications to Firebase. What is Parse? \u00b6 Parse is an open-source Android SDK and back-end solution that enables developers to build mobile apps with shared data quickly and without writing any back-end code or custom APIs. Parse is a Node.js application which is deployed onto a host such as Heroku (or AWS) and then creates an automatic API for user authentication and storing data to a MongoDB document store. Parse has the following features included by combining the mobile SDK and back-end service: User registration and authentication Connecting user with Facebook to create a user account. Creating, querying, modifying and deleting arbitrary data models Makes sending push notifications easier Uploading files to a server for access across clients In short, Parse makes building mobile app ideas much easier! Setup \u00b6 Setting up Parse starts with [[deploying your own Parse instance|Configuring-a-Parse-Server#setting-a-new-parse-server]] to Heroku or another app hosting provider. Open the app/build.gradle in your project and add the following dependencies: dependencies { compile ' com.parse.bolts:bolts-android:1.4.0 ' compile ' com.parse:parse-android:1.15.1 ' compile ' com.squareup.okhttp3:logging-interceptor:3.6.0 ' // for logging API calls to LogCat } Package Version Parse Bolts Parse Android SDK Parse Interceptors Select Tools -> Android -> Sync Project with Gradle Files to load the libraries through Gradle. When you sync, it will import everything automatically. You can see the imported files in the External Libraries folder. Next, we need to create an Application class and initialize Parse. Be sure to replace the initialization line below with your correct Parse keys : public class ParseApplication extends Application { @Override public void onCreate () { super . onCreate (); // Use for troubleshooting -- remove this line for production Parse . setLogLevel ( Parse . LOG_LEVEL_DEBUG ); // Use for monitoring Parse OkHttp trafic // Can be Level.BASIC, Level.HEADERS, or Level.BODY // See http://square.github.io/okhttp/3.x/logging-interceptor/ to see the options. OkHttpClient . Builder builder = new OkHttpClient . Builder (); HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor (); httpLoggingInterceptor . setLevel ( HttpLoggingInterceptor . Level . BODY ); builder . networkInterceptors (). add ( httpLoggingInterceptor ); // set applicationId, and server server based on the values in the Heroku settings. // clientKey is not needed unless explicitly configured // any network interceptors must be added with the Configuration Builder given this syntax Parse . initialize ( new Parse . Configuration . Builder ( this ) . applicationId ( \"myAppId\" ) // should correspond to APP_ID env variable . clientKey ( null ) // set explicitly unless clientKey is explicitly configured on Parse server . clientBuilder ( builder ) . server ( \"https://my-parse-app-url.herokuapp.com/parse/\" ). build ()); } } The /parse/ path needs to match the PARSE_MOUNT environment variable, which is set to this value by default. We also need to make sure to set the application instance above as the android:name for the application within the AndroidManifest.xml . This change in the manifest determines which application class is instantiated when the app is launched and also adding the application ID metadata tag: <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" package= \"com.example.parsetododemo\" android:versionCode= \"1\" android:versionName= \"1.0\" > <application android:name= \".ParseApplication\" android:icon= \"@drawable/ic_launcher\" android:label= \"@string/app_name\" android:theme= \"@style/AppTheme\" > </application> </manifest> We also need to add a few important network permissions to the AndroidManifest.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" package= \"com.example.parsetododemo\" android:versionCode= \"1\" android:versionName= \"1.0\" > <uses-permission android:name= \"android.permission.INTERNET\" /> <uses-permission android:name= \"android.permission.ACCESS_NETWORK_STATE\" /> ... </manifest> Testing Parse Client \u00b6 Assuming you have access to the Parse instance, you can test the SDK to verify that Parse is working with this application. Let's add the test code to ParseApplication as follows: public class ParseApplication extends Application { @Override public void onCreate () { super . onCreate (); // Your initialization code from above here Parse . initialize (...); // New test creation of object below ParseObject testObject = new ParseObject ( \"TestObject\" ); testObject . put ( \"foo\" , \"bar\" ); testObject . saveInBackground (); } } Run your app and a new object of class TestObject will be sent to the Parse Cloud and saved. See [[browsing Parse data|Configuring-a-Parse-Server#browsing-parse-data]] for more information about how to check this data. If needed in your application, you might also want to [[setup push notifications|Push-Notifications-Setup-for-Parse]] through Parse as well at this time. You should be setup now! Follow the remaining documentation guide to understand how to leverage Parse for your entire backend. Working with Users \u00b6 At the core of many apps, there is a notion of user accounts that lets users access their information in a secure manner. Parse has a specialized ParseUser as a part of their SDK which handles this functionality. Be sure to check out the Users docs for a complete overview. See the API docs for ParseUser for more details. User Signup \u00b6 Creating a new user account is the process of constructing a ParseUser object and calling signUpInBackground : // Create the ParseUser ParseUser user = new ParseUser (); // Set core properties user . setUsername ( \"joestevens\" ); user . setPassword ( \"secret123\" ); user . setEmail ( \"email@example.com\" ); // Set custom properties user . put ( \"phone\" , \"650-253-0000\" ); // Invoke signUpInBackground user . signUpInBackground ( new SignUpCallback () { public void done ( ParseException e ) { if ( e == null ) { // Hooray! Let them use the app now. } else { // Sign up didn't succeed. Look at the ParseException // to figure out what went wrong } } }); This call will asynchronously create a new user in your Parse App. Before it does this, it checks to make sure that both the username and email are unique. See the signup up docs for more details. User Session Login \u00b6 We can allow a user to signin by calling logInInBackground and passing the user details: ParseUser . logInInBackground ( \"joestevens\" , \"secret123\" , new LogInCallback () { public void done ( ParseUser user , ParseException e ) { if ( user != null ) { // Hooray! The user is logged in. } else { // Signup failed. Look at the ParseException to see what happened. } } }); If the credentials are correct, the ParseUser will be passed back accordingly. You can now access the cached current user for your application at any time in order to determine the session status: ParseUser currentUser = ParseUser . getCurrentUser (); if ( currentUser != null ) { // do stuff with the user } else { // show the signup or login screen } A user can be signed back out with: ParseUser . logOut (); ParseUser currentUser = ParseUser . getCurrentUser (); // this will now be null That's the basics of what you need to work with users. See more details by checking out the User official docs. You can also have a Facebook Login or Twitter Login for your users easily following the guides linked. Querying Users \u00b6 To query for users, you need to use the special user query: ParseQuery < ParseUser > query = ParseUser . getQuery (); query . whereGreaterThan ( \"age\" , 20 ); // find adults query . findInBackground ( new FindCallback < ParseUser >() { public void done ( List < ParseUser > objects , ParseException e ) { if ( e == null ) { // The query was successful. } else { // Something went wrong. } } }); See a list of query constraints here. Working With Data Objects \u00b6 Storing data on Parse is built around the ParseObject . Each ParseObject contains key-value pairs of JSON-compatible data. This data is schema-less, which means that you don't need to specify ahead of time what keys exist on each ParseObject . Each ParseObject has a class name that you can use to distinguish different sorts of data. See the API docs for ParseObject for more details. Creating Parse Models \u00b6 When using Parse, the best practice is to create models that represent our data and that subclass ParseObject to allow for Parse persistence. Suppose we wanted to create a TodoItem model: import com.parse.ParseObject ; import com.parse.ParseClassName ; @ParseClassName ( \"TodoItem\" ) public class TodoItem extends ParseObject { // Ensure that your subclass has a public default constructor } We need to make sure to register this class with Parse before we call Parse.initialize : public class ParseApplication extends Application { @Override public void onCreate () { super . onCreate (); // Register your parse models ParseObject . registerSubclass ( TodoItem . class ); // Add your initialization code here Parse . initialize ( this , \"7zBztvyG4hYQ9XghgfqYxfRcL3SMBYWAj0GUL\" , \"iZWhgJRu6yKm3iNMbTaguLcNCV3qedijWL\" ); } } Now we can add fields and constructors to our TodoItem : @ParseClassName ( \"TodoItem\" ) public class TodoItem extends ParseObject { // Ensure that your subclass has a public default constructor public TodoItem () { super (); } // Add a constructor that contains core properties public TodoItem ( String body ) { super (); setBody ( body ); } // Use getString and others to access fields public String getBody () { return getString ( \"body\" ); } // Use put to modify field values public void setBody ( String value ) { put ( \"body\" , value ); } // Get the user for this item public ParseUser getUser () { return getParseUser ( \"owner\" ); } // Associate each item with a user public void setOwner ( ParseUser user ) { put ( \"owner\" , user ); } } Notice that now our model has getBody , setBody as well as property methods for storing which user created the TodoItem. Note: When creating Parse models, avoid creating unnecessary member instance variables and instead rely directly on getString -type methods to retrieve the values of database properties. Saving or Updating Objects \u00b6 Let's suppose we wanted to save a TodoItem to the Parse database, create a new TodoItem , set the data attributes and then trigger a save with saveInBackground : TodoItem todoItem = new TodoItem ( \"Do laundry\" ); // Set the current user, assuming a user is signed in todoItem . setOwner ( ParseUser . getCurrentUser ()); // Immediately save the data asynchronously todoItem . saveInBackground (); // or for a more robust offline save // todoItem.saveEventually(); Note that there are two ways to save an object: saveInBackground which executes immediately and saveEventually which will store the update on the device and push to the server once internet access is available. See the saving objects and updating docs docs for more details. Also, check out the relational data section. Querying Objects \u00b6 Objects By Id \u00b6 If you have the objectId, you can retrieve the whole ParseObject using a ParseQuery : // Specify which class to query ParseQuery < TodoItem > query = ParseQuery . getQuery ( TodoItem . class ); // Specify the object id query . getInBackground ( \"aFuEsvjoHt\" , new GetCallback < TodoItem >() { public void done ( TodoItem item , ParseException e ) { if ( e == null ) { // Access data using the `get` methods for the object String body = item . getBody (); // Access special values that are built-in to each object String objectId = item . getObjectId (); Date updatedAt = item . getUpdatedAt (); Date createdAt = item . getCreatedAt (); // Do whatever you want with the data... Toast . makeText ( TodoItemsActivity . this , body , Toast . LENGTH_SHORT ). show (); } else { // something went wrong } } }); See retrieving objects official docs for information on refreshing stale objects and more. Objects By Query Conditions \u00b6 The general pattern is to create a ParseQuery , put conditions on it, and then retrieve a List of matching ParseObjects using the findInBackground method with a FindCallback . For example, to find all items created by a particular user: // Define the class we would like to query ParseQuery < TodoItem > query = ParseQuery . getQuery ( TodoItem . class ); // Define our query conditions query . whereEqualTo ( \"owner\" , ParseUser . getCurrentUser ()); // Execute the find asynchronously query . findInBackground ( new FindCallback < TodoItem >() { public void done ( List < TodoItem > itemList , ParseException e ) { if ( e == null ) { // Access the array of results here String firstItemId = itemList . get ( 0 ). getObjectId (); Toast . makeText ( TodoItemsActivity . this , firstItemId , Toast . LENGTH_SHORT ). show (); } else { Log . d ( \"item\" , \"Error: \" + e . getMessage ()); } } }); See a list of query constraints here and check the queries overview for explanation of compound queries and relational queries. Objects by Querying GeoLocation \u00b6 Often we might want to query objects within a certain radius of a coordinate (for example to display them on a map). With Parse, querying by GeoPoint to retrieve objects within a certain distance of a location is built in. Check the AnyWall Tutorial and the whereWithinMiles and related where conditions for more details. If you want to query this based on a map, first you can add a listener for the map camera . Next, you can determine the visible bounds of the map as shown there. Check the [[Maps Usage Guide|Google-Maps-API-v2-Usage]] for additional information on using the map. Live Queries \u00b6 One of the newer features of Parse is that you can monitor for live changes made to objects in your database To get started, make sure you have defined the ParseObjects that you want in your NodeJS server. Make sure to define a list of all the objects by declaring it in the liveQuery and classNames listing : let api = new ParseServer ({ ..., // Make sure to define liveQuery AND classNames liveQuery : { // define your ParseObject names here classNames : [ 'Post' , 'Comment' ] } }); See this guide for more details. Parse Live Queries rely on the websocket protocol, which creates a bidirectional channel between the client and server and periodically exchange ping/pong frames to validate the connection is still alive. Websocket URLs are usually prefixed with ws:// or wss:// (secure) URLs. Heroku instances already provide websocket support, but if you are deploying to a different server (Amazon), you may need to make sure that TCP port 80 or TCP port 443 are available. You will need to also setup the client SDK by adding this dependency to your app/build.gradle config: dependencies { // add Parse dependencies too compile 'com.parse:parse-livequery-android:1.0.2' } Next, instantiate the client: ParseLiveQueryClient parseLiveQueryClient = ParseLiveQueryClient . Factory . getClient (); Define the query pattern you wish to listen for events: ParseQuery < Comment > query = ParseQuery . getQuery ( Comment . class ); Create a subscription to this ParseQuery instance: SubscriptionHandling < ParseObject > subscriptionHandling = parseLiveQueryClient . subscribe ( parseQuery ) Finally, listen to the events. You can listen for Event.UPDATE , Event.DELETE , Event.ENTER , and Event.LEAVE . An enter and leave event reflects changes to an existing ParseObject that either now fulfill the criteria or no longer do so. See this guide for more information about the live queries protocol specification. subscriptionHandling . handleEvent ( SubscriptionHandling . Event . CREATE , new SubscriptionHandling . HandleEventCallback < Comment >() { @Override public void onEvent ( ParseQuery < Comment > query , Comment object ) { // HANDLING create event } }) Passing Objects Between Activities \u00b6 Often with Android development, you need to pass an object from one Activity to another. This is done using the Intent system and passing objects as extras within a bundle. Unfortunately, ParseObject does not currently implement Parcelable or Serializable. The simplest way to pass data between activities in Parse is simply to pass the object ID into the Intent: Intent i = new Intent ( this , SomeNewActivity . class ); i . putExtra ( \"todo_id\" , myTodoItem . getObjectId ()); startActivity ( i ); and then refetch the object using the object ID within the child Activity: String todoId = getIntent (). getStringExtra ( \"todo_id\" ); ParseQuery < TodoItem > query = ParseQuery . getQuery ( TodoItem . class ); // First try to find from the cache and only then go to network query . setCachePolicy ( ParseQuery . CachePolicy . CACHE_ELSE_NETWORK ); // or CACHE_ONLY // Execute the query to find the object with ID query . getInBackground ( todoId , new GetCallback < TodoItem >() { public void done ( TodoItem item , ParseException e ) { if ( e == null ) { // item was found } } } You can also use query.getFirst() instead to retrieve the item in a synchronous style. Review the different caching policies to understand how to make this fast. While we could implement parceling ourselves this is not ideal as it's pretty complex to manage the state of Parse objects. Associations \u00b6 Objects can have relationships with other objects. To model this behavior, any ParseObject can be used as a value in other ParseObject s. Internally, the Parse framework will store the referred-to object in just one place, to maintain consistency. One-to-One Relationships \u00b6 For example, each Comment in a blogging app might correspond to one Post. To create a new Post with a single Comment, you could write: @ParseClassName ( \"Post\" ) public class Post extends ParseObject { // ... } @ParseClassName ( \"Comment\" ) public class Comment extends ParseObject { // ... // Associate each comment with a user public void setOwner ( ParseUser user ) { put ( \"owner\" , user ); } // Get the user for this comment public ParseUser getOwner () { return getParseUser ( \"owner\" ); } // Associate each comment with a post public void setPost ( Post post ) { put ( \"post\" , post ); } // Get the post for this item public Post getPost () { return ( Post ) getParseObject ( \"post\" ); } } // Create the post Post post = new Post ( \"Welcome Spring!\" ); // Get the user ParseUser currentUser = ParseUser . getCurrentUser (); // Create the comment Comment comment = new Comment ( \"Get milk and eggs\" ); comment . setPost ( post ); comment . setOwner ( currentUser ); comment . saveInBackground (); By default, when fetching an object, related ParseObject s are not fetched. We can preload (eagerly fetch these) by using the include method on any ParseQuery : ParseQuery < ParseObject > query = ParseQuery . getQuery ( Comment . class ); // Include the post data with each comment query . include ( \"owner\" ); // the key which the associated object was stored // Execute query with eager-loaded owner query . findInBackground ( new FindCallback < ParseObject >() { .... } We can eagerly load nested associations as well. If you have an objectA which has a column referencing objectB and then objectB has a column referencing objectC, you can get objectB and objectC by doing: ParseQuery < ParseObject > query = ParseQuery . getQuery ( ObjectA . class ); query . include ( \"ObjectB.ObjectC\" ); // ...execute query... Otherwise, these associated objects can only be retrieved once they have been fetched separately: fetchedTodoItem . getCategory () . fetchIfNeededInBackground ( new GetCallback < Category >() { public void done ( Category object , ParseException e ) { String title = category . getTitle (); } }); Many-to-Many Relationships \u00b6 You can also model a many-to-many relation using the ParseRelation object. This works similar to ArrayList , except that you don't need to download all the ParseObject s in a relation at once. @ParseClassName ( \"Tag\" ) public class Tag extends ParseObject { // ...this is a tag to describe an item } @ParseClassName ( \"TodoItem\" ) public class TodoItem extends ParseObject { public ParseRelation < Tag > getTagsRelation () { return getRelation ( \"tags\" ); } public void addTag ( Tag tag ) { getTagsRelation (). add ( tag ); saveInBackground (); } public void removeTag ( Tag tag ) { getTagsRelation (). remove ( tag ); saveInBackground (); } } By default, the list of objects in this relation are not downloaded. You can get the list of Posts by calling findInBackground on the ParseQuery returned by getQuery. The code would look like: fetchedTodoItem . getTagsRelation (). getQuery (). findInBackground ( new FindCallback < Tag >() { void done ( List < Tag > results , ParseException e ) { if ( e == null ) { // results have all the Posts the current user liked. } else { // There was an error } } }); For more details, check out the official Relational Data guide. For more complex many-to-many relationships, check out this official join tables guide when the many-to-many requires additional metadata. Deleting Objects \u00b6 To delete an object from the Parse Cloud: todoItem . deleteInBackground (); Naturally we can also delete in an offline manner with: todoItem . deleteEventually (); Local Storage Mode \u00b6 Parse now supports a more powerful form of local data storage out of the box which can be used to store and retrieve ParseObjects, even when the network is unavailable. To enable this functionality, simply call Parse.enableLocalDatastore() before your call to initialize: // Within the Android Application where Parse is initialized Parse . enableLocalDatastore ( this ); Parse . initialize ( this , PARSE_APPLICATION_ID , PARSE_CLIENT_KEY ); Saving To Local Store \u00b6 You can store a ParseObject in the local datastore by pinning it. Pinning a ParseObject is recursive, just like saving, so any objects that are pointed to by the one you are pinning will also be pinned: TodoItem todoItem = new TodoItem ( \"Do laundry\" ); // Set the current user, assuming a user is signed in todoItem . setOwner ( ParseUser . getCurrentUser ()); // Store object offline todoItem . pinInBackground (); Querying from Local Store \u00b6 We can query from the local offline store with the fromLocalDatastore flag during any query operation: // Specify which class to query ParseQuery < TodoItem > query = ParseQuery . getQuery ( TodoItem . class ); // Flag indicates we will use offline store query . fromLocalDatastore (); // Specify the object id query . getInBackground ( \"aFuEsvjoHt\" , new GetCallback < TodoItem >() { public void done ( TodoItem item , ParseException e ) { // ... } }); Further Details \u00b6 For the full summary of how to utilize the offline mode for Parse, be sure to review the official local store guide in the Parse docs. Using the Data Browser \u00b6 Suppose we had a simple todo application with user accounts and items persisted to Parse. The next step is to setup and create our models using the Parse dashboard to manage your new app. Visit the \"Data Browser\" for the correct application and let's create our User and TodoItem objects for our app. First, remove the test code that we added previously and drop the \"TestObject\" listed in the browser to clear testing data. Next, select \"New Class\" and pick \"User\" to create the user object used to manage session authetication: Let's also add our \"Custom\" class which can represent any custom data. In this case, we will create a TodoItem class: Now, we need to add our custom columns to our class. In this case, let's add a \"body\" field to our TodoItem by selecting \"+Col\" and then selecting the type as a String and column name as \"body\": Once you've finished adding your columns to the class, you can create as many additional classes as necessary and configure their respective columns. Let's add a row of data to the class directly through the data browser: We are now ready to access these classes within our application. Troubleshooting \u00b6 Check out our [[Troubleshooting Common Issues with Parse]] guide for a detailed look at common issues encountered and related solutions. Additional Features \u00b6 Parse has many powerful features in addition to the core functionality listed above. Uploading Photos \u00b6 Parse has full support for storing images and files uploaded by an application. Photos are stored using the ParseFile construct described in more detail here . Refer to the following resources for more details: Parse Docs on File Uploads Parse Image Upload Tutorial - Tutorial on using ParseFile to upload images. Mealspotting Sample App - Detailed app sample showing how to store images associated to a record. Here's a related video . [[CodePath Camera and Gallery Guide|Accessing-the-Camera-and-Stored-Media]] - Guide on capturing photos with the camera. [[Handling Files after API 24|Sharing-Content-with-Intents#sharing-files-with-api-24-or-higher]] - Section on how to store files using FileProvider How to upload images onto Parse post - Good StackOverflow post on uploading images to Parse Geo Location \u00b6 Parse has support for geolocation services and querying: AnyWall Sample App - Sample app including how to read geolocation and use this data within your app. Push Notifications \u00b6 Parse supports push notifications made easy: [[Parse Push Messaging|Push-Messaging]] - CodePath Guide [[Parse Push|Configuring-a-Parse-Server#enabling-push-notifications]] - Super easy push notifications Facebook SDK \u00b6 For a quick way of incorporating Facebook login, check out Parse's UI Library . It leverages Parse's FacebookUtils library, which acts as a wrapper for associating ParseUser objects with Facebook users. The official step by step instructions for integrating Parse with Facebook SDK is located here . The manual process of integrating with Facebook's SDK is discussed below. You will first need to create a Facebook app and get an Application ID. If you are using open source Parse, make sure to set the FACEBOOK_APP_ID environment variable too. You will also need to get access to your keystore hash and make sure to include it: OS X: keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore | openssl sha1 -binary | openssl base64 Windows: keytool -exportcert -alias androiddebugkey -keystore %HOMEPATH% \\. android \\d ebug.keystore | openssl sha1 -binary | openssl base64 Next, you will need to include Parse's FacebookUtils library, which provides an easy-to-use wrapper to work with the Facebook SDK, as well as Facebook's SDK: dependencies { compile 'com.facebook.android:facebook-android-sdk:4.10.0' compile 'com.parse:parsefacebookutils-v4-android:1.10.4@aar' compile 'com.parse:parse-android:1.14.1' } You will then need to make sure to initialize these libraries by doing so in your MainApplication.java file: public class MainApplication extends Application { @Override public void onCreate () { super . onCreate (); Parse . initialize ( new Parse . Configuration . Builder ( this ) . applicationId ( \"myAppId\" ) . clientKey ( null ) . server ( \"https://yourappname.herokupapp.com/parse/\" ). build ()); // ParseFacebookUtils should initialize the Facebook SDK for you ParseFacebookUtils . initialize ( this ); } Make sure to reference this MainApplication in your AndroidManifest.xml file: <application android:name= \".MainApplication\" Make sure to add the FacebookActivity to your manifest file, as well as the application ID and permissions you wish to request. <activity android:name= \"com.facebook.FacebookActivity\" android:configChanges= \"keyboard|keyboardHidden|screenLayout|screenSize|orientation\" android:theme= \"@android:style/Theme.Translucent.NoTitleBar\" android:label= \"@string/app_name\" /> <meta-data android:name= \"com.facebook.sdk.ApplicationId\" android:value= \"@string/facebook_app_id\" /> <meta-data android:name= \"com.facebook.sdk.PERMISSIONS\" android:value= \"email\" /> There are two ways to support Facebook login: one is to use your own custom button/icon, or to use Facebook's LoginButton class as described in the walkthrough . If you choose to use the LoginButton class, you should not use the FacebookUtils library to trigger a login. The reason is that Facebook's LoginButton already has click handlers that will launch a login screen, so using Parse's code triggers two of these screens to appear. In addition, you have to do more work to associate a ParseUser object with a Facebook user. For this reason, it is simpler to use the custom button approach when integrating with Parse. Custom button \u00b6 For your LoginActivity.java , add this code to trigger a login. If you wish to trigger this login, you may add your own custom button: <Button android:background= \"@color/com_facebook_blue\" android:text= \"Log in with Facebook\" android:id= \"@+id/login\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> You can then attach a button click handler. button . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { ArrayList < String > permissions = new ArrayList (); permissions . add ( \"email\" ); ParseFacebookUtils . logInWithReadPermissionsInBackground ( MainActivity . this , permissions , new LogInCallback () { @Override public void done ( ParseUser user , ParseException err ) { if ( err != null ) { Log . d ( \"MyApp\" , \"Uh oh. Error occurred\" + err . toString ()); } else if ( user == null ) { Log . d ( \"MyApp\" , \"Uh oh. The user cancelled the Facebook login.\" ); } else if ( user . isNew ()) { Log . d ( \"MyApp\" , \"User signed up and logged in through Facebook!\" ); } else { Toast . makeText ( MainActivity . this , \"Logged in\" , Toast . LENGTH_SHORT ) . show (); Log . d ( \"MyApp\" , \"User logged in through Facebook!\" ); } } }); } }); You must also override the onActivityResult() to capture the result after a user signs into Facebook: @Override protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { super . onActivityResult ( requestCode , resultCode , data ); ParseFacebookUtils . onActivityResult ( requestCode , resultCode , data ); } Server Code \u00b6 Running server-side code on Parse: CloudCode Guide - Guide on how to write cloud-based code that adds error checking, validation or triggers \"server-side\" Building Data driven Apps with Firebase \u00b6 At this year's Google I/O , Google announced a number of interesting new features in Firebase. The new Firebase is said to be a \u201cUnified app platform for mobile developers\u201d adding new tools to help develop faster, improve app quality, engage users and monetize apps. For a quick intro to what the new Firebase is about, you can watch this video . The new features that are included in this new Firebase include: [[Crash Reporting|Crash-Reporting-with-Firebase]] [[Cloud Messaging|Google-Cloud-Messaging]] Realtime database and storage Analytics. Notifications. Dynamic Links. App Indexing. AdWords. Firebase Invites etc Registration \u00b6 First point to get started with Firebase, is to create an account here if you don't have one already. Setup \u00b6 Prerequisites \u00b6 Before you can begin to enjoy the new Firebase, please ensure your development machine satisfies these prerequisites: A device running Android 2.3 (Gingerbread) or newer, and Google Play services 9.0.1 or newer The Google Play services SDK from the Android SDK Manager Android Studio 1.5 or higher An Android Studio project and its package name Add Firebase to your app \u00b6 Next step is to add Firebase to your app on the Firebase console . Follow the following steps to add firebase to your app. 1. Create project \u00b6 Navigate to the console . If you don't already have an existing Firebase project, click on \" Create new project \" and follow through the steps as shown in the gif below. Else, if you have an exisiting Google project, click on \" Import Google Project \" 2. Add Firebase to your app \u00b6 Now that you've created the project, in the dashboard, click on \" Add Firebase to your Android app \". To proceed, you need at least a package name unique to your app. If you plan on using Dynamic Links, Invites, and Google Sign-In support in Auth, you have to include a debug signing key SHA1 fingerprint. To see your debug key SHA1 fingerprint, run the following command if you use Linux or Mac: keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android If you're running Windows, use this command: keytool - list - v - keystore C : \\ Documents and Settings \\ [ User Name ] \\ . android \\ debug . keystore - alias androiddebugkey - storepass android - keypass android The whole process is as shown below: 3. Configure your app \u00b6 Clicking add app will download a google-services.json file. You should move this file to your projects app module directory. Usually <project>/app directory. Click continue and follow these instructions: In your project-level build.gradle file, add the following lines ( <project>/build.gradle ): buildscript { dependencies { // Add this line classpath 'com.google.gms:google-services:3.0.0' } } In your app-level build.gradle ( <project>/<app-module>/build.gradle ): apply plugin : 'com.android.application' android { // ... } dependencies { // ... compile 'com.google.firebase:firebase-core:9.0.0' } // Add to the bottom of the file apply plugin : 'com.google.gms.google-services' Sync your gradle files with the project and you're ready to go with firebase. Attribution \u00b6 This guide was originally drafted by Segun Famisa . References and further reading \u00b6 https://firebase.google.com/docs/android/setup Handling ProgressBars \u00b6 ProgressBar is used to display the progress of an activity while the user is waiting. You can display an indeterminate progress (spinning wheel) or result-based progress. Indeterminate \u00b6 We can display an indeterminate progress bar which we show to indicate waiting: <ProgressBar android:id= \"@+id/pbLoading\" android:visibility= \"invisible\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> and then manage the visibility in the activity: // on some click or some loading we need to wait for... ProgressBar pb = ( ProgressBar ) findViewById ( R . id . pbLoading ); pb . setVisibility ( ProgressBar . VISIBLE ); // run a background job and once complete pb . setVisibility ( ProgressBar . INVISIBLE ); Typically you want to try to put the ProgressBar in the place where data is going to show (i.e. as a placeholder for an image). For a ListView, you put the ProgressBar in the header or footer , which lets you put an arbitrary layout outside of the adapter. Result-based \u00b6 ProgressBar can be used to report the progress of a long-running AsyncTask. In this case: ProgressBar can report numerical results for a task. Must specify horizontal style and result max value. Must publishProgress(value) in your AsyncTask <ProgressBar android:id= \"@+id/progressBar1\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:visibility= \"invisible\" style= \"?android:attr/progressBarStyleHorizontal\" android:max= \"100\" /> and then within the AsyncTask: public class DelayTask extends AsyncTask < Void , Integer , String > { int count = 0 ; @Override protected void onPreExecute () { pb . setVisibility ( ProgressBar . VISIBLE ); } @Override protected String doInBackground ( Void ... params ) { while ( count < 5 ) { SystemClock . sleep ( 1000 ); count ++; publishProgress ( count * 20 ); } return \"Complete\" ; } @Override protected void onProgressUpdate ( Integer ... values ) { pb . setProgress ( values [ 0 ]); } } and using this pattern any background tasks can be reflected by an on-screen progress report. Progress within ActionBar \u00b6 We can add a ProgressBar into our ActionBar or Toolbar [[using a custom ActionView|Extended-ActionBar-Guide#adding-actionview-items]]. First, let's define the progress action-view with a layout file in res/layout/action_view_progress.xml with a progress-bar: <?xml version=\"1.0\" encoding=\"utf-8\"?> <ProgressBar xmlns:android= \"http://schemas.android.com/apk/res/android\" style= \"?android:attr/progressBarStyleLarge\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:id= \"@+id/pbProgressAction\" /> Next, we can add the ActionView to our ActionBar in the res/menu/activity_main.xml as an item : <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" tools:context= \".MainActivity\" > <item android:id= \"@+id/miActionProgress\" android:title= \"Loading...\" android:visible= \"false\" android:orderInCategory= \"100\" app:showAsAction= \"always\" app:actionLayout= \"@layout/action_view_progress\" /> </menu> Note the use of android:orderInCategory to append the item at the end (other items should be less than 100), android:visible which hides the menu item and also app:actionLayout which specifies the layout for the action-view. Next, we can use the onPrepareOptionsMenu method to get a reference to the menu item and the associated view within the activity: public class MainActivity extends AppCompatActivity { // Instance of the progress action-view MenuItem miActionProgressItem ; @Override public boolean onPrepareOptionsMenu ( Menu menu ) { // Store instance of the menu item containing progress miActionProgressItem = menu . findItem ( R . id . miActionProgress ); // Extract the action-view from the menu item ProgressBar v = ( ProgressBar ) MenuItemCompat . getActionView ( miActionProgressItem ); // Return to finish return super . onPrepareOptionsMenu ( menu ); } } Finally, we can toggle the visibility of the miActionProgressItem item to show and hide the progress-bar in the action-bar: public class MainActivity extends AppCompatActivity { public void showProgressBar () { // Show progress item miActionProgressItem . setVisible ( true ); } public void hideProgressBar () { // Hide progress item miActionProgressItem . setVisible ( false ); } } and the result: Progress Within ListView Footer \u00b6 Often the user is waiting for a list of items to be populated into a ListView . In these cases, we can display the progress bar at the bottom of the ListView using a footer. First, let's define the footer xml layout in res/layout/footer_progress.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <ProgressBar style= \"?android:attr/progressBarStyleLarge\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:id= \"@+id/pbFooterLoading\" android:layout_gravity= \"center_horizontal\" android:visibility= \"gone\" /> </LinearLayout> Note the use of a LinearLayout with the layout_height set to wrap_content as this is important for the footer to be properly hidden. Next, let's setup the footer within our ListView by inflating and inserting the header within the activity: public class MainActivity extends AppCompatActivity { // ... // Store reference to the progress bar later ProgressBar progressBarFooter ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); // ... setupListWithFooter (); } // Adds footer to the list default hidden progress public void setupListWithFooter () { // Find the ListView ListView lvItems = ( ListView ) findViewById ( R . id . lvItems ); // Inflate the footer View footer = getLayoutInflater (). inflate ( R . layout . footer_progress , null ); // Find the progressbar within footer progressBarFooter = ( ProgressBar ) footer . findViewById ( R . id . pbFooterLoading ); // Add footer to ListView before setting adapter lvItems . addFooterView ( footer ); // Set the adapter AFTER adding footer lvItems . setAdapter ( myAdapter ); } } Now with the progressBarFooter progress-bar instance stored we can show and hide the footer with setVisibility : public class MainActivity extends AppCompatActivity { // Show progress public void showProgressBar () { progressBarFooter . setVisibility ( View . VISIBLE ); } // Hide progress public void hideProgressBar () { progressBarFooter . setVisibility ( View . GONE ); } } Now we can call these show and hide methods as needed to show the footer in the list: Progress within Dialog \u00b6 In certain scenarios, a simple solution for displaying a progress bar during a long-running operation is to [[display a modal progress dialog|Using-DialogFragment#displaying-a-progressdialog]] indicating a task is running: [[ |Using-DialogFragment#displaying-a-progressdialog]] Note that this modal display prevents the user from interacting with the app until the task is completed. As a result, the progress indicators above generally provide a better user experience. Third-party Libraries \u00b6 See this list of third-party progress bars for alternate styles and animations. The NumberProgressBar is featured above for example.","title":"Networking"},{"location":"networking/#sending-and-managing-network-requests","text":"Network requests are used to retrieve or modify API data or media from a server. This is a very common task in Android development especially for dynamic data-driven clients. The underlying Java class used for network connections is DefaultHTTPClient or HttpUrlConnection . Both of these are lower-level and require completely manual management of parsing the data from the input stream and executing the request asynchronously. DefaultHTTPClient, otherwise known as the Apache HTTP Client, has been deprecated since Android 6.0. The reason for two different HTTP clients is described in this blog article . A historical perspective is also discussed in this podcast . For most common cases, we are better off using a popular third-party library called android-async-http or OkHttp which will handle the entire process of sending and parsing network requests for us in a more robust and easy-to-use way.","title":"Sending and Managing Network Requests"},{"location":"networking/#permissions","text":"In order to access the internet, be sure to specify the following permissions in AndroidManifest.xml : <? xml version = \"1.0\" encoding = \"utf-8\" ?> < manifest xmlns : android = \"http://schemas.android.com/apk/res/android\" package = \"com.example.simplenetworking\" android : versionCode = \"1\" android : versionName = \"1.0\" > < uses - permission android : name = \"android.permission.INTERNET\" /> < uses - permission android : name = \"android.permission.ACCESS_NETWORK_STATE\" /> </ manifest >","title":"Permissions"},{"location":"networking/#sending-an-http-request-third-party","text":"There are at least three major third-party networking libraries you should consider using. The Android Async Http Client for making basic network calls. It is the library often used for learning Android but would not be used in a production application. OkHttp for making synchronous and asynchronous calls. Volley , a library built by Google that has fallen out of favor for OkHttp. It was one of the first networking libraries released for Android and provides a more convenient way to make networking requests than using AsyncTask . There can be a bit of a learning curve when using these libraries, so your best bet when first learning is to use Android Async Http Client or Volley. With OkHttp you also have to deal with the complexity of whether your callbacks need to be run on the main thread to update the UI, as explained in the guide. Here is a comparison of the different aspects of the libraries. Android Async Http OkHttp Volley Debugging Requires Proxy server Use LogInterceptor Use verbose mode Disk Caching Yes Yes Yes Request Queueing No No Included Remote Image Fetching Manual Requires Picasso or Glide Included Animated GIF Support No Requires Glide Requires Glide Release Cadence Infrequent Monthly Infrequent Transport Layer Apache HTTP Client OkHttp HttpUrlConnection (or OkHttp) Synchronous Calls use SyncHttpClient execute() instead of enqueue() use RequestFuture HTTP/2 No Yes Works with OkHttp Automatic Gzip processing Yes Yes No (unless using OkHttp) Author James Smith Square Google One issue with Android Async Http Client is that the library has very limited ways to observe network traces that are useful for debugging. Volley provides remote fetching images out of the box, while Android Async Http client requires more manual work and OkHttp needs the Picasso or Glide library in order to do so. Another important point is that OkHttp is not only a standalone networking library but also can be used for the underlying implementation for HttpUrlConnection . For this reason, Volley can also leverage OkHttp to support automatic Gzip and HTTP/2 processing.","title":"Sending an HTTP Request (Third Party)"},{"location":"networking/#sending-an-http-request-the-hard-way","text":"Sending an HTTP Request involves the following conceptual steps: Declare a URL Connection Open InputStream to connection Download and decode based on data type Wrap in AsyncTask and execute in background thread This would translate to the following networking code to send a simple request (with try-catch structured exceptions not shown here for brevity): // 1. Declare a URL Connection URL url = new URL ( \"http://www.google.com\" ); HttpURLConnection conn = ( HttpURLConnection ) url . openConnection (); // 2. Open InputStream to connection conn . connect (); InputStream in = conn . getInputStream (); // 3. Download and decode the string response using builder StringBuilder stringBuilder = new StringBuilder (); BufferedReader reader = new BufferedReader ( new InputStreamReader ( in )); String line ; while (( line = reader . readLine ()) != null ) { stringBuilder . append ( line ); } The fourth step requires this networking request to be executed in a background task using AsyncTasks such as shown below: // The types specified here are the input data type, the progress type, and the result type // Subclass AsyncTask to execute the network request // String == URL, Void == Progress Tracking, String == Response Received private class NetworkAsyncTask extends AsyncTask < String , Void , Bitmap > { protected String doInBackground ( String ... strings ) { // Some long-running task like downloading an image. // ... code shown above to send request and retrieve string builder return stringBuilder . toString (); } protected void onPostExecute ( String result ) { // This method is executed in the UIThread // with access to the result of the long running task // DO SOMETHING WITH STRING RESPONSE } } private void downloadResponseFromNetwork () { // 4. Wrap in AsyncTask and execute in background thread new NetworkAsyncTask (). execute ( \"http://google.com\" ); }","title":"Sending an HTTP Request (The \"Hard\" Way)"},{"location":"networking/#displaying-remote-images-the-easy-way","text":"Displaying images is easiest using a third party library such as Picasso from Square which will download and cache remote images and abstract the complexity behind an easy to use DSL: String imageUri = \"https://i.imgur.com/tGbaZCY.jpg\" ; ImageView ivBasicImage = ( ImageView ) findViewById ( R . id . ivBasicImage ); Picasso . with ( context ). load ( imageUri ). into ( ivBasicImage ); Refer to our [[Picasso Guide|Displaying-Images-with-the-Picasso-Library]] for more detailed usage information and configuration.","title":"Displaying Remote Images (The \"Easy\" Way)"},{"location":"networking/#displaying-remote-images-the-hard-way","text":"Suppose we wanted to load an image using only the built-in Android network constructs. In order to download an image from the network, convert the bytes into a bitmap and then insert the bitmap into an ImageView , you would use the following pseudo-code: // 1. Declare a URL Connection URL url = new URL ( \"https://i.imgur.com/tGbaZCY.jpg\" ); HttpURLConnection conn = ( HttpURLConnection ) url . openConnection (); // 2. Open InputStream to connection conn . connect (); InputStream in = conn . getInputStream (); // 3. Download and decode the bitmap using BitmapFactory Bitmap bitmap = BitmapFactory . decodeStream ( in ); in . close (); // 4. Insert into an ImageView ImageView imageView = ( ImageView ) findViewById ( R . id . imageView ); imageView . setImageBitmap ( bitmap ); Here's the complete code needed to construct an AsyncTask that downloads a remote image and displays the image in an ImageView using just the official Google Android SDK. See the [[Creating and Executing Async Tasks]] for more information about executing asynchronous background tasks: public class MainActivity extends Activity { private ImageView ivBasicImage ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); ivBasicImage = ( ImageView ) findViewById ( R . id . ivBasicImage ); String url = \"https://i.imgur.com/tGbaZCY.jpg\" ; // Download image from URL and display within ImageView new ImageDownloadTask ( ivBasicImage ). execute ( url ); } // Defines the background task to download and then load the image within the ImageView private class ImageDownloadTask extends AsyncTask < String , Void , Bitmap > { ImageView imageView ; public ImageDownloadTask ( ImageView imageView ) { this . imageView = imageView ; } protected Bitmap doInBackground ( String ... addresses ) { Bitmap bitmap = null ; InputStream in ; try { // 1. Declare a URL Connection URL url = new URL ( addresses [ 0 ]); HttpURLConnection conn = ( HttpURLConnection ) url . openConnection (); // 2. Open InputStream to connection conn . connect (); in = conn . getInputStream (); // 3. Download and decode the bitmap using BitmapFactory bitmap = BitmapFactory . decodeStream ( in ); } catch ( IOException e ) { e . printStackTrace (); } finally { if ( in != null ) in . close (); } return bitmap ; } // Fires after the task is completed, displaying the bitmap into the ImageView @Override protected void onPostExecute ( Bitmap result ) { // Set bitmap image for the result imageView . setImageBitmap ( result ); } } } We could even create our own basic version of a library for loading images by wrapping up this logic into an object as outlined here . Of course, doing this the \"hard\" way is not recommended. In most cases, to avoid having to manually manage caching and download management, we are better off creating your own libraries or in most cases utilizing existing third-party libraries . Note: If you use the approach above to download and display many images within a ListView, you might run into some threading issues that cause buggy loading of images. The blog post Multithreading for Performance offers a solution in which you manage the active remote downloading background tasks to ensure that too many tasks are not being spun up at once.","title":"Displaying Remote Images (The \"Hard\" Way)"},{"location":"networking/#checking-for-network-connectivity","text":"","title":"Checking for Network Connectivity"},{"location":"networking/#checking-network-is-connected","text":"First, make sure to setup the android.permission.ACCESS_NETWORK_STATE permission as shown above. To verify network availability you can then define and call this method: private Boolean isNetworkAvailable () { ConnectivityManager connectivityManager = ( ConnectivityManager ) getSystemService ( Context . CONNECTIVITY_SERVICE ); NetworkInfo activeNetworkInfo = connectivityManager . getActiveNetworkInfo (); return activeNetworkInfo != null && activeNetworkInfo . isConnectedOrConnecting (); } Note Having an active network interface doesn't guarantee that a particular networked service is available or that the internet is actually connected . Network issues, server downtime, low signal, captive portals, content filters and the like can all prevent your app from reaching a server. For instance you can't tell for sure if your app can reach Twitter until you receive a valid response from the Twitter service. See this official connectivity guide for more details.","title":"Checking Network is Connected"},{"location":"networking/#checking-the-internet-is-connected","text":"To verify if the device is actually connected to the internet, we can use the following method of pinging the Google DNS servers to check for the expected exit value: public boolean isOnline () { Runtime runtime = Runtime . getRuntime (); try { Process ipProcess = runtime . exec ( \"/system/bin/ping -c 1 8.8.8.8\" ); int exitValue = ipProcess . waitFor (); return ( exitValue == 0 ); } catch ( IOException e ) { e . printStackTrace (); } catch ( InterruptedException e ) { e . printStackTrace (); } return false ; } Note that this does not need to be run in background and does not require special privileges. See this stackoverflow post for the source of this solution.","title":"Checking the Internet is Connected"},{"location":"networking/#networking-with-the-volley-library","text":"Volley is a library that makes networking for Android apps easier and most importantly, faster. Volley Library was announced by Ficus Kirkpatrick at Google I/O '13. It was first used by the Play Store team in Play Store Application and then they released it as an open source library. Although it is part of the Android Open Source Project (AOSP), Google announced in January 2017 that Volley will move to a standalone library .","title":"Networking with the Volley Library"},{"location":"networking/#why-volley","text":"Volley can pretty much do everything with that has to do with Networking in Android. Volley automatically schedules all network requests such as fetching responses for image from web. Volley provides transparent disk and memory caching. Volley provides powerful cancellation request API for canceling a single request or you can set blocks of requests to cancel. Volley provides powerful customization abilities. Volley provides debugging and tracing tools.","title":"Why Volley?"},{"location":"networking/#setup-volley","text":"Adding Volley to our app/build.gradle file: dependencies { compile 'com.android.volley:volley:1.0.0' } And add the internet permission in AndroidManifest.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" package= \"com.example.simplenetworking\" android:versionCode= \"1\" android:versionName= \"1.0\" > <!-- Add permissions here --> <uses-permission android:name= \"android.permission.INTERNET\" /> <uses-permission android:name= \"android.permission.ACCESS_NETWORK_STATE\" /> </manifest>","title":"Setup Volley"},{"location":"networking/#how-to-use-volley","text":"Volley has two classes that you will have to deal with: RequestQueue - Requests are queued up here to be executed Request (and any extension of it) - Constructing an network request A Request object comes in three major types: JsonObjectRequest \u2014 To send and receive JSON Object from the server JsonArrayRequest \u2014 To receive JSON Array from the server ImageRequest - To receive an image from the server StringRequest \u2014 To retrieve response body as String (ideally if you intend to parse the response by yourself)","title":"How to use Volley?"},{"location":"networking/#constructing-a-requestqueue","text":"All requests in Volley are placed in a queue first and then processed, here is how you will be creating a request queue: public MainActivity extends AppCompatActivity { private RequestQueue mRequestQueue ; protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . main_screen_layout ); // ... mRequestQueue = Volley . newRequestQueue ( this ); } }","title":"Constructing a RequestQueue"},{"location":"networking/#creating-a-singleton-queue","text":"See this guide for creating a singleton to use for sending requests .","title":"Creating a Singleton Queue"},{"location":"networking/#requesting-images","text":"Volley provides the ability to make image requests and receive back as bitmap. You can use this bitmap to set directly onto an ImageView. ImageRequest imageRequest = new ImageRequest ( \"http://i.imgur.com/Nwk25LA.jpg\" , new Response . Listener < Bitmap >() { @Override public void onResponse ( Bitmap response ) { }, // Image width & height equals 0 means to use the actual size 0 , 0 , // ImageView scale type ImageView . ScaleType . FIT_XY , // 8 bytes per pixel image Bitmap . Config . ARGB_8888 , new Response . ErrorListener () { @Override public void onErrorResponse ( VolleyError error ) { error . printStackTrace (); } });","title":"Requesting images"},{"location":"networking/#accessing-json-data","text":"After this step you are ready to create your Request objects which represents a desired request to be executed. Then we add that request onto the queue. public class MainActivity extends Activity { private RequestQueue mRequestQueue ; // ... private void fetchJsonResponse () { // Pass second argument as \"null\" for GET requests JsonObjectRequest req = new JsonObjectRequest ( Request . Method . GET , \"http://ip.jsontest.com/\" , null , new Response . Listener < JSONObject >() { @Override public void onResponse ( JSONObject response ) { try { String result = \"Your IP Address is \" + response . getString ( \"ip\" ); Toast . makeText ( MainActivity . this , result , Toast . LENGTH_SHORT ). show (); } catch ( JSONException e ) { e . printStackTrace (); } } }, new Response . ErrorListener () { @Override public void onErrorResponse ( VolleyError error ) { VolleyLog . e ( \"Error: \" , error . getMessage ()); } }); /* Add your Requests to the RequestQueue to execute */ mRequestQueue . add ( req ); } } And that will execute the request to the server and respond back with the result as specified in the Response.Listener callback. For a more detailed look at Volley, check out this volley tutorial .","title":"Accessing JSON Data"},{"location":"networking/#canceling-requests","text":"You can tag a request with: StringRequest stringRequest = ...; RequestQueue mRequestQueue = ...; // Set the tag on the request. stringRequest . setTag ( TAG ); // Add the request to the RequestQueue. mRequestQueue . add ( stringRequest ); You can now cancel all requests with this tag using the cancelAll on the request queue: @Override protected void onStop () { super . onStop (); if ( mRequestQueue != null ) { mRequestQueue . cancelAll ( TAG ); } }","title":"Canceling Requests"},{"location":"networking/#using-with-okhttp","text":"Although Volley uses the HttpUrlConnection interface for networking calls, the OkHttp library instead can be used instead since it also provides an implementation of this interface: public class OkHttpStack extends HurlStack { private final OkHttpClient client ; public OkHttpStack () { this ( new OkHttpClient ()); } public OkHttpStack ( OkHttpClient client ) { if ( client == null ) { throw new NullPointerException ( \"Client must not be null.\" ); } this . client = client ; } @Override protected HttpURLConnection createConnection ( URL url ) throws IOException { return client . open ( url ); } } You can then generate a request queue: Volley . newRequestQueue ( context , new OkHttpStack ()); Follow this gist for more information.","title":"Using with OkHttp"},{"location":"networking/#troubleshooting","text":"You can enable verbose logging by simplify setting VolleyLog.DEBUG to be true before issuing network requests: VolleyLog . DEBUG = true ; You can also activate verbose logging after an app has already been running by typing this command using the Android Debug Shell (ADB): adb shell setprop log.tag.Volley VERBOSE The output will show cache hits, queue additions, and network latency calls: 03 - 13 23 : 32 : 11 . 382 2565 - 2565 / com . test D / Volley : [ 1 ] MarkerLog . finish : ( 1494 ms ) [ ] http : // i . imgur . com / Nwk25LA . jpg 0 x189700ee LOW 1 03 - 13 23 : 32 : 11 . 382 2565 - 2565 / com . test D / Volley : [ 1 ] MarkerLog . finish : ( + 0 ) [ 1 ] add - to - queue 03 - 13 23 : 32 : 11 . 382 2565 - 2565 / com . test D / Volley : [ 1 ] MarkerLog . finish : ( + 85 ) [ 191 ] cache - queue - take 03 - 13 23 : 32 : 11 . 382 2565 - 2565 / com . test D / Volley : [ 1 ] MarkerLog . finish : ( + 107 ) [ 191 ] cache - hit 03 - 13 23 : 32 : 11 . 383 2565 - 2565 / com . test D / Volley : [ 1 ] MarkerLog . finish : ( + 957 ) [ 191 ] cache - hit - parsed 03 - 13 23 : 32 : 11 . 383 2565 - 2565 / com . test D / Volley : [ 1 ] MarkerLog . finish : ( + 0 ) [ 191 ] post - response 03 - 13 23 : 32 : 11 . 383 2565 - 2565 / com . test D / Volley : [ 1 ] MarkerLog . finish : ( + 345 ) [ 1 ] done","title":"Troubleshooting"},{"location":"networking/#creating-and-executing-async-tasks","text":"AsyncTask is a mechanism for executing operations in a background thread without having to manually handle thread creation or execution. AsyncTasks were designed to be used for short operations (a few seconds at the most) and you might want to use a `Service Executor for very long running tasks. This is typically used for long running tasks that cannot be done on UIThread, such as downloading network data from an API or indexing data from elsewhere on the device. An AsyncTask streamlines the following common background process: Pre - Execute code on the UI thread before starting a task (e.g show ProgressBar) Task - Run a background task on a thread given certain inputs (e.g fetch data) Updates - Display progress updates during the task (optional) Post - Execute code on UI thread following completion of the task (e.g show data) See [[Displaying Remote Images the Hard Way|Sending-and-Managing-Network-Requests#displaying-remote-images-the-hard-way]] for an example of how AsyncTask can be used for retrieving a remote image.","title":"Creating and Executing Async Tasks"},{"location":"networking/#defining-an-asynctask","text":"Creating an AsyncTask is as simple as defining a class that extends from AsyncTask such as: // The types specified here are the input data type, the progress type, and the result type private class MyAsyncTask extends AsyncTask < String , Void , Bitmap > { protected void onPreExecute () { // Runs on the UI thread before doInBackground // Good for toggling visibility of a progress indicator progressBar . setVisibility ( ProgressBar . VISIBLE ); } protected Bitmap doInBackground ( String ... strings ) { // Some long-running task like downloading an image. Bitmap = downloadImageFromUrl ( strings [ 0 ]); return someBitmap ; } protected void onProgressUpdate ( Progress ... values ) { // Executes whenever publishProgress is called from doInBackground // Used to update the progress indicator progressBar . setProgress ( values [ 0 ]); } protected void onPostExecute ( Bitmap result ) { // This method is executed in the UIThread // with access to the result of the long running task imageView . setImageBitmap ( result ); // Hide the progress bar progressBar . setVisibility ( ProgressBar . INVISIBLE ); } }","title":"Defining an AsyncTask"},{"location":"networking/#executing-the-asynctask","text":"The worker once defined can be started anytime by creating an instance of the class and then invoke .execute to start the task: public void onCreate ( Bundle b ) { // ... // Initiate the background task downloadImageAsync (); } private void downloadImageAsync () { // Now we can execute the long-running task at any time. new MyAsyncTask (). execute ( \"http://images.com/image.jpg\" ); }","title":"Executing the AsyncTask"},{"location":"networking/#understanding-the-asynctask","text":"AsyncTask accepts three generic types to inform the background work being done: AsyncTask<Params, Progress, Result> Params - the type that is passed into the execute() method. Progress - the type that is used within the task to track progress. Result - the type that is returned by doInBackground(). For example AsyncTask<String, Void, Bitmap> means that the task requires a string input to execute, does not record progress and returns a Bitmap after the task is complete. AsyncTask has multiple events that can be overridden to control different behavior: onPreExecute - executed in the main thread to do things like create the initial progress bar view. doInBackground - executed in the background thread to do things like network downloads. onProgressUpdate - executed in the main thread when publishProgress is called from doInBackground. onPostExecute - executed in the main thread to do things like set image views.","title":"Understanding the AsyncTask"},{"location":"networking/#limitations","text":"An AsyncTask is tightly bound to a particular Activity . In other words, if the Activity is destroyed or the configuration changes then the AsyncTask will not be able to update the UI on completion. As a result, for short one-off background tasks tightly coupled to updating an Activity , we should consider using an AsyncTask as outlined above. A good example is for a several second network request that will populate data into a ListView within an activity.","title":"Limitations"},{"location":"networking/#custom-thread-management","text":"Using the AsyncTask is the easiest and most convenient way to manage background tasks from within an Activity. However, in cases where tasks need to be processed in parallel with more control, or the tasks need to continue executing even when the activity leaves the screen , you'll need to create a [[background service|Starting-Background-Services]] or [[manage threaded operations|Managing-Threads-and-Custom-Services]] more manually.","title":"Custom Thread Management"},{"location":"networking/#displaying-images-with-the-picasso-library","text":"Displaying images is easiest using a third party library such as Picasso from Square which will download and cache remote images and abstract the complexity behind an easy to use DSL.","title":"Displaying Images with the Picasso Library"},{"location":"networking/#setup-picasso","text":"Adding Picasso to our app/build.gradle file: dependencies { compile 'com.squareup.picasso:picasso:2.5.2' } Note : there is a bug with the current version of Picasso that prevents large images (i.e. 10MB) from being loaded, especially with newer camera phones that have larger resolutions. If you are experiencing this issue , you may need to upgrade to the Picasso 2.6.0 snapshot. To use this snapshot version, you need to add a custom separate Maven repo first: repositories { maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" } } // add directly below repositories section dependencies { compile 'com.squareup.picasso:picasso:2.6.0-SNAPSHOT' }","title":"Setup Picasso"},{"location":"networking/#loading-an-image-from-url","text":"We can then load a remote image into any ImageView with: String imageUri = \"https://i.imgur.com/tGbaZCY.jpg\" ; ImageView ivBasicImage = ( ImageView ) findViewById ( R . id . ivBasicImage ); Picasso . with ( context ). load ( imageUri ). into ( ivBasicImage );","title":"Loading an Image from Url"},{"location":"networking/#configuring-picasso","text":"We can do more sophisticated work with Picasso configuring placeholders, error handling, adjusting size of the image, and scale type with: Picasso . with ( context ). load ( imageUri ). fit (). centerCrop () . placeholder ( R . drawable . user_placeholder ) . error ( R . drawable . user_placeholder_error ) . into ( imageView ); Be sure to use fit() to resize the image before loading into the ImageView. Otherwise, you will consume extra memory, experience sluggish scrolling, or encounter out of memory issues if you render a lot of pictures. In addition to placeholder and error , there is also other configuration options such as noFade() and noPlaceholder() . Note Placeholders and error images are not resized and must be fairly small images. Open up your static placeholder or error images in your drawable folders and make sure that the dimensions of the images are relatively small (i.e < 500px width). If not, resize those static images first and save them back to the project.","title":"Configuring Picasso"},{"location":"networking/#resizing-with-picasso","text":"We can resize an image with respect to the aspect ratio using resize and specifying 0 for the other dimension as outlined here : // Resize to the width specified maintaining aspect ratio Picasso . with ( this ). load ( imageUrl ). resize ( someWidth , 0 ). into ( imageView ); We can combine resizing with certain transforms to make the image appear differently. For example, we can do a center cropping with: Picasso . with ( context ). load ( url ). resize ( 50 , 50 ). centerCrop (). into ( imageView ); Transform options include centerCrop() (Crops an image inside of the bounds), centerInside() (Centers an image inside of the bounds), fit() (Attempt to resize the image to fit exactly into the target). See this post for more details .","title":"Resizing with Picasso"},{"location":"networking/#troubleshooting_1","text":"","title":"Troubleshooting"},{"location":"networking/#outofmemoryerror-loading-errors","text":"If an image or set of images aren't loading, make sure to check the Android monitor log in Android Studio. There's a good chance you might see an java.lang.OutOfMemoryError \"Failed to allocate a [...] byte allocation with [...] free bytes\" or a Out of memory on a 51121168-byte allocation. . This is quite common and means that you are loading one or more large images that have not been properly resized. First, you have to find which image(s) being loaded are likely causing this error. For any given Picasso call, we can fix this by one or more of the following approaches : Add an explicit width or height to the ImageView by setting layout_width=500dp in the layout file and then be sure to call fit() during your load: Picasso.with(...).load(imageUri).fit().into(...) Call .resize(width, height) during the Picasso load and explicitly set a width or height for the image such as: Picasso.with(...).load(imageUri).resize(500, 0).into(...) . By passing 0, the correct height is automatically calculated. Try removing android:adjustViewBounds=\"true\" from your ImageView if present if you are calling .fit() rather than using .resize(width, 0) Open up your static placeholder or error images and make sure their dimensions are relatively small (< 500px width). If not, resize those static images and save them back to your project. Applying these tips to all of your Picasso image loads should resolve any out of memory issues. As a fallback, you might want to open up your AndroidManifest.xml and then add android:largeHeap to your manifest: <application android:name= \".MyApplication\" ... android:largeHeap= \"true\" ... Note that this is not generally a good idea, but can be used temporarily to trigger less out of memory errors.","title":"OutOfMemoryError Loading Errors"},{"location":"networking/#loading-errors","text":"If you experience errors loading images, you can attach a listener to the Builder object to print the stack trace. Picasso . Builder builder = new Picasso . Builder ( getApplicationContext ()); builder . listener ( new Picasso . Listener () { @Override public void onImageLoadFailed ( Picasso picasso , Uri uri , Exception exception ) { exception . printStackTrace (); });","title":"Loading Errors"},{"location":"networking/#advanced-usages","text":"","title":"Advanced Usages"},{"location":"networking/#showing-progressbar-with-picasso","text":"We can add a progress bar or otherwise handle callbacks for an image that is loading with: // Show progress bar progressBar . setVisibility ( View . VISIBLE ); // Hide progress bar on successful load Picasso . with ( this ). load ( imageUrl ) . into ( imageView , new com . squareup . picasso . Callback () { @Override public void onSuccess () { if ( progressBar != null ) { progressBar . setVisibility ( View . GONE ); } } @Override public void onError () { } });","title":"Showing ProgressBar with Picasso"},{"location":"networking/#adjusting-image-size-dynamically","text":"If we wish to readjust the ImageView size after the image has been retrieved, we first define a Target object that governs how the Bitmap is handled: private Target target = new Target () { @Override public void onBitmapLoaded ( Bitmap bitmap , Picasso . LoadedFrom from ) { // Bitmap is loaded, use image here imageView . setImageBitmap ( bitmap ); } @Override public void onBitmapFailed () { // Fires if bitmap couldn't be loaded. } } Next, we can use the Target with a Picasso call with: Picasso . with ( this ). load ( \"url\" ). into ( target ); You can still use all normal Picasso options like resize , fit , etc. Note The Target object must be stored as a member field or method and cannot be an anonymous class otherwise this won't work as expected. The reason is that Picasso accepts this parameter as a weak memory reference. Because anonymous classes are eligible for garbage collection when there are no more references, the network request to fetch the image may finish after this anonymous class has already been reclaimed. See this Stack Overflow discussion for more details. In other words, you are not allowed to do Picasso.with(this).load(\"url\").into(new Target() { ... }) .","title":"Adjusting Image Size Dynamically"},{"location":"networking/#creating-staggered-grid-images-with-recyclerview","text":"We can use this custom Target approach to create a staggered image view using RecyclerView . We first need to replace the ImageView with the DynamicHeightImageView.java that enables us to update the ImageView width and height while still preserving the aspect ratio when new images are replaced with old recycled views. We can then set the ratio before the image has loaded if we already know the height:width ratio using onBindViewHolder as shown below: public class PhotosAdapter extends RecyclerView . Adapter < PhotoViewHolder > { // implement other methods here @Override public void onBindViewHolder ( PhotoViewHolder holder , int position ) { Photo photo = mPhotos . get ( position ); // `holder.ivPhoto` should be of type `DynamicHeightImageView` // Set the height ratio before loading in image into Picasso holder . ivPhoto . setHeightRatio ((( double ) photo . getHeight ())/ photo . getWidth ()); // Load the image into the view using Picasso Picasso . with ( mContext ). load ( photo . getUrl ()). into ( holder . ivPhoto ); } } Alternatively, we can set the ratio after the bitmap has loaded if we don't know that ratio ahead of time. To avoid using an anonymous class, we will implement the Target interface on the ViewHolder class itself for RecyclerView. When the callback is fired, we will calculate and update the image aspect ratio: public class ViewHolder extends RecyclerView . ViewHolder implements View . OnClickListener , Target { DynamicHeightImageView ivImage ; // implement ViewHolder methods here @Override public void onBitmapLoaded ( Bitmap bitmap , Picasso . LoadedFrom from ) { // Calculate the image ratio of the loaded bitmap float ratio = ( float ) bitmap . getHeight () / ( float ) bitmap . getWidth (); // Set the ratio for the image ivImage . setHeightRatio ( ratio ); // Load the image into the view ivImage . setImageBitmap ( bitmap ); } } With either of these approaches the staggered grid of images should now render as expected.","title":"Creating Staggered Grid Images with RecyclerView"},{"location":"networking/#other-transformations","text":"You can also use this third-party library for other transformations, such as blur, crop, color, and mask. dependencies { compile ' jp.wasabeef:picasso-transformations:2.1.0 ' // If you want to use the GPU Filters compile ' jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1 ' } To do a rounded corner transformation, you would do the following: Picasso . with ( mContext ). load ( R . drawable . demo ) . transform ( new RoundedCornersTransformation ( 10 , 10 )). into (( ImageView ) findViewById ( R . id . image ));","title":"Other Transformations"},{"location":"networking/#converting-json-to-models","text":"This guide describes the process of converting JSON data retrieved from a network request and converting that data to simple Model objects. This approach will be compatible with nearly any basic data-driven application and fits well with any ORM solution for persistence such as DBFlow or SugarORM that may be introduced. For this guide, we will be using the Yelp API as the example. The goal of this guide is to perform a Yelp API Search and then process the results into Java objects which we can then use to populate information within our application. The model in this case is Business and for our application, let's suppose we just need the name , phone , and image of the business which are all provided by the Search API .","title":"Converting JSON to Models"},{"location":"networking/#fetching-json-results","text":"The first step in retrieving any API-based model data is to execute a network request to retrieve the JSON response that represents the underlying data that we want to use. In this case, we want to execute a request to http://api.yelp.com/v2/search?term=food&location=San+Francisco and then this will return us a JSON dictionary that looks like: { \"businesses\" : [ { \"id\" : \"yelp-tropisueno\" , \"name\" : \"Tropisueno\" , \"display_phone\" : \"+1-415-908-3801\" , \"image_url\" : \"http://s3-media2.ak.yelpcdn.com/bphoto/7DIHu8a0AHhw-BffrDIxPA/ms.jpg\" , ... } ] } Sending out this API request can be done in any number of ways but first requires us to register for a Yelp developer account and use OAuth 1.0a to authenticate with our provided access_token. You might for example use the rest-client-template to manage this authentication and then construct a YelpClient that has a search method: public class YelpClient extends OAuthBaseClient { // LOTS OF TOKENS AND STUFF ... // Setting up the search endpoint public void search ( String term , String location , AsyncHttpResponseHandler handler ) { // http://api.yelp.com/v2/search?term=food&location=San+Francisco String apiUrl = getApiUrl ( \"search\" ); RequestParams params = new RequestParams (); params . put ( \"term\" , term ); params . put ( \"location\" , location ); client . get ( apiUrl , params , handler ); } } This search method will take care of executing our JSON request to the Yelp API. The API call might be executed in an Activity now when the user performs a search. Executing the API request would look like: YelpClient client = YelpClientApp . getRestClient (); client . search ( \"food\" , \"san francisco\" , new JsonHttpResponseHandler () { @Override public void onSuccess ( int code , Header [] headers , JSONObject body ) { try { JSONArray businessesJson = body . getJSONArray ( \"businesses\" ); // Here we now have the json array of businesses! Log . d ( \"DEBUG\" , businesses . toString ()); } catch ( JSONException e ) { e . printStackTrace (); } } @Override public void onFailure ( Throwable arg0 ) { Toast . makeText ( SearchActivity . this , \"FAIL\" , Toast . LENGTH_LONG ). show (); } }); We could now run the app and verify that the JSON array of business has the format we expect from the provided sample response in the documentation.","title":"Fetching JSON Results"},{"location":"networking/#setting-up-our-model","text":"The primary resource in the Yelp API is the Business . Let's create a Java class that will act as the Business model in our application: public class Business { private String id ; private String name ; private String phone ; private String imageUrl ; public String getName () { return this . name ; } public String getPhone () { return this . phone ; } public String getImageUrl () { return this . imageUrl ; } } So far, the business model is just a series of declared fields and then getters to access those fields. Next, we need to add method that would manage the deserialization of a JSON dictionary into a populated Business object: public class Business { // ... // Decodes business json into business model object public static Business fromJson ( JSONObject jsonObject ) { Business b = new Business (); // Deserialize json into object fields try { b . id = jsonObject . getString ( \"id\" ); b . name = jsonObject . getString ( \"name\" ); b . phone = jsonObject . getString ( \"display_phone\" ); b . imageUrl = jsonObject . getString ( \"image_url\" ); } catch ( JSONException e ) { e . printStackTrace (); return null ; } // Return new object return b ; } } With this method in place, we could take a single business JSON dictionary such as: { \"id\" : \"yelp-tropisueno\" , \"name\" : \"Tropisueno\" , \"display_phone\" : \"+1-415-908-3801\" , \"image_url\" : \"http://s3-media2.ak.yelpcdn.com/bphoto/7DIHu8a0AHhw-BffrDIxPA/ms.jpg\" , ... } and successfully create a Business with Business.fromJson(json) . However, in the API response, we actually get a collection of business JSON in an array. So ideally we also would have an easy way of processing an array of businesses into an ArrayList of Business objects . That might look like: public class Business { // ...fields and getters // ...fromJson for an object // Decodes array of business json results into business model objects public static ArrayList < Business > fromJson ( JSONArray jsonArray ) { JSONObject businessJson ; ArrayList < Business > businesses = new ArrayList < Business >( jsonArray . length ()); // Process each result in json array, decode and convert to business object for ( int i = 0 ; i < jsonArray . length (); i ++) { try { businessJson = jsonArray . getJSONObject ( i ); } catch ( Exception e ) { e . printStackTrace (); continue ; } Business business = Business . fromJson ( businessJson ); if ( business != null ) { businesses . add ( business ); } } return businesses ; } } With that in place, we can now pass an JSONArray of business json data and process that easily into a nice ArrayList object for easy use in our application with Business.fromJson(myJsonArray) .","title":"Setting up our Model"},{"location":"networking/#putting-it-all-together","text":"Now, we can return to our Activity where we are executing the network request and use the new Model to get easy access to our Business data. Let's tweak the network request handler in our activity: // Within an activity or fragment YelpClient client = YelpClientApp . getRestClient (); client . search ( \"food\" , \"san francisco\" , new JsonHttpResponseHandler () { @Override public void onSuccess ( int statusCode , Header [] headers , JSONObject response ) { try { JSONArray businessesJson = body . getJSONArray ( \"businesses\" ); ArrayList < Business > businesses = Business . fromJson ( businessesJson ); // Now we have an array of business objects // Might now create an adapter BusinessArrayAdapter<Business> to load the businesses into a list // You might also simply update the data in an existing array and then notify the adapter } catch ( JSONException e ) { e . printStackTrace (); } } @Override public void onFailure ( int statusCode , Header [] headers , String res , Throwable t ) { Toast . makeText ( getBaseContext (), \"FAIL\" , Toast . LENGTH_LONG ). show (); } }); This approach works very similarly for any simple API data which often is returned in collections whether it be images on Instagram, tweets on Twitter, or auctions on Ebay.","title":"Putting It All Together"},{"location":"networking/#bonus-setting-up-your-adapter","text":"The next step might be to create an adapter and populate these new model objects into a ListView or RecyclerView . // Within an activity ArrayList < Business > businesses ; BusinessRecyclerViewAdapter adapter ; @Override protected void onCreate ( Bundle savedInstanceState ) { // ... // Lookup the recyclerview in activity layout RecyclerView rvBusinesses = ( RecyclerView ) findViewById (...); // Initialize default business array businesses = new ArrayList < Business >(); // Create adapter passing in the sample user data adapter = new BusinessRecyclerViewAdapter ( business ); rvBusinesses . setAdapter ( adapter ); // Set layout manager to position the items rvBusinesses . setLayoutManager ( new LinearLayoutManager ( this )); } // Anywhere in your activity client . search ( \"food\" , \"san francisco\" , new JsonHttpResponseHandler () { @Override public void onSuccess ( int statusCode , Header [] headers , JSONObject response ) { try { // Get and store decoded array of business results JSONArray businessesJson = response . getJSONArray ( \"businesses\" ); businesses . clear (); // clear existing items if needed businesses . addAll ( Business . fromJson ( businessesJson )); // add new items adapter . notifyDataSetChanged (); } catch ( JSONException e ) { e . printStackTrace (); } } }","title":"Bonus: Setting Up Your Adapter"},{"location":"networking/#leveraging-the-gson-librarys","text":"","title":"Leveraging the Gson Librarys"},{"location":"networking/#overview","text":"Google's Gson library provides a powerful framework for converting between JSON strings and Java objects. This library helps to avoid needing to write boilerplate code to parse JSON responses yourself. It can be used with any networking library, including the Android Async HTTP Client and OkHttp .","title":"Overview"},{"location":"networking/#setup","text":"Add the following line to your Gradle configuration: dependencies { compile 'com.google.code.gson:gson:2.8.0' }","title":"Setup"},{"location":"networking/#auto-generating-model-classes","text":"You can auto-generate much of the model code .","title":"Auto-generating Model Classes"},{"location":"networking/#generating-models-manually","text":"First, we need to know what type of JSON response we will be receiving. The following example uses the Rotten Tomatoes API as an example and show how to create Java objects that will be able to parse the latest box office movies . Based on the JSON response returned for this API call, let's first define how a basic movie representation should look like: class Movie { String id ; String title ; int year ; Production production ; public String getId () { return id ; } public String getTitle () { return title ; } public int getYear () { return year ; } public Production getProduction () { return production ; } }; class Production { String director ; String screenplay ; public String getDirector () { return director ; } public String getScreenplay () { return screenplay ; } }; By default, the Gson library will map the fields defined in the class to the JSON keys defined in the response. For instance, the fields id , title , and year will be mapped automatically. We do not need any special annotations unless the field names and JSON keys are different. In this specific case, the Movie class will correspond to each individual movie element and the Production class corresponds to the nested JSON object under movie's production element: movies: [ { id: \"771305050\" , title: \"Straight Outta Compton\" , production: { director: \"F. Gary Gray\" screenplay : \"Jonathan Herman\" }, year: 2015 , } , { id: \"771357161\" , title: \"Mission: Impossible Rogue Nation\" , production: { director: \"Christopher McQuarrie\" , screenplay: \"Christopher McQuarrie\" }, year: 2015 } ]","title":"Generating Models Manually"},{"location":"networking/#initializing-collections","text":"Because the API returns a list of movies and not just an individual one, we also need to create a class that will map the movies key to a list of Movie objects. public class BoxOfficeMovieResponse { List < Movie > movies ; // public constructor is necessary for collections public BoxOfficeMovieResponse () { movies = new ArrayList < Movie >(); } Note below that a public constructor may be needed to initialize the list. To avoid null pointer exceptions that may result from trying to get back the movie lists, it is highly recommended to initialize these objects in the empty constructor.","title":"Initializing collections"},{"location":"networking/#parsing-the-response","text":"Assuming we have the JSON response in string form, we simply need to use the Gson library and using the fromJson method. The first parameter for this method is the JSON response in text form, and the second parameter is the class that should be mapped. We can create a static method that returns back a BoxOfficeMovieResponse class as shown below: public class BoxOfficeMovieResponse { . . . public static BoxOfficeMovieResponse parseJSON ( String response ) { Gson gson = new GsonBuilder (). create (); BoxOfficeMovieResponse boxOfficeMovieResponse = gson . fromJson ( response , BoxOfficeMovieResponse . class ); return boxOfficeMovieResponse ; } }","title":"Parsing the response"},{"location":"networking/#custom-options","text":"The Gson Builder class enables a variety of different options that help provide more flexibility for the JSON parsing. Before we instantiate a Gson parser, it's important to know what options are available using the Builder class. GsonBuilder gsonBuilder = new GsonBuilder (); // register type adapters here, specify field naming policy, etc. Gson Gson = gsonBuilder . create ();","title":"Custom options"},{"location":"networking/#matching-variable-names-to-json-keys","text":"For instance, if our property name matches that of the JSON key, then we do not need to annotate the attributes. However, if we have a different name we wish to use, we can simply annotate the declaration with @SerializedName : public class BoxOfficeMovieResponse { @SerializedName ( \"movies\" ) List < Movie > movieList ;","title":"Matching variable names to JSON keys"},{"location":"networking/#mapping-enums","text":"Enums are not necessarily recommended by Google as described in this section . However, if you need to use them for decoding JSON responses, you can map them from string names. Suppose we had an enum of different colors: public ColorTypes colorType ; public enum ColorTypes { RED , WHITE , BLUE }; We can annotate these attributes with @SerializedName too: @SerializedName ( \"color\" ) public ColorTypes colorType ; public enum ColorTypes { @SerializedName ( \"red\" ) RED , @SerializedName ( \"white\" ) WHITE , @SerializedName ( \"blue\" ) BLUE };","title":"Mapping Enums"},{"location":"networking/#mapping-camel-case-field-names","text":"There is also the option to specify how Java field names should map to JSON keys by default. For instance, the Rotten Tomatoes API response includes an mpaa_rating key in the JSON response. If we followed Java conventions and named this variable as mpaaRating , then we would have to add a SerializedName decorator to map them correctly: public class BoxOfficeMovieResponse { @SerializedName ( \"mpaa_rating\" ) String mpaaRating ; } An alternate way, especially if we have many cases similar to this one, is to set the field naming policy in the Gson library. We can specify that all field names should be converted to lower cases and separated with underscores, which would caused camel case field names to be converted from mpaaRating to mpaa_rating : GsonBuilder gsonBuilder = new GsonBuilder (); gsonBuilder . setFieldNamingPolicy ( FieldNamingPolicy . LOWER_CASE_WITH_UNDERSCORES ); Gson gson = gsonBuilder . create ();","title":"Mapping camel case field names"},{"location":"networking/#mapping-java-date-objects","text":"If we know what date format is used in the response by default, we also specify this date format. The Rotten Tomatoes API for instance returns a release date for theaters (i.e. \"2015-08-14\"). If we wanted to map the data directly from a String to a Date object, we could specify the date format: public String DATE_FORMAT = \"yyyy-MM-dd\" ; GsonBuilder gsonBuilder = new GsonBuilder (); gsonBuilder . setDateFormat ( DATE_FORMAT ); Gson gson = gsonBuilder . create (); Similarly, the date format could also be used for parsing standard ISO format time directly into a Date object: public String ISO_FORMAT = \"yyyy-MM-dd'T'HH:mm:ssZ\" ; GsonBuilder gsonBuilder = new GsonBuilder (); gsonBuilder . setDateFormat ( ISO_FORMAT ); Gson gson = gsonBuilder . create (); In the event that Date fields need to mapped depending on the format, you are likely to need to need to use the custom deserializer approach described in the next section.","title":"Mapping Java Date objects"},{"location":"networking/#mapping-custom-java-types","text":"By default, the Gson library is not aware of many Java types such as Timestamps. If we wish to convert these types, we can also create a custom deserializer class that will handle this work for us. Here is an example of a deserializer that will convert any JSON data that needs to be converted to a Java field declared as a Timestamp: import com.google.gson.JsonDeserializationContext ; import com.google.gson.JsonDeserializer ; import com.google.gson.JsonElement ; import com.google.gson.JsonParseException ; import java.lang.reflect.Type ; import java.sql.Timestamp ; public class TimestampDeserializer implements JsonDeserializer < Timestamp > { public Timestamp deserialize ( JsonElement json , Type typeOfT , JsonDeserializationContext context ) throws JsonParseException { return new Timestamp ( json . getAsJsonPrimitive (). getAsLong ()); } } Then we simply need to register this new type adapter and enable the Gson library to map any JSON value that needs to be converted into a Java Timestamp. GsonBuilder gsonBuilder = new GsonBuilder (); gsonBuilder . registerTypeAdapter ( Timestamp . class , new TimestampDeserializer ()); Gson Gson = gsonBuilder . create ();","title":"Mapping custom Java types"},{"location":"networking/#mapping-multiple-date-formats","text":"If an API uses different Date formats, then a custom type adapter can be used to make parsing more robust. To use this approach, a default date policy should not be set by calling the method setDateFormat() as described in the earlier section . In addition, a custom deserializer should be registered and created: GsonBuilder gsonBuilder = new GsonBuilder (); gsonBuilder . registerTypeAdapter ( Date . class , new DateDeserializer ()); Gson Gson = gsonBuilder . create (); Leveraging the DateUtils class in the Apache Commons Language library, we can try multiple formats when attempting to parse a value to a Date field: Add this line to your Gradle file: compile 'org.apache.commons:commons-lang3:3.3.2' We can then use the parseDate() method to try multiple date formats: final class DateAdapter implements JsonDeserializer < Date > { DateAdapter () { } public static Date convertISO8601ToDate ( String date ) throws ParseException { return DateUtils . parseDate ( date , Locale . getDefault (), DateFormatUtils . ISO_DATETIME_FORMAT . getPattern (), DateFormatUtils . ISO_DATETIME_TIME_ZONE_FORMAT . getPattern ()); } private Date deserializeToDate ( JsonElement json ) { try { return convertISO8601ToDate ( json . getAsString ()); } catch ( ParseException e ) { throw new JsonSyntaxException ( json . getAsString (), e ); } } }","title":"Mapping multiple Date formats"},{"location":"networking/#decoding-collections-of-items","text":"Sometimes our JSON response will be a list of items. We may also have declared a Java object and want to map the JSON response to a collection of these objects. Since the Gson library needs to know what type should be used for decoding a string, we want to pass a type that defines a list of these objects. Because Java normally doesn't retain generic types because of type erasure , we need to implement a workaround. This workaround involves subclassing TypeToken with a parameterized type and creating an anonymous class: Type collectionType = new TypeToken < List < Multimedia >>(){}. getType (); GsonBuilder gsonBuilder = new GsonBuilder (); gsonBuilder . registerTypeAdapter ( collectionType , new MultimediaDeserializer ()); Gson gson = gsonBuilder . create (); If are deserializing the string directly, we can use this custom type using the fromJson() method: Type collectionType = new TypeToken < List < ImageResult >>(){}. getType (); Gson gson = gsonBuilder . create (); List < ImageResult > imageResults = gson . fromJson ( jsonObject , collectionType ); This approach essentially creates a custom type for a list of objects for the Gson library. See this Stack Overflow discussion for more details.","title":"Decoding collections of items"},{"location":"networking/#http-client-libraries","text":"We can use any type of HTTP client library with Gson, such as Android Async HTTP Client or Square's OkHttp library.","title":"HTTP Client Libraries"},{"location":"networking/#android-async-http-client","text":"String apiKey = \"YOUR-API-KEY-HERE\" ; AsyncHttpClient client = new AsyncHttpClient (); client . get ( \"http://api.rottentomatoes.com/api/public/v1.0/lists/movies/box_office.json?apikey=\" + apiKey , new TextHttpResponseHandler () { @Override public void onSuccess ( int statusCode , Header [] headers , String response ) { Gson gson = new GsonBuilder (). create (); Movie movie = gson . fromJson ( response , Movie . class ); } }); } Be sure to use the TextHttpResponseHandler rather than JsonHttpResponseHandler . Then you can access the response model to access the parsed data model.","title":"Android Async HTTP Client"},{"location":"networking/#retrofit-2","text":"Retrofit uses OkHttp for the underlying networking library and can use the Gson library to decode API-based responses. To use it, we first need to define an interface file called RottenTomatoesService.java . To ensure that the API call will be made asynchronously, we also define a callback interface. Note that if this API call required other parameters, we should always make sure that the Callback declaration is last. public interface RottenTomatoesService { @GET ( \"/lists/movies/box_office.json\" ) public Call < BoxOfficeMovieResponse > listMovies (); } Then we can make sure to always inject the API key for each request by defining a RequestInterceptor . class. In this way, we can avoid needing to have it be defined for each API call. String apiKey = \"YOUR-API-KEY-HERE\" ; RequestInterceptor requestInterceptor = new RequestInterceptor () { @Override public void intercept ( RequestFacade request ) { request . addQueryParam ( \"apikey\" , apiKey ); } }; Next, we need to create a Retrofit instance with a Gson converter and make sure to associate the adapter to this RequestInterceptor : // Add the interceptor to OkHttpClient OkHttpClient client = new OkHttpClient (); client . interceptors (). add ( requestInterceptor ); Retrofit retrofit = new Retrofit . Builder () . client ( client ) . baseUrl ( \"http://api.rottentomatoes.com/api/public/v1.0\" ) . addConverterFactory ( GsonConverterFactory . create ()) . build (); We then simply need to create a service class that will enable us to make API calls: RottenTomatoesService service = retrofit . create ( RottenTomatoesService . class ); Call < BoxOfficeMovieResponse > call = service . listMovies (); call . enqueue ( new Callback < BoxOfficeMovieResponse >() { @Override public void onResponse ( Call < BoxOfficeMovieresponse > call , Response response ) { // handle response here BoxOfficeMovieResponse boxOfficeMovieResponse = response . body (); } @Override public void onFailure ( Throwable t ) { } });","title":"Retrofit 2"},{"location":"networking/#displaying-images-with-the-fresco-library","text":"[[Fresco|http://frescolib.org]] is a powerful library for displaying images in Android, supporting applications all the way back to GingerBread (API 9). It downloads and caches remote images in a memory efficient manner, using a special region of non-garbage collected memory on Android called ashmem .","title":"Displaying Images with the Fresco Library"},{"location":"networking/#terms","text":"When working with Fresco , it's helpful to be familiar with the following terms: * ImagePipeline - Responsible for getting you the image. It fetches from the network, a local file, a content provider, or a local resource. It keeps a cache of compressed images in local storage, and a second cache of decompressed images in memory. * Drawee - Drawees deal with rendering images on screen and are made up of 3 parts. * DraweeView - The view that shows the image. It extends from ImageView , but only for convenience (see the [[gotchas|Displaying-Images-with-the-Fresco-Library#gotchas]] below for more info on this). Most of the time you'll be using a SimpleDraweeView in your code. * DraweeHierarchy - Fresco provides a lot of customization. You can add a placeholderImage, a retryImage, a failureImage, a backgroundImage, etc. The hierarchy is what keeps track of all these drawables and when they should be shown. * DraweeController - This is the class responsible for dealing with the image loader. Fresco allows you to customize the image loader if you don't want to use the provided ImagePipeline .","title":"Terms"},{"location":"networking/#getting-started","text":"First, make sure to add the Fresco dependency in your app/build.gradle file: dependencies { compile 'com.facebook.fresco:fresco:0.6.1' } Then, in your AndroidManifest.xml make you have the Internet permission if you plan to fetch any images from the network: <uses-permission android:name= \"android.permission.INTERNET\" /> Next, make sure to initialize Fresco. Fresco needs to be initialized before you call setContentView() in any Activity that uses Fresco . Fresco . initialize ( context ); And then include it in your layout: < com . facebook . drawee . view . SimpleDraweeView android : id = \"@+id/sdvImage\" android : layout_width = \"130dp\" android : layout_height = \"130dp\" fresco : placeholderImage = \"@drawable/myPlaceholderImage\" /> Note: If you want to use any Fresco defined properties, you'll need to add a custom namespace definition: xmlns:fresco=\"http://schemas.android.com/apk/res-auto\" Finally, set the actual image URI: Uri imageUri = Uri . parse ( \"https://i.imgur.com/tGbaZCY.jpg\" ); SimpleDraweeView draweeView = ( SimpleDraweeView ) findViewById ( R . id . sdvImage ); draweeView . setImageURI ( imageUri );","title":"Getting Started"},{"location":"networking/#customization","text":"That's all you need to get started using Fresco, but Fresco can do much more than that. Below you can find a majority of the properties that Fresco supports. < com . facebook . drawee . view . SimpleDraweeView android : id = \"@+id/my_image_view\" android : layout_width = \"20dp\" android : layout_height = \"20dp\" fresco : fadeDuration = \"300\" fresco : actualImageScaleType = \"focusCrop\" fresco : placeholderImage = \"@color/wait_color\" fresco : placeholderImageScaleType = \"fitCenter\" fresco : failureImage = \"@drawable/error\" fresco : failureImageScaleType = \"centerInside\" fresco : retryImage = \"@drawable/retrying\" fresco : retryImageScaleType = \"centerCrop\" fresco : progressBarImage = \"@drawable/progress_bar\" fresco : progressBarImageScaleType = \"centerInside\" fresco : progressBarAutoRotateInterval = \"1000\" fresco : backgroundImage = \"@color/blue\" fresco : overlayImage = \"@drawable/watermark\" fresco : pressedStateOverlayImage = \"@color/red\" fresco : roundAsCircle = \"false\" fresco : roundedCornerRadius = \"1dp\" fresco : roundTopLeft = \"true\" fresco : roundTopRight = \"false\" fresco : roundBottomLeft = \"false\" fresco : roundBottomRight = \"true\" fresco : roundWithOverlayColor = \"@color/corner_color\" fresco : roundingBorderWidth = \"2dp\" fresco : roundingBorderColor = \"@color/border_color\" /> Note DraweeView doesn't support specifying wrap_content for the layout_width or layout_height attributes. This is to prevent situations where your placeholder image might be a different size than your actual image, forcing Android to do another layout pass once the actual image comes in. There is only one case where DraweeView supports wrap_content and this is for the helpful viewAspectRatio property, allowing you to configure an aspect ratio. < com . facebook . drawee . view . SimpleDraweeView android : id = \"@+id/my_image_view\" android : layout_width = \"20dp\" android : layout_height = \"wrap_content\" fresco : viewAspectRatio = \"1.33\" /> You can read more about Fresco's capabilities in the [[Fresco docs|http://frescolib.org/docs/index.html]].","title":"Customization"},{"location":"networking/#getting-the-underlying-bitmap-out-of-a-draweeview","text":"Getting the bitmap out of a SimpleDraweeView requires working with the ImagePipeline instead of the DraweeView itself. The code below shows how to get a bitmap out of the ImagePipeline , which comes in useful when you want to share an image with another user. ImagePipeline imagePipeline = Fresco . getImagePipeline (); ImageRequest imageRequest = ImageRequestBuilder . newBuilderWithSource ( imageUri ) . setRequestPriority ( Priority . HIGH ) . setLowestPermittedRequestLevel ( ImageRequest . RequestLevel . FULL_FETCH ) . build (); DataSource < CloseableReference < CloseableImage >> dataSource = imagePipeline . fetchDecodedImage ( imageRequest , mContext ); try { dataSource . subscribe ( new BaseBitmapDataSubscriber () { @Override public void onNewResultImpl ( @Nullable Bitmap bitmap ) { if ( bitmap == null ) { Log . d ( TAG , \"Bitmap data source returned success, but bitmap null.\" ); return ; } // The bitmap provided to this method is only guaranteed to be around // for the lifespan of this method. The image pipeline frees the // bitmap's memory after this method has completed. // // This is fine when passing the bitmap to a system process as // Android automatically creates a copy. // // If you need to keep the bitmap around, look into using a // BaseDataSubscriber instead of a BaseBitmapDataSubscriber. } @Override public void onFailureImpl ( DataSource dataSource ) { // No cleanup required here } }, CallerThreadExecutor . getInstance ()); } finally { if ( dataSource != null ) { dataSource . close (); } }","title":"Getting the underlying Bitmap out of a DraweeView"},{"location":"networking/#sharing-an-image-from-fresco","text":"Make sure to add the following permissions to your AndroidManifest.xml : <uses-permission android:name= \"android.permission.WRITE_EXTERNAL_STORAGE\" /> <uses-permission android:name= \"android.permission.READ_EXTERNAL_STORAGE\" /> Note: The permissions model has changed starting in Marshmallow. If your targetSdkVersion >= 23 and you are running on a Marshmallow (or later) device, you may need to [[enable runtime permissions|Managing-Runtime-Permissions-with-PermissionsDispatcher]]. You can also read more about the [[runtime permissions changes here|Understanding-App-Permissions#runtime-permissions]]. To share an image from Fresco, you first need to get the bitmap from the ImagePipeline . Then you can use the following code to save the bitmap to the Media image store and pass the path into a share intent. public void shareBitmap ( Bitmap bitmap ) { String path = MediaStore . Images . Media . insertImage ( mContext . getContentResolver (), bitmap , \"Image Description\" , null ); Uri bmpUri = Uri . parse ( path ); Intent shareIntent = new Intent ( Intent . ACTION_SEND ); shareIntent . putExtra ( Intent . EXTRA_STREAM , bmpUri ); shareIntent . setType ( \"image/*\" ); mContext . startActivity ( Intent . createChooser ( shareIntent , \"Share Image\" )); } See the [[guide on sharing|Sharing-Content-with-Intents]] if you want to read more about the different sharing options.","title":"Sharing an Image from Fresco"},{"location":"networking/#gotchas","text":"Make sure you review the list of [[gotchas|http://frescolib.org/docs/gotchas.html]] in the Fresco documentation. The most notable one is to avoid ImageView methods and properties when dealing with a DraweeView (even though DraweeView extends ImageView ). * Don't call ImageView methods setImageBitmap , setImageDrawable , etc as this will wipe out the DraweeHierarchy * Don't set ImageView properties like scaleType , src , etc. Instead use the DraweeView counterparts for these properties.","title":"Gotchas"},{"location":"networking/#configuring-a-parse-server","text":"Parse provides a cloud-based backend service to build data-driven mobile apps quickly. Facebook, which acquired the company more than 3 years ago, announced that the service would be shutting down on January 28, 2017 . An open source version enables developers to continue using Parse to build apps. While there are many alternate options to Parse , most of them lack either the functionality, documentation, or sample code to enable quick prototyping. For this reason, the open source Parse version is a good option to use with minimal deployment/configuration needed.","title":"Configuring a Parse Server"},{"location":"networking/#differences-with-open-source-parse","text":"You can review this Wiki to understand the current development progress of this app. There are a few notable differences in the open source version: Authentication : By default, only an application ID is needed to authenticate with open source Parse. The base configuration that comes with the one-click deploy options does not require authenticating with any other types of keys. Therefore, specifying client keys on Android or iOS is not needed. Push notifications : Because of the implicit security issues with allowing push notifications to be sent through Android or iOS directly to other devices, this feature is disabled. Note that for open source Parse, you must implement pre-defined code written in JavaScript that can be called by the clients to execute, otherwise known as Parse Cloud . Single app aware : The current version only supports single app instances. There is ongoing work to make this version multi-app aware. However, if you intend to run many different apps with different datastores, you currently would need to instantiate separate instances. File upload limitations : The backend for open source is backed by MongoDB, and the default storage layer relies on Mongo's GridFS layer. The current limit is set for 20 MB but if you depend on storing large files, you should really configure the server to use Amazon's Simple Storage Service (S3). Many of the options need to be configured by tweaking your own configuration. You may wish to fork the code that helps instantiate a Parse server and change them based on your own needs. The guide below includes instructions on [[how to add push notifications|Configuring-a-Parse-Server#enabling push notifications]] and [[storing files with Parse|Configuring-a-Parse-Server#storing files with parse]].","title":"Differences with Open Source Parse"},{"location":"networking/#setting-a-new-parse-server","text":"The steps described this guide walk through most of the process of setting an open source version with Parse. There are obviously many other hosting options, but the one-click deploys made available with Heroku as discussed in this guide are the simplest. In both cases, you are likely to need a credit card attached to your account to activate.","title":"Setting a new Parse Server"},{"location":"networking/#signing-up-with-heroku","text":"Use Heroku if you have little or no experience with setting up web sites. Heroku allows you to manage changes to deploy easily by specifying a GitHub repository to use. In addition, it comes with a UI data viewer from mLab. Sign Up / Sign In at Heroku Click on the button below to create a Parse App Make sure to enter an App Name. Scroll to the bottom of the page. Make sure to change the config values. Leave PARSE_MOUNT to be /parse . It does not need to be changed. Set APP_ID for the app identifier. If you do not set one, the default is set as myAppId . You will need this info for the Client SDK setup. Set MASTER_KEY to be the master key used to read/write all data. Note : in hosted Parse, client keys are not used by default. Set SERVER_URL to be http://yourappname.herokuapp.com/parse . Assuming you have left PARSE_MOUNT to be /parse, this will enable the use of Parse Cloud to work correctly. If you intend to use Parse's Facebook authentication, set FACEBOOK_APP_ID to be the FB application ID . If you intend to setup push notifications, there are additional environment variables such as GCM_SENDER_KEY and GCM_API_KEY that will need to be configured. See [[this section|Configuring-a-Parse-Server#enabling-push-notifications]] for the required steps. Deploy the Heroku app. The app should be hosted at https://<app name>.herokuapp.com where <app name> represents your App Name that you provided (or if one was assigned to you if you left this field blank). If you ever need to change these values later, you can go to ( https://dashboard.heroku.com/apps/<app name>/settings ). Check out this guide for a more detailed set of steps for deploying Parse to Heroku. Now, we can [[test our deployment|Configuring-a-Parse-Server#testing-deployment]] to verify that the Parse deployment is working as expected!","title":"Signing up with Heroku"},{"location":"networking/#testing-deployment","text":"After deployment, try to connect to the site. You should see I dream of being a website. Please star the parse-server repo on GitHub! if the site loaded correctly. If you try to connect to the /parse endpoint, you should see {error: \"unauthorized\"} . If both tests pass, the basic configuration is successful. Next, make sure you can create Parse objects. You do not need a client Key to write new data: curl -X POST -H \"X-Parse-Application-Id: myAppId\" \\ -H \"Content-Type: application/json\" \\ -d '{\"score\":1337,\"playerName\":\"Sean Plott\",\"cheatMode\":false}' \\ https://yourappname.herokuapp.com/parse/classes/GameScore Be sure to replace the values for myAppId and the server URL. If you see Cannot POST error then be sure both the X-Parse-Application-Id and the URL are correct for your application. To read data back, you will need to specify your master key as well: curl -X GET -H \"X-Parse-Application-Id: myAppId\" -H \"X-Parse-Master-Key: abc\" \\ https://yourappname.herokuapp.com/parse/classes/GameScore Be sure to replace the values for myAppId and the server URL. If these commands work as expected, then your Parse instance is now setup and ready to be used!","title":"Testing Deployment"},{"location":"networking/#browsing-parse-data","text":"There are several options that allow you to view the data. First, you can use the mLab viewer to examine the store data. Second, you can setup the open source verson of the Parse Dashboard, which gives you a similar UI used in hosted Parse. Finally, you can use Robomongo.","title":"Browsing Parse Data"},{"location":"networking/#mlab","text":"The hosted Parse instance deployed uses mLab (previously called MongoLab) to store all of your data. mLab is a hosted version of MongoDB which is a document-store which uses JSON to store your data. If you are using Heroku, you can verify whether the objects were created by clicking on the MongoDB instance in the Heroku panel:","title":"mLab"},{"location":"networking/#parse-dashboard","text":"You can also install Parse's open source dashboard locally. Download NodeJS v4.3 or higher. Make sure you have at least Parse server v2.1.3 or higher (later versions include a /parse/serverInfo that is needed). npm install -g parse-dashboard parse-dashboard --appId myAppId --masterKey myMasterKey --serverURL \"https://yourapp.herokuapp.com/parse\" Connect to your dashboard at http://localhost:4040/apps . Assuming you have specified the correct application ID, master Key, and server URL, as well as installed a Parse open source version v2.1.3 or higher, you should see the app appear correctly:","title":"Parse Dashboard"},{"location":"networking/#robomongo","text":"You can also setup Robomongo to connect to your remote mongo database hosted on Heroku to get a better data browser and dashboard for your app. To access mLab databases using Robomongo, be sure to go the MongoDB instance in the Heroku panel as shown above. Look for the following URL: mongodb://<dbuser>:<dbpassword>@ds017212.mlab.com:11218/heroku_2flx41aa . Use that to identify the login credentials: address : ds017212 . mlab . com port : 11218 db : heroku_2flx41aa user : dbuser password : dbpassword Note that the user and password provided are for a database user you configure and are not your mLab login credentials . Using that cross-platform app to easily access and modify the data for your Parse MongoDB data.","title":"Robomongo"},{"location":"networking/#adding-support-for-live-queries","text":"One of the newer features of Parse is that you can monitor for live changes made to objects in your database To get started, make sure you have defined the ParseObjects that you want in your NodeJS server. Make sure to define a list of all the objects by declaring it in the liveQuery and classNames listing : let api = new ParseServer ({ ..., // Make sure to define liveQuery AND classNames liveQuery : { // define your ParseObject names here classNames : [ 'Post' , 'Comment' ] } }); See this guide for more details. Parse Live Queries rely on the websocket protocol, which creates a bidirectional channel between the client and server and periodically exchange ping/pong frames to validate the connection is still alive. Websocket URLs are usually prefixed with ws:// or wss:// (secure) URLs. Heroku instances already provide websocket support, but if you are deploying to a different server (Amazon), you may need to make sure that TCP port 80 or TCP port 443 are available.","title":"Adding Support for Live Queries"},{"location":"networking/#enabling-client-sdk-integration","text":"Follow the [[setup guide|Building-Data-driven-Apps-with-Parse#setup]]. Make sure you have the latest Parse-Android SDK in your app/build.gradle file.","title":"Enabling Client SDK integration"},{"location":"networking/#troubleshooting-parse-server","text":"If you see Application Error or An error occurred in the application and your page could not be served. Please try again in a few moments. , double-check that you set a MASTER_KEY in the environment settings for that app. If you are using Heroku, download the Heroku Toolbelt app here to help view system logs. First, you must login with your Heroku login and password: bash heroku login You can then view the system logs by specifying the app name: bash heroku logs --app <app name> The logs should show the response from any types of network requests made to the site. Check the status code. 2016-02-07T08:28:14.292475+00:00 heroku[router]: at=info method=POST path=\"/parse/classes/Message\" host=parse-testing-port.herokuapp.com request_id=804c2533-ac56-4107-ad05-962d287537e9 fwd=\"101.12.34.12\" dyno=web.1 connect=1ms service=2ms status=404 bytes=179 If you are seeing Master key is invalid, you should only use master key to send push , chances are you are trying to send Push notifications without enable client push. On hosted parse there is an outstanding issue that must be resolved to start supporting it. If you see the exception Error Loading Messagescom.parse.ParseException: java.lang.IllegalArgumentException: value == null , try setting the clientKey to a blank string such as Parse.initialize(...).applicationId(...).clientKey(\"\") rather than null . Review this issue and this issue for further details. You can also use Facebook's Stetho interceptor to watch network logs with Chrome: gradle dependencies { compile 'com.facebook.stetho:stetho:1.3.0' } And add this network interceptor as well: ```java Stetho.initializeWithDefaults(this); // init Stetho before Parse Parse . initialize ( new Parse . Configuration . Builder ( this ) . addNetworkInterceptor ( new ParseStethoInterceptor ()) ``` If you wish to troubleshoot your Parse JavaScript code is to run the Parse server locally (see instructions ). You should also install node-inspector for Node.js, which allows you to use Chrome or Safari to step through the code yourself: bash npm install node-inspector node --debug index.js node_modules/.bin/node-inspector Open up http://127.0.0.1:8080/?port=5858 locally. You can use the Chrome debugging tools to set breakpoints in the JavaScript code. Point your Android client to this server:: java Parse.initialize(new Parse.Configuration.Builder(this) .applicationId(\"myAppId\") .server(\"http://192.168.3.116:1337/parse/\") // lookup your IP address of your machine Running into issues with mLab and MongoDB or MONGODB_URL ? Check the more detailed instructions here for getting the MONGODB_URL setup properly.","title":"Troubleshooting Parse Server"},{"location":"networking/#enabling-push-notifications","text":"See [[this guide|Push-Notifications-Setup-for-Parse]] for more details about how to setup both the Parse open source version and the Parse Android SDK Client.","title":"Enabling Push Notifications"},{"location":"networking/#storing-files-with-parse","text":"You can continue to save large files to your Parse backend using ParseFile without any major changes: byte [] data = \"Working at Parse is great!\" . getBytes (); ParseFile file = new ParseFile ( \"resume.txt\" , data ); file . saveInBackground (); By default, the open source version of Parse relies on the MongoDB GridStore adapter to store large files. There is an alternate option to leverage Amazon's Simple Storage Service (S3) but still should be considered experimental.","title":"Storing Files with Parse"},{"location":"networking/#using-amazon-s3","text":"If you wish to store the files in an Amazon S3 bucket, you will need to make sure to setup your Parse server to use the S3 adapter instead of the default GridStore adapter. See this Wiki for how to configure your setup. The steps basically include: Modify the Parse server to use the S3 adapter. See these changes as an example. Create an Amazon S3 bucket. Create an Amazon user with access to this S3 bucket. Generate an authorized key/secret pair to write to this bucket. Set the environment variables: Set S3_ENABLE to be 1. Set AWS_BUCKET_NAME to be the AWS bucket name. Set AWS_ACCESS_KEY and AWS_SECRET_ACCESS_KEY to be the user that has access to read/write to this S3 bucket. When testing, try to write a file and use the Amazon S3 console to see if the files were created in the right place.","title":"Using Amazon S3"},{"location":"networking/#building-data-driven-apps-with-parse","text":"Parse is an open-source platform that provides one of the easiest ways to get a database and RESTful API up and running. If you want to build a mobile app and don't want to code the back-end by hand, give Parse a try.","title":"Building Data driven Apps with Parse"},{"location":"networking/#parse-on-heroku","text":"We can deploy our own Parse data store and push notifications systems to Heroku leveraging the server open-sourced by Parse . Parse is built on top of the MongoDB database which can be added to Heroku using MongoLab. To get started setting up our own Parse backend, check out our [[configuring a Parse Server]] guide. Once the Parse server is configured, we can initialize Parse within our Android app pointing the client to our self-hosted URL. After that, the functions demonstrated in this guide work the same as they did before.","title":"Parse on Heroku"},{"location":"networking/#alternatives-to-parse","text":"A comprehensive list of alternatives can be reviewed here . One of the primary alternatives is Google's Firebase , which provides a hosted solution for analytics, crash reporting, and a realtime JSON database. One major difference is that Parse still provides many powerful constructs for querying data, whereas Firebase requires you to perform this querying based on child/parent relations. See this guide for more information to porting Parse applications to Firebase.","title":"Alternatives to Parse"},{"location":"networking/#what-is-parse","text":"Parse is an open-source Android SDK and back-end solution that enables developers to build mobile apps with shared data quickly and without writing any back-end code or custom APIs. Parse is a Node.js application which is deployed onto a host such as Heroku (or AWS) and then creates an automatic API for user authentication and storing data to a MongoDB document store. Parse has the following features included by combining the mobile SDK and back-end service: User registration and authentication Connecting user with Facebook to create a user account. Creating, querying, modifying and deleting arbitrary data models Makes sending push notifications easier Uploading files to a server for access across clients In short, Parse makes building mobile app ideas much easier!","title":"What is Parse?"},{"location":"networking/#setup_1","text":"Setting up Parse starts with [[deploying your own Parse instance|Configuring-a-Parse-Server#setting-a-new-parse-server]] to Heroku or another app hosting provider. Open the app/build.gradle in your project and add the following dependencies: dependencies { compile ' com.parse.bolts:bolts-android:1.4.0 ' compile ' com.parse:parse-android:1.15.1 ' compile ' com.squareup.okhttp3:logging-interceptor:3.6.0 ' // for logging API calls to LogCat } Package Version Parse Bolts Parse Android SDK Parse Interceptors Select Tools -> Android -> Sync Project with Gradle Files to load the libraries through Gradle. When you sync, it will import everything automatically. You can see the imported files in the External Libraries folder. Next, we need to create an Application class and initialize Parse. Be sure to replace the initialization line below with your correct Parse keys : public class ParseApplication extends Application { @Override public void onCreate () { super . onCreate (); // Use for troubleshooting -- remove this line for production Parse . setLogLevel ( Parse . LOG_LEVEL_DEBUG ); // Use for monitoring Parse OkHttp trafic // Can be Level.BASIC, Level.HEADERS, or Level.BODY // See http://square.github.io/okhttp/3.x/logging-interceptor/ to see the options. OkHttpClient . Builder builder = new OkHttpClient . Builder (); HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor (); httpLoggingInterceptor . setLevel ( HttpLoggingInterceptor . Level . BODY ); builder . networkInterceptors (). add ( httpLoggingInterceptor ); // set applicationId, and server server based on the values in the Heroku settings. // clientKey is not needed unless explicitly configured // any network interceptors must be added with the Configuration Builder given this syntax Parse . initialize ( new Parse . Configuration . Builder ( this ) . applicationId ( \"myAppId\" ) // should correspond to APP_ID env variable . clientKey ( null ) // set explicitly unless clientKey is explicitly configured on Parse server . clientBuilder ( builder ) . server ( \"https://my-parse-app-url.herokuapp.com/parse/\" ). build ()); } } The /parse/ path needs to match the PARSE_MOUNT environment variable, which is set to this value by default. We also need to make sure to set the application instance above as the android:name for the application within the AndroidManifest.xml . This change in the manifest determines which application class is instantiated when the app is launched and also adding the application ID metadata tag: <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" package= \"com.example.parsetododemo\" android:versionCode= \"1\" android:versionName= \"1.0\" > <application android:name= \".ParseApplication\" android:icon= \"@drawable/ic_launcher\" android:label= \"@string/app_name\" android:theme= \"@style/AppTheme\" > </application> </manifest> We also need to add a few important network permissions to the AndroidManifest.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" package= \"com.example.parsetododemo\" android:versionCode= \"1\" android:versionName= \"1.0\" > <uses-permission android:name= \"android.permission.INTERNET\" /> <uses-permission android:name= \"android.permission.ACCESS_NETWORK_STATE\" /> ... </manifest>","title":"Setup"},{"location":"networking/#testing-parse-client","text":"Assuming you have access to the Parse instance, you can test the SDK to verify that Parse is working with this application. Let's add the test code to ParseApplication as follows: public class ParseApplication extends Application { @Override public void onCreate () { super . onCreate (); // Your initialization code from above here Parse . initialize (...); // New test creation of object below ParseObject testObject = new ParseObject ( \"TestObject\" ); testObject . put ( \"foo\" , \"bar\" ); testObject . saveInBackground (); } } Run your app and a new object of class TestObject will be sent to the Parse Cloud and saved. See [[browsing Parse data|Configuring-a-Parse-Server#browsing-parse-data]] for more information about how to check this data. If needed in your application, you might also want to [[setup push notifications|Push-Notifications-Setup-for-Parse]] through Parse as well at this time. You should be setup now! Follow the remaining documentation guide to understand how to leverage Parse for your entire backend.","title":"Testing Parse Client"},{"location":"networking/#working-with-users","text":"At the core of many apps, there is a notion of user accounts that lets users access their information in a secure manner. Parse has a specialized ParseUser as a part of their SDK which handles this functionality. Be sure to check out the Users docs for a complete overview. See the API docs for ParseUser for more details.","title":"Working with Users"},{"location":"networking/#user-signup","text":"Creating a new user account is the process of constructing a ParseUser object and calling signUpInBackground : // Create the ParseUser ParseUser user = new ParseUser (); // Set core properties user . setUsername ( \"joestevens\" ); user . setPassword ( \"secret123\" ); user . setEmail ( \"email@example.com\" ); // Set custom properties user . put ( \"phone\" , \"650-253-0000\" ); // Invoke signUpInBackground user . signUpInBackground ( new SignUpCallback () { public void done ( ParseException e ) { if ( e == null ) { // Hooray! Let them use the app now. } else { // Sign up didn't succeed. Look at the ParseException // to figure out what went wrong } } }); This call will asynchronously create a new user in your Parse App. Before it does this, it checks to make sure that both the username and email are unique. See the signup up docs for more details.","title":"User Signup"},{"location":"networking/#user-session-login","text":"We can allow a user to signin by calling logInInBackground and passing the user details: ParseUser . logInInBackground ( \"joestevens\" , \"secret123\" , new LogInCallback () { public void done ( ParseUser user , ParseException e ) { if ( user != null ) { // Hooray! The user is logged in. } else { // Signup failed. Look at the ParseException to see what happened. } } }); If the credentials are correct, the ParseUser will be passed back accordingly. You can now access the cached current user for your application at any time in order to determine the session status: ParseUser currentUser = ParseUser . getCurrentUser (); if ( currentUser != null ) { // do stuff with the user } else { // show the signup or login screen } A user can be signed back out with: ParseUser . logOut (); ParseUser currentUser = ParseUser . getCurrentUser (); // this will now be null That's the basics of what you need to work with users. See more details by checking out the User official docs. You can also have a Facebook Login or Twitter Login for your users easily following the guides linked.","title":"User Session Login"},{"location":"networking/#querying-users","text":"To query for users, you need to use the special user query: ParseQuery < ParseUser > query = ParseUser . getQuery (); query . whereGreaterThan ( \"age\" , 20 ); // find adults query . findInBackground ( new FindCallback < ParseUser >() { public void done ( List < ParseUser > objects , ParseException e ) { if ( e == null ) { // The query was successful. } else { // Something went wrong. } } }); See a list of query constraints here.","title":"Querying Users"},{"location":"networking/#working-with-data-objects","text":"Storing data on Parse is built around the ParseObject . Each ParseObject contains key-value pairs of JSON-compatible data. This data is schema-less, which means that you don't need to specify ahead of time what keys exist on each ParseObject . Each ParseObject has a class name that you can use to distinguish different sorts of data. See the API docs for ParseObject for more details.","title":"Working With Data Objects"},{"location":"networking/#creating-parse-models","text":"When using Parse, the best practice is to create models that represent our data and that subclass ParseObject to allow for Parse persistence. Suppose we wanted to create a TodoItem model: import com.parse.ParseObject ; import com.parse.ParseClassName ; @ParseClassName ( \"TodoItem\" ) public class TodoItem extends ParseObject { // Ensure that your subclass has a public default constructor } We need to make sure to register this class with Parse before we call Parse.initialize : public class ParseApplication extends Application { @Override public void onCreate () { super . onCreate (); // Register your parse models ParseObject . registerSubclass ( TodoItem . class ); // Add your initialization code here Parse . initialize ( this , \"7zBztvyG4hYQ9XghgfqYxfRcL3SMBYWAj0GUL\" , \"iZWhgJRu6yKm3iNMbTaguLcNCV3qedijWL\" ); } } Now we can add fields and constructors to our TodoItem : @ParseClassName ( \"TodoItem\" ) public class TodoItem extends ParseObject { // Ensure that your subclass has a public default constructor public TodoItem () { super (); } // Add a constructor that contains core properties public TodoItem ( String body ) { super (); setBody ( body ); } // Use getString and others to access fields public String getBody () { return getString ( \"body\" ); } // Use put to modify field values public void setBody ( String value ) { put ( \"body\" , value ); } // Get the user for this item public ParseUser getUser () { return getParseUser ( \"owner\" ); } // Associate each item with a user public void setOwner ( ParseUser user ) { put ( \"owner\" , user ); } } Notice that now our model has getBody , setBody as well as property methods for storing which user created the TodoItem. Note: When creating Parse models, avoid creating unnecessary member instance variables and instead rely directly on getString -type methods to retrieve the values of database properties.","title":"Creating Parse Models"},{"location":"networking/#saving-or-updating-objects","text":"Let's suppose we wanted to save a TodoItem to the Parse database, create a new TodoItem , set the data attributes and then trigger a save with saveInBackground : TodoItem todoItem = new TodoItem ( \"Do laundry\" ); // Set the current user, assuming a user is signed in todoItem . setOwner ( ParseUser . getCurrentUser ()); // Immediately save the data asynchronously todoItem . saveInBackground (); // or for a more robust offline save // todoItem.saveEventually(); Note that there are two ways to save an object: saveInBackground which executes immediately and saveEventually which will store the update on the device and push to the server once internet access is available. See the saving objects and updating docs docs for more details. Also, check out the relational data section.","title":"Saving or Updating Objects"},{"location":"networking/#querying-objects","text":"","title":"Querying Objects"},{"location":"networking/#objects-by-id","text":"If you have the objectId, you can retrieve the whole ParseObject using a ParseQuery : // Specify which class to query ParseQuery < TodoItem > query = ParseQuery . getQuery ( TodoItem . class ); // Specify the object id query . getInBackground ( \"aFuEsvjoHt\" , new GetCallback < TodoItem >() { public void done ( TodoItem item , ParseException e ) { if ( e == null ) { // Access data using the `get` methods for the object String body = item . getBody (); // Access special values that are built-in to each object String objectId = item . getObjectId (); Date updatedAt = item . getUpdatedAt (); Date createdAt = item . getCreatedAt (); // Do whatever you want with the data... Toast . makeText ( TodoItemsActivity . this , body , Toast . LENGTH_SHORT ). show (); } else { // something went wrong } } }); See retrieving objects official docs for information on refreshing stale objects and more.","title":"Objects By Id"},{"location":"networking/#objects-by-query-conditions","text":"The general pattern is to create a ParseQuery , put conditions on it, and then retrieve a List of matching ParseObjects using the findInBackground method with a FindCallback . For example, to find all items created by a particular user: // Define the class we would like to query ParseQuery < TodoItem > query = ParseQuery . getQuery ( TodoItem . class ); // Define our query conditions query . whereEqualTo ( \"owner\" , ParseUser . getCurrentUser ()); // Execute the find asynchronously query . findInBackground ( new FindCallback < TodoItem >() { public void done ( List < TodoItem > itemList , ParseException e ) { if ( e == null ) { // Access the array of results here String firstItemId = itemList . get ( 0 ). getObjectId (); Toast . makeText ( TodoItemsActivity . this , firstItemId , Toast . LENGTH_SHORT ). show (); } else { Log . d ( \"item\" , \"Error: \" + e . getMessage ()); } } }); See a list of query constraints here and check the queries overview for explanation of compound queries and relational queries.","title":"Objects By Query Conditions"},{"location":"networking/#objects-by-querying-geolocation","text":"Often we might want to query objects within a certain radius of a coordinate (for example to display them on a map). With Parse, querying by GeoPoint to retrieve objects within a certain distance of a location is built in. Check the AnyWall Tutorial and the whereWithinMiles and related where conditions for more details. If you want to query this based on a map, first you can add a listener for the map camera . Next, you can determine the visible bounds of the map as shown there. Check the [[Maps Usage Guide|Google-Maps-API-v2-Usage]] for additional information on using the map.","title":"Objects by Querying GeoLocation"},{"location":"networking/#live-queries","text":"One of the newer features of Parse is that you can monitor for live changes made to objects in your database To get started, make sure you have defined the ParseObjects that you want in your NodeJS server. Make sure to define a list of all the objects by declaring it in the liveQuery and classNames listing : let api = new ParseServer ({ ..., // Make sure to define liveQuery AND classNames liveQuery : { // define your ParseObject names here classNames : [ 'Post' , 'Comment' ] } }); See this guide for more details. Parse Live Queries rely on the websocket protocol, which creates a bidirectional channel between the client and server and periodically exchange ping/pong frames to validate the connection is still alive. Websocket URLs are usually prefixed with ws:// or wss:// (secure) URLs. Heroku instances already provide websocket support, but if you are deploying to a different server (Amazon), you may need to make sure that TCP port 80 or TCP port 443 are available. You will need to also setup the client SDK by adding this dependency to your app/build.gradle config: dependencies { // add Parse dependencies too compile 'com.parse:parse-livequery-android:1.0.2' } Next, instantiate the client: ParseLiveQueryClient parseLiveQueryClient = ParseLiveQueryClient . Factory . getClient (); Define the query pattern you wish to listen for events: ParseQuery < Comment > query = ParseQuery . getQuery ( Comment . class ); Create a subscription to this ParseQuery instance: SubscriptionHandling < ParseObject > subscriptionHandling = parseLiveQueryClient . subscribe ( parseQuery ) Finally, listen to the events. You can listen for Event.UPDATE , Event.DELETE , Event.ENTER , and Event.LEAVE . An enter and leave event reflects changes to an existing ParseObject that either now fulfill the criteria or no longer do so. See this guide for more information about the live queries protocol specification. subscriptionHandling . handleEvent ( SubscriptionHandling . Event . CREATE , new SubscriptionHandling . HandleEventCallback < Comment >() { @Override public void onEvent ( ParseQuery < Comment > query , Comment object ) { // HANDLING create event } })","title":"Live Queries"},{"location":"networking/#passing-objects-between-activities","text":"Often with Android development, you need to pass an object from one Activity to another. This is done using the Intent system and passing objects as extras within a bundle. Unfortunately, ParseObject does not currently implement Parcelable or Serializable. The simplest way to pass data between activities in Parse is simply to pass the object ID into the Intent: Intent i = new Intent ( this , SomeNewActivity . class ); i . putExtra ( \"todo_id\" , myTodoItem . getObjectId ()); startActivity ( i ); and then refetch the object using the object ID within the child Activity: String todoId = getIntent (). getStringExtra ( \"todo_id\" ); ParseQuery < TodoItem > query = ParseQuery . getQuery ( TodoItem . class ); // First try to find from the cache and only then go to network query . setCachePolicy ( ParseQuery . CachePolicy . CACHE_ELSE_NETWORK ); // or CACHE_ONLY // Execute the query to find the object with ID query . getInBackground ( todoId , new GetCallback < TodoItem >() { public void done ( TodoItem item , ParseException e ) { if ( e == null ) { // item was found } } } You can also use query.getFirst() instead to retrieve the item in a synchronous style. Review the different caching policies to understand how to make this fast. While we could implement parceling ourselves this is not ideal as it's pretty complex to manage the state of Parse objects.","title":"Passing Objects Between Activities"},{"location":"networking/#associations","text":"Objects can have relationships with other objects. To model this behavior, any ParseObject can be used as a value in other ParseObject s. Internally, the Parse framework will store the referred-to object in just one place, to maintain consistency.","title":"Associations"},{"location":"networking/#one-to-one-relationships","text":"For example, each Comment in a blogging app might correspond to one Post. To create a new Post with a single Comment, you could write: @ParseClassName ( \"Post\" ) public class Post extends ParseObject { // ... } @ParseClassName ( \"Comment\" ) public class Comment extends ParseObject { // ... // Associate each comment with a user public void setOwner ( ParseUser user ) { put ( \"owner\" , user ); } // Get the user for this comment public ParseUser getOwner () { return getParseUser ( \"owner\" ); } // Associate each comment with a post public void setPost ( Post post ) { put ( \"post\" , post ); } // Get the post for this item public Post getPost () { return ( Post ) getParseObject ( \"post\" ); } } // Create the post Post post = new Post ( \"Welcome Spring!\" ); // Get the user ParseUser currentUser = ParseUser . getCurrentUser (); // Create the comment Comment comment = new Comment ( \"Get milk and eggs\" ); comment . setPost ( post ); comment . setOwner ( currentUser ); comment . saveInBackground (); By default, when fetching an object, related ParseObject s are not fetched. We can preload (eagerly fetch these) by using the include method on any ParseQuery : ParseQuery < ParseObject > query = ParseQuery . getQuery ( Comment . class ); // Include the post data with each comment query . include ( \"owner\" ); // the key which the associated object was stored // Execute query with eager-loaded owner query . findInBackground ( new FindCallback < ParseObject >() { .... } We can eagerly load nested associations as well. If you have an objectA which has a column referencing objectB and then objectB has a column referencing objectC, you can get objectB and objectC by doing: ParseQuery < ParseObject > query = ParseQuery . getQuery ( ObjectA . class ); query . include ( \"ObjectB.ObjectC\" ); // ...execute query... Otherwise, these associated objects can only be retrieved once they have been fetched separately: fetchedTodoItem . getCategory () . fetchIfNeededInBackground ( new GetCallback < Category >() { public void done ( Category object , ParseException e ) { String title = category . getTitle (); } });","title":"One-to-One Relationships"},{"location":"networking/#many-to-many-relationships","text":"You can also model a many-to-many relation using the ParseRelation object. This works similar to ArrayList , except that you don't need to download all the ParseObject s in a relation at once. @ParseClassName ( \"Tag\" ) public class Tag extends ParseObject { // ...this is a tag to describe an item } @ParseClassName ( \"TodoItem\" ) public class TodoItem extends ParseObject { public ParseRelation < Tag > getTagsRelation () { return getRelation ( \"tags\" ); } public void addTag ( Tag tag ) { getTagsRelation (). add ( tag ); saveInBackground (); } public void removeTag ( Tag tag ) { getTagsRelation (). remove ( tag ); saveInBackground (); } } By default, the list of objects in this relation are not downloaded. You can get the list of Posts by calling findInBackground on the ParseQuery returned by getQuery. The code would look like: fetchedTodoItem . getTagsRelation (). getQuery (). findInBackground ( new FindCallback < Tag >() { void done ( List < Tag > results , ParseException e ) { if ( e == null ) { // results have all the Posts the current user liked. } else { // There was an error } } }); For more details, check out the official Relational Data guide. For more complex many-to-many relationships, check out this official join tables guide when the many-to-many requires additional metadata.","title":"Many-to-Many Relationships"},{"location":"networking/#deleting-objects","text":"To delete an object from the Parse Cloud: todoItem . deleteInBackground (); Naturally we can also delete in an offline manner with: todoItem . deleteEventually ();","title":"Deleting Objects"},{"location":"networking/#local-storage-mode","text":"Parse now supports a more powerful form of local data storage out of the box which can be used to store and retrieve ParseObjects, even when the network is unavailable. To enable this functionality, simply call Parse.enableLocalDatastore() before your call to initialize: // Within the Android Application where Parse is initialized Parse . enableLocalDatastore ( this ); Parse . initialize ( this , PARSE_APPLICATION_ID , PARSE_CLIENT_KEY );","title":"Local Storage Mode"},{"location":"networking/#saving-to-local-store","text":"You can store a ParseObject in the local datastore by pinning it. Pinning a ParseObject is recursive, just like saving, so any objects that are pointed to by the one you are pinning will also be pinned: TodoItem todoItem = new TodoItem ( \"Do laundry\" ); // Set the current user, assuming a user is signed in todoItem . setOwner ( ParseUser . getCurrentUser ()); // Store object offline todoItem . pinInBackground ();","title":"Saving To Local Store"},{"location":"networking/#querying-from-local-store","text":"We can query from the local offline store with the fromLocalDatastore flag during any query operation: // Specify which class to query ParseQuery < TodoItem > query = ParseQuery . getQuery ( TodoItem . class ); // Flag indicates we will use offline store query . fromLocalDatastore (); // Specify the object id query . getInBackground ( \"aFuEsvjoHt\" , new GetCallback < TodoItem >() { public void done ( TodoItem item , ParseException e ) { // ... } });","title":"Querying from Local Store"},{"location":"networking/#further-details","text":"For the full summary of how to utilize the offline mode for Parse, be sure to review the official local store guide in the Parse docs.","title":"Further Details"},{"location":"networking/#using-the-data-browser","text":"Suppose we had a simple todo application with user accounts and items persisted to Parse. The next step is to setup and create our models using the Parse dashboard to manage your new app. Visit the \"Data Browser\" for the correct application and let's create our User and TodoItem objects for our app. First, remove the test code that we added previously and drop the \"TestObject\" listed in the browser to clear testing data. Next, select \"New Class\" and pick \"User\" to create the user object used to manage session authetication: Let's also add our \"Custom\" class which can represent any custom data. In this case, we will create a TodoItem class: Now, we need to add our custom columns to our class. In this case, let's add a \"body\" field to our TodoItem by selecting \"+Col\" and then selecting the type as a String and column name as \"body\": Once you've finished adding your columns to the class, you can create as many additional classes as necessary and configure their respective columns. Let's add a row of data to the class directly through the data browser: We are now ready to access these classes within our application.","title":"Using the Data Browser"},{"location":"networking/#troubleshooting_2","text":"Check out our [[Troubleshooting Common Issues with Parse]] guide for a detailed look at common issues encountered and related solutions.","title":"Troubleshooting"},{"location":"networking/#additional-features","text":"Parse has many powerful features in addition to the core functionality listed above.","title":"Additional Features"},{"location":"networking/#uploading-photos","text":"Parse has full support for storing images and files uploaded by an application. Photos are stored using the ParseFile construct described in more detail here . Refer to the following resources for more details: Parse Docs on File Uploads Parse Image Upload Tutorial - Tutorial on using ParseFile to upload images. Mealspotting Sample App - Detailed app sample showing how to store images associated to a record. Here's a related video . [[CodePath Camera and Gallery Guide|Accessing-the-Camera-and-Stored-Media]] - Guide on capturing photos with the camera. [[Handling Files after API 24|Sharing-Content-with-Intents#sharing-files-with-api-24-or-higher]] - Section on how to store files using FileProvider How to upload images onto Parse post - Good StackOverflow post on uploading images to Parse","title":"Uploading Photos"},{"location":"networking/#geo-location","text":"Parse has support for geolocation services and querying: AnyWall Sample App - Sample app including how to read geolocation and use this data within your app.","title":"Geo Location"},{"location":"networking/#push-notifications","text":"Parse supports push notifications made easy: [[Parse Push Messaging|Push-Messaging]] - CodePath Guide [[Parse Push|Configuring-a-Parse-Server#enabling-push-notifications]] - Super easy push notifications","title":"Push Notifications"},{"location":"networking/#facebook-sdk","text":"For a quick way of incorporating Facebook login, check out Parse's UI Library . It leverages Parse's FacebookUtils library, which acts as a wrapper for associating ParseUser objects with Facebook users. The official step by step instructions for integrating Parse with Facebook SDK is located here . The manual process of integrating with Facebook's SDK is discussed below. You will first need to create a Facebook app and get an Application ID. If you are using open source Parse, make sure to set the FACEBOOK_APP_ID environment variable too. You will also need to get access to your keystore hash and make sure to include it: OS X: keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore | openssl sha1 -binary | openssl base64 Windows: keytool -exportcert -alias androiddebugkey -keystore %HOMEPATH% \\. android \\d ebug.keystore | openssl sha1 -binary | openssl base64 Next, you will need to include Parse's FacebookUtils library, which provides an easy-to-use wrapper to work with the Facebook SDK, as well as Facebook's SDK: dependencies { compile 'com.facebook.android:facebook-android-sdk:4.10.0' compile 'com.parse:parsefacebookutils-v4-android:1.10.4@aar' compile 'com.parse:parse-android:1.14.1' } You will then need to make sure to initialize these libraries by doing so in your MainApplication.java file: public class MainApplication extends Application { @Override public void onCreate () { super . onCreate (); Parse . initialize ( new Parse . Configuration . Builder ( this ) . applicationId ( \"myAppId\" ) . clientKey ( null ) . server ( \"https://yourappname.herokupapp.com/parse/\" ). build ()); // ParseFacebookUtils should initialize the Facebook SDK for you ParseFacebookUtils . initialize ( this ); } Make sure to reference this MainApplication in your AndroidManifest.xml file: <application android:name= \".MainApplication\" Make sure to add the FacebookActivity to your manifest file, as well as the application ID and permissions you wish to request. <activity android:name= \"com.facebook.FacebookActivity\" android:configChanges= \"keyboard|keyboardHidden|screenLayout|screenSize|orientation\" android:theme= \"@android:style/Theme.Translucent.NoTitleBar\" android:label= \"@string/app_name\" /> <meta-data android:name= \"com.facebook.sdk.ApplicationId\" android:value= \"@string/facebook_app_id\" /> <meta-data android:name= \"com.facebook.sdk.PERMISSIONS\" android:value= \"email\" /> There are two ways to support Facebook login: one is to use your own custom button/icon, or to use Facebook's LoginButton class as described in the walkthrough . If you choose to use the LoginButton class, you should not use the FacebookUtils library to trigger a login. The reason is that Facebook's LoginButton already has click handlers that will launch a login screen, so using Parse's code triggers two of these screens to appear. In addition, you have to do more work to associate a ParseUser object with a Facebook user. For this reason, it is simpler to use the custom button approach when integrating with Parse.","title":"Facebook SDK"},{"location":"networking/#custom-button","text":"For your LoginActivity.java , add this code to trigger a login. If you wish to trigger this login, you may add your own custom button: <Button android:background= \"@color/com_facebook_blue\" android:text= \"Log in with Facebook\" android:id= \"@+id/login\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> You can then attach a button click handler. button . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { ArrayList < String > permissions = new ArrayList (); permissions . add ( \"email\" ); ParseFacebookUtils . logInWithReadPermissionsInBackground ( MainActivity . this , permissions , new LogInCallback () { @Override public void done ( ParseUser user , ParseException err ) { if ( err != null ) { Log . d ( \"MyApp\" , \"Uh oh. Error occurred\" + err . toString ()); } else if ( user == null ) { Log . d ( \"MyApp\" , \"Uh oh. The user cancelled the Facebook login.\" ); } else if ( user . isNew ()) { Log . d ( \"MyApp\" , \"User signed up and logged in through Facebook!\" ); } else { Toast . makeText ( MainActivity . this , \"Logged in\" , Toast . LENGTH_SHORT ) . show (); Log . d ( \"MyApp\" , \"User logged in through Facebook!\" ); } } }); } }); You must also override the onActivityResult() to capture the result after a user signs into Facebook: @Override protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { super . onActivityResult ( requestCode , resultCode , data ); ParseFacebookUtils . onActivityResult ( requestCode , resultCode , data ); }","title":"Custom button"},{"location":"networking/#server-code","text":"Running server-side code on Parse: CloudCode Guide - Guide on how to write cloud-based code that adds error checking, validation or triggers \"server-side\"","title":"Server Code"},{"location":"networking/#building-data-driven-apps-with-firebase","text":"At this year's Google I/O , Google announced a number of interesting new features in Firebase. The new Firebase is said to be a \u201cUnified app platform for mobile developers\u201d adding new tools to help develop faster, improve app quality, engage users and monetize apps. For a quick intro to what the new Firebase is about, you can watch this video . The new features that are included in this new Firebase include: [[Crash Reporting|Crash-Reporting-with-Firebase]] [[Cloud Messaging|Google-Cloud-Messaging]] Realtime database and storage Analytics. Notifications. Dynamic Links. App Indexing. AdWords. Firebase Invites etc","title":"Building Data driven Apps with Firebase"},{"location":"networking/#registration","text":"First point to get started with Firebase, is to create an account here if you don't have one already.","title":"Registration"},{"location":"networking/#setup_2","text":"","title":"Setup"},{"location":"networking/#prerequisites","text":"Before you can begin to enjoy the new Firebase, please ensure your development machine satisfies these prerequisites: A device running Android 2.3 (Gingerbread) or newer, and Google Play services 9.0.1 or newer The Google Play services SDK from the Android SDK Manager Android Studio 1.5 or higher An Android Studio project and its package name","title":"Prerequisites"},{"location":"networking/#add-firebase-to-your-app","text":"Next step is to add Firebase to your app on the Firebase console . Follow the following steps to add firebase to your app.","title":"Add Firebase to your app"},{"location":"networking/#1-create-project","text":"Navigate to the console . If you don't already have an existing Firebase project, click on \" Create new project \" and follow through the steps as shown in the gif below. Else, if you have an exisiting Google project, click on \" Import Google Project \"","title":"1. Create project"},{"location":"networking/#2-add-firebase-to-your-app","text":"Now that you've created the project, in the dashboard, click on \" Add Firebase to your Android app \". To proceed, you need at least a package name unique to your app. If you plan on using Dynamic Links, Invites, and Google Sign-In support in Auth, you have to include a debug signing key SHA1 fingerprint. To see your debug key SHA1 fingerprint, run the following command if you use Linux or Mac: keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android If you're running Windows, use this command: keytool - list - v - keystore C : \\ Documents and Settings \\ [ User Name ] \\ . android \\ debug . keystore - alias androiddebugkey - storepass android - keypass android The whole process is as shown below:","title":"2. Add Firebase to your app"},{"location":"networking/#3-configure-your-app","text":"Clicking add app will download a google-services.json file. You should move this file to your projects app module directory. Usually <project>/app directory. Click continue and follow these instructions: In your project-level build.gradle file, add the following lines ( <project>/build.gradle ): buildscript { dependencies { // Add this line classpath 'com.google.gms:google-services:3.0.0' } } In your app-level build.gradle ( <project>/<app-module>/build.gradle ): apply plugin : 'com.android.application' android { // ... } dependencies { // ... compile 'com.google.firebase:firebase-core:9.0.0' } // Add to the bottom of the file apply plugin : 'com.google.gms.google-services' Sync your gradle files with the project and you're ready to go with firebase.","title":"3. Configure your app"},{"location":"networking/#attribution","text":"This guide was originally drafted by Segun Famisa .","title":"Attribution"},{"location":"networking/#references-and-further-reading","text":"https://firebase.google.com/docs/android/setup","title":"References and further reading"},{"location":"networking/#handling-progressbars","text":"ProgressBar is used to display the progress of an activity while the user is waiting. You can display an indeterminate progress (spinning wheel) or result-based progress.","title":"Handling ProgressBars"},{"location":"networking/#indeterminate","text":"We can display an indeterminate progress bar which we show to indicate waiting: <ProgressBar android:id= \"@+id/pbLoading\" android:visibility= \"invisible\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> and then manage the visibility in the activity: // on some click or some loading we need to wait for... ProgressBar pb = ( ProgressBar ) findViewById ( R . id . pbLoading ); pb . setVisibility ( ProgressBar . VISIBLE ); // run a background job and once complete pb . setVisibility ( ProgressBar . INVISIBLE ); Typically you want to try to put the ProgressBar in the place where data is going to show (i.e. as a placeholder for an image). For a ListView, you put the ProgressBar in the header or footer , which lets you put an arbitrary layout outside of the adapter.","title":"Indeterminate"},{"location":"networking/#result-based","text":"ProgressBar can be used to report the progress of a long-running AsyncTask. In this case: ProgressBar can report numerical results for a task. Must specify horizontal style and result max value. Must publishProgress(value) in your AsyncTask <ProgressBar android:id= \"@+id/progressBar1\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:visibility= \"invisible\" style= \"?android:attr/progressBarStyleHorizontal\" android:max= \"100\" /> and then within the AsyncTask: public class DelayTask extends AsyncTask < Void , Integer , String > { int count = 0 ; @Override protected void onPreExecute () { pb . setVisibility ( ProgressBar . VISIBLE ); } @Override protected String doInBackground ( Void ... params ) { while ( count < 5 ) { SystemClock . sleep ( 1000 ); count ++; publishProgress ( count * 20 ); } return \"Complete\" ; } @Override protected void onProgressUpdate ( Integer ... values ) { pb . setProgress ( values [ 0 ]); } } and using this pattern any background tasks can be reflected by an on-screen progress report.","title":"Result-based"},{"location":"networking/#progress-within-actionbar","text":"We can add a ProgressBar into our ActionBar or Toolbar [[using a custom ActionView|Extended-ActionBar-Guide#adding-actionview-items]]. First, let's define the progress action-view with a layout file in res/layout/action_view_progress.xml with a progress-bar: <?xml version=\"1.0\" encoding=\"utf-8\"?> <ProgressBar xmlns:android= \"http://schemas.android.com/apk/res/android\" style= \"?android:attr/progressBarStyleLarge\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:id= \"@+id/pbProgressAction\" /> Next, we can add the ActionView to our ActionBar in the res/menu/activity_main.xml as an item : <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" tools:context= \".MainActivity\" > <item android:id= \"@+id/miActionProgress\" android:title= \"Loading...\" android:visible= \"false\" android:orderInCategory= \"100\" app:showAsAction= \"always\" app:actionLayout= \"@layout/action_view_progress\" /> </menu> Note the use of android:orderInCategory to append the item at the end (other items should be less than 100), android:visible which hides the menu item and also app:actionLayout which specifies the layout for the action-view. Next, we can use the onPrepareOptionsMenu method to get a reference to the menu item and the associated view within the activity: public class MainActivity extends AppCompatActivity { // Instance of the progress action-view MenuItem miActionProgressItem ; @Override public boolean onPrepareOptionsMenu ( Menu menu ) { // Store instance of the menu item containing progress miActionProgressItem = menu . findItem ( R . id . miActionProgress ); // Extract the action-view from the menu item ProgressBar v = ( ProgressBar ) MenuItemCompat . getActionView ( miActionProgressItem ); // Return to finish return super . onPrepareOptionsMenu ( menu ); } } Finally, we can toggle the visibility of the miActionProgressItem item to show and hide the progress-bar in the action-bar: public class MainActivity extends AppCompatActivity { public void showProgressBar () { // Show progress item miActionProgressItem . setVisible ( true ); } public void hideProgressBar () { // Hide progress item miActionProgressItem . setVisible ( false ); } } and the result:","title":"Progress within ActionBar"},{"location":"networking/#progress-within-listview-footer","text":"Often the user is waiting for a list of items to be populated into a ListView . In these cases, we can display the progress bar at the bottom of the ListView using a footer. First, let's define the footer xml layout in res/layout/footer_progress.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <ProgressBar style= \"?android:attr/progressBarStyleLarge\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:id= \"@+id/pbFooterLoading\" android:layout_gravity= \"center_horizontal\" android:visibility= \"gone\" /> </LinearLayout> Note the use of a LinearLayout with the layout_height set to wrap_content as this is important for the footer to be properly hidden. Next, let's setup the footer within our ListView by inflating and inserting the header within the activity: public class MainActivity extends AppCompatActivity { // ... // Store reference to the progress bar later ProgressBar progressBarFooter ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); // ... setupListWithFooter (); } // Adds footer to the list default hidden progress public void setupListWithFooter () { // Find the ListView ListView lvItems = ( ListView ) findViewById ( R . id . lvItems ); // Inflate the footer View footer = getLayoutInflater (). inflate ( R . layout . footer_progress , null ); // Find the progressbar within footer progressBarFooter = ( ProgressBar ) footer . findViewById ( R . id . pbFooterLoading ); // Add footer to ListView before setting adapter lvItems . addFooterView ( footer ); // Set the adapter AFTER adding footer lvItems . setAdapter ( myAdapter ); } } Now with the progressBarFooter progress-bar instance stored we can show and hide the footer with setVisibility : public class MainActivity extends AppCompatActivity { // Show progress public void showProgressBar () { progressBarFooter . setVisibility ( View . VISIBLE ); } // Hide progress public void hideProgressBar () { progressBarFooter . setVisibility ( View . GONE ); } } Now we can call these show and hide methods as needed to show the footer in the list:","title":"Progress Within ListView Footer"},{"location":"networking/#progress-within-dialog","text":"In certain scenarios, a simple solution for displaying a progress bar during a long-running operation is to [[display a modal progress dialog|Using-DialogFragment#displaying-a-progressdialog]] indicating a task is running: [[ |Using-DialogFragment#displaying-a-progressdialog]] Note that this modal display prevents the user from interacting with the app until the task is completed. As a result, the progress indicators above generally provide a better user experience.","title":"Progress within Dialog"},{"location":"networking/#third-party-libraries","text":"See this list of third-party progress bars for alternate styles and animations. The NumberProgressBar is featured above for example.","title":"Third-party Libraries"},{"location":"persistence/","text":"","title":"Persistence"},{"location":"project-structure/","text":"Android Project Structure \u00b6 Within an Android app project structure, the most frequently edited folders are: src - Java source files associated with your project. This includes the Activity controller files as well as your models and helpers. res - Resource files associated with your project. All graphics, strings, layouts, and other resource files are stored in the resource file hierarchy under the res directory. res/layout - XML layout files that describe the views and layouts for each activity and for partial views such as list items. res/values - XML files which store various attribute values. These include strings.xml , dimens.xml , styles.xml , colors.xml , themes.xml , and so on. res/drawable - Here we store the various density-independent graphic assets used in our application. res/drawable-hdpi - Series of folders for density specific images to use for various resolutions. The most frequently edited files are: res/layout/activity_foo.xml - This file describes the layout of the activity's UI. This means the placement of every view object on one app screen. src/.../FooActivity.java - The Activity \"controller\" that constructs the activity using the view, and handles all event handling and view logic for one app screen. AndroidManifest.xml - This is the Android application definition file. It contains information about the Android application such as minimum Android version, permission to access Android device capabilities such as internet access permission, ability to use phone permission, etc. Other less edited folders include: gen - Generated Java code files, this library is for Android internal use only. assets - Uncompiled source files associated with your project; Rarely used. bin - Resulting application package files associated with your project once it\u2019s been built. libs - Contains any secondary libraries (jars) you might want to link to your app. Organizing Source Files \u00b6 Android applications should always be neatly organized with a clear folder structure that makes your code easy to read. In addition, proper naming conventions for code and classes are important to ensure your code is clean and maintainable. Naming Conventions \u00b6 Be sure to check out the Ribot Code and Style Guidelines for a more extensive breakdown of suggested style and naming guidelines. For Java Code \u00b6 The following naming and casing conventions are important for your Java code: Type Example Description Link Variable incomeTaxRate All variables should be camel case Read More Constant DAYS_IN_WEEK All constants should be all uppercase Read More Method convertToEuroDollars All methods should be camel case Read More Parameter depositAmount All parameter names should be camel case Read More See this naming guide for more details. For Android Classes \u00b6 Android classes should be named with a particular convention that makes their purpose clear in the name. For example all activities should end with Activity as in MoviesActivity . The following are the most important naming conventions: Name Convention Inherits Activity CreateTodoItemActivity AppCompatActivity , Activity List Adapter TodoItemsAdapter BaseAdapter , ArrayAdapter Database Helper TodoItemsDbHelper SQLiteOpenHelper Network Client TodoItemsClient N/A Fragment TodoItemDetailFragment Fragment Service FetchTodoItemService Service , IntentService Use your best judgement for other types of files. The goal is for any Android-specific classes to be identifiable by the suffix. Android Folder Structure \u00b6 There are several best practices for organizing your app's package structure. Organize packages by category \u00b6 The way to do this is to group things together by their category. Each component goes to the corresponding package: com.example.myapp.activities - Contains all activities com.example.myapp.adapters - Contains all custom adapters com.example.myapp.models - Contains all our data models com.example.myapp.network - Contains all networking code com.example.myapp.fragments - Contains all fragments com.example.myapp.utils - Contains all helpers supporting code. com.example.myapp.interfaces - Contains all interfaces Keeping these folders in each app means that code is logically organized and scanning the code is a pleasant experience. You can see a slight variation on this structure as suggested by Futurice on their best-practices repo . Organize packages by application features \u00b6 Alternatively, we can package-by-feature rather than layers. This approach uses packages to reflect the feature set . Consider the following package structure as outlined in this post : com.example.myapp.service.* - Is a subpackage for all background related service packages/classes com.example.myapp.ui.* - Is a subpackage for all UI-related packages/classes com.example.myapp.ui.mainscreen - Contains classes related to some app's Main Screen com.example.myapp.ui.detailsscreen - Contains classes related to some app's Item Details Screen This feature allows you to place DetailsActivity , DetailsFragment , DetailsListAdapter , DetailsItemModel in one package, which provides comfortable navigation when you're working on \"item details\" feature. DetailsListAdapter and DetailsItemModel classes and/or their properties can be made package-private, and thus not exposed outside of the package. Within the package you may access their properties directly without generating tons of boilerplate \"setter\" methods. This can make object creation really simple and intuitive, while objects remain immutable outside the package. Organizing Resources \u00b6 Resources should be split up into the following key files and folders: Name Path Description XML Layouts res/layout/ This is where we put our XML layout files. XML Menus res/menu/ This is where we put our AppBar menu actions. Drawables res/drawable This is where we put images and XML drawables. Colors res/values/colors.xml This is where we put color definitions . Dimensions res/values/dimens.xml This is where we put dimension values . Strings res/values/strings.xml This is where we put strings. Styles res/values/styles.xml This is where we put style values. See the full list of resources here and note the following: Don't hardcode color hex values in the layout . Instead of hardcoding these values, be sure to move all colors into res/values/colors.xml and reference the colors in layouts with @color/royal_blue . Don't hardcode margin / padding dimensions in the layout . Instead of hardcoding these values, be sure to move all dimension values into res/values/dimens.xml and reference these in layouts with @dimen/item_padding_left . To support multiple devices, we can then use the alternative resources system to provide different colors, strings, dimens, styles, etc based on the device type, screen size, API version and much more. Be sure to start properly organizing your resources early on in the development of an application. Be sure to check out the Ribot Code and Style Guidelines for a more extensive breakdown of suggested style and naming guidelines. Organizing Resources into Subfolders \u00b6 Often there are questions about organizing not just the source files but also better organizing the application resources . In a modern app, there are often hundreds of different layout files, drawables, styles, etc and by default these are all grouped together in a flat list within a single subdirectory (i.e res/layout ). Refer to stackoverflow post for a discussion of the other options. Conclusion \u00b6 It is up to you to decide which of the aforementioned approaches suits your project best. However, in general Java programming, packaging apps by feature is considered preferable and makes a lot of sense . Retaining Fragments \u00b6 In many cases, we can avoid problems when an Activity is re-created by simply using fragments. If your views and state are within a fragment, we can easily have the fragment be retained when the activity is re-created: public class RetainedFragment extends Fragment { // data object we want to retain private MyDataObject data ; // this method is only called once for this fragment @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); // retain this fragment when activity is re-initialized setRetainInstance ( true ); } public void setData ( MyDataObject data ) { this . data = data ; } public MyDataObject getData () { return data ; } } This approach keeps the fragment from being destroyed during the activity lifecycle. They are instead retained inside the Fragment Manager. See the Android official docs for more information . Now you can check to see if the fragment already exists by tag before creating one and the fragment will retain it's state across configuration changes. See the Handling Runtime Changes guide for more details. Understanding the Android Application Class \u00b6 The Application class in Android is the base class within an Android app that contains all other components such as activities and services. The Application class, or any subclass of the Application class, is instantiated before any other class when the process for your application/package is created. This class is primarily used for initialization of global state before the first Activity is displayed. Note that custom Application objects should be used carefully and are often not needed at all . Custom Application Classes \u00b6 In many apps, there's no need to work with an application class directly. However, there are a few acceptable uses of a custom application class: Specialized tasks that need to run before the creation of your first activity Global initialization that needs to be shared across all components (crash reporting, persistence) Static methods for easy access to static immutable data such as a shared network client object Note that you should never store mutable shared data inside the Application object since that data might disappear or become invalid at any time. Instead, store any mutable shared data using [[persistence strategies|Persisting-Data-to-the-Device]] such as files, SharedPreferences or SQLite . Defining Your Application Class \u00b6 If we do want a custom application class, we start by creating a new class which extends android.app.Application as follows: import android.app.Application ; public class MyCustomApplication extends Application { // Called when the application is starting, before any other application objects have been created. // Overriding this method is totally optional! @Override public void onCreate () { super . onCreate (); // Required initialization logic here! } // Called by the system when the device configuration changes while your component is running. // Overriding this method is totally optional! @Override public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ); } // This is called when the overall system is running low on memory, // and would like actively running processes to tighten their belts. // Overriding this method is totally optional! @Override public void onLowMemory () { super . onLowMemory (); } } And specify the android:name property in the the <application> node in AndroidManifest.xml : <application android:name= \".MyCustomApplication\" android:icon= \"@drawable/icon\" android:label= \"@string/app_name\" ... > That's all you should need to get started with your custom application. Limitations and Warnings \u00b6 There is always data and information that is needed in many places within your app. This might be a session token, the result of an expensive computation, etc. It might be tempting to use the application instance in order to avoid the overhead of passing objects between activities or keeping those in persistent storage. However, you should never store mutable instance data inside the Application object because if you assume that your data will stay there, your application will inevitably crash at some point with a NullPointerException . The application object is not guaranteed to stay in memory forever, it will get killed . Contrary to popular belief, the app won\u2019t be restarted from scratch. Android will create a new Application object and start the activity where the user was before to give the illusion that the application was never killed in the first place. So how should we store shared application data? We should store shared data in one of the following ways: Explicitly pass the data to the Activity through the intent. Use one of the many ways to persist the data to disk. Bottom Line : Storing data in the Application object is error-prone and can crash your app. Prefer storing your global data on disk if it is really needed later or explicitly pass to your activity in the intent\u2019s extras. Resources \u00b6 https://developer.android.com/reference/android/app/Application.html http://stackoverflow.com/questions/18002227/why-extend-an-application-class http://www.devahead.com/blog/2011/06/extending-the-android-application-class-and-dealing-with-singleton/ https://tausiq.wordpress.com/2013/01/27/android-make-use-of-android-application-class-as-singleton-object/ https://androidresearch.wordpress.com/2012/03/22/defining-global-variables-in-android/ http://www.helloandroid.com/tutorials/maintaining-global-application-state https://www.mobomo.com/2011/5/how-to-use-application-object-of-android/ http://www.developerphil.com/dont-store-data-in-the-application-object/ http://www.vogella.com/tutorials/AndroidLifeCycle/article.html#managing-the-application-life-cycle https://github.com/hotchemi/PermissionsDispatcher http://developer.android.com/guide/topics/security/permissions.html http://developer.android.com/preview/features/runtime-permissions.html https://github.com/googlesamples/android-RuntimePermissions http://www.androidauthority.com/goodbye-menu-button-hello-action-bar-48312/ http://android-developers.blogspot.in/2013/08/actionbarcompat-and-io-2013-app-source.html http://android-developers.blogspot.com/2014/10/appcompat-v21-material-design-for-pre.html https://chris.banes.me/2015/04/22/support-libraries-v22-1-0/ http://developer.android.com/guide/topics/resources/runtime-changes.html http://developer.android.com/training/basics/activity-lifecycle/recreating.html http://www.vogella.com/tutorials/AndroidLifeCycle/article.html#configurationchange http://www.androiddesignpatterns.com/2013/04/retaining-objects-across-config-changes.html http://www.intertech.com/Blog/saving-and-retrieving-android-instance-state-part-1/ http://sunil-android.blogspot.com/2013/03/save-and-restore-instance-state.html https://medium.com/google-developers/activity-revival-and-the-case-of-the-rotating-device-167e34f9a30d#.nq3b23lxg http://developer.android.com/training/basics/activity-lifecycle/index.html https://github.com/xxv/android-lifecycle http://blog.smartlogic.io/2013/07/09/organizing-your-android-development-code-structure http://stackoverflow.com/questions/5525872/android-project-package-structure http://www.javapractices.com/topic/TopicAction.do?Id=205 http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Project-Structure http://developer.android.com/guide/topics/resources/string-resource.html http://developer.android.com/guide/topics/resources/accessing-resources.html http://mobile.tutsplus.com/tutorials/android/android-string/ http://developer.android.com/guide/topics/resources/providing-resources.html http://developer.android.com/training/multiscreen/screendensities.html http://www.evoketechnologies.com/blog/effective-ui-design-tips-android-devices/ http://www.androiddesignpatterns.com/2016/08/contextcompat-getcolor-getdrawable.html/ http://developer.android.com/tools/projects/index.html#ApplicationProjects http://www.codeproject.com/Articles/395614/Basic-structure-of-an-Android-project http://mobile.tutsplus.com/tutorials/android/android-sdk-app-structure/","title":"Android Project Structure"},{"location":"project-structure/#android-project-structure","text":"Within an Android app project structure, the most frequently edited folders are: src - Java source files associated with your project. This includes the Activity controller files as well as your models and helpers. res - Resource files associated with your project. All graphics, strings, layouts, and other resource files are stored in the resource file hierarchy under the res directory. res/layout - XML layout files that describe the views and layouts for each activity and for partial views such as list items. res/values - XML files which store various attribute values. These include strings.xml , dimens.xml , styles.xml , colors.xml , themes.xml , and so on. res/drawable - Here we store the various density-independent graphic assets used in our application. res/drawable-hdpi - Series of folders for density specific images to use for various resolutions. The most frequently edited files are: res/layout/activity_foo.xml - This file describes the layout of the activity's UI. This means the placement of every view object on one app screen. src/.../FooActivity.java - The Activity \"controller\" that constructs the activity using the view, and handles all event handling and view logic for one app screen. AndroidManifest.xml - This is the Android application definition file. It contains information about the Android application such as minimum Android version, permission to access Android device capabilities such as internet access permission, ability to use phone permission, etc. Other less edited folders include: gen - Generated Java code files, this library is for Android internal use only. assets - Uncompiled source files associated with your project; Rarely used. bin - Resulting application package files associated with your project once it\u2019s been built. libs - Contains any secondary libraries (jars) you might want to link to your app.","title":"Android Project Structure"},{"location":"project-structure/#organizing-source-files","text":"Android applications should always be neatly organized with a clear folder structure that makes your code easy to read. In addition, proper naming conventions for code and classes are important to ensure your code is clean and maintainable.","title":"Organizing Source Files"},{"location":"project-structure/#naming-conventions","text":"Be sure to check out the Ribot Code and Style Guidelines for a more extensive breakdown of suggested style and naming guidelines.","title":"Naming Conventions"},{"location":"project-structure/#for-java-code","text":"The following naming and casing conventions are important for your Java code: Type Example Description Link Variable incomeTaxRate All variables should be camel case Read More Constant DAYS_IN_WEEK All constants should be all uppercase Read More Method convertToEuroDollars All methods should be camel case Read More Parameter depositAmount All parameter names should be camel case Read More See this naming guide for more details.","title":"For Java Code"},{"location":"project-structure/#for-android-classes","text":"Android classes should be named with a particular convention that makes their purpose clear in the name. For example all activities should end with Activity as in MoviesActivity . The following are the most important naming conventions: Name Convention Inherits Activity CreateTodoItemActivity AppCompatActivity , Activity List Adapter TodoItemsAdapter BaseAdapter , ArrayAdapter Database Helper TodoItemsDbHelper SQLiteOpenHelper Network Client TodoItemsClient N/A Fragment TodoItemDetailFragment Fragment Service FetchTodoItemService Service , IntentService Use your best judgement for other types of files. The goal is for any Android-specific classes to be identifiable by the suffix.","title":"For Android Classes"},{"location":"project-structure/#android-folder-structure","text":"There are several best practices for organizing your app's package structure.","title":"Android Folder Structure"},{"location":"project-structure/#organize-packages-by-category","text":"The way to do this is to group things together by their category. Each component goes to the corresponding package: com.example.myapp.activities - Contains all activities com.example.myapp.adapters - Contains all custom adapters com.example.myapp.models - Contains all our data models com.example.myapp.network - Contains all networking code com.example.myapp.fragments - Contains all fragments com.example.myapp.utils - Contains all helpers supporting code. com.example.myapp.interfaces - Contains all interfaces Keeping these folders in each app means that code is logically organized and scanning the code is a pleasant experience. You can see a slight variation on this structure as suggested by Futurice on their best-practices repo .","title":"Organize packages by category"},{"location":"project-structure/#organize-packages-by-application-features","text":"Alternatively, we can package-by-feature rather than layers. This approach uses packages to reflect the feature set . Consider the following package structure as outlined in this post : com.example.myapp.service.* - Is a subpackage for all background related service packages/classes com.example.myapp.ui.* - Is a subpackage for all UI-related packages/classes com.example.myapp.ui.mainscreen - Contains classes related to some app's Main Screen com.example.myapp.ui.detailsscreen - Contains classes related to some app's Item Details Screen This feature allows you to place DetailsActivity , DetailsFragment , DetailsListAdapter , DetailsItemModel in one package, which provides comfortable navigation when you're working on \"item details\" feature. DetailsListAdapter and DetailsItemModel classes and/or their properties can be made package-private, and thus not exposed outside of the package. Within the package you may access their properties directly without generating tons of boilerplate \"setter\" methods. This can make object creation really simple and intuitive, while objects remain immutable outside the package.","title":"Organize packages by application features"},{"location":"project-structure/#organizing-resources","text":"Resources should be split up into the following key files and folders: Name Path Description XML Layouts res/layout/ This is where we put our XML layout files. XML Menus res/menu/ This is where we put our AppBar menu actions. Drawables res/drawable This is where we put images and XML drawables. Colors res/values/colors.xml This is where we put color definitions . Dimensions res/values/dimens.xml This is where we put dimension values . Strings res/values/strings.xml This is where we put strings. Styles res/values/styles.xml This is where we put style values. See the full list of resources here and note the following: Don't hardcode color hex values in the layout . Instead of hardcoding these values, be sure to move all colors into res/values/colors.xml and reference the colors in layouts with @color/royal_blue . Don't hardcode margin / padding dimensions in the layout . Instead of hardcoding these values, be sure to move all dimension values into res/values/dimens.xml and reference these in layouts with @dimen/item_padding_left . To support multiple devices, we can then use the alternative resources system to provide different colors, strings, dimens, styles, etc based on the device type, screen size, API version and much more. Be sure to start properly organizing your resources early on in the development of an application. Be sure to check out the Ribot Code and Style Guidelines for a more extensive breakdown of suggested style and naming guidelines.","title":"Organizing Resources"},{"location":"project-structure/#organizing-resources-into-subfolders","text":"Often there are questions about organizing not just the source files but also better organizing the application resources . In a modern app, there are often hundreds of different layout files, drawables, styles, etc and by default these are all grouped together in a flat list within a single subdirectory (i.e res/layout ). Refer to stackoverflow post for a discussion of the other options.","title":"Organizing Resources into Subfolders"},{"location":"project-structure/#conclusion","text":"It is up to you to decide which of the aforementioned approaches suits your project best. However, in general Java programming, packaging apps by feature is considered preferable and makes a lot of sense .","title":"Conclusion"},{"location":"project-structure/#retaining-fragments","text":"In many cases, we can avoid problems when an Activity is re-created by simply using fragments. If your views and state are within a fragment, we can easily have the fragment be retained when the activity is re-created: public class RetainedFragment extends Fragment { // data object we want to retain private MyDataObject data ; // this method is only called once for this fragment @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); // retain this fragment when activity is re-initialized setRetainInstance ( true ); } public void setData ( MyDataObject data ) { this . data = data ; } public MyDataObject getData () { return data ; } } This approach keeps the fragment from being destroyed during the activity lifecycle. They are instead retained inside the Fragment Manager. See the Android official docs for more information . Now you can check to see if the fragment already exists by tag before creating one and the fragment will retain it's state across configuration changes. See the Handling Runtime Changes guide for more details.","title":"Retaining Fragments"},{"location":"project-structure/#understanding-the-android-application-class","text":"The Application class in Android is the base class within an Android app that contains all other components such as activities and services. The Application class, or any subclass of the Application class, is instantiated before any other class when the process for your application/package is created. This class is primarily used for initialization of global state before the first Activity is displayed. Note that custom Application objects should be used carefully and are often not needed at all .","title":"Understanding the Android Application Class"},{"location":"project-structure/#custom-application-classes","text":"In many apps, there's no need to work with an application class directly. However, there are a few acceptable uses of a custom application class: Specialized tasks that need to run before the creation of your first activity Global initialization that needs to be shared across all components (crash reporting, persistence) Static methods for easy access to static immutable data such as a shared network client object Note that you should never store mutable shared data inside the Application object since that data might disappear or become invalid at any time. Instead, store any mutable shared data using [[persistence strategies|Persisting-Data-to-the-Device]] such as files, SharedPreferences or SQLite .","title":"Custom Application Classes"},{"location":"project-structure/#defining-your-application-class","text":"If we do want a custom application class, we start by creating a new class which extends android.app.Application as follows: import android.app.Application ; public class MyCustomApplication extends Application { // Called when the application is starting, before any other application objects have been created. // Overriding this method is totally optional! @Override public void onCreate () { super . onCreate (); // Required initialization logic here! } // Called by the system when the device configuration changes while your component is running. // Overriding this method is totally optional! @Override public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ); } // This is called when the overall system is running low on memory, // and would like actively running processes to tighten their belts. // Overriding this method is totally optional! @Override public void onLowMemory () { super . onLowMemory (); } } And specify the android:name property in the the <application> node in AndroidManifest.xml : <application android:name= \".MyCustomApplication\" android:icon= \"@drawable/icon\" android:label= \"@string/app_name\" ... > That's all you should need to get started with your custom application.","title":"Defining Your Application Class"},{"location":"project-structure/#limitations-and-warnings","text":"There is always data and information that is needed in many places within your app. This might be a session token, the result of an expensive computation, etc. It might be tempting to use the application instance in order to avoid the overhead of passing objects between activities or keeping those in persistent storage. However, you should never store mutable instance data inside the Application object because if you assume that your data will stay there, your application will inevitably crash at some point with a NullPointerException . The application object is not guaranteed to stay in memory forever, it will get killed . Contrary to popular belief, the app won\u2019t be restarted from scratch. Android will create a new Application object and start the activity where the user was before to give the illusion that the application was never killed in the first place. So how should we store shared application data? We should store shared data in one of the following ways: Explicitly pass the data to the Activity through the intent. Use one of the many ways to persist the data to disk. Bottom Line : Storing data in the Application object is error-prone and can crash your app. Prefer storing your global data on disk if it is really needed later or explicitly pass to your activity in the intent\u2019s extras.","title":"Limitations and Warnings"},{"location":"project-structure/#resources","text":"https://developer.android.com/reference/android/app/Application.html http://stackoverflow.com/questions/18002227/why-extend-an-application-class http://www.devahead.com/blog/2011/06/extending-the-android-application-class-and-dealing-with-singleton/ https://tausiq.wordpress.com/2013/01/27/android-make-use-of-android-application-class-as-singleton-object/ https://androidresearch.wordpress.com/2012/03/22/defining-global-variables-in-android/ http://www.helloandroid.com/tutorials/maintaining-global-application-state https://www.mobomo.com/2011/5/how-to-use-application-object-of-android/ http://www.developerphil.com/dont-store-data-in-the-application-object/ http://www.vogella.com/tutorials/AndroidLifeCycle/article.html#managing-the-application-life-cycle https://github.com/hotchemi/PermissionsDispatcher http://developer.android.com/guide/topics/security/permissions.html http://developer.android.com/preview/features/runtime-permissions.html https://github.com/googlesamples/android-RuntimePermissions http://www.androidauthority.com/goodbye-menu-button-hello-action-bar-48312/ http://android-developers.blogspot.in/2013/08/actionbarcompat-and-io-2013-app-source.html http://android-developers.blogspot.com/2014/10/appcompat-v21-material-design-for-pre.html https://chris.banes.me/2015/04/22/support-libraries-v22-1-0/ http://developer.android.com/guide/topics/resources/runtime-changes.html http://developer.android.com/training/basics/activity-lifecycle/recreating.html http://www.vogella.com/tutorials/AndroidLifeCycle/article.html#configurationchange http://www.androiddesignpatterns.com/2013/04/retaining-objects-across-config-changes.html http://www.intertech.com/Blog/saving-and-retrieving-android-instance-state-part-1/ http://sunil-android.blogspot.com/2013/03/save-and-restore-instance-state.html https://medium.com/google-developers/activity-revival-and-the-case-of-the-rotating-device-167e34f9a30d#.nq3b23lxg http://developer.android.com/training/basics/activity-lifecycle/index.html https://github.com/xxv/android-lifecycle http://blog.smartlogic.io/2013/07/09/organizing-your-android-development-code-structure http://stackoverflow.com/questions/5525872/android-project-package-structure http://www.javapractices.com/topic/TopicAction.do?Id=205 http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Project-Structure http://developer.android.com/guide/topics/resources/string-resource.html http://developer.android.com/guide/topics/resources/accessing-resources.html http://mobile.tutsplus.com/tutorials/android/android-string/ http://developer.android.com/guide/topics/resources/providing-resources.html http://developer.android.com/training/multiscreen/screendensities.html http://www.evoketechnologies.com/blog/effective-ui-design-tips-android-devices/ http://www.androiddesignpatterns.com/2016/08/contextcompat-getcolor-getdrawable.html/ http://developer.android.com/tools/projects/index.html#ApplicationProjects http://www.codeproject.com/Articles/395614/Basic-structure-of-an-Android-project http://mobile.tutsplus.com/tutorials/android/android-sdk-app-structure/","title":"Resources"},{"location":"recycler-view/","text":"RecyclerView \u00b6 RecyclerView \u00b6 Often when you rotate the screen, the app will lose the scroll position and other state of any lists on screen. To properly retain this state for RecyclerView , you can store the instance state onPause and restore onViewCreated as shown below: // YourActivity.java public final static int LIST_STATE_KEY = \"recycler_list_state\" ; Parcelable listState ; protected void onSaveInstanceState ( Bundle state ) { super . onSaveInstanceState ( state ); // Save list state listState = mLayoutManager . onSaveInstanceState (); state . putParcelable ( LIST_STATE_KEY , mListState ); } protected void onRestoreInstanceState ( Bundle state ) { super . onRestoreInstanceState ( state ); // Retrieve list state and list/item positions if ( state != null ) listState = state . getParcelable ( LIST_STATE_KEY ); } @Override protected void onResume () { super . onResume (); if ( listState != null ) { mLayoutManager . onRestoreInstanceState ( listState ); } } Check out this blog post and stackoverflow post for more details.","title":"RecyclerView"},{"location":"recycler-view/#recyclerview","text":"","title":"RecyclerView"},{"location":"recycler-view/#recyclerview_1","text":"Often when you rotate the screen, the app will lose the scroll position and other state of any lists on screen. To properly retain this state for RecyclerView , you can store the instance state onPause and restore onViewCreated as shown below: // YourActivity.java public final static int LIST_STATE_KEY = \"recycler_list_state\" ; Parcelable listState ; protected void onSaveInstanceState ( Bundle state ) { super . onSaveInstanceState ( state ); // Save list state listState = mLayoutManager . onSaveInstanceState (); state . putParcelable ( LIST_STATE_KEY , mListState ); } protected void onRestoreInstanceState ( Bundle state ) { super . onRestoreInstanceState ( state ); // Retrieve list state and list/item positions if ( state != null ) listState = state . getParcelable ( LIST_STATE_KEY ); } @Override protected void onResume () { super . onResume (); if ( listState != null ) { mLayoutManager . onRestoreInstanceState ( listState ); } } Check out this blog post and stackoverflow post for more details.","title":"RecyclerView"},{"location":"remote-notifications/","text":"","title":"Remote notifications"},{"location":"styles-themes/","text":"","title":"Styles themes"},{"location":"android-common-views/button/","text":"Button \u00b6 There are three standard types of buttons: Floating action button : A circular material button that lifts and displays an ink reaction on press. Raised button : A typically rectangular material button that lifts and displays ink reactions on press. Flat button : A button made of ink that displays ink reactions on press but does not lift. To create a button with text, use the following XML : <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"LOGIN\" /> If we want the button's width to be the same as its parent, we would change the android:layout_height to match_parent . <Button android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"LOGIN\" /> In Android Studio, we can preview the effect of the wrap_content property on the width of the button. Drawables on buttons \u00b6 A normal button can also have an image on the left or right, by using the android:drawableLeft and android:drawableRight attributes. Thses drawables have limited use as the images inside them can not be resized. <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/button_text\" android:drawableLeft= \"@drawable/button_icon\" /> Floating Action Button \u00b6 The floating action action button is available as a support package. You need to the Android Support Design v7 package from from Nuget before you can use it in the project. <android.support.design.widget.FloatingActionButton android:id= \"@+id/fab\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_gravity= \"bottom|end\" android:layout_margin= \"16dp\" app:srcCompat= \"@android:drawable/ic_input_add\" /> The floating action button is mostly used inside the CoordinatorLayout or FrameLayout . This layout is also included as part of the Android Support Design Package. <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.design.widget.CoordinatorLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:fitsSystemWindows= \"true\" > <android.support.design.widget.FloatingActionButton android:id= \"@+id/fab\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_gravity= \"bottom|end\" android:layout_margin= \"@dimen/fab_margin\" app:srcCompat= \"@android:drawable/ic_input_add\" /> </android.support.design.widget.CoordinatorLayout> FAB Properties \u00b6 Property Description Position You can position the floating button by using layout_gravity attribute. Size FAB supports two sizes normal and mini . You can define the size of the button by using app:fabSize attribute Background Color By default, fab takes colorAccent as background color. If you want to change the background of fab, use app:backgroundTint attribute to define your own background color Ripple Color Sets the color of the ripple effect of your FloatingActionButton. Can be a color resource or hex string. app:rippleColor Compat Padding Enable compat padding. Maybe a boolean value, such as true or false. app:useCompatPadding Elevation Can be a string, integer, boolean, color value, floating point, dimension value. app:elevation Responding to Click Events \u00b6 When the user clicks a button, the Button object receives an on-click event. To define the click event handler for a button, add the android:onClick attribute to the <Button> element in your XML layout. The value for this attribute must be the name of the method you want to call in response to a click event. The Activity hosting the layout must then implement the corresponding method. For example, here's a layout with a button using android:onClick : <?xml version=\"1.0\" encoding=\"utf-8\"?> <Button xmlns:android= \"http://schemas.android.com/apk/res/android\" android:id= \"@+id/button_send\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/button_send\" android:onClick= \"sendMessage\" /> Within the Activity that hosts this layout, the following method handles the click event: /** Called when the user touches the button */ public void sendMessage ( View view ) { // Do something in response to button click } The method you declare in the android:onClick attribute must have a signature exactly as shown above. Specifically, the method must: Be public Return void Define a View as its only parameter (this will be the View that was clicked) Using an OnClickListener \u00b6 You can also declare the click event handler programmatically rather than in an XML layout. This might be necessary if you instantiate the Button at runtime or you need to declare the click behavior in a Fragment subclass. To declare the event handler programmatically, create an View.OnClickListener object and assign it to the button by calling setOnClickListener(View.OnClickListener) . For example: Button button = ( Button ) findViewById ( R . id . button_send ); button . setOnClickListener ( new View . OnClickListener () { public void onClick ( View v ) { // Do something in response to button click } }); Styling Your Button \u00b6 The appearance of your button (background image and font) may vary from one device to another, because devices by different manufacturers often have different default styles for input controls. You can control exactly how your controls are styled using a theme that you apply to your entire application. For instance, to ensure that all devices running Android 4.0 and higher use the Holo theme in your app, declare android:theme=\"@android:style/Theme.Holo\" in your manifest's <application> element. To customize individual buttons with a different background, specify the android:background attribute with a drawable or color resource. Alternatively, you can apply a style for the button, which works in a manner similar to HTML styles to define multiple style properties such as the background, font, size, and others. Borderless Button \u00b6 A style is used to get the a borderless button. Note that the style does not use the android prefix. <Button style= \"@style/Widget.AppCompat.Button.Borderless\" android:text= \"Borderless Button\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> You can also get a coloured borderless button. The default color used is the accent color from the theme. <Button style= \"@style/Widget.AppCompat.Button.Borderless.Colored\" android:text= \"Borderless Button\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> Custom background \u00b6 If you want to truly redefine the appearance of your button, you can specify a custom background. Instead of supplying a simple bitmap or color, however, your background should be a state list resource that changes appearance depending on the button's current state. You can define the state list in an XML file that defines three different images or colors to use for the different button states. To create a state list drawable for your button background: Create three bitmaps for the button background that represent the default, pressed, and focused button states. To ensure that your images fit buttons of various sizes, create the bitmaps as Nine-patch bitmaps. Place the bitmaps into the res/drawable/ directory of your project. Be sure each bitmap is named properly to reflect the button state that they each represent, such as button_default.9.png , button_pressed.9.png , and button_focused.9.png . Create a new XML file in the res/drawable/ directory (name it something like button_custom.xml ). Insert the following XML: <?xml version=\"1.0\" encoding=\"utf-8\"?> <selector xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:drawable= \"@drawable/button_pressed\" android:state_pressed= \"true\" /> <item android:drawable= \"@drawable/button_focused\" android:state_focused= \"true\" /> <item android:drawable= \"@drawable/button_default\" /> </selector> This defines a single drawable resource, which will change its image based on the current state of the button. The first <item> defines the bitmap to use when the button is pressed (activated). The second <item> defines the bitmap to use when the button is focused (when the button is highlighted using the trackball or directional pad). The third <item> defines the bitmap to use when the button is in the default state (it's neither pressed nor focused). Note: The order of the <item> elements is important. When this drawable is referenced, the <item> elements are traversed in-order to determine which one is appropriate for the current button state. Because the default bitmap is last, it is only applied when the conditions android:state_pressed and android:state_focused have both evaluated as false. This XML file now represents a single drawable resource and when referenced by a Button for its background, the image displayed will change based on these three states. Then simply apply the drawable XML file as the button background: <Button android:id= \"@+id/button_send\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/button_send\" android:onClick= \"sendMessage\" android:background= \"@drawable/button_custom\" />","title":"Button"},{"location":"android-common-views/button/#button","text":"There are three standard types of buttons: Floating action button : A circular material button that lifts and displays an ink reaction on press. Raised button : A typically rectangular material button that lifts and displays ink reactions on press. Flat button : A button made of ink that displays ink reactions on press but does not lift. To create a button with text, use the following XML : <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"LOGIN\" /> If we want the button's width to be the same as its parent, we would change the android:layout_height to match_parent . <Button android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"LOGIN\" /> In Android Studio, we can preview the effect of the wrap_content property on the width of the button.","title":"Button"},{"location":"android-common-views/button/#drawables-on-buttons","text":"A normal button can also have an image on the left or right, by using the android:drawableLeft and android:drawableRight attributes. Thses drawables have limited use as the images inside them can not be resized. <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/button_text\" android:drawableLeft= \"@drawable/button_icon\" />","title":"Drawables on buttons"},{"location":"android-common-views/button/#floating-action-button","text":"The floating action action button is available as a support package. You need to the Android Support Design v7 package from from Nuget before you can use it in the project. <android.support.design.widget.FloatingActionButton android:id= \"@+id/fab\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_gravity= \"bottom|end\" android:layout_margin= \"16dp\" app:srcCompat= \"@android:drawable/ic_input_add\" /> The floating action button is mostly used inside the CoordinatorLayout or FrameLayout . This layout is also included as part of the Android Support Design Package. <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.design.widget.CoordinatorLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:fitsSystemWindows= \"true\" > <android.support.design.widget.FloatingActionButton android:id= \"@+id/fab\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_gravity= \"bottom|end\" android:layout_margin= \"@dimen/fab_margin\" app:srcCompat= \"@android:drawable/ic_input_add\" /> </android.support.design.widget.CoordinatorLayout>","title":"Floating Action Button"},{"location":"android-common-views/button/#fab-properties","text":"Property Description Position You can position the floating button by using layout_gravity attribute. Size FAB supports two sizes normal and mini . You can define the size of the button by using app:fabSize attribute Background Color By default, fab takes colorAccent as background color. If you want to change the background of fab, use app:backgroundTint attribute to define your own background color Ripple Color Sets the color of the ripple effect of your FloatingActionButton. Can be a color resource or hex string. app:rippleColor Compat Padding Enable compat padding. Maybe a boolean value, such as true or false. app:useCompatPadding Elevation Can be a string, integer, boolean, color value, floating point, dimension value. app:elevation","title":"FAB Properties"},{"location":"android-common-views/button/#responding-to-click-events","text":"When the user clicks a button, the Button object receives an on-click event. To define the click event handler for a button, add the android:onClick attribute to the <Button> element in your XML layout. The value for this attribute must be the name of the method you want to call in response to a click event. The Activity hosting the layout must then implement the corresponding method. For example, here's a layout with a button using android:onClick : <?xml version=\"1.0\" encoding=\"utf-8\"?> <Button xmlns:android= \"http://schemas.android.com/apk/res/android\" android:id= \"@+id/button_send\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/button_send\" android:onClick= \"sendMessage\" /> Within the Activity that hosts this layout, the following method handles the click event: /** Called when the user touches the button */ public void sendMessage ( View view ) { // Do something in response to button click } The method you declare in the android:onClick attribute must have a signature exactly as shown above. Specifically, the method must: Be public Return void Define a View as its only parameter (this will be the View that was clicked)","title":"Responding to Click Events"},{"location":"android-common-views/button/#using-an-onclicklistener","text":"You can also declare the click event handler programmatically rather than in an XML layout. This might be necessary if you instantiate the Button at runtime or you need to declare the click behavior in a Fragment subclass. To declare the event handler programmatically, create an View.OnClickListener object and assign it to the button by calling setOnClickListener(View.OnClickListener) . For example: Button button = ( Button ) findViewById ( R . id . button_send ); button . setOnClickListener ( new View . OnClickListener () { public void onClick ( View v ) { // Do something in response to button click } });","title":"Using an OnClickListener"},{"location":"android-common-views/button/#styling-your-button","text":"The appearance of your button (background image and font) may vary from one device to another, because devices by different manufacturers often have different default styles for input controls. You can control exactly how your controls are styled using a theme that you apply to your entire application. For instance, to ensure that all devices running Android 4.0 and higher use the Holo theme in your app, declare android:theme=\"@android:style/Theme.Holo\" in your manifest's <application> element. To customize individual buttons with a different background, specify the android:background attribute with a drawable or color resource. Alternatively, you can apply a style for the button, which works in a manner similar to HTML styles to define multiple style properties such as the background, font, size, and others.","title":"Styling Your Button"},{"location":"android-common-views/button/#borderless-button","text":"A style is used to get the a borderless button. Note that the style does not use the android prefix. <Button style= \"@style/Widget.AppCompat.Button.Borderless\" android:text= \"Borderless Button\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> You can also get a coloured borderless button. The default color used is the accent color from the theme. <Button style= \"@style/Widget.AppCompat.Button.Borderless.Colored\" android:text= \"Borderless Button\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" />","title":"Borderless Button"},{"location":"android-common-views/button/#custom-background","text":"If you want to truly redefine the appearance of your button, you can specify a custom background. Instead of supplying a simple bitmap or color, however, your background should be a state list resource that changes appearance depending on the button's current state. You can define the state list in an XML file that defines three different images or colors to use for the different button states. To create a state list drawable for your button background: Create three bitmaps for the button background that represent the default, pressed, and focused button states. To ensure that your images fit buttons of various sizes, create the bitmaps as Nine-patch bitmaps. Place the bitmaps into the res/drawable/ directory of your project. Be sure each bitmap is named properly to reflect the button state that they each represent, such as button_default.9.png , button_pressed.9.png , and button_focused.9.png . Create a new XML file in the res/drawable/ directory (name it something like button_custom.xml ). Insert the following XML: <?xml version=\"1.0\" encoding=\"utf-8\"?> <selector xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:drawable= \"@drawable/button_pressed\" android:state_pressed= \"true\" /> <item android:drawable= \"@drawable/button_focused\" android:state_focused= \"true\" /> <item android:drawable= \"@drawable/button_default\" /> </selector> This defines a single drawable resource, which will change its image based on the current state of the button. The first <item> defines the bitmap to use when the button is pressed (activated). The second <item> defines the bitmap to use when the button is focused (when the button is highlighted using the trackball or directional pad). The third <item> defines the bitmap to use when the button is in the default state (it's neither pressed nor focused). Note: The order of the <item> elements is important. When this drawable is referenced, the <item> elements are traversed in-order to determine which one is appropriate for the current button state. Because the default bitmap is last, it is only applied when the conditions android:state_pressed and android:state_focused have both evaluated as false. This XML file now represents a single drawable resource and when referenced by a Button for its background, the image displayed will change based on these three states. Then simply apply the drawable XML file as the button background: <Button android:id= \"@+id/button_send\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/button_send\" android:onClick= \"sendMessage\" android:background= \"@drawable/button_custom\" />","title":"Custom background"},{"location":"android-common-views/checkbox/","text":"CheckBox \u00b6 Checkboxes allow the user to select one or more options from a set. Typically, you should present each checkbox option in a vertical list. <CheckBox android:id= \"@+id/notify_me_checkbox\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/notify_me\" android:textAppearance= \"?android:textAppearanceMedium\" /> Responding to Events \u00b6 We can access whether or not a checkbox is checked with: CheckBox checkCheese = ( CheckBox ) findViewById ( R . id . checkbox_cheese ); // Check if the checkbox is checked boolean isChecked = checkCheese . isChecked (); // Set the checkbox as checked checkCheese . setChecked ( true ); and in our activity, we can manage checkboxes using a checked listener with OnCheckedChangeListener as below // Defines a listener for every time a checkbox is checked or unchecked CompoundButton . OnCheckedChangeListener checkListener = new CompoundButton . OnCheckedChangeListener () { @Override public void onCheckedChanged ( CompoundButton view , boolean checked ) { // compoundButton is the checkbox // boolean is whether or not checkbox is checked // Check which checkbox was clicked switch ( view . getId ()) { case R . id . checkbox_meat : if ( checked ) { // Put some meat on the sandwich } else { // Remove the meat } break ; case R . id . checkbox_cheese : if ( checked ) { // Cheese me } else { // I'm lactose intolerant } break ; } } }; // This actually applies the listener to the checkboxes // by calling `setOnCheckedChangeListener` on each one public void setupCheckboxes () { Checkbox checkCheese = ( Checkbox ) findViewById ( R . id . checkbox_cheese ); Checkbox checkMeat = ( Checkbox ) findViewById ( R . id . checkbox_meat ); checkCheese . setOnCheckedChangeListener ( checkListener ); checkMeat . setOnCheckedChangeListener ( checkListener ); }","title":"CheckBox"},{"location":"android-common-views/checkbox/#checkbox","text":"Checkboxes allow the user to select one or more options from a set. Typically, you should present each checkbox option in a vertical list. <CheckBox android:id= \"@+id/notify_me_checkbox\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/notify_me\" android:textAppearance= \"?android:textAppearanceMedium\" />","title":"CheckBox"},{"location":"android-common-views/checkbox/#responding-to-events","text":"We can access whether or not a checkbox is checked with: CheckBox checkCheese = ( CheckBox ) findViewById ( R . id . checkbox_cheese ); // Check if the checkbox is checked boolean isChecked = checkCheese . isChecked (); // Set the checkbox as checked checkCheese . setChecked ( true ); and in our activity, we can manage checkboxes using a checked listener with OnCheckedChangeListener as below // Defines a listener for every time a checkbox is checked or unchecked CompoundButton . OnCheckedChangeListener checkListener = new CompoundButton . OnCheckedChangeListener () { @Override public void onCheckedChanged ( CompoundButton view , boolean checked ) { // compoundButton is the checkbox // boolean is whether or not checkbox is checked // Check which checkbox was clicked switch ( view . getId ()) { case R . id . checkbox_meat : if ( checked ) { // Put some meat on the sandwich } else { // Remove the meat } break ; case R . id . checkbox_cheese : if ( checked ) { // Cheese me } else { // I'm lactose intolerant } break ; } } }; // This actually applies the listener to the checkboxes // by calling `setOnCheckedChangeListener` on each one public void setupCheckboxes () { Checkbox checkCheese = ( Checkbox ) findViewById ( R . id . checkbox_cheese ); Checkbox checkMeat = ( Checkbox ) findViewById ( R . id . checkbox_meat ); checkCheese . setOnCheckedChangeListener ( checkListener ); checkMeat . setOnCheckedChangeListener ( checkListener ); }","title":"Responding to Events"},{"location":"android-common-views/date-picker/","text":"","title":"Date picker"},{"location":"android-common-views/edittext/","text":"EditText \u00b6 The EditText is the standard text entry widget in Android apps. If the user needs to enter text into an app, this is the primary way for them to do that. There are many important properties that can be set to customize the behavior of an EditText . Several of these are listed below. Check out the official text fields guide for even more input field details. Usage \u00b6 An EditText is added to a layout with all default behaviors with the following XML: <EditText android:id= \"@+id/et_simple\" android:layout_height= \"wrap_content\" android:layout_width= \"match_parent\" > </EditText> Note that an EditText is simply a thin extension of the [[TextView|Working-with-the-TextView]] and inherits all of the same properties. Retrieving the Value \u00b6 Getting the value of the text entered into an EditText is as follows: EditText simpleEditText = ( EditText ) findViewById ( R . id . et_simple ); String strValue = simpleEditText . getText (). toString (); Customizing the Input Type \u00b6 By default, any text contents within an EditText control is displayed as plain text. By setting inputType , we can facilitate input of different types of information, like phone numbers and passwords: <EditText ... android:inputType= \"phone\" > </EditText> Most common input types include: Type Description textUri Text that will be used as a URI textEmailAddress Text that will be used as an e-mail address textPersonName Text that is the name of a person textPassword Text that is a password that should be obscured textVisiblePassword Text, next button, and no microphone input number A numeric only field phone For entering a phone number date For entering a date time For entering a time textMultiLine Allow multiple lines of text in the field You can set multiple inputType attributes if needed (separated by '|') <EditText android:inputType= \"textCapSentences|textMultiline\" /> You can see a list of all available input types here . Further Entry Customization \u00b6 We might want to limit the entry to a single-line of text (avoid newlines): <EditText android:maxLines= \"1\" android:lines= \"1\" /> You can limit the characters that can be entered into a field using the digits attribute: <EditText android:inputType= \"number\" android:digits= \"01\" /> This would restrict the digits entered to just \"0\" and \"1\". We might want to limit the total number of characters with: <EditText android:maxLength= \"5\" /> Using these properties we can define the expected input behavior for text fields. Adjusting Colors \u00b6 You can adjust the highlight background color of selected text within an EditText with the android:textColorHighlight property: <EditText android:textColorHighlight= \"#7cff88\" /> with a result such as this: Displaying Placeholder Hints \u00b6 You may want to set the hint for the EditText control to prompt a user for specific input with: <EditText ... android:hint= \"@string/my_hint\" > </EditText> which results in: Changing the bottom line color \u00b6 Assuming you are using the AppCompat library, you can override the styles colorControlNormal , colorControlActivated , and colorControlHighlight : <style name= \"Theme.App.Base\" parent= \"Theme.AppCompat.Light.DarkActionBar\" > <item name= \"colorControlNormal\" > #d32f2f </item> <item name= \"colorControlActivated\" > #ff5722 </item> <item name= \"colorControlHighlight\" > #f44336 </item> </style> If you do not see these styles applied within a DialogFragment, there is a known bug when using the LayoutInflater passed into the onCreateView() method. The issue has already been fixed in the AppCompat v23 library. See this [[guide|Migrating-to-the-AppCompat-Library#overview]] about how to upgrade. Another temporary workaround is to use the Activity's layout inflater instead of the one passed into the onCreateView() method: public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = getActivity (). getLayoutInflater (). inflate ( R . layout . dialog_fragment , container ); } Listening for EditText Input \u00b6 Check out the [[basic event listeners|Basic-Event-Listeners#edittext-common-listeners]] cliffnotes for a look at how to listen for changes to an EditText and perform an action when those changes occur. Displaying Floating Label Feedback \u00b6 Traditionally, the EditText hides the hint message (explained above) after the user starts typing. In addition, any validation error messages had to be managed manually by the developer. Starting with Android M and the [[design support library|Design-Support-Library]], the TextInputLayout can be used to setup a floating label to display hints and error messages. First, wrap the EditText in a TextInputLayout : <android.support.design.widget.TextInputLayout android:id= \"@+id/username_text_input_layout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <EditText android:id= \"@+id/etUsername\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_centerHorizontal= \"true\" android:layout_centerVertical= \"true\" android:ems= \"10\" android:hint= \"Username\" /> </android.support.design.widget.TextInputLayout> Now the hint will automatically begin to float once the EditText takes focus as shown below: We can also use the TextInputLayout to display error messages using the setError and setErrorEnabled properties in the activity at runtime: private void setupFloatingLabelError () { final TextInputLayout floatingUsernameLabel = ( TextInputLayout ) findViewById ( R . id . username_text_input_layout ); floatingUsernameLabel . getEditText (). addTextChangedListener ( new TextWatcher () { // ... @Override public void onTextChanged ( CharSequence text , int start , int count , int after ) { if ( text . length () > 0 && text . length () <= 4 ) { floatingUsernameLabel . setError ( getString ( R . string . username_required )); floatingUsernameLabel . setErrorEnabled ( true ); } else { floatingUsernameLabel . setErrorEnabled ( false ); } } @Override public void beforeTextChanged ( CharSequence s , int start , int count , int after ) { // TODO Auto-generated method stub } @Override public void afterTextChanged ( Editable s ) { } }); } Here we use the addTextChangedListener to watch as the value changes to determine when to display the error message or revert to the hint. Adding Character Counting \u00b6 TextInputLayout since the announcement of support design library v23.1 also can expose a character counter for an EditText defined within it. The counter will be rendered below the EditText and can change colors of both the line and character counter if the maximum number of characters has been exceeded: The TextInputLayout simply needs to define app:counterEnabled and app:CounterMaxLength in the XML attributes. These settings can also be defined dynamically through setCounterEnabled() and setCounterMaxLength() : <android.support.design.widget.TextInputLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:counterEnabled= \"true\" app:counterMaxLength= \"10\" app:counterTextAppearance= \"@style/counterText\" app:counterOverflowTextAppearance= \"@style/counterOverride\" > <EditText android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:hint= \"Username\" android:layout_centerHorizontal= \"true\" android:layout_centerVertical= \"true\" android:ems= \"10\" android:hint= \"Username\" /> </android.support.design.widget.TextInputLayout> Adding Password Visibility Toggles \u00b6 NOTE : You must have support library 24.2.0 or higher to use this feature. If you use an EditText with an input password type, you can also enable an icon that can show or hide the entire text using the passwordToggleEnabled attribute. You can also change the default eye icon with passwordToggleDrawable attribute or the color hint using the passwordToggleTint attribute. See the TextInputLayout attributes for more details. <android.support.design.widget.TextInputLayout android:id= \"@+id/username_text_input_layout\" app:passwordToggleEnabled= \"true\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <EditText android:id= \"@+id/etUsername\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_centerHorizontal= \"true\" android:layout_centerVertical= \"true\" android:ems= \"10\" android:inputType= \"textPassword\" android:hint= \"Username\" /> </android.support.design.widget.TextInputLayout> Styling TextInputLayout \u00b6 Make sure you have the app namespace ( xmlns:app=\"http://schemas.android.com/apk/res-auto\" defined in your outer layout. You can type appNS as a shortcut in Android Studio to be declared. The hint text can be styled by defining app:hintTextAppearance , and the error text can be changed with app:errorTextAppearance. The counter text and overflow text can also have their own text styles by defining app:counterTextAppearance and app:counterOverflowTextAppearance . We can use textColor , textSize , and fontFamily to help change the color, size, or font: <style name= \"counterText\" > <item name= \"android:textColor\" > #aa5353cc </item> </style> <style name= \"counterOverride\" > <item name= \"android:textColor\" > #ff0000 </item> </style> Providing Auto-complete \u00b6 Check out the official text fields guide for a step-by-step on how to setup autocomplete for the entry.","title":"EditText"},{"location":"android-common-views/edittext/#edittext","text":"The EditText is the standard text entry widget in Android apps. If the user needs to enter text into an app, this is the primary way for them to do that. There are many important properties that can be set to customize the behavior of an EditText . Several of these are listed below. Check out the official text fields guide for even more input field details.","title":"EditText"},{"location":"android-common-views/edittext/#usage","text":"An EditText is added to a layout with all default behaviors with the following XML: <EditText android:id= \"@+id/et_simple\" android:layout_height= \"wrap_content\" android:layout_width= \"match_parent\" > </EditText> Note that an EditText is simply a thin extension of the [[TextView|Working-with-the-TextView]] and inherits all of the same properties.","title":"Usage"},{"location":"android-common-views/edittext/#retrieving-the-value","text":"Getting the value of the text entered into an EditText is as follows: EditText simpleEditText = ( EditText ) findViewById ( R . id . et_simple ); String strValue = simpleEditText . getText (). toString ();","title":"Retrieving the Value"},{"location":"android-common-views/edittext/#customizing-the-input-type","text":"By default, any text contents within an EditText control is displayed as plain text. By setting inputType , we can facilitate input of different types of information, like phone numbers and passwords: <EditText ... android:inputType= \"phone\" > </EditText> Most common input types include: Type Description textUri Text that will be used as a URI textEmailAddress Text that will be used as an e-mail address textPersonName Text that is the name of a person textPassword Text that is a password that should be obscured textVisiblePassword Text, next button, and no microphone input number A numeric only field phone For entering a phone number date For entering a date time For entering a time textMultiLine Allow multiple lines of text in the field You can set multiple inputType attributes if needed (separated by '|') <EditText android:inputType= \"textCapSentences|textMultiline\" /> You can see a list of all available input types here .","title":"Customizing the Input Type"},{"location":"android-common-views/edittext/#further-entry-customization","text":"We might want to limit the entry to a single-line of text (avoid newlines): <EditText android:maxLines= \"1\" android:lines= \"1\" /> You can limit the characters that can be entered into a field using the digits attribute: <EditText android:inputType= \"number\" android:digits= \"01\" /> This would restrict the digits entered to just \"0\" and \"1\". We might want to limit the total number of characters with: <EditText android:maxLength= \"5\" /> Using these properties we can define the expected input behavior for text fields.","title":"Further Entry Customization"},{"location":"android-common-views/edittext/#adjusting-colors","text":"You can adjust the highlight background color of selected text within an EditText with the android:textColorHighlight property: <EditText android:textColorHighlight= \"#7cff88\" /> with a result such as this:","title":"Adjusting Colors"},{"location":"android-common-views/edittext/#displaying-placeholder-hints","text":"You may want to set the hint for the EditText control to prompt a user for specific input with: <EditText ... android:hint= \"@string/my_hint\" > </EditText> which results in:","title":"Displaying Placeholder Hints"},{"location":"android-common-views/edittext/#changing-the-bottom-line-color","text":"Assuming you are using the AppCompat library, you can override the styles colorControlNormal , colorControlActivated , and colorControlHighlight : <style name= \"Theme.App.Base\" parent= \"Theme.AppCompat.Light.DarkActionBar\" > <item name= \"colorControlNormal\" > #d32f2f </item> <item name= \"colorControlActivated\" > #ff5722 </item> <item name= \"colorControlHighlight\" > #f44336 </item> </style> If you do not see these styles applied within a DialogFragment, there is a known bug when using the LayoutInflater passed into the onCreateView() method. The issue has already been fixed in the AppCompat v23 library. See this [[guide|Migrating-to-the-AppCompat-Library#overview]] about how to upgrade. Another temporary workaround is to use the Activity's layout inflater instead of the one passed into the onCreateView() method: public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = getActivity (). getLayoutInflater (). inflate ( R . layout . dialog_fragment , container ); }","title":"Changing the bottom line color"},{"location":"android-common-views/edittext/#listening-for-edittext-input","text":"Check out the [[basic event listeners|Basic-Event-Listeners#edittext-common-listeners]] cliffnotes for a look at how to listen for changes to an EditText and perform an action when those changes occur.","title":"Listening for EditText Input"},{"location":"android-common-views/edittext/#displaying-floating-label-feedback","text":"Traditionally, the EditText hides the hint message (explained above) after the user starts typing. In addition, any validation error messages had to be managed manually by the developer. Starting with Android M and the [[design support library|Design-Support-Library]], the TextInputLayout can be used to setup a floating label to display hints and error messages. First, wrap the EditText in a TextInputLayout : <android.support.design.widget.TextInputLayout android:id= \"@+id/username_text_input_layout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <EditText android:id= \"@+id/etUsername\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_centerHorizontal= \"true\" android:layout_centerVertical= \"true\" android:ems= \"10\" android:hint= \"Username\" /> </android.support.design.widget.TextInputLayout> Now the hint will automatically begin to float once the EditText takes focus as shown below: We can also use the TextInputLayout to display error messages using the setError and setErrorEnabled properties in the activity at runtime: private void setupFloatingLabelError () { final TextInputLayout floatingUsernameLabel = ( TextInputLayout ) findViewById ( R . id . username_text_input_layout ); floatingUsernameLabel . getEditText (). addTextChangedListener ( new TextWatcher () { // ... @Override public void onTextChanged ( CharSequence text , int start , int count , int after ) { if ( text . length () > 0 && text . length () <= 4 ) { floatingUsernameLabel . setError ( getString ( R . string . username_required )); floatingUsernameLabel . setErrorEnabled ( true ); } else { floatingUsernameLabel . setErrorEnabled ( false ); } } @Override public void beforeTextChanged ( CharSequence s , int start , int count , int after ) { // TODO Auto-generated method stub } @Override public void afterTextChanged ( Editable s ) { } }); } Here we use the addTextChangedListener to watch as the value changes to determine when to display the error message or revert to the hint.","title":"Displaying Floating Label Feedback"},{"location":"android-common-views/edittext/#adding-character-counting","text":"TextInputLayout since the announcement of support design library v23.1 also can expose a character counter for an EditText defined within it. The counter will be rendered below the EditText and can change colors of both the line and character counter if the maximum number of characters has been exceeded: The TextInputLayout simply needs to define app:counterEnabled and app:CounterMaxLength in the XML attributes. These settings can also be defined dynamically through setCounterEnabled() and setCounterMaxLength() : <android.support.design.widget.TextInputLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:counterEnabled= \"true\" app:counterMaxLength= \"10\" app:counterTextAppearance= \"@style/counterText\" app:counterOverflowTextAppearance= \"@style/counterOverride\" > <EditText android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:hint= \"Username\" android:layout_centerHorizontal= \"true\" android:layout_centerVertical= \"true\" android:ems= \"10\" android:hint= \"Username\" /> </android.support.design.widget.TextInputLayout>","title":"Adding Character Counting"},{"location":"android-common-views/edittext/#adding-password-visibility-toggles","text":"NOTE : You must have support library 24.2.0 or higher to use this feature. If you use an EditText with an input password type, you can also enable an icon that can show or hide the entire text using the passwordToggleEnabled attribute. You can also change the default eye icon with passwordToggleDrawable attribute or the color hint using the passwordToggleTint attribute. See the TextInputLayout attributes for more details. <android.support.design.widget.TextInputLayout android:id= \"@+id/username_text_input_layout\" app:passwordToggleEnabled= \"true\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <EditText android:id= \"@+id/etUsername\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_centerHorizontal= \"true\" android:layout_centerVertical= \"true\" android:ems= \"10\" android:inputType= \"textPassword\" android:hint= \"Username\" /> </android.support.design.widget.TextInputLayout>","title":"Adding Password Visibility Toggles"},{"location":"android-common-views/edittext/#styling-textinputlayout","text":"Make sure you have the app namespace ( xmlns:app=\"http://schemas.android.com/apk/res-auto\" defined in your outer layout. You can type appNS as a shortcut in Android Studio to be declared. The hint text can be styled by defining app:hintTextAppearance , and the error text can be changed with app:errorTextAppearance. The counter text and overflow text can also have their own text styles by defining app:counterTextAppearance and app:counterOverflowTextAppearance . We can use textColor , textSize , and fontFamily to help change the color, size, or font: <style name= \"counterText\" > <item name= \"android:textColor\" > #aa5353cc </item> </style> <style name= \"counterOverride\" > <item name= \"android:textColor\" > #ff0000 </item> </style>","title":"Styling TextInputLayout"},{"location":"android-common-views/edittext/#providing-auto-complete","text":"Check out the official text fields guide for a step-by-step on how to setup autocomplete for the entry.","title":"Providing Auto-complete"},{"location":"android-common-views/exo-player/","text":"","title":"Exo player"},{"location":"android-common-views/floating-action-bar/","text":"","title":"Floating action bar"},{"location":"android-common-views/image-button/","text":"ImageButton \u00b6 A button that displays an image and its clickable. <ImageButton android:id= \"@+id/photo_image_view\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:scaleType= \"centerCrop\" android:src= \"@drawable/beach\" />","title":"ImageButton"},{"location":"android-common-views/image-button/#imagebutton","text":"A button that displays an image and its clickable. <ImageButton android:id= \"@+id/photo_image_view\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:scaleType= \"centerCrop\" android:src= \"@drawable/beach\" />","title":"ImageButton"},{"location":"android-common-views/image-view/","text":"ImageView \u00b6 Typically, images are displayed using the built-in image view. This view takes care of the loading and optimizing of the image, freeing you to focus on app-specific details like the layout and content. In this guide, we will take a look at how to use an ImageView, how to manipulate bitmaps, learn about the different density folders and more. Usage \u00b6 At the simplest level, an ImageView is simply a view you embed within an XML layout that is used to display an image (or any drawable) on the screen. The ImageView looks like this in res/layout/activity_main.xml : <ImageView android:id= \"@+id/image\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:scaleType= \"center\" android:src= \"@drawable/my_image\" /> The ImageView handles all the loading and scaling of the image for you. Note the scaleType attribute which defines how the images will be scaled to fit in your layout. In the example, using scaleType \"center\", the image will be displayed at its native resolution and centered in the view, regardless of how much space the view consumes. Sizing ImageView Controls \u00b6 By default, contents of an ImageView control are of a certain size -- usually the size of the image dimensions. They can also be bounded by their layout_width and layout_height attributes: <ImageView android:layout_width= \"50dp\" android:layout_height= \"50dp\" android:scaleType= \"fitXY\" ... /> The scaleType above has been set to fitXY which sets the height and the width up or down to fit the maximum dimensions specified. Fixing the width and height however means that the proportions of the width and height of the original image, known as the aspect ratio, will be altered. We can take advantage of the adjustViewBounds parameter to preserve this aspect ratio. However, we must either allow the height and/or width to be adjustable (i.e. by using maxWidth and using wrap_content for the dimension). Otherwise, the dimensions cannot be readjusted to meet the required aspect ratio. <ImageView android:layout_width= \"50dp\" android:layout_height= \"wrap_content\" android:scaleType= \"fitXY\" android:adjustViewBounds= \"true\" ... /> By combining these properties together we can control the rough size of the image and still adjust the image according to the proper aspect ratio. We can also size an ImageView at runtime within our Java source code by modifying the width or height inside getLayoutParams() for the view: imageView . getLayoutParams (). height = 100 ; // OR imageView . getLayoutParams (). width = 100 ; In certain cases, the image needs to be scaled to fit the parent view's width and the height should be adjusted proportionally. We can achieve this using an extended ResizableImageView class as described in the post. Scale Types \u00b6 An ImageView can display an image differently based on the scaleType provided. Above we discussed the fitXY type along with adjustViewBounds to match the aspect ratio of the drawable. The following is a list of all the most common types: Scale Type Description center Displays the image centered in the view with no scaling. centerCrop Scales the image such that both the x and y dimensions are greater than or equal to the view, while maintaining the image aspect ratio; centers the image in the view. centerInside Scales the image to fit inside the view, while maintaining the image aspect ratio. If the image is already smaller than the view, then this is the same as center. fitCenter Scales the image to fit inside the view, while maintaining the image aspect ratio. At least one axis will exactly match the view, and the result is centered inside the view. fitStart Same as fitCenter but aligned to the top left of the view. fitEnd Same as fitCenter but aligned to the bottom right of the view. fitXY Scales the x and y dimensions to exactly match the view size; does not maintain the image aspect ratio. matrix Scales the image using a supplied Matrix class. The matrix can be supplied using the setImageMatrix method. A Matrix class can be used to apply transformations such as rotations to an image. Note: The fitXY scale type allows you to set the exact size of the image in your layout. However, be mindful of potential distortions of the image due to scaling. If you\u2019re creating a photo-viewing application, you will probably want to use the center or fitCenter scale types. Refer to this ImageView ScaleType visual guide for additional reference. Remember that if you wish to match the aspect ratio of the actual drawable, adjustViewBounds=true must be declared along with not defining an explicit width and/or height. Supporting Multiple Densities \u00b6 Since Android has so many different screen sizes, resolutions and densities, there is a [[powerful system for selecting the correct image asset|Understanding-App-Resources#introducing-alternate-resources]] for the correct device. There are specific drawable folders for each device density category including: ldpi (low), mdpi (medium), hdpi (high), and xhdpi (extra high). Notice that every app has folders for image drawables such as drawable-mdpi which is for \"medium dots per inch\". To create alternative bitmap drawables for different densities, you should follow the 3:4:6:8 scaling ratio between the four generalized densities. Refer to the chart below: Density DPI Example Device Scale Pixels ldpi 120 Galaxy Y 0.75x 1dp = 0.75px mdpi 160 Galaxy Tab 1.0x 1dp = 1px hdpi 240 Galaxy S II 1.5x 1dp = 1.5px xhdpi 320 Nexus 4 2.0x 1dp = 2px xxhdpi 480 Nexus 5 3.0x 1dp = 3px xxxhdpi 640 Nexus 6 4.0x 1dp = 4px This means that if you generate a 100x100 for mdpi (1x baseline), then you should generate the same resource in 150x150 for hdpi (1.5x), 200x200 image for xhdpi devices (2.0x), 300x300 image for xxhdpi (3.0x) and a 75x75 image for ldpi devices (0.75x). See these density guidelines for additional details. Final Android Resizer \u00b6 To resize images more easily, check out the Final Android Resizer by downloading and running this JAR . This handy utility allows us to select a resources directory, choose an extra high density image and the tool will automatically generate the corresponding lower size images for us and place the subfolders inside the generated res-drawable diretory within the actual res folder in your project as the example shows below in \"Project\" view (left) and the default \"Android\" view (right): Refer to the screens support reference for a more detailed look at supporting a wide range of devices. Also check out the iconography guide for more details. Mipmaps and Drawables \u00b6 Starting with Android 4.3, there is now an option to use the res/mipmap folder to store \"mipmap\" images. Mipmaps are most commonly used for application icons such as the launcher icon. To learn more about the benefits of mipmaps be sure to check out the mipmapping for drawables post . Mipmap image resources can then be accessed using the @mipmap/ic_launcher notation in place of @drawable . Placing icons in mipmap folders (rather than drawable) is considered a best practice because they can often be used at resolutions different from the device\u2019s current density. For example, an xxxhdpi app icon might be used on the launcher for an xxhdpi device. Review this post about preparing for the Nexus 6 which explains in more detail. Working with Bitmaps \u00b6 We can change the bitmap displayed in an ImageView to a drawable resource with: ImageView image = ( ImageView ) findViewById ( R . id . test_image ); image . setImageResource ( R . drawable . test2 ); or to any arbitrary bitmap with: ImageView image = ( ImageView ) findViewById ( R . id . test_image ); Bitmap bMap = BitmapFactory . decodeFile ( \"/sdcard/test2.png\" ); image . setImageBitmap ( bMap ); Scaling a Bitmap \u00b6 If we need to resize a Bitmap, we can call the createScaledBitmap method to resize any bitmap to our desired width and height: // Load a bitmap from the drawable folder Bitmap bMap = BitmapFactory . decodeResource ( getResources (), R . drawable . my_image ); // Resize the bitmap to 150x100 (width x height) Bitmap bMapScaled = Bitmap . createScaledBitmap ( bMap , 150 , 100 , true ); // Loads the resized Bitmap into an ImageView ImageView image = ( ImageView ) findViewById ( R . id . test_image ); image . setImageBitmap ( bMapScaled ); You often want to resize a bitmap but preserve the aspect ratio using a BitmapScaler utility class with code like this: public class BitmapScaler { // Scale and maintain aspect ratio given a desired width // BitmapScaler.scaleToFitWidth(bitmap, 100); public static Bitmap scaleToFitWidth ( Bitmap b , int width ) { float factor = width / ( float ) b . getWidth (); return Bitmap . createScaledBitmap ( b , width , ( int ) ( b . getHeight () * factor ), true ); } // Scale and maintain aspect ratio given a desired height // BitmapScaler.scaleToFitHeight(bitmap, 100); public static Bitmap scaleToFitHeight ( Bitmap b , int height ) { float factor = height / ( float ) b . getHeight (); return Bitmap . createScaledBitmap ( b , ( int ) ( b . getWidth () * factor ), height , true ); } // ... } In other cases, you may want to determine the device height or width in order to resize the image accordingly. Copy this DeviceDimensionsHelper.java utility class to DeviceDimensionsHelper.java in your project and use anywhere that you have a context to determine the screen dimensions: // Get height or width of screen at runtime int screenWidth = DeviceDimensionsHelper . getDisplayWidth ( this ); // Resize a Bitmap maintaining aspect ratio based on screen width BitmapScaler . scaleToFitWidth ( bitmap , screenWidth ); Check out this source for more information on how to scale a bitmap based instead on relative device width and height. Note : Doing any type of scaling of images results in the loss of EXIF metadata that includes info such as camera, rotation, date/time of the photo taken. While there are workarounds to transfer this data after the image has been copied, there are current limitations. If you need this info or wish to upload it to some site, you should send the original file and not the downsampled version. Displaying SVG Images \u00b6 Using a third party library called svg-android we can actually display resolution and density independent SVG images. // Parse an SVG resource from the \"raw\" resource folder SVG svg = SVGParser . getSVGFromResource ( getResources (), R . raw . android ); // Fix issue with renderer on certain devices myImageView . setLayerType ( View . LAYER_TYPE_SOFTWARE , null ); // Get a drawable from the parsed SVG and set it as the drawable for the ImageView myImageView . setImageDrawable ( svg . createPictureDrawable ()); See the official tutorial for more details. Loading Images from the network \u00b6 Loading images from the network is a challening task and the best way is to use libraries. The most popular libraries are : Picasso Glide Install the libraries from Nuget and follow the getting started guide to start using them.","title":"ImageView"},{"location":"android-common-views/image-view/#imageview","text":"Typically, images are displayed using the built-in image view. This view takes care of the loading and optimizing of the image, freeing you to focus on app-specific details like the layout and content. In this guide, we will take a look at how to use an ImageView, how to manipulate bitmaps, learn about the different density folders and more.","title":"ImageView"},{"location":"android-common-views/image-view/#usage","text":"At the simplest level, an ImageView is simply a view you embed within an XML layout that is used to display an image (or any drawable) on the screen. The ImageView looks like this in res/layout/activity_main.xml : <ImageView android:id= \"@+id/image\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:scaleType= \"center\" android:src= \"@drawable/my_image\" /> The ImageView handles all the loading and scaling of the image for you. Note the scaleType attribute which defines how the images will be scaled to fit in your layout. In the example, using scaleType \"center\", the image will be displayed at its native resolution and centered in the view, regardless of how much space the view consumes.","title":"Usage"},{"location":"android-common-views/image-view/#sizing-imageview-controls","text":"By default, contents of an ImageView control are of a certain size -- usually the size of the image dimensions. They can also be bounded by their layout_width and layout_height attributes: <ImageView android:layout_width= \"50dp\" android:layout_height= \"50dp\" android:scaleType= \"fitXY\" ... /> The scaleType above has been set to fitXY which sets the height and the width up or down to fit the maximum dimensions specified. Fixing the width and height however means that the proportions of the width and height of the original image, known as the aspect ratio, will be altered. We can take advantage of the adjustViewBounds parameter to preserve this aspect ratio. However, we must either allow the height and/or width to be adjustable (i.e. by using maxWidth and using wrap_content for the dimension). Otherwise, the dimensions cannot be readjusted to meet the required aspect ratio. <ImageView android:layout_width= \"50dp\" android:layout_height= \"wrap_content\" android:scaleType= \"fitXY\" android:adjustViewBounds= \"true\" ... /> By combining these properties together we can control the rough size of the image and still adjust the image according to the proper aspect ratio. We can also size an ImageView at runtime within our Java source code by modifying the width or height inside getLayoutParams() for the view: imageView . getLayoutParams (). height = 100 ; // OR imageView . getLayoutParams (). width = 100 ; In certain cases, the image needs to be scaled to fit the parent view's width and the height should be adjusted proportionally. We can achieve this using an extended ResizableImageView class as described in the post.","title":"Sizing ImageView Controls"},{"location":"android-common-views/image-view/#scale-types","text":"An ImageView can display an image differently based on the scaleType provided. Above we discussed the fitXY type along with adjustViewBounds to match the aspect ratio of the drawable. The following is a list of all the most common types: Scale Type Description center Displays the image centered in the view with no scaling. centerCrop Scales the image such that both the x and y dimensions are greater than or equal to the view, while maintaining the image aspect ratio; centers the image in the view. centerInside Scales the image to fit inside the view, while maintaining the image aspect ratio. If the image is already smaller than the view, then this is the same as center. fitCenter Scales the image to fit inside the view, while maintaining the image aspect ratio. At least one axis will exactly match the view, and the result is centered inside the view. fitStart Same as fitCenter but aligned to the top left of the view. fitEnd Same as fitCenter but aligned to the bottom right of the view. fitXY Scales the x and y dimensions to exactly match the view size; does not maintain the image aspect ratio. matrix Scales the image using a supplied Matrix class. The matrix can be supplied using the setImageMatrix method. A Matrix class can be used to apply transformations such as rotations to an image. Note: The fitXY scale type allows you to set the exact size of the image in your layout. However, be mindful of potential distortions of the image due to scaling. If you\u2019re creating a photo-viewing application, you will probably want to use the center or fitCenter scale types. Refer to this ImageView ScaleType visual guide for additional reference. Remember that if you wish to match the aspect ratio of the actual drawable, adjustViewBounds=true must be declared along with not defining an explicit width and/or height.","title":"Scale Types"},{"location":"android-common-views/image-view/#supporting-multiple-densities","text":"Since Android has so many different screen sizes, resolutions and densities, there is a [[powerful system for selecting the correct image asset|Understanding-App-Resources#introducing-alternate-resources]] for the correct device. There are specific drawable folders for each device density category including: ldpi (low), mdpi (medium), hdpi (high), and xhdpi (extra high). Notice that every app has folders for image drawables such as drawable-mdpi which is for \"medium dots per inch\". To create alternative bitmap drawables for different densities, you should follow the 3:4:6:8 scaling ratio between the four generalized densities. Refer to the chart below: Density DPI Example Device Scale Pixels ldpi 120 Galaxy Y 0.75x 1dp = 0.75px mdpi 160 Galaxy Tab 1.0x 1dp = 1px hdpi 240 Galaxy S II 1.5x 1dp = 1.5px xhdpi 320 Nexus 4 2.0x 1dp = 2px xxhdpi 480 Nexus 5 3.0x 1dp = 3px xxxhdpi 640 Nexus 6 4.0x 1dp = 4px This means that if you generate a 100x100 for mdpi (1x baseline), then you should generate the same resource in 150x150 for hdpi (1.5x), 200x200 image for xhdpi devices (2.0x), 300x300 image for xxhdpi (3.0x) and a 75x75 image for ldpi devices (0.75x). See these density guidelines for additional details.","title":"Supporting Multiple Densities"},{"location":"android-common-views/image-view/#final-android-resizer","text":"To resize images more easily, check out the Final Android Resizer by downloading and running this JAR . This handy utility allows us to select a resources directory, choose an extra high density image and the tool will automatically generate the corresponding lower size images for us and place the subfolders inside the generated res-drawable diretory within the actual res folder in your project as the example shows below in \"Project\" view (left) and the default \"Android\" view (right): Refer to the screens support reference for a more detailed look at supporting a wide range of devices. Also check out the iconography guide for more details.","title":"Final Android Resizer"},{"location":"android-common-views/image-view/#mipmaps-and-drawables","text":"Starting with Android 4.3, there is now an option to use the res/mipmap folder to store \"mipmap\" images. Mipmaps are most commonly used for application icons such as the launcher icon. To learn more about the benefits of mipmaps be sure to check out the mipmapping for drawables post . Mipmap image resources can then be accessed using the @mipmap/ic_launcher notation in place of @drawable . Placing icons in mipmap folders (rather than drawable) is considered a best practice because they can often be used at resolutions different from the device\u2019s current density. For example, an xxxhdpi app icon might be used on the launcher for an xxhdpi device. Review this post about preparing for the Nexus 6 which explains in more detail.","title":"Mipmaps and Drawables"},{"location":"android-common-views/image-view/#working-with-bitmaps","text":"We can change the bitmap displayed in an ImageView to a drawable resource with: ImageView image = ( ImageView ) findViewById ( R . id . test_image ); image . setImageResource ( R . drawable . test2 ); or to any arbitrary bitmap with: ImageView image = ( ImageView ) findViewById ( R . id . test_image ); Bitmap bMap = BitmapFactory . decodeFile ( \"/sdcard/test2.png\" ); image . setImageBitmap ( bMap );","title":"Working with Bitmaps"},{"location":"android-common-views/image-view/#scaling-a-bitmap","text":"If we need to resize a Bitmap, we can call the createScaledBitmap method to resize any bitmap to our desired width and height: // Load a bitmap from the drawable folder Bitmap bMap = BitmapFactory . decodeResource ( getResources (), R . drawable . my_image ); // Resize the bitmap to 150x100 (width x height) Bitmap bMapScaled = Bitmap . createScaledBitmap ( bMap , 150 , 100 , true ); // Loads the resized Bitmap into an ImageView ImageView image = ( ImageView ) findViewById ( R . id . test_image ); image . setImageBitmap ( bMapScaled ); You often want to resize a bitmap but preserve the aspect ratio using a BitmapScaler utility class with code like this: public class BitmapScaler { // Scale and maintain aspect ratio given a desired width // BitmapScaler.scaleToFitWidth(bitmap, 100); public static Bitmap scaleToFitWidth ( Bitmap b , int width ) { float factor = width / ( float ) b . getWidth (); return Bitmap . createScaledBitmap ( b , width , ( int ) ( b . getHeight () * factor ), true ); } // Scale and maintain aspect ratio given a desired height // BitmapScaler.scaleToFitHeight(bitmap, 100); public static Bitmap scaleToFitHeight ( Bitmap b , int height ) { float factor = height / ( float ) b . getHeight (); return Bitmap . createScaledBitmap ( b , ( int ) ( b . getWidth () * factor ), height , true ); } // ... } In other cases, you may want to determine the device height or width in order to resize the image accordingly. Copy this DeviceDimensionsHelper.java utility class to DeviceDimensionsHelper.java in your project and use anywhere that you have a context to determine the screen dimensions: // Get height or width of screen at runtime int screenWidth = DeviceDimensionsHelper . getDisplayWidth ( this ); // Resize a Bitmap maintaining aspect ratio based on screen width BitmapScaler . scaleToFitWidth ( bitmap , screenWidth ); Check out this source for more information on how to scale a bitmap based instead on relative device width and height. Note : Doing any type of scaling of images results in the loss of EXIF metadata that includes info such as camera, rotation, date/time of the photo taken. While there are workarounds to transfer this data after the image has been copied, there are current limitations. If you need this info or wish to upload it to some site, you should send the original file and not the downsampled version.","title":"Scaling a Bitmap"},{"location":"android-common-views/image-view/#displaying-svg-images","text":"Using a third party library called svg-android we can actually display resolution and density independent SVG images. // Parse an SVG resource from the \"raw\" resource folder SVG svg = SVGParser . getSVGFromResource ( getResources (), R . raw . android ); // Fix issue with renderer on certain devices myImageView . setLayerType ( View . LAYER_TYPE_SOFTWARE , null ); // Get a drawable from the parsed SVG and set it as the drawable for the ImageView myImageView . setImageDrawable ( svg . createPictureDrawable ()); See the official tutorial for more details.","title":"Displaying SVG Images"},{"location":"android-common-views/image-view/#loading-images-from-the-network","text":"Loading images from the network is a challening task and the best way is to use libraries. The most popular libraries are : Picasso Glide Install the libraries from Nuget and follow the getting started guide to start using them.","title":"Loading Images from the network"},{"location":"android-common-views/listview/","text":"ListView \u00b6 Often when you rotate the screen, the app will lose the scroll position and other state of any lists on screen. To properly retain this state for ListView , you can store the instance state onPause and restore onViewCreated as shown below: // YourActivity.java private static final String LIST_STATE = \"listState\" ; private Parcelable mListState = null ; // Write list state to bundle @Override protected void onSaveInstanceState ( Bundle state ) { super . onSaveInstanceState ( state ); mListState = getListView (). onSaveInstanceState (); state . putParcelable ( LIST_STATE , mListState ); } // Restore list state from bundle @Override protected void onRestoreInstanceState ( Bundle state ) { super . onRestoreInstanceState ( state ); mListState = state . getParcelable ( LIST_STATE ); } @Override protected void onResume () { super . onResume (); loadData (); // make sure data has been reloaded into adapter first // ONLY call this part once the data items have been loaded back into the adapter // for example, inside a success callback from the network if ( mListState != null ) { myListView . onRestoreInstanceState ( mListState ); mListState = null ; } } Check out this blog post and stackoverflow post for more details. Note that you must load the items back into the adapter first before calling onRestoreInstanceState . In other words, don't call onRestoreInstanceState on the ListView until after the items are loaded back in from the network or the database.","title":"Listview"},{"location":"android-common-views/listview/#listview","text":"Often when you rotate the screen, the app will lose the scroll position and other state of any lists on screen. To properly retain this state for ListView , you can store the instance state onPause and restore onViewCreated as shown below: // YourActivity.java private static final String LIST_STATE = \"listState\" ; private Parcelable mListState = null ; // Write list state to bundle @Override protected void onSaveInstanceState ( Bundle state ) { super . onSaveInstanceState ( state ); mListState = getListView (). onSaveInstanceState (); state . putParcelable ( LIST_STATE , mListState ); } // Restore list state from bundle @Override protected void onRestoreInstanceState ( Bundle state ) { super . onRestoreInstanceState ( state ); mListState = state . getParcelable ( LIST_STATE ); } @Override protected void onResume () { super . onResume (); loadData (); // make sure data has been reloaded into adapter first // ONLY call this part once the data items have been loaded back into the adapter // for example, inside a success callback from the network if ( mListState != null ) { myListView . onRestoreInstanceState ( mListState ); mListState = null ; } } Check out this blog post and stackoverflow post for more details. Note that you must load the items back into the adapter first before calling onRestoreInstanceState . In other words, don't call onRestoreInstanceState on the ListView until after the items are loaded back in from the network or the database.","title":"ListView"},{"location":"android-common-views/progress-bar/","text":"ProgressBar \u00b6 Loading spinner, used to show that something is running. <ProgressBar android:id= \"@+id/loading_spinner\" style= \"?android:progressBarStyle\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> Can also change the style to use a horizontal progressbar, use the style style=\"?android:progressBarStyleHorizontal\" <ProgressBar android:id= \"@+id/progress_bar\" style= \"?android:progressBarStyleHorizontal\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:indeterminate= \"false\" android:max= \"100\" android:progress= \"40\" />","title":"ProgressBar"},{"location":"android-common-views/progress-bar/#progressbar","text":"Loading spinner, used to show that something is running. <ProgressBar android:id= \"@+id/loading_spinner\" style= \"?android:progressBarStyle\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> Can also change the style to use a horizontal progressbar, use the style style=\"?android:progressBarStyleHorizontal\" <ProgressBar android:id= \"@+id/progress_bar\" style= \"?android:progressBarStyleHorizontal\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:indeterminate= \"false\" android:max= \"100\" android:progress= \"40\" />","title":"ProgressBar"},{"location":"android-common-views/radio-button/","text":"RadioButton \u00b6 Radio buttons allow the user to select one option from a set. You should use radio buttons for optional sets that are mutually exclusive if you think that the user needs to see all available options side-by-side. If it's not necessary to show all options side-by-side, use a spinner instead. To create each radio button option, create a RadioButton in your layout. However, because radio buttons are mutually exclusive, you must group them together inside a RadioGroup. By grouping them together, the system ensures that only one radio button can be selected at a time. <RadioGroup android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:orientation= \"vertical\" > <RadioButton android:id= \"@+id/yes_radio_button\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Yes\" android:checked= \"true\" /> <RadioButton android:id= \"@+id/no_radio_button\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"No\" android:textAppearance= \"?android:textAppearanceMedium\" /> <RadioButton android:id= \"@+id/maybe_radio_button\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Maybe\" android:textAppearance= \"?android:textAppearanceSmall\" /> </RadioGroup> Attaching Click Event \u00b6 The radio button have a onClick event. We can attach the event to the buttons in code as follows : public void onRadioButtonClicked ( View view ) { // Is the button now checked? boolean checked = (( RadioButton ) view ). isChecked (); // Check which radio button was clicked switch ( view . getId ()) { case R . id . radio_pirates : if ( checked ) // Pirates are the best break ; case R . id . radio_ninjas : if ( checked ) // Ninjas rule break ; } } Changing the State \u00b6 We can change the state of the radio button by using the toggle() method.","title":"RadioButton"},{"location":"android-common-views/radio-button/#radiobutton","text":"Radio buttons allow the user to select one option from a set. You should use radio buttons for optional sets that are mutually exclusive if you think that the user needs to see all available options side-by-side. If it's not necessary to show all options side-by-side, use a spinner instead. To create each radio button option, create a RadioButton in your layout. However, because radio buttons are mutually exclusive, you must group them together inside a RadioGroup. By grouping them together, the system ensures that only one radio button can be selected at a time. <RadioGroup android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:orientation= \"vertical\" > <RadioButton android:id= \"@+id/yes_radio_button\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Yes\" android:checked= \"true\" /> <RadioButton android:id= \"@+id/no_radio_button\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"No\" android:textAppearance= \"?android:textAppearanceMedium\" /> <RadioButton android:id= \"@+id/maybe_radio_button\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Maybe\" android:textAppearance= \"?android:textAppearanceSmall\" /> </RadioGroup>","title":"RadioButton"},{"location":"android-common-views/radio-button/#attaching-click-event","text":"The radio button have a onClick event. We can attach the event to the buttons in code as follows : public void onRadioButtonClicked ( View view ) { // Is the button now checked? boolean checked = (( RadioButton ) view ). isChecked (); // Check which radio button was clicked switch ( view . getId ()) { case R . id . radio_pirates : if ( checked ) // Pirates are the best break ; case R . id . radio_ninjas : if ( checked ) // Ninjas rule break ; } }","title":"Attaching Click Event"},{"location":"android-common-views/radio-button/#changing-the-state","text":"We can change the state of the radio button by using the toggle() method.","title":"Changing the State"},{"location":"android-common-views/rating-bar/","text":"RatingBar \u00b6 <RatingBar android:id= \"@+id/rating_bar\" style= \"?android:attr/ratingBarStyleSmall\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:numStars= \"5\" android:rating= \"2.5\" android:stepSize= \"0.5\" /> RatingBar Events \u00b6 You can use the RatingBarChange event to subscribe to changes in the RatingBar var ratingBar = FindViewById < RatingBar > ( Resource . Id . rating_bar ); ratingBar . RatingBarChange += ( object sender , RatingBar . RatingBarChangeEventArgs e ) => { Console . WriteLine ( $ \"Rating is {e.Rating}\" ); } ;","title":"RatingBar"},{"location":"android-common-views/rating-bar/#ratingbar","text":"<RatingBar android:id= \"@+id/rating_bar\" style= \"?android:attr/ratingBarStyleSmall\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:numStars= \"5\" android:rating= \"2.5\" android:stepSize= \"0.5\" />","title":"RatingBar"},{"location":"android-common-views/rating-bar/#ratingbar-events","text":"You can use the RatingBarChange event to subscribe to changes in the RatingBar var ratingBar = FindViewById < RatingBar > ( Resource . Id . rating_bar ); ratingBar . RatingBarChange += ( object sender , RatingBar . RatingBarChangeEventArgs e ) => { Console . WriteLine ( $ \"Rating is {e.Rating}\" ); } ;","title":"RatingBar Events"},{"location":"android-common-views/search-view/","text":"SearchView \u00b6 A search view that you type a query into. <SearchView android:id= \"@+id/search_viewer\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:iconifiedByDefault= \"true\" android:queryHint= \"Search photos\" />","title":"SearchView"},{"location":"android-common-views/search-view/#searchview","text":"A search view that you type a query into. <SearchView android:id= \"@+id/search_viewer\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:iconifiedByDefault= \"true\" android:queryHint= \"Search photos\" />","title":"SearchView"},{"location":"android-common-views/seek-bar/","text":"SeekBar \u00b6 Displays progress and allows you to drag the handle anywhere in the bar e.g for music or video. <SeekBar android:id= \"@+id/seek_bar\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:max= \"100\" android:progress= \"20\" /> SeekBar Events \u00b6 You handle the Progress event to get notified when the progress of the SeekBar changes. var seekBar = FindViewById < SeekBar > ( Resource . Id . seek_bar ); seekBar . ProgressChanged += ( object sender , SeekBar . ProgressChangedEventArgs e ) => { Console . WriteLine ( $ \"Progress is now {e.Progress}\" ); } ;","title":"SeekBar"},{"location":"android-common-views/seek-bar/#seekbar","text":"Displays progress and allows you to drag the handle anywhere in the bar e.g for music or video. <SeekBar android:id= \"@+id/seek_bar\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:max= \"100\" android:progress= \"20\" />","title":"SeekBar"},{"location":"android-common-views/seek-bar/#seekbar-events","text":"You handle the Progress event to get notified when the progress of the SeekBar changes. var seekBar = FindViewById < SeekBar > ( Resource . Id . seek_bar ); seekBar . ProgressChanged += ( object sender , SeekBar . ProgressChangedEventArgs e ) => { Console . WriteLine ( $ \"Progress is now {e.Progress}\" ); } ;","title":"SeekBar Events"},{"location":"android-common-views/spinner/","text":"Spinner \u00b6 Spinners provide a quick way to select one value from a set. In the default state, a spinner shows its currently selected value. Touching the spinner displays a dropdown menu with all other available values, from which the user can select a new one. <Spinner android:id= \"@+id/sort_by_spinner\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> Populate Spinner with choices with XML \u00b6 You can populate the Spinner using a string-array resource. Create a file the Resources\\Values folder and call it array.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string-array name= \"cities\" > <item> Home </item> <item> Work </item> <item> Other </item> <item> Custom </item> </string-array> </resources> Now you can populate the entries for the spinner using the data from the xml file. <Spinner android:entries= \"@array/cities\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> Spinner Mode \u00b6 The spinner by default displays a dropdown, but it can be changed to show a dialog using the android:spinnerMode=\"dialog\" . Populate Spinner with code \u00b6 To populate the spinner in code, you will need to create a custom array adapter, then bind the array adapter to the spinner or create it using an existing xml file with a string array. Spinner spinner = ( Spinner ) findViewById ( R . id . spinner ); // Create an ArrayAdapter using the string array and a default spinner layout ArrayAdapter < CharSequence > adapter = ArrayAdapter . createFromResource ( this , R . array . planets_array , android . R . layout . simple_spinner_dropdown_item ); // Specify the layout to use when the list of choices appears adapter . setDropDownViewResource ( android . R . layout . simple_spinner_custom_layout ); // Apply the adapter to the spinner spinner . setAdapter ( adapter ); Getting and Setting Values \u00b6 Get the selected item out a spinner using: String value = spinner . getSelectedItem (). toString (); Setting spinner item based on value (rather than item position): public void setSpinnerToValue ( Spinner spinner , String value ) { int index = 0 ; SpinnerAdapter adapter = spinner . getAdapter (); for ( int i = 0 ; i < adapter . getCount (); i ++) { if ( adapter . getItem ( i ). equals ( value )) { index = i ; break ; // terminate loop } } spinner . setSelection ( index ); } Customizing Spinner Items \u00b6 Changing text size on the <Spinner> tag has no effect on the actual dropdown items. To change their styles, you need to create a custom array adapter and layout file. First, you should create a spinner_item1.xml <TextView xmlns:android= \"http://schemas.android.com/apk/res/android\" android:id= \"@android:id/text1\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" style:\"@style/spinner_dropdown_style1\" android:textColor= \"#ff0000\" /> Define your style to inherit from Widget.AppCompat.DropDownItem.Spinner so that it will inherit the correct spacing for dropdown items. Otherwise, you may notice the dropdown items are too closely spaced or not enough margin to the left-hand side: <style name= \"spinner_dropdown_style_theme1\" parent= \"Widget.AppCompat.DropDownItem.Spinner\" > <item name= \"android:textColor\" > @android:color/white </item> <item name= \"android:background\" > #507B91 </item> </style> You then bind the string array of items to the layout: ArrayAdapter adapter = ArrayAdapter . createFromResource ( this , R . array . planets_array , R . layout . spinner_item ); spinner . setAdapter ( adapter );","title":"Spinner"},{"location":"android-common-views/spinner/#spinner","text":"Spinners provide a quick way to select one value from a set. In the default state, a spinner shows its currently selected value. Touching the spinner displays a dropdown menu with all other available values, from which the user can select a new one. <Spinner android:id= \"@+id/sort_by_spinner\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" />","title":"Spinner"},{"location":"android-common-views/spinner/#populate-spinner-with-choices-with-xml","text":"You can populate the Spinner using a string-array resource. Create a file the Resources\\Values folder and call it array.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string-array name= \"cities\" > <item> Home </item> <item> Work </item> <item> Other </item> <item> Custom </item> </string-array> </resources> Now you can populate the entries for the spinner using the data from the xml file. <Spinner android:entries= \"@array/cities\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" />","title":"Populate Spinner with choices with XML"},{"location":"android-common-views/spinner/#spinner-mode","text":"The spinner by default displays a dropdown, but it can be changed to show a dialog using the android:spinnerMode=\"dialog\" .","title":"Spinner Mode"},{"location":"android-common-views/spinner/#populate-spinner-with-code","text":"To populate the spinner in code, you will need to create a custom array adapter, then bind the array adapter to the spinner or create it using an existing xml file with a string array. Spinner spinner = ( Spinner ) findViewById ( R . id . spinner ); // Create an ArrayAdapter using the string array and a default spinner layout ArrayAdapter < CharSequence > adapter = ArrayAdapter . createFromResource ( this , R . array . planets_array , android . R . layout . simple_spinner_dropdown_item ); // Specify the layout to use when the list of choices appears adapter . setDropDownViewResource ( android . R . layout . simple_spinner_custom_layout ); // Apply the adapter to the spinner spinner . setAdapter ( adapter );","title":"Populate Spinner with code"},{"location":"android-common-views/spinner/#getting-and-setting-values","text":"Get the selected item out a spinner using: String value = spinner . getSelectedItem (). toString (); Setting spinner item based on value (rather than item position): public void setSpinnerToValue ( Spinner spinner , String value ) { int index = 0 ; SpinnerAdapter adapter = spinner . getAdapter (); for ( int i = 0 ; i < adapter . getCount (); i ++) { if ( adapter . getItem ( i ). equals ( value )) { index = i ; break ; // terminate loop } } spinner . setSelection ( index ); }","title":"Getting and Setting Values"},{"location":"android-common-views/spinner/#customizing-spinner-items","text":"Changing text size on the <Spinner> tag has no effect on the actual dropdown items. To change their styles, you need to create a custom array adapter and layout file. First, you should create a spinner_item1.xml <TextView xmlns:android= \"http://schemas.android.com/apk/res/android\" android:id= \"@android:id/text1\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" style:\"@style/spinner_dropdown_style1\" android:textColor= \"#ff0000\" /> Define your style to inherit from Widget.AppCompat.DropDownItem.Spinner so that it will inherit the correct spacing for dropdown items. Otherwise, you may notice the dropdown items are too closely spaced or not enough margin to the left-hand side: <style name= \"spinner_dropdown_style_theme1\" parent= \"Widget.AppCompat.DropDownItem.Spinner\" > <item name= \"android:textColor\" > @android:color/white </item> <item name= \"android:background\" > #507B91 </item> </style> You then bind the string array of items to the layout: ArrayAdapter adapter = ArrayAdapter . createFromResource ( this , R . array . planets_array , R . layout . spinner_item ); spinner . setAdapter ( adapter );","title":"Customizing Spinner Items"},{"location":"android-common-views/switch/","text":"Switch \u00b6 On/off switch that can you drag to the right or left or just tap to toggle. SwitchCompat is a version of the Switch widget which runs on devices back to API 7 <Switch android:id= \"@+id/backup_photos_switch\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/auto_backup_photos\" android:textAppearance= \"?android:textAppearanceSmall\" /> For backwards compatibility use SwitchCompat . On older devices, the control is called a Togglebutton . <android.support.v7.widget.SwitchCompat android:checked= \"true\" android:id= \"@+id/backup_photos_switch\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Backup photos automatically to the cloud when on wifi\" android:textAppearance= \"?android:textAppearanceSmall\" /> Responding to events \u00b6 var backupPhotosSwitch = FindViewById < Switch > ( Resource . Id . backup_photos_switch ); backupPhotosSwitch . CheckedChange += ( object sender , CompoundButton . CheckedChangeEventArgs e ) => { Console . WriteLine ( $ \"Switch is {e.IsChecked}\" ); } ;","title":"Switch"},{"location":"android-common-views/switch/#switch","text":"On/off switch that can you drag to the right or left or just tap to toggle. SwitchCompat is a version of the Switch widget which runs on devices back to API 7 <Switch android:id= \"@+id/backup_photos_switch\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/auto_backup_photos\" android:textAppearance= \"?android:textAppearanceSmall\" /> For backwards compatibility use SwitchCompat . On older devices, the control is called a Togglebutton . <android.support.v7.widget.SwitchCompat android:checked= \"true\" android:id= \"@+id/backup_photos_switch\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Backup photos automatically to the cloud when on wifi\" android:textAppearance= \"?android:textAppearanceSmall\" />","title":"Switch"},{"location":"android-common-views/switch/#responding-to-events","text":"var backupPhotosSwitch = FindViewById < Switch > ( Resource . Id . backup_photos_switch ); backupPhotosSwitch . CheckedChange += ( object sender , CompoundButton . CheckedChangeEventArgs e ) => { Console . WriteLine ( $ \"Switch is {e.IsChecked}\" ); } ;","title":"Responding to events"},{"location":"android-common-views/text-input-edit/","text":"","title":"Text input edit"},{"location":"android-common-views/textview/","text":"TextView \u00b6 Every Android device comes with a collection of standard fonts: Droid Sans, Droid Sans Mono and Droid Serif. They were designed to be optimal for mobile displays, so these are the three fonts you will be working with most of the time and they can be styled using a handful of XML attributes. You might, however, see the need to use custom fonts for special purposes. This guide will take a look at the TextView and discuss common properties associated with this view as well as how to setup custom typefaces. Text Attributes \u00b6 Typeface \u00b6 As stated in the overview, there are three different default typefaces which are known as the Droid family of fonts: sans , monospace and serif . You can specify any one of them as the value for the android:typeface attribute in the XML: <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"This is a 'sans' demo!\" android:typeface= \"sans\" /> Here's how they look: In addition to the above, there is another attribute value named \"normal\" which defaults to the sans typeface. Text Style \u00b6 The android:textStyle attribute can be used to put emphasis on the text. The possible values are: normal , bold , italic . You can also specify bold|italic . <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"This is bold!\" android:textStyle= \"bold\" /> A sampling of styles can be seen below: Text Size \u00b6 android:textSize specifies the font size. Its value must consist of two parts: a floating-point number followed by a unit. It is generally a good practice to use the sp unit so the size can scale depending on user settings. <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"14sp is the 'normal' size.\" android:textSize= \"14sp\" /> A sampling of styles can be seen below: Too many type sizes and styles at once can wreck any layout. The basic set of styles are based on a typographic scale of 12, 14, 16, 20, and 34. Refer to this typography styles guide for more details. Text Truncation \u00b6 There are a few ways to truncate text within a TextView . First, to restrict the total number of lines of text we can use android:maxLines and android:minLines : <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:minLines= \"1\" android:maxLines= \"2\" /> In addition, we can use android:ellipsize to begin truncating text <TextView ... android:ellipsize= \"end\" android:singleLine= \"true\" /> Following values are available for ellipsize : start for ...bccc , end for aaab... , middle for aa...cc , and marquee for aaabbbccc sliding from left to right. Example: There is a known issue with ellipsize and multi-line text , see this MultiplelineEllipsizeTextView library for an alternative. Text Color \u00b6 The android:textColor and android:textColorLink attribute values are hexadecimal RGB values with an optional alpha channel, similar to what's found in CSS: <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"A light blue color.\" android:textColor= \"#00ccff\" android:textColorLink= \"#8DE67F\" /> The android:textColorLink attribute controls the highlighting for [[hyperlinks embedded within the TextView|Working-with-the-TextView#inserting-html-formatting]]. This results in: We can edit the color at runtime with: // Based on hex value textView . setColor ( Color . setTextColor ( Color . parseColor ( \"#000000\" )); // based on a color resource file textView . setTextColor ( ContextCompat . getColor ( context , R . color . your_color )); // based on preset colors textView . setColor ( Color . setTextColor ( Color . RED )); Text Shadow \u00b6 You can use three different attributes to customize the appearance of your text shadow: android:shadowColor - Shadow color in the same format as textColor. android:shadowRadius - Radius of the shadow specified as a floating point number. android:shadowDx - The shadow's horizontal offset specified as a floating point number. android:shadowDy - The shadow's vertical offset specified as a floating point number. The floating point numbers don't have a specific unit - they are merely arbitrary factors. <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"A light blue shadow.\" android:shadowColor= \"#00ccff\" android:shadowRadius= \"2\" android:shadowDx= \"1\" android:shadowDy= \"1\" /> This results in: Various Text Properties \u00b6 There are many other text properties including android:lineSpacingMultiplier , android:letterSpacing , android:textAllCaps , android:includeFontPadding and many others : <TextView android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:lineSpacingMultiplier= \"1.1\" android:textAllCaps= \"true\" /> android:includeFontPadding removes the extra padding around large fonts. android:lineSpacingMultiplier governs the spacing between lines with a default of \"1\". Inserting HTML Formatting \u00b6 TextView natively supports HTML by translating HTML tags to spannable sections within the view. To apply basic HTML formatting to text, add text to the TextView with: TextView view = ( TextView ) findViewById ( R . id . sampleText ); String formattedText = \"This <i>is</i> a <b>test</b> of <a href='http://foo.com'>html</a>\" ; // or getString(R.string.htmlFormattedText); view . setText ( Html . fromHtml ( formattedText )); This results in: Note that all tags are not supported. See this article for a more detailed look at supported tags and usages. Android N Usage \u00b6 As of Android N, the signature for the method changed, requiring there to be a check depending on version to remove the deprecation warning: @SuppressWarnings ( \"deprecation\" ) public static Spanned fromHtml ( String html ){ Spanned result ; if ( android . os . Build . VERSION . SDK_INT >= android . os . Build . VERSION_CODES . N ) { result = Html . fromHtml ( html , Html . FROM_HTML_MODE_LEGACY ); } else { result = Html . fromHtml ( html ); } return result ; } You can read more about the html modes here . Setting Font Colors \u00b6 For setting font colors, we can use the <font> tag as shown: Html . fromHtml ( \"Nice! <font color='#c5c5c5'>This text has a color</font>. This doesn't\" ); And you should be all set. Storing Long HTML Strings \u00b6 If you want to store your HTML text within res/values/strings.xml , you have to use CDATA to escape such as: <?xml version=\"1.0\" encoding=\"utf-8\"?> <string name= \"htmlFormattedText\" > <![CDATA[ Please <a href=\"http://highlight.com\">let us know</a> if you have <b>feedback on this</b> or if you would like to log in with <i>another identity service</i>. Thanks! ]]> </string> and access the content with getString(R.string.htmlFormattedText) to load this within the TextView. For more advanced cases, you can also check out the html-textview library which adds support for almost any HTML tag within this third-party TextView. Autolinking URLs \u00b6 TextView has native support for automatically locating URLs within the their text content and making them clickable links which can be opened in the browser. To do this, enable the android:autolink property: <TextView android:id= \"@+id/custom_font\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:autoLink= \"all\" android:linksClickable= \"true\" /> This results in: Issues with ListView \u00b6 One known issue when using android:autoLink or the Linkify class is that it may break the ability to respond to events on the ListView through setOnItemClickListener . Check out this solution which extends TextView in order to modify the onTouchEvent to correctly propagate the click. You basically need to create a LinkifiedTextView and use this special View in place of any of your TextView's that need auto-link detection. In addition, review this stackoverflow post or this android issue for additional context. Displaying Images within a TextView \u00b6 A TextView is actually surprisingly powerful and actually supports having images displayed as a part of it's content area. Any images stored in the \"drawable\" folders can actually be embedded within a TextView at several key locations in relation to the text using the android:drawableRight and the android:drawablePadding property. For example: <TextView xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:gravity= \"center\" android:text= \"@string/my_contacts\" android:drawableRight= \"@drawable/ic_action_add_group\" android:drawablePadding= \"8dp\" /> Which results in: In Android, many views inherit from TextView such as Button s, EditText s, RadioButton s which means that all of these views support the same functionality. For example, we can also do: <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"@string/user_name\" android:drawableLeft= \"@drawable/ic_action_person\" android:drawablePadding= \"8dp\" /> Which results in: The relevant attributes here are drawableLeft , drawableRight , drawableTop and drawableBottom along with drawablePadding . Check out this TextView article for a more detailed look at how to use this functionality. Note that if you want to be able to better control the size or scale of the drawables, check out this handy TextView extension or this bitmap drawable approach . You can also make calls to setCompoundDrawablesWithIntrinsicBounds on the TextView . Using Custom Fonts \u00b6 We can actually use any custom font that we'd like within our applications. Check out fontsquirrel for an easy source of free fonts. For example, we can download Chantelli Antiqua as an example. Fonts are stored in the \"assets\" folder. In Android Studio, File > New > folder > Assets Folder . Now download any font and place the TTF file in the assets/fonts directory : We're going to use a basic layout file with a TextView , marked with an id of \"custom_font\" so we can access it in our code. <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:id= \"@+id/custom_font\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"This is the Chantelli Antiqua font.\" /> </LinearLayout> To set the custom font manually, open your activity file and insert this into the onCreate() method: // Get access to our TextView TextView txt = ( TextView ) findViewById ( R . id . custom_font ); // Create the TypeFace from the TTF asset Typeface font = Typeface . createFromAsset ( getAssets (), \"fonts/Chantelli_Antiqua.ttf\" ); // Assign the typeface to the view txt . setTypeface ( font ); Alternatively, you can use the third-party calligraphy library : < TextView fontPath = \"fonts/Chantelli_Antiqua.ttf\" /> Either method will will result in: You'll also want to keep an eye on the total size of your custom fonts, as this can grow quite large if you're using a lot of different typefaces. Using Spans to Style Sections of Text \u00b6 Spans come in really handy when we want to apply styles to portions of text within the same TextView. We can change the text color, change the typeface, add an underline, etc, and apply these to only certain portions of the text. The full list of spans shows all the available options. As an example, let's say we have a single TextView where we want the first word to show up in red and the second word to have a strikethrough: We can accomplish this with spans using the code below: String firstWord = \"Hello\" ; String secondWord = \"World!\" ; TextView tvHelloWorld = ( TextView ) findViewById ( R . id . tvHelloWorld ); // Create a span that will make the text red ForegroundColorSpan redForegroundColorSpan = new ForegroundColorSpan ( getResources (). getColor ( android . R . color . holo_red_dark )); // Use a SpannableStringBuilder so that both the text and the spans are mutable SpannableStringBuilder ssb = new SpannableStringBuilder ( firstWord ); // Apply the color span ssb . setSpan ( redForegroundColorSpan , // the span to add 0 , // the start of the span (inclusive) ssb . length (), // the end of the span (exclusive) Spanned . SPAN_EXCLUSIVE_EXCLUSIVE ); // behavior when text is later inserted into the SpannableStringBuilder // SPAN_EXCLUSIVE_EXCLUSIVE means to not extend the span when additional // text is added in later // Add a blank space ssb . append ( \" \" ); // Create a span that will strikethrough the text StrikethroughSpan strikethroughSpan = new StrikethroughSpan (); // Add the secondWord and apply the strikethrough span to only the second word ssb . append ( secondWord ); ssb . setSpan ( strikethroughSpan , ssb . length () - secondWord . length (), ssb . length (), Spanned . SPAN_EXCLUSIVE_EXCLUSIVE ); // Set the TextView text and denote that it is Editable // since it's a SpannableStringBuilder tvHelloWorld . setText ( ssb , TextView . BufferType . EDITABLE ); Note: There are 3 different classes that can be used to represent text that has markup attached. SpannableStringBuilder (used above) is the one to use when dealing with mutable spans and mutable text. SpannableString is for mutable spans, but immutable text. And SpannedString is for immutable spans and immutable text. Creating Clickable Styled Spans \u00b6 In certain cases, we might want different substrings in a TextView to different styles and then clickable to trigger an action. For example, rendering tweet items where @foo can be clicked in a message to view a user's profile. For this, you should copy over the PatternEditableBuilder.java utility into your app. You can then use this utility to make clickable spans. For example: // Set text within a `TextView` TextView textView = ( TextView ) findViewById ( R . id . textView ); textView . setText ( \"Hey @sarah, where did @jim go? #lost\" ); // Style clickable spans based on pattern new PatternEditableBuilder (). addPattern ( Pattern . compile ( \"\\\\@(\\\\w+)\" ), Color . BLUE , new PatternEditableBuilder . SpannableClickedListener () { @Override public void onSpanClicked ( String text ) { Toast . makeText ( MainActivity . this , \"Clicked username: \" + text , Toast . LENGTH_SHORT ). show (); } }). into ( textView ); and this results in the following: For more details, view the README for more usage examples.","title":"TextView"},{"location":"android-common-views/textview/#textview","text":"Every Android device comes with a collection of standard fonts: Droid Sans, Droid Sans Mono and Droid Serif. They were designed to be optimal for mobile displays, so these are the three fonts you will be working with most of the time and they can be styled using a handful of XML attributes. You might, however, see the need to use custom fonts for special purposes. This guide will take a look at the TextView and discuss common properties associated with this view as well as how to setup custom typefaces.","title":"TextView"},{"location":"android-common-views/textview/#text-attributes","text":"","title":"Text Attributes"},{"location":"android-common-views/textview/#typeface","text":"As stated in the overview, there are three different default typefaces which are known as the Droid family of fonts: sans , monospace and serif . You can specify any one of them as the value for the android:typeface attribute in the XML: <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"This is a 'sans' demo!\" android:typeface= \"sans\" /> Here's how they look: In addition to the above, there is another attribute value named \"normal\" which defaults to the sans typeface.","title":"Typeface"},{"location":"android-common-views/textview/#text-style","text":"The android:textStyle attribute can be used to put emphasis on the text. The possible values are: normal , bold , italic . You can also specify bold|italic . <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"This is bold!\" android:textStyle= \"bold\" /> A sampling of styles can be seen below:","title":"Text Style"},{"location":"android-common-views/textview/#text-size","text":"android:textSize specifies the font size. Its value must consist of two parts: a floating-point number followed by a unit. It is generally a good practice to use the sp unit so the size can scale depending on user settings. <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"14sp is the 'normal' size.\" android:textSize= \"14sp\" /> A sampling of styles can be seen below: Too many type sizes and styles at once can wreck any layout. The basic set of styles are based on a typographic scale of 12, 14, 16, 20, and 34. Refer to this typography styles guide for more details.","title":"Text Size"},{"location":"android-common-views/textview/#text-truncation","text":"There are a few ways to truncate text within a TextView . First, to restrict the total number of lines of text we can use android:maxLines and android:minLines : <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:minLines= \"1\" android:maxLines= \"2\" /> In addition, we can use android:ellipsize to begin truncating text <TextView ... android:ellipsize= \"end\" android:singleLine= \"true\" /> Following values are available for ellipsize : start for ...bccc , end for aaab... , middle for aa...cc , and marquee for aaabbbccc sliding from left to right. Example: There is a known issue with ellipsize and multi-line text , see this MultiplelineEllipsizeTextView library for an alternative.","title":"Text Truncation"},{"location":"android-common-views/textview/#text-color","text":"The android:textColor and android:textColorLink attribute values are hexadecimal RGB values with an optional alpha channel, similar to what's found in CSS: <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"A light blue color.\" android:textColor= \"#00ccff\" android:textColorLink= \"#8DE67F\" /> The android:textColorLink attribute controls the highlighting for [[hyperlinks embedded within the TextView|Working-with-the-TextView#inserting-html-formatting]]. This results in: We can edit the color at runtime with: // Based on hex value textView . setColor ( Color . setTextColor ( Color . parseColor ( \"#000000\" )); // based on a color resource file textView . setTextColor ( ContextCompat . getColor ( context , R . color . your_color )); // based on preset colors textView . setColor ( Color . setTextColor ( Color . RED ));","title":"Text Color"},{"location":"android-common-views/textview/#text-shadow","text":"You can use three different attributes to customize the appearance of your text shadow: android:shadowColor - Shadow color in the same format as textColor. android:shadowRadius - Radius of the shadow specified as a floating point number. android:shadowDx - The shadow's horizontal offset specified as a floating point number. android:shadowDy - The shadow's vertical offset specified as a floating point number. The floating point numbers don't have a specific unit - they are merely arbitrary factors. <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"A light blue shadow.\" android:shadowColor= \"#00ccff\" android:shadowRadius= \"2\" android:shadowDx= \"1\" android:shadowDy= \"1\" /> This results in:","title":"Text Shadow"},{"location":"android-common-views/textview/#various-text-properties","text":"There are many other text properties including android:lineSpacingMultiplier , android:letterSpacing , android:textAllCaps , android:includeFontPadding and many others : <TextView android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:lineSpacingMultiplier= \"1.1\" android:textAllCaps= \"true\" /> android:includeFontPadding removes the extra padding around large fonts. android:lineSpacingMultiplier governs the spacing between lines with a default of \"1\".","title":"Various Text Properties"},{"location":"android-common-views/textview/#inserting-html-formatting","text":"TextView natively supports HTML by translating HTML tags to spannable sections within the view. To apply basic HTML formatting to text, add text to the TextView with: TextView view = ( TextView ) findViewById ( R . id . sampleText ); String formattedText = \"This <i>is</i> a <b>test</b> of <a href='http://foo.com'>html</a>\" ; // or getString(R.string.htmlFormattedText); view . setText ( Html . fromHtml ( formattedText )); This results in: Note that all tags are not supported. See this article for a more detailed look at supported tags and usages.","title":"Inserting HTML Formatting"},{"location":"android-common-views/textview/#android-n-usage","text":"As of Android N, the signature for the method changed, requiring there to be a check depending on version to remove the deprecation warning: @SuppressWarnings ( \"deprecation\" ) public static Spanned fromHtml ( String html ){ Spanned result ; if ( android . os . Build . VERSION . SDK_INT >= android . os . Build . VERSION_CODES . N ) { result = Html . fromHtml ( html , Html . FROM_HTML_MODE_LEGACY ); } else { result = Html . fromHtml ( html ); } return result ; } You can read more about the html modes here .","title":"Android N Usage"},{"location":"android-common-views/textview/#setting-font-colors","text":"For setting font colors, we can use the <font> tag as shown: Html . fromHtml ( \"Nice! <font color='#c5c5c5'>This text has a color</font>. This doesn't\" ); And you should be all set.","title":"Setting Font Colors"},{"location":"android-common-views/textview/#storing-long-html-strings","text":"If you want to store your HTML text within res/values/strings.xml , you have to use CDATA to escape such as: <?xml version=\"1.0\" encoding=\"utf-8\"?> <string name= \"htmlFormattedText\" > <![CDATA[ Please <a href=\"http://highlight.com\">let us know</a> if you have <b>feedback on this</b> or if you would like to log in with <i>another identity service</i>. Thanks! ]]> </string> and access the content with getString(R.string.htmlFormattedText) to load this within the TextView. For more advanced cases, you can also check out the html-textview library which adds support for almost any HTML tag within this third-party TextView.","title":"Storing Long HTML Strings"},{"location":"android-common-views/textview/#autolinking-urls","text":"TextView has native support for automatically locating URLs within the their text content and making them clickable links which can be opened in the browser. To do this, enable the android:autolink property: <TextView android:id= \"@+id/custom_font\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:autoLink= \"all\" android:linksClickable= \"true\" /> This results in:","title":"Autolinking URLs"},{"location":"android-common-views/textview/#issues-with-listview","text":"One known issue when using android:autoLink or the Linkify class is that it may break the ability to respond to events on the ListView through setOnItemClickListener . Check out this solution which extends TextView in order to modify the onTouchEvent to correctly propagate the click. You basically need to create a LinkifiedTextView and use this special View in place of any of your TextView's that need auto-link detection. In addition, review this stackoverflow post or this android issue for additional context.","title":"Issues with ListView"},{"location":"android-common-views/textview/#displaying-images-within-a-textview","text":"A TextView is actually surprisingly powerful and actually supports having images displayed as a part of it's content area. Any images stored in the \"drawable\" folders can actually be embedded within a TextView at several key locations in relation to the text using the android:drawableRight and the android:drawablePadding property. For example: <TextView xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:gravity= \"center\" android:text= \"@string/my_contacts\" android:drawableRight= \"@drawable/ic_action_add_group\" android:drawablePadding= \"8dp\" /> Which results in: In Android, many views inherit from TextView such as Button s, EditText s, RadioButton s which means that all of these views support the same functionality. For example, we can also do: <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"@string/user_name\" android:drawableLeft= \"@drawable/ic_action_person\" android:drawablePadding= \"8dp\" /> Which results in: The relevant attributes here are drawableLeft , drawableRight , drawableTop and drawableBottom along with drawablePadding . Check out this TextView article for a more detailed look at how to use this functionality. Note that if you want to be able to better control the size or scale of the drawables, check out this handy TextView extension or this bitmap drawable approach . You can also make calls to setCompoundDrawablesWithIntrinsicBounds on the TextView .","title":"Displaying Images within a TextView"},{"location":"android-common-views/textview/#using-custom-fonts","text":"We can actually use any custom font that we'd like within our applications. Check out fontsquirrel for an easy source of free fonts. For example, we can download Chantelli Antiqua as an example. Fonts are stored in the \"assets\" folder. In Android Studio, File > New > folder > Assets Folder . Now download any font and place the TTF file in the assets/fonts directory : We're going to use a basic layout file with a TextView , marked with an id of \"custom_font\" so we can access it in our code. <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:id= \"@+id/custom_font\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"This is the Chantelli Antiqua font.\" /> </LinearLayout> To set the custom font manually, open your activity file and insert this into the onCreate() method: // Get access to our TextView TextView txt = ( TextView ) findViewById ( R . id . custom_font ); // Create the TypeFace from the TTF asset Typeface font = Typeface . createFromAsset ( getAssets (), \"fonts/Chantelli_Antiqua.ttf\" ); // Assign the typeface to the view txt . setTypeface ( font ); Alternatively, you can use the third-party calligraphy library : < TextView fontPath = \"fonts/Chantelli_Antiqua.ttf\" /> Either method will will result in: You'll also want to keep an eye on the total size of your custom fonts, as this can grow quite large if you're using a lot of different typefaces.","title":"Using Custom Fonts"},{"location":"android-common-views/textview/#using-spans-to-style-sections-of-text","text":"Spans come in really handy when we want to apply styles to portions of text within the same TextView. We can change the text color, change the typeface, add an underline, etc, and apply these to only certain portions of the text. The full list of spans shows all the available options. As an example, let's say we have a single TextView where we want the first word to show up in red and the second word to have a strikethrough: We can accomplish this with spans using the code below: String firstWord = \"Hello\" ; String secondWord = \"World!\" ; TextView tvHelloWorld = ( TextView ) findViewById ( R . id . tvHelloWorld ); // Create a span that will make the text red ForegroundColorSpan redForegroundColorSpan = new ForegroundColorSpan ( getResources (). getColor ( android . R . color . holo_red_dark )); // Use a SpannableStringBuilder so that both the text and the spans are mutable SpannableStringBuilder ssb = new SpannableStringBuilder ( firstWord ); // Apply the color span ssb . setSpan ( redForegroundColorSpan , // the span to add 0 , // the start of the span (inclusive) ssb . length (), // the end of the span (exclusive) Spanned . SPAN_EXCLUSIVE_EXCLUSIVE ); // behavior when text is later inserted into the SpannableStringBuilder // SPAN_EXCLUSIVE_EXCLUSIVE means to not extend the span when additional // text is added in later // Add a blank space ssb . append ( \" \" ); // Create a span that will strikethrough the text StrikethroughSpan strikethroughSpan = new StrikethroughSpan (); // Add the secondWord and apply the strikethrough span to only the second word ssb . append ( secondWord ); ssb . setSpan ( strikethroughSpan , ssb . length () - secondWord . length (), ssb . length (), Spanned . SPAN_EXCLUSIVE_EXCLUSIVE ); // Set the TextView text and denote that it is Editable // since it's a SpannableStringBuilder tvHelloWorld . setText ( ssb , TextView . BufferType . EDITABLE ); Note: There are 3 different classes that can be used to represent text that has markup attached. SpannableStringBuilder (used above) is the one to use when dealing with mutable spans and mutable text. SpannableString is for mutable spans, but immutable text. And SpannedString is for immutable spans and immutable text.","title":"Using Spans to Style Sections of Text"},{"location":"android-common-views/textview/#creating-clickable-styled-spans","text":"In certain cases, we might want different substrings in a TextView to different styles and then clickable to trigger an action. For example, rendering tweet items where @foo can be clicked in a message to view a user's profile. For this, you should copy over the PatternEditableBuilder.java utility into your app. You can then use this utility to make clickable spans. For example: // Set text within a `TextView` TextView textView = ( TextView ) findViewById ( R . id . textView ); textView . setText ( \"Hey @sarah, where did @jim go? #lost\" ); // Style clickable spans based on pattern new PatternEditableBuilder (). addPattern ( Pattern . compile ( \"\\\\@(\\\\w+)\" ), Color . BLUE , new PatternEditableBuilder . SpannableClickedListener () { @Override public void onSpanClicked ( String text ) { Toast . makeText ( MainActivity . this , \"Clicked username: \" + text , Toast . LENGTH_SHORT ). show (); } }). into ( textView ); and this results in the following: For more details, view the README for more usage examples.","title":"Creating Clickable Styled Spans"},{"location":"android-common-views/view-attributes/","text":"Defining Views and their Attributes \u00b6 Defining view components within a layout is a critical part of Android development. Let's take a look at common views as well as common attributes of views. Common Views \u00b6 The six most common views are: TextView displays a formatted text label ImageView displays an image resource Button can be clicked to perform an action ImageButton displays a clickable image EditText is an editable text field for user input ListView is a scrollable list of items containing other views View Identifiers \u00b6 Any view can have an identifier attached that uniquely names that view for later access. You can assign a view an id within the XML layout: <Button android:id= \"@+id/my_button\" /> This id can then be accessed within the Java code for the corresponding activity (in onCreate of Activity for example): Button myButton = ( Button ) findViewById ( R . id . my_button ); Another important note is that any view with an id specified will automatically retain its state on a configuration change (i.e phone orientation switch). View Height and Width \u00b6 Every view has height and width properties controlling the size of the view. Height and width have to be defined in the XML for every view with: <TextView android:layout_width= \"165dp\" android:layout_height= \"wrap_content\" /> This can take the form of wrap_content (adjust height and width to the content size), match_parent (adjust height and width to the full size of the parent container), and a dimensions value such as 120dp . This can be changed at runtime in a number of ways: // Change the width or height int newInPixels = 50 ; view . setLayoutParams ( new LayoutParams ( newInPixels , newInPixels )); // Trigger invalidation of the view to force adjustment view . requestLayout (); Or we can change just the width or height individually: int newDimensionInPixels = 50 ; view . getLayoutParams (). width = newDimensionInPixels ; view . getLayoutParams (). height = newDimensionInPixels ; // Trigger invalidation of the view to force adjustment view . requestLayout (); We can also set these dimensions in dp rather than pixels with: int newDimensionInPixels = 50 ; // convert to 50dp int dimensionInDp = ( int ) TypedValue . applyDimension ( TypedValue . COMPLEX_UNIT_DIP , newDimensionInPixels , getResources (). getDisplayMetrics ()); view . getLayoutParams (). width = newDimensionInPixels ; view . getLayoutParams (). height = dimensionInDp ; // Trigger invalidation of the view to force adjustment view . requestLayout (); Views Margin and Padding \u00b6 Margins and padding values for views allows us to position and space elements in a layout. Layout Margin defines the amount of space around the outside of a view Padding defines the amount of space around the contents or children of a view. An example of setting margins and padding: <LinearLayout> <TextView android:layout_margin= \"5dp\" android:padding= \"5dp\" > <Button layout_marginBottom= \"5dp\" > </LinearLayout> View Gravity \u00b6 Gravity can be used to define the direction of the contents of a view. gravity determines the direction that the contents of a view will align (like CSS text-align). layout_gravity determines the direction of the view within it's parent (like CSS float). An example of applying gravity: <TextView android:gravity= \"left\" android:layout_gravity= \"right\" android:layout_width= \"165dp\" android:layout_height= \"wrap_content\" android:textSize= \"12sp\" android:text= \"@string/hello_world\" /> View Attributes \u00b6 Every view has many different attributes which can be applied to manage various properties. Certain properties are shared across many views such as android:layout_width Other properties are based on a view's function such as android:textColor Common view attributes include: Attribute Description Example Value android:background Background for the view #ffffff android:onClick Method to invoke when clicked onButtonClicked android:visibility Controls how view appears invisible android:hint Hint text to display when empty @string/hint android:text Text to display in view @string/foo android:textColor Color of the text #000000 android:textSize Size of the text 21sp android:textStyle Style of the text formatting bold Review the View docs and TextView docs for a list of additional attributes. An example of setting view attributes: <TextView android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/hello_world\" android:background= \"#000\" android:textColor= \"#fff\" android:layout_centerHorizontal= \"true\" />","title":"View Attributes"},{"location":"android-common-views/view-attributes/#defining-views-and-their-attributes","text":"Defining view components within a layout is a critical part of Android development. Let's take a look at common views as well as common attributes of views.","title":"Defining Views and their Attributes"},{"location":"android-common-views/view-attributes/#common-views","text":"The six most common views are: TextView displays a formatted text label ImageView displays an image resource Button can be clicked to perform an action ImageButton displays a clickable image EditText is an editable text field for user input ListView is a scrollable list of items containing other views","title":"Common Views"},{"location":"android-common-views/view-attributes/#view-identifiers","text":"Any view can have an identifier attached that uniquely names that view for later access. You can assign a view an id within the XML layout: <Button android:id= \"@+id/my_button\" /> This id can then be accessed within the Java code for the corresponding activity (in onCreate of Activity for example): Button myButton = ( Button ) findViewById ( R . id . my_button ); Another important note is that any view with an id specified will automatically retain its state on a configuration change (i.e phone orientation switch).","title":"View Identifiers"},{"location":"android-common-views/view-attributes/#view-height-and-width","text":"Every view has height and width properties controlling the size of the view. Height and width have to be defined in the XML for every view with: <TextView android:layout_width= \"165dp\" android:layout_height= \"wrap_content\" /> This can take the form of wrap_content (adjust height and width to the content size), match_parent (adjust height and width to the full size of the parent container), and a dimensions value such as 120dp . This can be changed at runtime in a number of ways: // Change the width or height int newInPixels = 50 ; view . setLayoutParams ( new LayoutParams ( newInPixels , newInPixels )); // Trigger invalidation of the view to force adjustment view . requestLayout (); Or we can change just the width or height individually: int newDimensionInPixels = 50 ; view . getLayoutParams (). width = newDimensionInPixels ; view . getLayoutParams (). height = newDimensionInPixels ; // Trigger invalidation of the view to force adjustment view . requestLayout (); We can also set these dimensions in dp rather than pixels with: int newDimensionInPixels = 50 ; // convert to 50dp int dimensionInDp = ( int ) TypedValue . applyDimension ( TypedValue . COMPLEX_UNIT_DIP , newDimensionInPixels , getResources (). getDisplayMetrics ()); view . getLayoutParams (). width = newDimensionInPixels ; view . getLayoutParams (). height = dimensionInDp ; // Trigger invalidation of the view to force adjustment view . requestLayout ();","title":"View Height and Width"},{"location":"android-common-views/view-attributes/#views-margin-and-padding","text":"Margins and padding values for views allows us to position and space elements in a layout. Layout Margin defines the amount of space around the outside of a view Padding defines the amount of space around the contents or children of a view. An example of setting margins and padding: <LinearLayout> <TextView android:layout_margin= \"5dp\" android:padding= \"5dp\" > <Button layout_marginBottom= \"5dp\" > </LinearLayout>","title":"Views Margin and Padding"},{"location":"android-common-views/view-attributes/#view-gravity","text":"Gravity can be used to define the direction of the contents of a view. gravity determines the direction that the contents of a view will align (like CSS text-align). layout_gravity determines the direction of the view within it's parent (like CSS float). An example of applying gravity: <TextView android:gravity= \"left\" android:layout_gravity= \"right\" android:layout_width= \"165dp\" android:layout_height= \"wrap_content\" android:textSize= \"12sp\" android:text= \"@string/hello_world\" />","title":"View Gravity"},{"location":"android-common-views/view-attributes/#view-attributes","text":"Every view has many different attributes which can be applied to manage various properties. Certain properties are shared across many views such as android:layout_width Other properties are based on a view's function such as android:textColor Common view attributes include: Attribute Description Example Value android:background Background for the view #ffffff android:onClick Method to invoke when clicked onButtonClicked android:visibility Controls how view appears invisible android:hint Hint text to display when empty @string/hint android:text Text to display in view @string/foo android:textColor Color of the text #000000 android:textSize Size of the text 21sp android:textStyle Style of the text formatting bold Review the View docs and TextView docs for a list of additional attributes. An example of setting view attributes: <TextView android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/hello_world\" android:background= \"#000\" android:textColor= \"#fff\" android:layout_centerHorizontal= \"true\" />","title":"View Attributes"},{"location":"android-common-views/view/","text":"View \u00b6 A plain rectangle that can be used as a divider. <View android:layout_width= \"match_parent\" android:layout_height= \"1dp\" android:background= \"#CCC\" />","title":"View"},{"location":"android-common-views/view/#view","text":"A plain rectangle that can be used as a divider. <View android:layout_width= \"match_parent\" android:layout_height= \"1dp\" android:background= \"#CCC\" />","title":"View"},{"location":"layouts/constraint-layout/","text":"","title":"Constraint layout"},{"location":"layouts/frame-layout/","text":"FrameLayout \u00b6 In a frame layout, the children are displayed with a z-index in the order of how they appear. Put simply, the last child added to a FrameLayout will be drawn on top of all the previous children. Think of it like a stack of items, the item last put on the stack will be drawn on top of the items below it. This layout makes it very easy to draw on top of other layouts, especially for tasks such as button placement. To arrange the children inside of a FrameLayout use the android:layout_gravity attribute along with whatever android:padding and android:margin you need. Example of FrameLayout snippet: <FrameLayout android:id= \"@+id/frame_layout\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <!-- Child1 is drawn first --> <ImageView android:id= \"@+id/child1\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:contentDescription= \"Image\" android:src= \"@drawable/icon\" /> <!-- Child2 is drawn over Child1 --> <TextView android:id= \"@+id/child2\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Child 2\" android:layout_gravity= \"top|left\" /> <!-- Child3 is drawn over Child1 and Child2 --> <TextView android:id= \"@+id/child3\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Child 3\" android:layout_gravity= \"top|right\" /> </FrameLayout> In this example, an ImageView is set to the full size of the FrameLayout . We then draw two TextView 's over it. Understanding View Layers \u00b6 Layering Introduction \u00b6 You may notice that when two views overlap on screen, that one view will become hidden behind the other. Views are drawn in layers by default based on the order they appear in the XML . In other words, the view at the bottom of a container is drawn on screen last covering all previously drawn views. This is described in the official view docs and in the How Android Draws guide with: The tree is largely recorded and drawn in order, with parents drawn before (i.e., behind) their children, with siblings drawn in the order they appear in the tree. If you set a background drawable for a View, then the View will draw it before calling back to its onDraw() method. The child drawing order can be overridden with custom child drawing order in a ViewGroup, and with setZ(float) custom Z values} set on Views. In other words, the easiest way to layer is to pay close attention to the order in which the Views are added to your XML file within their container. Lower down in the file means higher up in the Z-axis . Elevation \u00b6 In Android starting from API level 21, items in the layout file get their Z-order both from how they are ordered within the file as well as from their \"elevation\" with a higher elevation value meaning the item gets a higher Z order. The value of android:elevation must be a dimension value such as 10dp . We can also use the translationZ property to provide the same effect. Read more about elevation here on the official guide . Overlapping Two Views \u00b6 If we want to overlap two views on top of each other, we can do so using either a RelativeLayout or a FrameLayout . Suppose we have two images: a background image and a foreground image and we want to place them on top of one another. The code for this can be achieved with a RelativeLayout such as shown below: <RelativeLayout android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" > <!-- Back view should be first to be drawn first! --> <ImageView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:adjustViewBounds= \"true\" android:scaleType= \"fitXY\" android:src= \"@drawable/back_image_beach\" /> <!-- Front view should be last to be drawn on top! --> <!-- Use `centerInParent` to center the image in the container --> <!-- Use `elevation` to ensure placement on top (not required) --> <ImageView android:layout_width= \"250dp\" android:layout_height= \"wrap_content\" android:adjustViewBounds= \"true\" android:elevation= \"10dp\" android:layout_centerInParent= \"true\" android:scaleType= \"fitXY\" android:src= \"@drawable/airbnb_logo_front\" /> </RelativeLayout> This results in the following: Forcing View to the Front \u00b6 We can force a view to the front of the stack to become visible using: myView . bringToFront (); myView . invalidate (); Note: You must be sure to call bringToFront() and invalidate() method on the highest-level view under your root view. See a more detailed example here . With these methods outlined above, we can easily control the draw order of our views.","title":"Frame Layout"},{"location":"layouts/frame-layout/#framelayout","text":"In a frame layout, the children are displayed with a z-index in the order of how they appear. Put simply, the last child added to a FrameLayout will be drawn on top of all the previous children. Think of it like a stack of items, the item last put on the stack will be drawn on top of the items below it. This layout makes it very easy to draw on top of other layouts, especially for tasks such as button placement. To arrange the children inside of a FrameLayout use the android:layout_gravity attribute along with whatever android:padding and android:margin you need. Example of FrameLayout snippet: <FrameLayout android:id= \"@+id/frame_layout\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <!-- Child1 is drawn first --> <ImageView android:id= \"@+id/child1\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:contentDescription= \"Image\" android:src= \"@drawable/icon\" /> <!-- Child2 is drawn over Child1 --> <TextView android:id= \"@+id/child2\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Child 2\" android:layout_gravity= \"top|left\" /> <!-- Child3 is drawn over Child1 and Child2 --> <TextView android:id= \"@+id/child3\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Child 3\" android:layout_gravity= \"top|right\" /> </FrameLayout> In this example, an ImageView is set to the full size of the FrameLayout . We then draw two TextView 's over it.","title":"FrameLayout"},{"location":"layouts/frame-layout/#understanding-view-layers","text":"","title":"Understanding View Layers"},{"location":"layouts/frame-layout/#layering-introduction","text":"You may notice that when two views overlap on screen, that one view will become hidden behind the other. Views are drawn in layers by default based on the order they appear in the XML . In other words, the view at the bottom of a container is drawn on screen last covering all previously drawn views. This is described in the official view docs and in the How Android Draws guide with: The tree is largely recorded and drawn in order, with parents drawn before (i.e., behind) their children, with siblings drawn in the order they appear in the tree. If you set a background drawable for a View, then the View will draw it before calling back to its onDraw() method. The child drawing order can be overridden with custom child drawing order in a ViewGroup, and with setZ(float) custom Z values} set on Views. In other words, the easiest way to layer is to pay close attention to the order in which the Views are added to your XML file within their container. Lower down in the file means higher up in the Z-axis .","title":"Layering Introduction"},{"location":"layouts/frame-layout/#elevation","text":"In Android starting from API level 21, items in the layout file get their Z-order both from how they are ordered within the file as well as from their \"elevation\" with a higher elevation value meaning the item gets a higher Z order. The value of android:elevation must be a dimension value such as 10dp . We can also use the translationZ property to provide the same effect. Read more about elevation here on the official guide .","title":"Elevation"},{"location":"layouts/frame-layout/#overlapping-two-views","text":"If we want to overlap two views on top of each other, we can do so using either a RelativeLayout or a FrameLayout . Suppose we have two images: a background image and a foreground image and we want to place them on top of one another. The code for this can be achieved with a RelativeLayout such as shown below: <RelativeLayout android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" > <!-- Back view should be first to be drawn first! --> <ImageView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:adjustViewBounds= \"true\" android:scaleType= \"fitXY\" android:src= \"@drawable/back_image_beach\" /> <!-- Front view should be last to be drawn on top! --> <!-- Use `centerInParent` to center the image in the container --> <!-- Use `elevation` to ensure placement on top (not required) --> <ImageView android:layout_width= \"250dp\" android:layout_height= \"wrap_content\" android:adjustViewBounds= \"true\" android:elevation= \"10dp\" android:layout_centerInParent= \"true\" android:scaleType= \"fitXY\" android:src= \"@drawable/airbnb_logo_front\" /> </RelativeLayout> This results in the following:","title":"Overlapping Two Views"},{"location":"layouts/frame-layout/#forcing-view-to-the-front","text":"We can force a view to the front of the stack to become visible using: myView . bringToFront (); myView . invalidate (); Note: You must be sure to call bringToFront() and invalidate() method on the highest-level view under your root view. See a more detailed example here . With these methods outlined above, we can easily control the draw order of our views.","title":"Forcing View to the Front"},{"location":"layouts/layout-prformance/","text":"Optimizing Layout Performance \u00b6 To optimize layout performance, minimize the number of instantiated layouts and especially minimize deep nested layouts whenever possible. This is why you should generally use a RelativeLayout whenever possible instead of nested LinearLayout . A few layout tips are included below: Using nested instances of LinearLayout can lead to an excessively deep view hierarchy and can be quite expensive especially expensive as each child needs to be measured twice. This is particularly important when the layout is inflated repeatedly such as in a list. Layout performance slows down due to a nested LinearLayout and the performance can be improved by flattening the layout, making the layout shallow and wide rather than narrow and deep. A RelativeLayout as the root node allows for such layouts. So, when this design is converted to use RelativeLayout , the view hierarchy can be flattened significantly. Sometimes your layout might require complex views that are rarely used. Whether they are item details, progress indicators, or undo messages, you can reduce memory usage and speed up rendering by loading the views only when they are needed . Review the following references for more detail on optimizing your view hierarchy: Optimizing Layouts Android Layout Tricks Layout Optimization This is just the beginning. Refer to our [[profiling apps guide|Debugging-and-Profiling-Apps]] for more resources.","title":"Optimizing Layout Performance"},{"location":"layouts/layout-prformance/#optimizing-layout-performance","text":"To optimize layout performance, minimize the number of instantiated layouts and especially minimize deep nested layouts whenever possible. This is why you should generally use a RelativeLayout whenever possible instead of nested LinearLayout . A few layout tips are included below: Using nested instances of LinearLayout can lead to an excessively deep view hierarchy and can be quite expensive especially expensive as each child needs to be measured twice. This is particularly important when the layout is inflated repeatedly such as in a list. Layout performance slows down due to a nested LinearLayout and the performance can be improved by flattening the layout, making the layout shallow and wide rather than narrow and deep. A RelativeLayout as the root node allows for such layouts. So, when this design is converted to use RelativeLayout , the view hierarchy can be flattened significantly. Sometimes your layout might require complex views that are rarely used. Whether they are item details, progress indicators, or undo messages, you can reduce memory usage and speed up rendering by loading the views only when they are needed . Review the following references for more detail on optimizing your view hierarchy: Optimizing Layouts Android Layout Tricks Layout Optimization This is just the beginning. Refer to our [[profiling apps guide|Debugging-and-Profiling-Apps]] for more resources.","title":"Optimizing Layout Performance"},{"location":"layouts/linear-layout/","text":"LinearLayout \u00b6 In a linear layout, like the name suggests, all the elements are displayed in a single direction either horizontally or vertically and this behavior is specified in android:orientation which is an attribute of the node LinearLayout . All children of a LinearLayout are displayed sequentially based on the order they are defined within the layout. A LinearLayout respects margins between children and the gravity (right, center, or left alignment) of each child. Common view attributes you might see used in a LinearLayout: android:gravity - Controls the alignment of the view content (akin to text-align in CSS) android:layout_gravity - Controls the alignment of the view within it's parent container (akin to float in CSS) android:layout_weight - Specifies how much of the extra space in the layout to be allocated to a view. Example of LinearLayout snippet: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"Email:\" /> <EditText android:hint= \"john.doe@domain.com\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:id= \"@+id/editText\" /> <Button android:text= \"Sign Up\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> </LinearLayout> Will produce something like the image below. Note that the android:orientation is set to vertical. Linear Layout Horizontal orientation \u00b6 We will group two buttons side by side using a linear layout in horizontal orientation. <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <Button android:text= \"Login\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> <Button android:text= \"Sign Up\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> </LinearLayout> And will produce something like the image below : Distribute Widths with Layout Weight \u00b6 To distribute the width in a linear layout we use the android:layout_weight property. We can also distribute the height using the same property. Lets make the buttons take equally the same space. Notice that the android:layout_width needs to be match_parent for both buttons and the android:layout_weight will be used to proportionally divide the space. And we can make the Login button take all the remaining space by just giving it the android:layout_weight=1 and wrap_content on the Sign Up button as per the picture below. If you want to setup a part of your layout, such that, for instance, 3 buttons appear in a row, occupying equal space (or if, for instance, you want to give 4/5 space to a map and 1/5 to another component below it), LinearLayout can be used to do the trick by leveraging android:layout_weight .This works by setting the android:weightSum to a total value and then setting the android:layout_weight value for each subview to determine width distribution. <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <LinearLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:orientation= \"horizontal\" android:weightSum= \"5\" android:layout_alignParentBottom= \"true\" > <Button android:text= \"Login\" android:layout_width= \"0dp\" android:layout_weight= \"2\" android:layout_height= \"wrap_content\" android:layout_alignParentLeft= \"true\" /> <Button android:text= \"Sign Up\" android:layout_width= \"0dp\" android:layout_weight= \"3\" android:layout_height= \"wrap_content\" android:layout_alignParentRight= \"true\" /> </LinearLayout> </LinearLayout> {{< note title=\"Layout Performance\" >}} For performance, when using android:layout_weight , you should set the android:layout_width=0dp so that Android does not have to calculate the width as well since its already being calculated using android:layout_weight . {{< /note >}} Using the above XML, Login will have 2/5 of total container width and Sign Up will have 3/5 of parent width because we set the total android:weightSum to 5 and the buttons android:layout_weight property to 2 and 3 respectively. Use caution in utilizing multiple nested LinearLayout s and/or layout_weight from a performance standpoint! Gravity \u00b6 The android:layout_gravity is used to position the view within its parent. We can place the view to the left, right, start, bottom, center and so on. <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"TO\" /> <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Subject\" /> <EditText android:layout_width= \"match_parent\" android:layout_height= \"0dp\" android:layout_weight= \"1\" android:gravity= \"top\" android:hint= \"Message\" /> <Button android:layout_width= \"100dp\" android:layout_height= \"wrap_content\" android:layout_gravity= \"right\" android:text= \"Send\" /> </LinearLayout> In the image below the android:layout_gravity property is used to place the Send button to the right : Nesting Layouts \u00b6 We can nest a LinearLayout inside another LinearLayout. For performance you should limit the nesting to only 2 levels. Excessive nesting reduces drawing performance. <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <EditText android:hint= \"Username\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <EditText android:hint= \"Password\" android:inputType= \"textPassword\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <LinearLayout android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <Button android:layout_weight= \"1\" android:text= \"Login\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <Button android:text= \"Sign Up\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> </LinearLayout> </LinearLayout> Will look like the image below :","title":"Linear Layout"},{"location":"layouts/linear-layout/#linearlayout","text":"In a linear layout, like the name suggests, all the elements are displayed in a single direction either horizontally or vertically and this behavior is specified in android:orientation which is an attribute of the node LinearLayout . All children of a LinearLayout are displayed sequentially based on the order they are defined within the layout. A LinearLayout respects margins between children and the gravity (right, center, or left alignment) of each child. Common view attributes you might see used in a LinearLayout: android:gravity - Controls the alignment of the view content (akin to text-align in CSS) android:layout_gravity - Controls the alignment of the view within it's parent container (akin to float in CSS) android:layout_weight - Specifies how much of the extra space in the layout to be allocated to a view. Example of LinearLayout snippet: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"Email:\" /> <EditText android:hint= \"john.doe@domain.com\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:id= \"@+id/editText\" /> <Button android:text= \"Sign Up\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> </LinearLayout> Will produce something like the image below. Note that the android:orientation is set to vertical.","title":"LinearLayout"},{"location":"layouts/linear-layout/#linear-layout-horizontal-orientation","text":"We will group two buttons side by side using a linear layout in horizontal orientation. <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <Button android:text= \"Login\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> <Button android:text= \"Sign Up\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> </LinearLayout> And will produce something like the image below :","title":"Linear Layout Horizontal orientation"},{"location":"layouts/linear-layout/#distribute-widths-with-layout-weight","text":"To distribute the width in a linear layout we use the android:layout_weight property. We can also distribute the height using the same property. Lets make the buttons take equally the same space. Notice that the android:layout_width needs to be match_parent for both buttons and the android:layout_weight will be used to proportionally divide the space. And we can make the Login button take all the remaining space by just giving it the android:layout_weight=1 and wrap_content on the Sign Up button as per the picture below. If you want to setup a part of your layout, such that, for instance, 3 buttons appear in a row, occupying equal space (or if, for instance, you want to give 4/5 space to a map and 1/5 to another component below it), LinearLayout can be used to do the trick by leveraging android:layout_weight .This works by setting the android:weightSum to a total value and then setting the android:layout_weight value for each subview to determine width distribution. <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <LinearLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:orientation= \"horizontal\" android:weightSum= \"5\" android:layout_alignParentBottom= \"true\" > <Button android:text= \"Login\" android:layout_width= \"0dp\" android:layout_weight= \"2\" android:layout_height= \"wrap_content\" android:layout_alignParentLeft= \"true\" /> <Button android:text= \"Sign Up\" android:layout_width= \"0dp\" android:layout_weight= \"3\" android:layout_height= \"wrap_content\" android:layout_alignParentRight= \"true\" /> </LinearLayout> </LinearLayout> {{< note title=\"Layout Performance\" >}} For performance, when using android:layout_weight , you should set the android:layout_width=0dp so that Android does not have to calculate the width as well since its already being calculated using android:layout_weight . {{< /note >}} Using the above XML, Login will have 2/5 of total container width and Sign Up will have 3/5 of parent width because we set the total android:weightSum to 5 and the buttons android:layout_weight property to 2 and 3 respectively. Use caution in utilizing multiple nested LinearLayout s and/or layout_weight from a performance standpoint!","title":"Distribute Widths with Layout Weight"},{"location":"layouts/linear-layout/#gravity","text":"The android:layout_gravity is used to position the view within its parent. We can place the view to the left, right, start, bottom, center and so on. <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"TO\" /> <EditText android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Subject\" /> <EditText android:layout_width= \"match_parent\" android:layout_height= \"0dp\" android:layout_weight= \"1\" android:gravity= \"top\" android:hint= \"Message\" /> <Button android:layout_width= \"100dp\" android:layout_height= \"wrap_content\" android:layout_gravity= \"right\" android:text= \"Send\" /> </LinearLayout> In the image below the android:layout_gravity property is used to place the Send button to the right :","title":"Gravity"},{"location":"layouts/linear-layout/#nesting-layouts","text":"We can nest a LinearLayout inside another LinearLayout. For performance you should limit the nesting to only 2 levels. Excessive nesting reduces drawing performance. <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:orientation= \"vertical\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <EditText android:hint= \"Username\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <EditText android:hint= \"Password\" android:inputType= \"textPassword\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <LinearLayout android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > <Button android:layout_weight= \"1\" android:text= \"Login\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <Button android:text= \"Sign Up\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" /> </LinearLayout> </LinearLayout> Will look like the image below :","title":"Nesting Layouts"},{"location":"layouts/overview/","text":"Layouts Overview \u00b6 View Layouts are a type of View class whose primary purpose is to organize and position other view controls. These layout classes (LinearLayout, RelativeLayout, etc.) are used to display child controls, such as text controls or buttons on the screen. Android activities (screens) use layouts as a container for view controls, and layouts can actually contain other nested layouts as well. Nearly all Android activities have layout containers similar to the way that most HTML documents use \"divs\" to contain other content. There are a few very commonly used layouts and then many more specialized layouts that are used in only very particular cases. The bread and butter layouts are LinearLayout , RelativeLayout , and FrameLayout . It's important to note the class hierarchy of these View Layouts. Each of them subclass ViewGroup , which itself subclasses View . That means it is perfectly legal to pass a layout such as LinearLayout as an argument for something that takes View as a parameter. ViewGroup also contains the nested static class LayoutParams which is used for creating or editing layouts in code. Keep in mind that each subclass of ViewGroup , such as LinearLayout , has its own nested static class LayoutParams that's a subclass of ViewGroup.LayoutParams . When creating View Layouts in code, beginners will often confuse the many different available LayoutParams classes and run into hard to catch problems.","title":"Layouts Overview"},{"location":"layouts/overview/#layouts-overview","text":"View Layouts are a type of View class whose primary purpose is to organize and position other view controls. These layout classes (LinearLayout, RelativeLayout, etc.) are used to display child controls, such as text controls or buttons on the screen. Android activities (screens) use layouts as a container for view controls, and layouts can actually contain other nested layouts as well. Nearly all Android activities have layout containers similar to the way that most HTML documents use \"divs\" to contain other content. There are a few very commonly used layouts and then many more specialized layouts that are used in only very particular cases. The bread and butter layouts are LinearLayout , RelativeLayout , and FrameLayout . It's important to note the class hierarchy of these View Layouts. Each of them subclass ViewGroup , which itself subclasses View . That means it is perfectly legal to pass a layout such as LinearLayout as an argument for something that takes View as a parameter. ViewGroup also contains the nested static class LayoutParams which is used for creating or editing layouts in code. Keep in mind that each subclass of ViewGroup , such as LinearLayout , has its own nested static class LayoutParams that's a subclass of ViewGroup.LayoutParams . When creating View Layouts in code, beginners will often confuse the many different available LayoutParams classes and run into hard to catch problems.","title":"Layouts Overview"},{"location":"layouts/relative-layout/","text":"RelativeLayout \u00b6 In a relative layout every element arranges itself relative to other elements or a parent element. RelativeLayout positions views based on a number of directional attributes: Position based on siblings: layout_above , layout_below , layout_toLeftOf , layout_toRightOf Position based on parent: android:layout_centerHorizontal , android:layout_centerVertical Alignment based on siblings: layout_alignTop , layout_alignBottom , layout_alignLeft , layout_alignRight , layout_alignBaseline Alignment based on parent: layout_alignParentTop , layout_alignParentBottom , layout_alignParentLeft , layout_alignParentRight An example of a RelativeLayout: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:id= \"@+id/label\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"Email\" /> <EditText android:hint= \"john.doe@example.com\" android:id= \"@+id/inputEmail\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/label\" /> <Button android:id= \"@+id/btnLogin\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/inputEmail\" android:layout_alignParentLeft= \"true\" android:layout_marginRight= \"5dp\" android:text= \"Login\" /> </RelativeLayout> Will have produce a layout as below : and another example of a Realtive Layout : <?xml version=\"1.0\" encoding=\"utf-8\"?> <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:paddingLeft= \"16dp\" android:paddingRight= \"16dp\" > <EditText android:id= \"@+id/name\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Reminder name\" /> <Spinner android:entries= \"@array/dates\" android:id= \"@+id/dates\" android:layout_width= \"0dp\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/name\" android:layout_alignParentLeft= \"true\" android:layout_toLeftOf= \"@+id/times\" /> <Spinner android:entries= \"@array/times\" android:id= \"@id/times\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/name\" android:layout_alignParentRight= \"true\" /> <Button android:layout_width= \"96dp\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/times\" android:layout_alignParentRight= \"true\" android:text= \"Done\" /> </RelativeLayout> Note the spinner entries are defined in the arrays.xml file as follows : <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string-array name= \"dates\" > <item> Thur, 23rd Feb 2017 </item> </string-array> <string-array name= \"times\" > <item> 3:25PM </item> </string-array> </resources> and will produce the image as below : Read this RelativeLayout tutorial for a more detailed overview. You can also see more about this layout by inspecting the RelativeLayout.LayoutParams docs and the official RelativeLayout guide . We can accomplish complicated layouts with the relative layout. In the following, we have put the circle on top of the other views, and also used negative margins to accomplish it. <?xml version=\"1.0\" encoding=\"utf-8\"?> <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <View android:id= \"@+id/box1\" android:background= \"#6b0c0c\" android:layout_width= \"match_parent\" android:layout_height= \"50dp\" /> <View android:layout_below= \"@+id/box1\" android:id= \"@+id/box2\" android:background= \"#18aaed\" android:layout_width= \"match_parent\" android:layout_height= \"50dp\" /> <View android:layout_marginRight= \"10dp\" android:layout_alignParentRight= \"true\" android:layout_marginBottom= \"-20dp\" android:layout_above= \"@+id/box2\" android:id= \"@+id/box3\" android:background= \"@drawable/bg\" android:layout_width= \"50dp\" android:layout_height= \"50dp\" /> </RelativeLayout> The background is a drawable resource, its created in the drawable folder . We will cover drawables in the styleing section. bg.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <shape xmlns:android= \"http://schemas.android.com/apk/res/android\" android:shape= \"rectangle\" > <solid android:color= \"#bf14ae\" /> <corners android:radius= \"25sp\" /> </shape> Will produce the output as in the following picture : Using Alignment to Control Width or Height \u00b6 A less understood aspect of RelativeLayout is how the use of alignment can determine width or height. It may seem counterintuitive at first about how this works, so we'll walkthrough a few examples in this section. Using this approach is especially useful in matching the widths or heights relative to other elements. Example 1: How alignment can determine width \u00b6 Suppose we have two buttons of varying widths: The corresponding XML would be: <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:paddingLeft= \"@dimen/activity_horizontal_margin\" android:paddingRight= \"@dimen/activity_horizontal_margin\" android:paddingTop= \"@dimen/activity_vertical_margin\" android:paddingBottom= \"@dimen/activity_vertical_margin\" tools:context= \".MainActivity\" > <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"1245678901234567890\" android:id= \"@+id/button1\" /> <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"CANCEL IT\" android:id= \"@+id/button2\" android:layout_below= \"@id/button1\" android:layout_alignLeft= \"@id/button1\" /> </RelativeLayout> Suppose we also specify that the second button should be aligned left and right to the first button. If we add android:layout_alignRight=\"@id/button1\" to the second button's XML style, the change causes the second button to expand the width to match that of the first button. In other words, the only way to meet the requirements of specifying alignment on both sides is to expand the width of the second button. In this way, when two elements are vertically positioned above or below the other, left and right alignments will control the width . When two elements are positioned horizontally next to each other, top and bottom alignments will control the height . We'll show how height can be impacted by specifying top and bottom alignments in the next example. Example 2: How alignment can determine height \u00b6 Suppose we have this layout definition: <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:paddingLeft= \"@dimen/activity_horizontal_margin\" android:paddingRight= \"@dimen/activity_horizontal_margin\" android:paddingTop= \"@dimen/activity_vertical_margin\" android:paddingBottom= \"@dimen/activity_vertical_margin\" tools:context= \".MainActivity\" > <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:height= \"200dp\" android:text= \"1245678901234567890\" android:id= \"@+id/button1\" /> <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"CANCEL IT\" android:id= \"@+id/button2\" android:layout_toRightOf= \"@id/button1\" /> </RelativeLayout> The corresponding preview looks like: If we wish to match the height of the first button, we can specify layout_alignTop and layout_alignBottom on the second button. <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_alignTop= \"@id/button1\" android:layout_alignBottom= \"@id/button1\" android:text= \"CANCEL IT\" android:id= \"@+id/button2\" android:layout_toRightOf= \"@id/button1\" /> The only way to fulfill this requirement is to expand the height of the second button as shown below:","title":"Relative Layout"},{"location":"layouts/relative-layout/#relativelayout","text":"In a relative layout every element arranges itself relative to other elements or a parent element. RelativeLayout positions views based on a number of directional attributes: Position based on siblings: layout_above , layout_below , layout_toLeftOf , layout_toRightOf Position based on parent: android:layout_centerHorizontal , android:layout_centerVertical Alignment based on siblings: layout_alignTop , layout_alignBottom , layout_alignLeft , layout_alignRight , layout_alignBaseline Alignment based on parent: layout_alignParentTop , layout_alignParentBottom , layout_alignParentLeft , layout_alignParentRight An example of a RelativeLayout: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Parent linear layout with vertical orientation --> <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:padding= \"16dp\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:id= \"@+id/label\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"Email\" /> <EditText android:hint= \"john.doe@example.com\" android:id= \"@+id/inputEmail\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/label\" /> <Button android:id= \"@+id/btnLogin\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/inputEmail\" android:layout_alignParentLeft= \"true\" android:layout_marginRight= \"5dp\" android:text= \"Login\" /> </RelativeLayout> Will have produce a layout as below : and another example of a Realtive Layout : <?xml version=\"1.0\" encoding=\"utf-8\"?> <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:paddingLeft= \"16dp\" android:paddingRight= \"16dp\" > <EditText android:id= \"@+id/name\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:hint= \"Reminder name\" /> <Spinner android:entries= \"@array/dates\" android:id= \"@+id/dates\" android:layout_width= \"0dp\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/name\" android:layout_alignParentLeft= \"true\" android:layout_toLeftOf= \"@+id/times\" /> <Spinner android:entries= \"@array/times\" android:id= \"@id/times\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/name\" android:layout_alignParentRight= \"true\" /> <Button android:layout_width= \"96dp\" android:layout_height= \"wrap_content\" android:layout_below= \"@id/times\" android:layout_alignParentRight= \"true\" android:text= \"Done\" /> </RelativeLayout> Note the spinner entries are defined in the arrays.xml file as follows : <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string-array name= \"dates\" > <item> Thur, 23rd Feb 2017 </item> </string-array> <string-array name= \"times\" > <item> 3:25PM </item> </string-array> </resources> and will produce the image as below : Read this RelativeLayout tutorial for a more detailed overview. You can also see more about this layout by inspecting the RelativeLayout.LayoutParams docs and the official RelativeLayout guide . We can accomplish complicated layouts with the relative layout. In the following, we have put the circle on top of the other views, and also used negative margins to accomplish it. <?xml version=\"1.0\" encoding=\"utf-8\"?> <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <View android:id= \"@+id/box1\" android:background= \"#6b0c0c\" android:layout_width= \"match_parent\" android:layout_height= \"50dp\" /> <View android:layout_below= \"@+id/box1\" android:id= \"@+id/box2\" android:background= \"#18aaed\" android:layout_width= \"match_parent\" android:layout_height= \"50dp\" /> <View android:layout_marginRight= \"10dp\" android:layout_alignParentRight= \"true\" android:layout_marginBottom= \"-20dp\" android:layout_above= \"@+id/box2\" android:id= \"@+id/box3\" android:background= \"@drawable/bg\" android:layout_width= \"50dp\" android:layout_height= \"50dp\" /> </RelativeLayout> The background is a drawable resource, its created in the drawable folder . We will cover drawables in the styleing section. bg.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <shape xmlns:android= \"http://schemas.android.com/apk/res/android\" android:shape= \"rectangle\" > <solid android:color= \"#bf14ae\" /> <corners android:radius= \"25sp\" /> </shape> Will produce the output as in the following picture :","title":"RelativeLayout"},{"location":"layouts/relative-layout/#using-alignment-to-control-width-or-height","text":"A less understood aspect of RelativeLayout is how the use of alignment can determine width or height. It may seem counterintuitive at first about how this works, so we'll walkthrough a few examples in this section. Using this approach is especially useful in matching the widths or heights relative to other elements.","title":"Using Alignment to Control Width or Height"},{"location":"layouts/relative-layout/#example-1-how-alignment-can-determine-width","text":"Suppose we have two buttons of varying widths: The corresponding XML would be: <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:paddingLeft= \"@dimen/activity_horizontal_margin\" android:paddingRight= \"@dimen/activity_horizontal_margin\" android:paddingTop= \"@dimen/activity_vertical_margin\" android:paddingBottom= \"@dimen/activity_vertical_margin\" tools:context= \".MainActivity\" > <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"1245678901234567890\" android:id= \"@+id/button1\" /> <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"CANCEL IT\" android:id= \"@+id/button2\" android:layout_below= \"@id/button1\" android:layout_alignLeft= \"@id/button1\" /> </RelativeLayout> Suppose we also specify that the second button should be aligned left and right to the first button. If we add android:layout_alignRight=\"@id/button1\" to the second button's XML style, the change causes the second button to expand the width to match that of the first button. In other words, the only way to meet the requirements of specifying alignment on both sides is to expand the width of the second button. In this way, when two elements are vertically positioned above or below the other, left and right alignments will control the width . When two elements are positioned horizontally next to each other, top and bottom alignments will control the height . We'll show how height can be impacted by specifying top and bottom alignments in the next example.","title":"Example 1: How alignment can determine width"},{"location":"layouts/relative-layout/#example-2-how-alignment-can-determine-height","text":"Suppose we have this layout definition: <RelativeLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:paddingLeft= \"@dimen/activity_horizontal_margin\" android:paddingRight= \"@dimen/activity_horizontal_margin\" android:paddingTop= \"@dimen/activity_vertical_margin\" android:paddingBottom= \"@dimen/activity_vertical_margin\" tools:context= \".MainActivity\" > <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:height= \"200dp\" android:text= \"1245678901234567890\" android:id= \"@+id/button1\" /> <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"CANCEL IT\" android:id= \"@+id/button2\" android:layout_toRightOf= \"@id/button1\" /> </RelativeLayout> The corresponding preview looks like: If we wish to match the height of the first button, we can specify layout_alignTop and layout_alignBottom on the second button. <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:layout_alignTop= \"@id/button1\" android:layout_alignBottom= \"@id/button1\" android:text= \"CANCEL IT\" android:id= \"@+id/button2\" android:layout_toRightOf= \"@id/button1\" /> The only way to fulfill this requirement is to expand the height of the second button as shown below:","title":"Example 2: How alignment can determine height"},{"location":"navigation/bottom-navigation/","text":"Bottom Navigation Views \u00b6 Bottom navigation provide easy navigation for switching between 3 to 5 different views. It was a recently added to the Material Design spec , which provides an alternative between tabs and navigation drawers . Setup \u00b6 See the [[design support library|Design-Support-Library#setup]] setup instructions for the Gradle config you need to add. In particular, make sure you have updated to the v25 design library, since support for the bottom navigation support was recently added. Next, simply declare a BottomNavigationView instance and make sure to set alignParentBottom=true to ensure that the view is placed on the bottom layout: <android.support.design.widget.BottomNavigationView android:id= \"@+id/bottom_navigation\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:layout_alignParentBottom= \"true\" app:menu= \"@menu/menu_bottom_navigation\" /> Next, similar to how menu items in the [[Toolbar|Using-the-App-ToolBar]], declare the tabbed items and the icons that will be displayed in a res/menu/menu_bottom_navigation.xml file: <?xml version=\"1.0\" encoding=\"utf-8\"?> <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" > <item android:id= \"@+id/action_favorites\" android:enabled= \"true\" android:icon= \"@drawable/ic_favorite_white_24dp\" android:title= \"@string/text_favorites\" app:showAsAction= \"ifRoom\" /> <item android:id= \"@+id/action_schedules\" android:enabled= \"true\" android:icon= \"@drawable/ic_access_time_white_24dp\" android:title= \"@string/text_schedules\" app:showAsAction= \"ifRoom\" /> <item android:id= \"@+id/action_music\" android:enabled= \"true\" android:icon= \"@drawable/ic_audiotrack_white_24dp\" android:title= \"@string/text_music\" app:showAsAction= \"ifRoom\" /> </menu> You can create the icons by choosing them from the New -> Vector Asset : Next, you can choose the Action and find the heart symbol: Save the file as ic_favorite_white_24dp.xml . You can change the fill color after importing the vector drawable by modifying the fillColor : <!-- change fill color to white --> <path android:fillColor= \"#FFFFFFFF\" android:pathData= \"M12,21.35l-1.45,-1.32C5.4,15.36 2,12.28 2,8.5 2,5.42 4.42,3 7.5,3c1.74,0 3.41,0.81 4.5,2.09C13.09,3.81 14.76,3 16.5,3 19.58,3 22,5.42 22,8.5c0,3.78 -3.4,6.86 -8.55,11.54L12,21.35z\" /> </path> You can repeat this process for the other icons. You can also download the icons directly from this GitHub repo too. Finally, you will need to set the navigation select handler manually: BottomNavigationView bottomNavigationView = ( BottomNavigationView ) findViewById ( R . id . bottom_navigation ); bottomNavigationView . setOnNavigationItemSelectedListener ( new BottomNavigationView . OnNavigationItemSelectedListener () { @Override public boolean onNavigationItemSelected ( @NonNull MenuItem item ) { switch ( item . getItemId ()) { case R . id . action_favorites : // do something here return true ; case R . id . action_schedules : // do something here return true ; case R . id . action_music : // do something here return true ; } } }); Using with fragments \u00b6 You can use the bottom navigation drawer to swap fragments: public class MainActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { final FragmentManager fragmentManager = getSupportFragmentManager (); // define your fragments here final Fragment fragment1 = new FirstFragment (); final Fragment fragment2 = new SecondFragment (); final Fragment fragment3 = new ThirdFragment (); // handle navigation selection bottomNavigationView . setOnNavigationItemSelectedListener ( new BottomNavigationView . OnNavigationItemSelectedListener () { @Override public boolean onNavigationItemSelected ( @NonNull MenuItem item ) { public boolean onNavigationItemSelected ( @NonNull MenuItem item ) { switch ( item . getItemId ()) { case R . id . action_favorites : FragmentTransaction fragmentTransaction = fragmentManager . beginTransaction (); fragmentTransaction . replace ( R . id . flContainer , fragment1 ). commit (); return true ; case R . id . action_schedules : FragmentTransaction fragmentTransaction = fragmentManager . beginTransaction (); fragmentTransaction . replace ( R . id . flContainer , fragment2 ). commit (); return true ; case R . id . action_music : FragmentTransaction fragmentTransaction = fragmentManager . beginTransaction (); fragmentTransaction . replace ( R . id . flContainer , fragment3 ). commit (); return true ; } }); } } Customizing styles \u00b6 The bottom navigation view also can be customized with several different options, including app:itemBackground , app:itemIcontint , and app:ItemTextColor : <android.support.design.widget.BottomNavigationView <!-- should match top primary color -- > app:itemBackground=\"@color/colorPrimary\" <!-- tint color for bottom navigation icons --> app:itemIconTint=\"@color/white\" <!-- text color for bottom navigation text --> app:itemTextColor=\"@color/white\"> </android.support.design.widget.BottomNavigationView>","title":"Bottom Navigation"},{"location":"navigation/bottom-navigation/#bottom-navigation-views","text":"Bottom navigation provide easy navigation for switching between 3 to 5 different views. It was a recently added to the Material Design spec , which provides an alternative between tabs and navigation drawers .","title":"Bottom Navigation Views"},{"location":"navigation/bottom-navigation/#setup","text":"See the [[design support library|Design-Support-Library#setup]] setup instructions for the Gradle config you need to add. In particular, make sure you have updated to the v25 design library, since support for the bottom navigation support was recently added. Next, simply declare a BottomNavigationView instance and make sure to set alignParentBottom=true to ensure that the view is placed on the bottom layout: <android.support.design.widget.BottomNavigationView android:id= \"@+id/bottom_navigation\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:layout_alignParentBottom= \"true\" app:menu= \"@menu/menu_bottom_navigation\" /> Next, similar to how menu items in the [[Toolbar|Using-the-App-ToolBar]], declare the tabbed items and the icons that will be displayed in a res/menu/menu_bottom_navigation.xml file: <?xml version=\"1.0\" encoding=\"utf-8\"?> <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" > <item android:id= \"@+id/action_favorites\" android:enabled= \"true\" android:icon= \"@drawable/ic_favorite_white_24dp\" android:title= \"@string/text_favorites\" app:showAsAction= \"ifRoom\" /> <item android:id= \"@+id/action_schedules\" android:enabled= \"true\" android:icon= \"@drawable/ic_access_time_white_24dp\" android:title= \"@string/text_schedules\" app:showAsAction= \"ifRoom\" /> <item android:id= \"@+id/action_music\" android:enabled= \"true\" android:icon= \"@drawable/ic_audiotrack_white_24dp\" android:title= \"@string/text_music\" app:showAsAction= \"ifRoom\" /> </menu> You can create the icons by choosing them from the New -> Vector Asset : Next, you can choose the Action and find the heart symbol: Save the file as ic_favorite_white_24dp.xml . You can change the fill color after importing the vector drawable by modifying the fillColor : <!-- change fill color to white --> <path android:fillColor= \"#FFFFFFFF\" android:pathData= \"M12,21.35l-1.45,-1.32C5.4,15.36 2,12.28 2,8.5 2,5.42 4.42,3 7.5,3c1.74,0 3.41,0.81 4.5,2.09C13.09,3.81 14.76,3 16.5,3 19.58,3 22,5.42 22,8.5c0,3.78 -3.4,6.86 -8.55,11.54L12,21.35z\" /> </path> You can repeat this process for the other icons. You can also download the icons directly from this GitHub repo too. Finally, you will need to set the navigation select handler manually: BottomNavigationView bottomNavigationView = ( BottomNavigationView ) findViewById ( R . id . bottom_navigation ); bottomNavigationView . setOnNavigationItemSelectedListener ( new BottomNavigationView . OnNavigationItemSelectedListener () { @Override public boolean onNavigationItemSelected ( @NonNull MenuItem item ) { switch ( item . getItemId ()) { case R . id . action_favorites : // do something here return true ; case R . id . action_schedules : // do something here return true ; case R . id . action_music : // do something here return true ; } } });","title":"Setup"},{"location":"navigation/bottom-navigation/#using-with-fragments","text":"You can use the bottom navigation drawer to swap fragments: public class MainActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { final FragmentManager fragmentManager = getSupportFragmentManager (); // define your fragments here final Fragment fragment1 = new FirstFragment (); final Fragment fragment2 = new SecondFragment (); final Fragment fragment3 = new ThirdFragment (); // handle navigation selection bottomNavigationView . setOnNavigationItemSelectedListener ( new BottomNavigationView . OnNavigationItemSelectedListener () { @Override public boolean onNavigationItemSelected ( @NonNull MenuItem item ) { public boolean onNavigationItemSelected ( @NonNull MenuItem item ) { switch ( item . getItemId ()) { case R . id . action_favorites : FragmentTransaction fragmentTransaction = fragmentManager . beginTransaction (); fragmentTransaction . replace ( R . id . flContainer , fragment1 ). commit (); return true ; case R . id . action_schedules : FragmentTransaction fragmentTransaction = fragmentManager . beginTransaction (); fragmentTransaction . replace ( R . id . flContainer , fragment2 ). commit (); return true ; case R . id . action_music : FragmentTransaction fragmentTransaction = fragmentManager . beginTransaction (); fragmentTransaction . replace ( R . id . flContainer , fragment3 ). commit (); return true ; } }); } }","title":"Using with fragments"},{"location":"navigation/bottom-navigation/#customizing-styles","text":"The bottom navigation view also can be customized with several different options, including app:itemBackground , app:itemIcontint , and app:ItemTextColor : <android.support.design.widget.BottomNavigationView <!-- should match top primary color -- > app:itemBackground=\"@color/colorPrimary\" <!-- tint color for bottom navigation icons --> app:itemIconTint=\"@color/white\" <!-- text color for bottom navigation text --> app:itemTextColor=\"@color/white\"> </android.support.design.widget.BottomNavigationView>","title":"Customizing styles"},{"location":"navigation/common-intents/","text":"Common Implicit Intents \u00b6 Let's take a look at the most common implicit intents such as making a phone call, launching a web address, sending an email, etc. Phone Call \u00b6 Permissions: <uses-permission android:name= \"android.permission.CALL_PHONE\" /> ``` 0o9 Intent: ```java Intent callIntent = new Intent(Intent.ACTION_CALL); callIntent.setData(Uri.parse(\"tel:0377778888\")); if (callIntent.resolveActivity(getPackageManager()) != null) { startActivity(callIntent); } Danger It's possible that a user won't have any apps that handle the implicit intent you send to startActivity() . If that happens, the call will fail and your app will crash. To verify that an activity will receive the intent, call resolveActivity() on your Intent object. If the result is non-null, then there is at least one app that can handle the intent and it's safe to call startActivity() . If the result is null, you should not use the intent and, if possible, you should disable the feature that issue the intent. Send Email (to Phone Email Client) \u00b6 Compose an email in the phone email client: Intent intent = new Intent ( Intent . ACTION_SEND ); intent . setType ( \"plain/text\" ); intent . putExtra ( Intent . EXTRA_EMAIL , new String [] { \"some@email.address\" }); intent . putExtra ( Intent . EXTRA_SUBJECT , \"subject\" ); intent . putExtra ( Intent . EXTRA_TEXT , \"mail body\" ); if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( Intent . createChooser ( intent , \"\" )); } Send Email (to Gmail) \u00b6 Gmail does not examine the extra Intent fields, so in order to use this intent, you need to use the Intent.ACTION_SENDTO and pass a mailto: URI with the subject and body URL encoded. String uriText = \"mailto:youremail@gmail.com\" + \"?subject=\" + Uri . encode ( \"some subject text here\" ) + \"&body=\" + Uri . encode ( \"some text here\" ); Uri uri = Uri . parse ( uriText ); Intent sendIntent = new Intent ( Intent . ACTION_SENDTO ); sendIntent . setData ( uri ); if ( sendIntent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( Intent . createChooser ( sendIntent , \"Send email\" )); } Launch Website \u00b6 Launch a website in the phone browser: Intent browserIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( \"http://www.google.com\" )); if ( browserIntent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( browserIntent ); } You can also launch a Chrome tab if the app. Take a look at [[this guide|Chrome-Custom-Tabs#setup]] for how to launch this implicit intent. Open Google Play Store \u00b6 Open app page on Google Play: Intent intent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( \"market://details?id=\" + context . getPackageName ())); if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( intent ); } Compose SMS \u00b6 Uri smsUri = Uri . parse ( \"tel:\" + to ); Intent intent = new Intent ( Intent . ACTION_VIEW , smsUri ); intent . putExtra ( \"address\" , to ); intent . putExtra ( \"sms_body\" , message ); intent . setType ( \"vnd.android-dir/mms-sms\" ); //here setType will set the previous data null. if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( intent ); } Google Maps \u00b6 Show location in maps application: Intent intent = new Intent (); intent . setAction ( Intent . ACTION_VIEW ); String data = String . format ( \"geo:%s,%s\" , latitude , longitude ); if ( zoomLevel != null ) { data = String . format ( \"%s?z=%s\" , data , zoomLevel ); } intent . setData ( Uri . parse ( data )); if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( intent ); } Capture Photo \u00b6 Uri uri = Uri . fromFile ( new File ( file )); Intent intent = new Intent ( MediaStore . ACTION_IMAGE_CAPTURE ); intent . putExtra ( MediaStore . EXTRA_OUTPUT , uri ); if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( intent ); } Sharing Content \u00b6 Images or binary data: Intent sharingIntent = new Intent ( Intent . ACTION_SEND ); sharingIntent . setType ( \"image/jpg\" ); Uri uri = Uri . fromFile ( new File ( getFilesDir (), \"foo.jpg\" )); sharingIntent . putExtra ( Intent . EXTRA_STREAM , uri . toString ()); if ( sharingIntent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( Intent . createChooser ( sharingIntent , \"Share image using\" )); } or HTML: Intent sharingIntent = new Intent ( Intent . ACTION_SEND ); sharingIntent . setType ( \"text/html\" ); sharingIntent . putExtra ( android . content . Intent . EXTRA_TEXT , Html . fromHtml ( \"<p>This is the text shared.</p>\" )); if ( sharingIntent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( Intent . createChooser ( sharingIntent , \"Share using\" )); } Sharing Content with Intents \u00b6 Intents allow us to communicate data between Android apps and implicit intents can also accept actions. One of those actions is the ACTION_SEND command which indicates we want to send data across apps. To send data, all you need to do is specify the data and its type, and the system will identify compatible receiving activities and display them to the user. Sending and receiving data between applications with intents is most commonly used for social sharing of content. Intents allow users to share information quickly and easily, using their favorite applications. Sharing Local Content \u00b6 You can send content by invoking an implicit intent with ACTION_SEND . Sending HTML \u00b6 Intent sharingIntent = new Intent ( Intent . ACTION_SEND ); sharingIntent . setType ( \"text/html\" ); sharingIntent . putExtra ( android . content . Intent . EXTRA_TEXT , Html . fromHtml ( \"<p>This is the text shared.</p>\" )); startActivity ( Intent . createChooser ( sharingIntent , \"Share using\" )); Sending Images \u00b6 To send images or binary data: final Intent shareIntent = new Intent ( Intent . ACTION_SEND ); shareIntent . setType ( \"image/jpg\" ); final File photoFile = new File ( getFilesDir (), \"foo.jpg\" ); shareIntent . putExtra ( Intent . EXTRA_STREAM , Uri . fromFile ( photoFile )); startActivity ( Intent . createChooser ( shareIntent , \"Share image using\" )); Sending Links \u00b6 Sending URL links should simply use text/plain type: Intent shareIntent = new Intent ( Intent . ACTION_SEND ); shareIntent . setType ( \"text/plain\" ); shareIntent . putExtra ( Intent . EXTRA_TEXT , \"http://codepath.com\" ); startActivity ( Intent . createChooser ( shareIntent , \"Share link using\" )); Sharing Multiple Types \u00b6 In certain cases, we might want to send an image along with text. This can be done with: String text = \"Look at my awesome picture\" ; Uri pictureUri = Uri . parse ( \"file://my_picture\" ); Intent shareIntent = new Intent (); shareIntent . setAction ( Intent . ACTION_SEND ); shareIntent . putExtra ( Intent . EXTRA_TEXT , text ); shareIntent . putExtra ( Intent . EXTRA_STREAM , imageUri ); shareIntent . setType ( \"image/*\" ); shareIntent . addFlags ( Intent . FLAG_GRANT_READ_URI_PERMISSION ); startActivity ( Intent . createChooser ( shareIntent , \"Share images...\" )); Sharing multiple images can be done with: Intent shareIntent = new Intent ( Intent . ACTION_SEND_MULTIPLE ); shareIntent . putParcelableArrayListExtra ( Intent . EXTRA_STREAM , imageUris ); shareIntent . setType ( \"image/*\" ); See this stackoverflow post for more details. Note: Facebook does not properly recognize multiple shared elements. See this facebook specific bug for more details and share using their SDK. Share in Facebook \u00b6 Facebook doesn't work well with normal sharing intents when sharing multiple content elements as discussed in this bug . To share posts with facebook, we need to: Create a new Facebook app here (follow the instructions) Add the Facebook SDK to your Android project Share using this code snippet: public void setupFacebookShareIntent () { ShareDialog shareDialog ; FacebookSdk . sdkInitialize ( getApplicationContext ()); shareDialog = new ShareDialog ( this ); ShareLinkContent linkContent = new ShareLinkContent . Builder () . setContentTitle ( \"Title\" ) . setContentDescription ( \"\\\"Body Of Test Post\\\"\" ) . setContentUrl ( Uri . parse ( \"http://someurl.com/here\" )) . build (); shareDialog . show ( linkContent ); } Sharing Remote Images \u00b6 You may want to send an image that were loaded from a remote URL. Assuming you are using a third party library like Picasso , here is how you might share an image that came from the network and was loaded into an ImageView. There are two ways to accomplish this. The first way, shown below, takes the bitmap from the view and loads it into a file. // Get access to ImageView ImageView ivImage = ( ImageView ) findViewById ( R . id . ivResult ); // Fire async request to load image Picasso . with ( context ). load ( imageUrl ). into ( ivImage ); and then later assuming after the image has completed loading, this is how you can trigger a share: // Can be triggered by a view event such as a button press public void onShareItem ( View v ) { // Get access to bitmap image from view ImageView ivImage = ( ImageView ) findViewById ( R . id . ivResult ); // Get access to the URI for the bitmap Uri bmpUri = getLocalBitmapUri ( ivImage ); if ( bmpUri != null ) { // Construct a ShareIntent with link to image Intent shareIntent = new Intent (); shareIntent . setAction ( Intent . ACTION_SEND ); shareIntent . putExtra ( Intent . EXTRA_STREAM , bmpUri ); shareIntent . setType ( \"image/*\" ); // Launch sharing dialog for image startActivity ( Intent . createChooser ( shareIntent , \"Share Image\" )); } else { // ...sharing failed, handle error } } // Returns the URI path to the Bitmap displayed in specified ImageView public Uri getLocalBitmapUri ( ImageView imageView ) { // Extract Bitmap from ImageView drawable Drawable drawable = imageView . getDrawable (); Bitmap bmp = null ; if ( drawable instanceof BitmapDrawable ){ bmp = (( BitmapDrawable ) imageView . getDrawable ()). getBitmap (); } else { return null ; } // Store image to default external storage directory Uri bmpUri = null ; try { // Use methods on Context to access package-specific directories on external storage. // This way, you don't need to request external read/write permission. // See https://youtu.be/5xVh-7ywKpE?t=25m25s File file = new File ( getExternalFilesDir ( Environment . DIRECTORY_PICTURES ), \"share_image_\" + System . currentTimeMillis () + \".png\" ); FileOutputStream out = new FileOutputStream ( file ); bmp . compress ( Bitmap . CompressFormat . PNG , 90 , out ); out . close (); // **Warning:** This will fail for API >= 24, use a FileProvider as shown below instead. bmpUri = Uri . fromFile ( file ); } catch ( IOException e ) { e . printStackTrace (); } return bmpUri ; } Make sure to setup the \"SD Card\" within the emulator device settings: Note that if you are using API 24 or above , see the section below on using a FileProvider to work around new file restrictions. Sharing Files with API 24 or higher \u00b6 If you are using Android API 24 or higher, private File URI resources (file:///) cannot be shared. You must instead wrap the File object as a content provider (content://) using the FileProvider class. First, you must declare this FileProvider in your AndroidManifest.xml file within the <application> tag: <provider android:name= \"android.support.v4.content.FileProvider\" android:authorities= \"com.codepath.fileprovider\" android:exported= \"false\" android:grantUriPermissions= \"true\" > <meta-data android:name= \"android.support.FILE_PROVIDER_PATHS\" android:resource= \"@xml/fileprovider\" /> </provider> Next, create a resource directory called xml and create a fileprovider.xml . Assuming you wish to grant access to the application's specific external storage directory, which requires requesting no additional permissions, you can declare this line as follows: <?xml version=\"1.0\" encoding=\"utf-8\"?> <paths> <external-files-path name= \"images\" path= \"Pictures\" /> <!--Uncomment below to share the entire application specific directory --> <!--<external-path name=\"all_dirs\" path=\".\"/>--> </paths> Finally, you will convert the File object into a content provider using the FileProvider class: // getExternalFilesDir() + \"/Pictures\" should match the declaration in fileprovider.xml paths File file = new File ( getExternalFilesDir ( Environment . DIRECTORY_PICTURES ), \"share_image_\" + System . currentTimeMillis () + \".png\" ); // wrap File object into a content provider. NOTE: authority here should match authority in manifest declaration bmpUri = FileProvider . getUriForFile ( MyActivity . this , \"com.codepath.fileprovider\" , file ); Note that there are other XML tags you can use in the fileprovider.xml , which map to the File directory specified. In the example above, we use Context.getExternalFilesDir(Environment.DIRECTORY_PICTURES) , which corresponded to the <external-files-dir> XML tag in the declaration with the Pictures path explicitly specified. Here are all the options you can use too: XML tag Corresponding storage call When to use <files-path> Context.getFilesDir() data can only be viewed by app, deleted when uninstalled ( /data/data/[packagename]/files ) <external-files-dir> Context.getExternalFilesDir() data can be read/write by the app, any apps granted with READ_STORAGE permission can read too, deleted when uninstalled ( /Android/data/[packagename]/files ) <cache-path> Context.getCacheDir() temporary file storage <external-path> Environment.getExternalStoragePublicDirectory() data can be read/write by the app, any apps can view, files not deleted when uninstalled <external-cache-path> Context.getExternalCacheDir() temporary file storage with usually larger space If you are using API 23 or above , then you'll need to [[request runtime permissions|Managing-Runtime-Permissions-with-PermissionsDispatcher]] for Manifest.permission.READ_EXTERNAL_STORAGE and Manifest.permission.WRITE_EXTERNAL_STORAGE in order to share the image as shown above since newer versions require explicit permisions at runtime for accessing external storage. Note: There is a common bug on emulators that will cause MediaStore.Images.Media.insertImage to fail with E/MediaStore\ufe55 Failed to insert image unless the media directory is first initialized as described in the link. ShareActionProvider \u00b6 This is how you can easily use an ActionBar share icon to activate a ShareIntent. The below focuses on the support ShareActionProvider for use with AppCompatActivity . Note: This is an alternative to using a sharing intent as described in the previous section. You either can use a sharing intent or the provider as described below. First, we need to add an ActionBar menu item in res/menu/ in the XML specifying the ShareActionProvider class. <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" > <item android:id= \"@+id/menu_item_share\" app:showAsAction= \"ifRoom\" android:title= \"Share\" app:actionProviderClass= \"android.support.v7.widget.ShareActionProvider\" /> ... </menu> Next, get access to share provider menu item in the Activity so we can attach the share intent later: private ShareActionProvider miShareAction ; @Override public boolean onCreateOptionsMenu ( Menu menu ) { // Inflate menu resource file. getMenuInflater (). inflate ( R . menu . second_activity , menu ); // Locate MenuItem with ShareActionProvider MenuItem item = menu . findItem ( R . id . menu_item_share ); // Fetch reference to the share action provider miShareAction = ( ShareActionProvider ) MenuItemCompat . getActionProvider ( item ); // Return true to display menu return true ; } Note : ShareActionProvider does not respond to onOptionsItemSelected() events, so you set the share action provider as soon as it is possible. Attach Share Intent for Remote Image \u00b6 Now, once you've setup the ShareActionProvider menu item, construct and attach the share intent for the provider but only after image has been loaded as shown below using the Callback for Picasso . private Intent shareIntent ; @Override protected void onCreate ( Bundle savedInstanceState ) { // ... // Get access to ImageView ImageView ivImage = ( ImageView ) findViewById ( R . id . ivResult ); // Load image async from remote URL, setup share when completed Picasso . with ( this ). load ( result . getFullUrl ()). into ( ivImage , new Callback () { @Override public void onSuccess () { // Setup share intent now that image has loaded prepareShareIntent (); attachShareIntentAction (); } @Override public void onError () { // ... } }); } // Gets the image URI and setup the associated share intent to hook into the provider public void prepareShareIntent () { // Fetch Bitmap Uri locally ImageView ivImage = ( ImageView ) findViewById ( R . id . ivResult ); Uri bmpUri = getLocalBitmapUri ( ivImage ); // see previous remote images section // Construct share intent as described above based on bitmap shareIntent = new Intent (); shareIntent . setAction ( Intent . ACTION_SEND ); shareIntent . putExtra ( Intent . EXTRA_STREAM , bmpUri ); shareIntent . setType ( \"image/*\" ); } // Attaches the share intent to the share menu item provider public void attachShareIntentAction () { if ( miShareAction != null && shareIntent != null ) miShareAction . setShareIntent ( shareIntent ); } @Override public boolean onCreateOptionsMenu ( Menu menu ) { // Inflate menu resource file. getMenuInflater (). inflate ( R . menu . second_activity , menu ); // Locate MenuItem with ShareActionProvider MenuItem item = menu . findItem ( R . id . menu_item_share ); // Fetch reference to the share action provider miShareAction = ( ShareActionProvider ) MenuItemCompat . getActionProvider ( item ); attachShareIntentAction (); // call here in case this method fires second // Return true to display menu return true ; } Note: Be sure to call attachShareIntentAction method both inside onCreateOptionsMenu AND inside the onSuccess for Picasso to ensure that the share attaches properly. Attach Share for a WebView URL \u00b6 We can use a similar approach if we wish to create a share action for the current URL that is being loaded in a [[WebView|Working-with-the-WebView]]: @Override public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater (); inflater . inflate ( R . menu . menu_article , menu ); MenuItem item = menu . findItem ( R . id . menu_item_share ); ShareActionProvider miShare = ( ShareActionProvider ) MenuItemCompat . getActionProvider ( item ); Intent shareIntent = new Intent ( Intent . ACTION_SEND ); shareIntent . setType ( \"text/plain\" ); // get reference to WebView WebView wvArticle = ( WebView ) findViewById ( R . id . wvArticle ); // pass in the URL currently being used by the WebView shareIntent . putExtra ( Intent . EXTRA_TEXT , wvArticle . getUrl ()); miShare . setShareIntent ( shareIntent ); return super . onCreateOptionsMenu ( menu ); } Check out the official guide for easy sharing for more information.","title":"Common Intents"},{"location":"navigation/common-intents/#common-implicit-intents","text":"Let's take a look at the most common implicit intents such as making a phone call, launching a web address, sending an email, etc.","title":"Common Implicit Intents"},{"location":"navigation/common-intents/#phone-call","text":"Permissions: <uses-permission android:name= \"android.permission.CALL_PHONE\" /> ``` 0o9 Intent: ```java Intent callIntent = new Intent(Intent.ACTION_CALL); callIntent.setData(Uri.parse(\"tel:0377778888\")); if (callIntent.resolveActivity(getPackageManager()) != null) { startActivity(callIntent); } Danger It's possible that a user won't have any apps that handle the implicit intent you send to startActivity() . If that happens, the call will fail and your app will crash. To verify that an activity will receive the intent, call resolveActivity() on your Intent object. If the result is non-null, then there is at least one app that can handle the intent and it's safe to call startActivity() . If the result is null, you should not use the intent and, if possible, you should disable the feature that issue the intent.","title":"Phone Call"},{"location":"navigation/common-intents/#send-email-to-phone-email-client","text":"Compose an email in the phone email client: Intent intent = new Intent ( Intent . ACTION_SEND ); intent . setType ( \"plain/text\" ); intent . putExtra ( Intent . EXTRA_EMAIL , new String [] { \"some@email.address\" }); intent . putExtra ( Intent . EXTRA_SUBJECT , \"subject\" ); intent . putExtra ( Intent . EXTRA_TEXT , \"mail body\" ); if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( Intent . createChooser ( intent , \"\" )); }","title":"Send Email (to Phone Email Client)"},{"location":"navigation/common-intents/#send-email-to-gmail","text":"Gmail does not examine the extra Intent fields, so in order to use this intent, you need to use the Intent.ACTION_SENDTO and pass a mailto: URI with the subject and body URL encoded. String uriText = \"mailto:youremail@gmail.com\" + \"?subject=\" + Uri . encode ( \"some subject text here\" ) + \"&body=\" + Uri . encode ( \"some text here\" ); Uri uri = Uri . parse ( uriText ); Intent sendIntent = new Intent ( Intent . ACTION_SENDTO ); sendIntent . setData ( uri ); if ( sendIntent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( Intent . createChooser ( sendIntent , \"Send email\" )); }","title":"Send Email (to Gmail)"},{"location":"navigation/common-intents/#launch-website","text":"Launch a website in the phone browser: Intent browserIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( \"http://www.google.com\" )); if ( browserIntent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( browserIntent ); } You can also launch a Chrome tab if the app. Take a look at [[this guide|Chrome-Custom-Tabs#setup]] for how to launch this implicit intent.","title":"Launch Website"},{"location":"navigation/common-intents/#open-google-play-store","text":"Open app page on Google Play: Intent intent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( \"market://details?id=\" + context . getPackageName ())); if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( intent ); }","title":"Open Google Play Store"},{"location":"navigation/common-intents/#compose-sms","text":"Uri smsUri = Uri . parse ( \"tel:\" + to ); Intent intent = new Intent ( Intent . ACTION_VIEW , smsUri ); intent . putExtra ( \"address\" , to ); intent . putExtra ( \"sms_body\" , message ); intent . setType ( \"vnd.android-dir/mms-sms\" ); //here setType will set the previous data null. if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( intent ); }","title":"Compose SMS"},{"location":"navigation/common-intents/#google-maps","text":"Show location in maps application: Intent intent = new Intent (); intent . setAction ( Intent . ACTION_VIEW ); String data = String . format ( \"geo:%s,%s\" , latitude , longitude ); if ( zoomLevel != null ) { data = String . format ( \"%s?z=%s\" , data , zoomLevel ); } intent . setData ( Uri . parse ( data )); if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( intent ); }","title":"Google Maps"},{"location":"navigation/common-intents/#capture-photo","text":"Uri uri = Uri . fromFile ( new File ( file )); Intent intent = new Intent ( MediaStore . ACTION_IMAGE_CAPTURE ); intent . putExtra ( MediaStore . EXTRA_OUTPUT , uri ); if ( intent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( intent ); }","title":"Capture Photo"},{"location":"navigation/common-intents/#sharing-content","text":"Images or binary data: Intent sharingIntent = new Intent ( Intent . ACTION_SEND ); sharingIntent . setType ( \"image/jpg\" ); Uri uri = Uri . fromFile ( new File ( getFilesDir (), \"foo.jpg\" )); sharingIntent . putExtra ( Intent . EXTRA_STREAM , uri . toString ()); if ( sharingIntent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( Intent . createChooser ( sharingIntent , \"Share image using\" )); } or HTML: Intent sharingIntent = new Intent ( Intent . ACTION_SEND ); sharingIntent . setType ( \"text/html\" ); sharingIntent . putExtra ( android . content . Intent . EXTRA_TEXT , Html . fromHtml ( \"<p>This is the text shared.</p>\" )); if ( sharingIntent . resolveActivity ( getPackageManager ()) != null ) { startActivity ( Intent . createChooser ( sharingIntent , \"Share using\" )); }","title":"Sharing Content"},{"location":"navigation/common-intents/#sharing-content-with-intents","text":"Intents allow us to communicate data between Android apps and implicit intents can also accept actions. One of those actions is the ACTION_SEND command which indicates we want to send data across apps. To send data, all you need to do is specify the data and its type, and the system will identify compatible receiving activities and display them to the user. Sending and receiving data between applications with intents is most commonly used for social sharing of content. Intents allow users to share information quickly and easily, using their favorite applications.","title":"Sharing Content with Intents"},{"location":"navigation/common-intents/#sharing-local-content","text":"You can send content by invoking an implicit intent with ACTION_SEND .","title":"Sharing Local Content"},{"location":"navigation/common-intents/#sending-html","text":"Intent sharingIntent = new Intent ( Intent . ACTION_SEND ); sharingIntent . setType ( \"text/html\" ); sharingIntent . putExtra ( android . content . Intent . EXTRA_TEXT , Html . fromHtml ( \"<p>This is the text shared.</p>\" )); startActivity ( Intent . createChooser ( sharingIntent , \"Share using\" ));","title":"Sending HTML"},{"location":"navigation/common-intents/#sending-images","text":"To send images or binary data: final Intent shareIntent = new Intent ( Intent . ACTION_SEND ); shareIntent . setType ( \"image/jpg\" ); final File photoFile = new File ( getFilesDir (), \"foo.jpg\" ); shareIntent . putExtra ( Intent . EXTRA_STREAM , Uri . fromFile ( photoFile )); startActivity ( Intent . createChooser ( shareIntent , \"Share image using\" ));","title":"Sending Images"},{"location":"navigation/common-intents/#sending-links","text":"Sending URL links should simply use text/plain type: Intent shareIntent = new Intent ( Intent . ACTION_SEND ); shareIntent . setType ( \"text/plain\" ); shareIntent . putExtra ( Intent . EXTRA_TEXT , \"http://codepath.com\" ); startActivity ( Intent . createChooser ( shareIntent , \"Share link using\" ));","title":"Sending Links"},{"location":"navigation/common-intents/#sharing-multiple-types","text":"In certain cases, we might want to send an image along with text. This can be done with: String text = \"Look at my awesome picture\" ; Uri pictureUri = Uri . parse ( \"file://my_picture\" ); Intent shareIntent = new Intent (); shareIntent . setAction ( Intent . ACTION_SEND ); shareIntent . putExtra ( Intent . EXTRA_TEXT , text ); shareIntent . putExtra ( Intent . EXTRA_STREAM , imageUri ); shareIntent . setType ( \"image/*\" ); shareIntent . addFlags ( Intent . FLAG_GRANT_READ_URI_PERMISSION ); startActivity ( Intent . createChooser ( shareIntent , \"Share images...\" )); Sharing multiple images can be done with: Intent shareIntent = new Intent ( Intent . ACTION_SEND_MULTIPLE ); shareIntent . putParcelableArrayListExtra ( Intent . EXTRA_STREAM , imageUris ); shareIntent . setType ( \"image/*\" ); See this stackoverflow post for more details. Note: Facebook does not properly recognize multiple shared elements. See this facebook specific bug for more details and share using their SDK.","title":"Sharing Multiple Types"},{"location":"navigation/common-intents/#share-in-facebook","text":"Facebook doesn't work well with normal sharing intents when sharing multiple content elements as discussed in this bug . To share posts with facebook, we need to: Create a new Facebook app here (follow the instructions) Add the Facebook SDK to your Android project Share using this code snippet: public void setupFacebookShareIntent () { ShareDialog shareDialog ; FacebookSdk . sdkInitialize ( getApplicationContext ()); shareDialog = new ShareDialog ( this ); ShareLinkContent linkContent = new ShareLinkContent . Builder () . setContentTitle ( \"Title\" ) . setContentDescription ( \"\\\"Body Of Test Post\\\"\" ) . setContentUrl ( Uri . parse ( \"http://someurl.com/here\" )) . build (); shareDialog . show ( linkContent ); }","title":"Share in Facebook"},{"location":"navigation/common-intents/#sharing-remote-images","text":"You may want to send an image that were loaded from a remote URL. Assuming you are using a third party library like Picasso , here is how you might share an image that came from the network and was loaded into an ImageView. There are two ways to accomplish this. The first way, shown below, takes the bitmap from the view and loads it into a file. // Get access to ImageView ImageView ivImage = ( ImageView ) findViewById ( R . id . ivResult ); // Fire async request to load image Picasso . with ( context ). load ( imageUrl ). into ( ivImage ); and then later assuming after the image has completed loading, this is how you can trigger a share: // Can be triggered by a view event such as a button press public void onShareItem ( View v ) { // Get access to bitmap image from view ImageView ivImage = ( ImageView ) findViewById ( R . id . ivResult ); // Get access to the URI for the bitmap Uri bmpUri = getLocalBitmapUri ( ivImage ); if ( bmpUri != null ) { // Construct a ShareIntent with link to image Intent shareIntent = new Intent (); shareIntent . setAction ( Intent . ACTION_SEND ); shareIntent . putExtra ( Intent . EXTRA_STREAM , bmpUri ); shareIntent . setType ( \"image/*\" ); // Launch sharing dialog for image startActivity ( Intent . createChooser ( shareIntent , \"Share Image\" )); } else { // ...sharing failed, handle error } } // Returns the URI path to the Bitmap displayed in specified ImageView public Uri getLocalBitmapUri ( ImageView imageView ) { // Extract Bitmap from ImageView drawable Drawable drawable = imageView . getDrawable (); Bitmap bmp = null ; if ( drawable instanceof BitmapDrawable ){ bmp = (( BitmapDrawable ) imageView . getDrawable ()). getBitmap (); } else { return null ; } // Store image to default external storage directory Uri bmpUri = null ; try { // Use methods on Context to access package-specific directories on external storage. // This way, you don't need to request external read/write permission. // See https://youtu.be/5xVh-7ywKpE?t=25m25s File file = new File ( getExternalFilesDir ( Environment . DIRECTORY_PICTURES ), \"share_image_\" + System . currentTimeMillis () + \".png\" ); FileOutputStream out = new FileOutputStream ( file ); bmp . compress ( Bitmap . CompressFormat . PNG , 90 , out ); out . close (); // **Warning:** This will fail for API >= 24, use a FileProvider as shown below instead. bmpUri = Uri . fromFile ( file ); } catch ( IOException e ) { e . printStackTrace (); } return bmpUri ; } Make sure to setup the \"SD Card\" within the emulator device settings: Note that if you are using API 24 or above , see the section below on using a FileProvider to work around new file restrictions.","title":"Sharing Remote Images"},{"location":"navigation/common-intents/#sharing-files-with-api-24-or-higher","text":"If you are using Android API 24 or higher, private File URI resources (file:///) cannot be shared. You must instead wrap the File object as a content provider (content://) using the FileProvider class. First, you must declare this FileProvider in your AndroidManifest.xml file within the <application> tag: <provider android:name= \"android.support.v4.content.FileProvider\" android:authorities= \"com.codepath.fileprovider\" android:exported= \"false\" android:grantUriPermissions= \"true\" > <meta-data android:name= \"android.support.FILE_PROVIDER_PATHS\" android:resource= \"@xml/fileprovider\" /> </provider> Next, create a resource directory called xml and create a fileprovider.xml . Assuming you wish to grant access to the application's specific external storage directory, which requires requesting no additional permissions, you can declare this line as follows: <?xml version=\"1.0\" encoding=\"utf-8\"?> <paths> <external-files-path name= \"images\" path= \"Pictures\" /> <!--Uncomment below to share the entire application specific directory --> <!--<external-path name=\"all_dirs\" path=\".\"/>--> </paths> Finally, you will convert the File object into a content provider using the FileProvider class: // getExternalFilesDir() + \"/Pictures\" should match the declaration in fileprovider.xml paths File file = new File ( getExternalFilesDir ( Environment . DIRECTORY_PICTURES ), \"share_image_\" + System . currentTimeMillis () + \".png\" ); // wrap File object into a content provider. NOTE: authority here should match authority in manifest declaration bmpUri = FileProvider . getUriForFile ( MyActivity . this , \"com.codepath.fileprovider\" , file ); Note that there are other XML tags you can use in the fileprovider.xml , which map to the File directory specified. In the example above, we use Context.getExternalFilesDir(Environment.DIRECTORY_PICTURES) , which corresponded to the <external-files-dir> XML tag in the declaration with the Pictures path explicitly specified. Here are all the options you can use too: XML tag Corresponding storage call When to use <files-path> Context.getFilesDir() data can only be viewed by app, deleted when uninstalled ( /data/data/[packagename]/files ) <external-files-dir> Context.getExternalFilesDir() data can be read/write by the app, any apps granted with READ_STORAGE permission can read too, deleted when uninstalled ( /Android/data/[packagename]/files ) <cache-path> Context.getCacheDir() temporary file storage <external-path> Environment.getExternalStoragePublicDirectory() data can be read/write by the app, any apps can view, files not deleted when uninstalled <external-cache-path> Context.getExternalCacheDir() temporary file storage with usually larger space If you are using API 23 or above , then you'll need to [[request runtime permissions|Managing-Runtime-Permissions-with-PermissionsDispatcher]] for Manifest.permission.READ_EXTERNAL_STORAGE and Manifest.permission.WRITE_EXTERNAL_STORAGE in order to share the image as shown above since newer versions require explicit permisions at runtime for accessing external storage. Note: There is a common bug on emulators that will cause MediaStore.Images.Media.insertImage to fail with E/MediaStore\ufe55 Failed to insert image unless the media directory is first initialized as described in the link.","title":"Sharing Files with API 24 or higher"},{"location":"navigation/common-intents/#shareactionprovider","text":"This is how you can easily use an ActionBar share icon to activate a ShareIntent. The below focuses on the support ShareActionProvider for use with AppCompatActivity . Note: This is an alternative to using a sharing intent as described in the previous section. You either can use a sharing intent or the provider as described below. First, we need to add an ActionBar menu item in res/menu/ in the XML specifying the ShareActionProvider class. <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" > <item android:id= \"@+id/menu_item_share\" app:showAsAction= \"ifRoom\" android:title= \"Share\" app:actionProviderClass= \"android.support.v7.widget.ShareActionProvider\" /> ... </menu> Next, get access to share provider menu item in the Activity so we can attach the share intent later: private ShareActionProvider miShareAction ; @Override public boolean onCreateOptionsMenu ( Menu menu ) { // Inflate menu resource file. getMenuInflater (). inflate ( R . menu . second_activity , menu ); // Locate MenuItem with ShareActionProvider MenuItem item = menu . findItem ( R . id . menu_item_share ); // Fetch reference to the share action provider miShareAction = ( ShareActionProvider ) MenuItemCompat . getActionProvider ( item ); // Return true to display menu return true ; } Note : ShareActionProvider does not respond to onOptionsItemSelected() events, so you set the share action provider as soon as it is possible.","title":"ShareActionProvider"},{"location":"navigation/common-intents/#attach-share-intent-for-remote-image","text":"Now, once you've setup the ShareActionProvider menu item, construct and attach the share intent for the provider but only after image has been loaded as shown below using the Callback for Picasso . private Intent shareIntent ; @Override protected void onCreate ( Bundle savedInstanceState ) { // ... // Get access to ImageView ImageView ivImage = ( ImageView ) findViewById ( R . id . ivResult ); // Load image async from remote URL, setup share when completed Picasso . with ( this ). load ( result . getFullUrl ()). into ( ivImage , new Callback () { @Override public void onSuccess () { // Setup share intent now that image has loaded prepareShareIntent (); attachShareIntentAction (); } @Override public void onError () { // ... } }); } // Gets the image URI and setup the associated share intent to hook into the provider public void prepareShareIntent () { // Fetch Bitmap Uri locally ImageView ivImage = ( ImageView ) findViewById ( R . id . ivResult ); Uri bmpUri = getLocalBitmapUri ( ivImage ); // see previous remote images section // Construct share intent as described above based on bitmap shareIntent = new Intent (); shareIntent . setAction ( Intent . ACTION_SEND ); shareIntent . putExtra ( Intent . EXTRA_STREAM , bmpUri ); shareIntent . setType ( \"image/*\" ); } // Attaches the share intent to the share menu item provider public void attachShareIntentAction () { if ( miShareAction != null && shareIntent != null ) miShareAction . setShareIntent ( shareIntent ); } @Override public boolean onCreateOptionsMenu ( Menu menu ) { // Inflate menu resource file. getMenuInflater (). inflate ( R . menu . second_activity , menu ); // Locate MenuItem with ShareActionProvider MenuItem item = menu . findItem ( R . id . menu_item_share ); // Fetch reference to the share action provider miShareAction = ( ShareActionProvider ) MenuItemCompat . getActionProvider ( item ); attachShareIntentAction (); // call here in case this method fires second // Return true to display menu return true ; } Note: Be sure to call attachShareIntentAction method both inside onCreateOptionsMenu AND inside the onSuccess for Picasso to ensure that the share attaches properly.","title":"Attach Share Intent for Remote Image"},{"location":"navigation/common-intents/#attach-share-for-a-webview-url","text":"We can use a similar approach if we wish to create a share action for the current URL that is being loaded in a [[WebView|Working-with-the-WebView]]: @Override public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater (); inflater . inflate ( R . menu . menu_article , menu ); MenuItem item = menu . findItem ( R . id . menu_item_share ); ShareActionProvider miShare = ( ShareActionProvider ) MenuItemCompat . getActionProvider ( item ); Intent shareIntent = new Intent ( Intent . ACTION_SEND ); shareIntent . setType ( \"text/plain\" ); // get reference to WebView WebView wvArticle = ( WebView ) findViewById ( R . id . wvArticle ); // pass in the URL currently being used by the WebView shareIntent . putExtra ( Intent . EXTRA_TEXT , wvArticle . getUrl ()); miShare . setShareIntent ( shareIntent ); return super . onCreateOptionsMenu ( menu ); } Check out the official guide for easy sharing for more information.","title":"Attach Share for a WebView URL"},{"location":"navigation/common-navigation-patterns/","text":"Common Navigation Paradigms \u00b6 Navigation between views is an important part of any application. There are several ways to setup navigation in an Android application: Swipe Views - Allow paging between views using a swipe gesture Navigation Drawer - Displays a vertical menu that slides in to allow navigation between views ActionBar - Using the ActionBar and/or ActionBar tabs to switch between different views Screen Map - Providing a series of buttons on screen that can be pressed to visit different views These four represent the most common navigation paradigms in Android applications. The specifics for how to implement these can be found in the various links above. Swiping Views \u00b6 We can use a ViewPager with Fragments to display tabs on top of a swiping view. Navigation Drawer \u00b6 To create a basic navigation drawer that toggles between displaying different fragments. For more details about creating a custom drawer check out the Creating a Navigation Drawer docs. ActionBar Tabs \u00b6 Check out the ActionBar Tabs with Fragments#fragments-and-tabsguide for more details of how to add ActionBar tabs to your Activity. Note that ActionBar Tabs is deprecated since Android API 21. Tabbed Navigation \u00b6 Tabs are now best implemented by leveraging the ViewPager with a custom \"tab indicator\" on top. In this guide, we will be using Google's new TabLayout included in the support design library release for Android \"M\". Prior to Android \"M\", the easiest way to setup tabs with Fragments was to use ActionBar Tabs as described in [[ActionBar Tabs with Fragments|ActionBar-Tabs-with-Fragments]] guide. However, all methods related to navigation modes in the ActionBar class (such as setNavigationMode() , addTab() , selectTab() , etc.) are now deprecated. Design Support Library \u00b6 To implement Google Play style sliding tabs, make sure to follow the Design Support Library first.","title":"Common Navigation Patterns"},{"location":"navigation/common-navigation-patterns/#common-navigation-paradigms","text":"Navigation between views is an important part of any application. There are several ways to setup navigation in an Android application: Swipe Views - Allow paging between views using a swipe gesture Navigation Drawer - Displays a vertical menu that slides in to allow navigation between views ActionBar - Using the ActionBar and/or ActionBar tabs to switch between different views Screen Map - Providing a series of buttons on screen that can be pressed to visit different views These four represent the most common navigation paradigms in Android applications. The specifics for how to implement these can be found in the various links above.","title":"Common Navigation Paradigms"},{"location":"navigation/common-navigation-patterns/#swiping-views","text":"We can use a ViewPager with Fragments to display tabs on top of a swiping view.","title":"Swiping Views"},{"location":"navigation/common-navigation-patterns/#navigation-drawer","text":"To create a basic navigation drawer that toggles between displaying different fragments. For more details about creating a custom drawer check out the Creating a Navigation Drawer docs.","title":"Navigation Drawer"},{"location":"navigation/common-navigation-patterns/#actionbar-tabs","text":"Check out the ActionBar Tabs with Fragments#fragments-and-tabsguide for more details of how to add ActionBar tabs to your Activity. Note that ActionBar Tabs is deprecated since Android API 21.","title":"ActionBar Tabs"},{"location":"navigation/common-navigation-patterns/#tabbed-navigation","text":"Tabs are now best implemented by leveraging the ViewPager with a custom \"tab indicator\" on top. In this guide, we will be using Google's new TabLayout included in the support design library release for Android \"M\". Prior to Android \"M\", the easiest way to setup tabs with Fragments was to use ActionBar Tabs as described in [[ActionBar Tabs with Fragments|ActionBar-Tabs-with-Fragments]] guide. However, all methods related to navigation modes in the ActionBar class (such as setNavigationMode() , addTab() , selectTab() , etc.) are now deprecated.","title":"Tabbed Navigation"},{"location":"navigation/common-navigation-patterns/#design-support-library","text":"To implement Google Play style sliding tabs, make sure to follow the Design Support Library first.","title":"Design Support Library"},{"location":"navigation/intents/","text":"Using Intents to Create Flows \u00b6 Intent is a powerful concept within the Android universe. An intent is a message that can be thought of as a request that is given to either an activity within your own app, an external application, or a built-in Android service. Think of an intent as a way for an Activity to communicate with the outside Android world. A few key tasks that an intent might be used for within your apps: Take the user to another screen (activity) within your application Take the user to a particular URL within the Android web browser Take the user to the camera to have them take a picture Initiate a call for the user to a given number As you can see, the Intent is a core part of user flows in Android development. The Intent object itself is a class that represents a particular \"request\" including the topic of the request and any request \"parameters\" which are called the Bundle . Explicit Intents \u00b6 An \"explicit\" intent is used to launch other activities within your application. For example, if you the user presses the \"compose\" button and you want to bring up an activity for them to compose a message, you would launch that second activity using an explicit intent. Using an intent is as simple as constructing the Intent with the correct parameters and then invoking that intent using the startActivity method: // ActivityOne.java public void launchComposeView () { // first parameter is the context, second is the class of the activity to launch Intent i = new Intent ( ActivityOne . this , ActivityTwo . class ); startActivity ( i ); // brings up the second activity } Now, in the launched second activity, the user can go back to the first screen by hitting \"back\" or if the developer wants to trigger the second activity to close, we need only call the finish method : // ActivityTwo.java public void onSubmit ( View v ) { // closes the activity and returns to first screen this . finish (); } Note: The first argument of the Intent constructor used above is a Context which at the moment is just the current Activity in scope. Passing Data to Launched Activities \u00b6 In addition to specifying the activity that we want to display, an intent can also pass key-value data between activities. Think of this as specifying the \"request parameters\" for an HTTP Request. You can specify the parameters by putting key-value pairs into the intent bundle: // ActivityOne.java public void launchComposeView () { // first parameter is the context, second is the class of the activity to launch Intent i = new Intent ( ActivityOne . this , ActivityTwo . class ); // put \"extras\" into the bundle for access in the second activity i . putExtra ( \"username\" , \"foobar\" ); i . putExtra ( \"in_reply_to\" , \"george\" ); i . putExtra ( \"code\" , 400 ); // brings up the second activity startActivity ( i ); } Once you have added data into the bundle, you can easily access that data within the launched activity: // ActivityTwo.java (subactivity) can access any extras passed in protected void onCreate ( Bundle savedInstanceState ) { String username = getIntent (). getStringExtra ( \"username\" ); String inReplyTo = getIntent (). getStringExtra ( \"in_reply_to\" ); int code = getIntent (). getIntExtra ( \"code\" , 0 ); } And using this system the intent can pass useful data across activities. Returning Data Result to Parent Activity \u00b6 In the typical case of using startActivity , the activity is launched and added to the navigation stack and no result is expected. If the user wants to close the activity, the user can simply hit \"back\" and the parent activity is displayed. However, in other cases the parent activity may want the launched activity to return a result back when it is finished. In this case, we use a different method to launch called startActivityForResult which allows the parent to retrieve the result based on a code that is returned (akin to an HTTP code). // ActivityOne.java // REQUEST_CODE can be any value we like, used to determine the result type later private final int REQUEST_CODE = 20 ; // FirstActivity, launching an activity for a result public void onClick ( View view ) { Intent i = new Intent ( ActivityOne . this , ActivityNamePrompt . class ); i . putExtra ( \"mode\" , 2 ); // pass arbitrary data to launched activity startActivityForResult ( i , REQUEST_CODE ); } This will launch the subactivity, and when the subactivity is complete then it can return the result to the parent: // ActivityNamePrompt.java -- launched for a result public void onSubmit ( View v ) { EditText etName = ( EditText ) findViewById ( R . id . name ); // Prepare data intent Intent data = new Intent (); // Pass relevant data back as a result data . putExtra ( \"name\" , etName . getText (). toString ()); data . putExtra ( \"code\" , 200 ); // ints work too // Activity finished ok, return the data setResult ( RESULT_OK , data ); // set result code and bundle data for response finish (); // closes the activity, pass data to parent } Once the sub-activity finishes, the onActivityResult() method in the calling activity is be invoked: // ActivityOne.java, time to handle the result of the sub-activity @Override protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { // REQUEST_CODE is defined above if ( resultCode == RESULT_OK && requestCode == REQUEST_CODE ) { // Extract name value from result extras String name = data . getExtras (). getString ( \"name\" ); int code = data . getExtras (). getInt ( \"code\" , 0 ); // Toast the name to display temporarily on screen Toast . makeText ( this , name , Toast . LENGTH_SHORT ). show (); } } And using that process you can communicate data freely between different activities in your application. Passing Complex Data in a Bundle \u00b6 Bundles can pass complex Java objects into Intents through the use of serialization. Simple types such as integers and strings can be automatically passed as an extra but to pass Java objects, they need to be Serializable or Parcelable . public class User implements Serializable { private static final long serialVersionUID = 5177222050535318633L ; private String firstName ; private String lastName ; private int age ; } Then you can pass arbitrary user objects into an intent as an extra: User u = new User ( \"John\" , \"Smith\" , 45 ); Intent i = new Intent ( ActivityOne . this , SecondActivity . class ); i . putExtra ( \"user\" , u ); startActivity ( i ); and access the user data in the launched intent with getSerializableExtra : // SecondActivity.java User u = ( User ) getIntent (). getSerializableExtra ( \"user\" ); TextView tvUser = ( TextView ) findViewById ( R . id . tvUser ); tvUser . setText ( u . getFirstName () + \" \" + u . getLastName ()); A faster and more reliable approach is to use Parcelable as a replacement for Serializable. Parcelable is about 10x faster than Serializable and thanks to libraries like Parceler not very hard to implement. Implicit Intents \u00b6 Implicit Intents are requests to perform an action based on a desired action and target data. This is in contrast to an explicit intent that targets a specific activity. For example, if I want to make a phone call for the user, that can be done with this intent: Intent callIntent = new Intent ( Intent . ACTION_CALL ); callIntent . setData ( Uri . parse ( \"tel:3777789888\" )); startActivity ( callIntent ); If I want to launch a website in the phone's browser, I might do this: Intent browserIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( \"http://www.google.com\" )); startActivity ( browserIntent ); You can see a list of other [[common implicit intents|Common-Implicit-Intents]]. Receiving Implicit Intents \u00b6 If we wish to receive implicit intents, you need to associate intent filters with your activity. You can also enable links within a view page to launch your app using deep links . You can also create custom URL schemes (i.e. instead of http:// you can create example://) patterns that are primarily meant to launch your app as well. Make sure to specify android.intent.category.DEFAULT category to declare that the activity should receive implicit intents. Otherwise, the activity can only respond to explicit intents. You also need to declare what type of implicit intent action to which it responds with the <action> tag. The list of possible actions are shown in the Standard Activity Actions section here . If you wish to receive a share intent from Chrome, for instance, you have to declare an activity will be responsible for processing the data in your AndroidManifest.xml file: <activity android:name= \"com.codepath.ReceiveIntentDataActivity\" > <intent-filter> <action android:name= \"android.intent.action.SEND\" /> <category android:name= \"android.intent.category.DEFAULT\" /> <data android:mimeType= \"text/plain\" ></data> </intent-filter> Receiving the data entails receiving the intent data: @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); // Get intent, action and MIME type Intent intent = getIntent (); String action = intent . getAction (); String type = intent . getType (); if ( Intent . ACTION_SEND . equals ( action ) && type != null ) { if ( \"text/plain\" . equals ( type )) { // Make sure to check whether returned data will be null. String titleOfPage = intent . getStringExtra ( Intent . EXTRA_SUBJECT ); String urlOfPage = intent . getStringExtra ( Intent . EXTRA_TEXT ); Uri imageUriOfPage = ( Uri ) intent . getParcelableExtra ( Intent . EXTRA_STREAM ); } } See this article for more details about parsing data from Chrome. If you wish for a web page link to be able to launch an activity, make sure to also specify the BROWSABLE category as well. You should also specify the <data> tag to specify what URL pattern to scan for: <intent-filter> <action android:name= \"android.intent.action.SEND\" /> <category android:name= \"android.intent.category.BROWSABLE\" /> <category android:name= \"android.intent.category.DEFAULT\" /> <data android:scheme= \"http\" android:host= \"www.codepath.com\" android:pathPrefix= \"/example\" /> </intent-filter> Receiving the specific URL being requested entails calling getData() on the intent: @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . main ); Intent intent = getIntent (); String action = intent . getAction (); Uri data = intent . getData (); } You can also receive more complex data types as shown in this guide . You can also use the DeepLinkDispatch library to makes it easy to annotate your activities with specific URL patterns. Default link handling \u00b6 If you wish for your app to be considered the default handler for a link (only works for Android Marshmallow devices and higher), you can leverage the new feature by setting android:autoVerify on the intent filter: <intent-filter android:autoVerify= \"true\" > </intent> You would then need to host an assetlinks.json file at https://domain[:optional_port]/.well-known/assetlinks.json that uses the following format: [{ \"relation\" : [ \"delegate_permission/common.handle_all_urls\" ], \"target\" : { \"namespace\" : \"android_app\" , \"package_name\" : \"com.mycompany.app1\" , \"sha256_cert_fingerprints\" : [ \"14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\" ] } }] The sha256_cert_fingerprints comes from the app signing certificate by typing keytool -list -v -keystore my-release-key.keystore . The package name should correspond to your app's package name. See this guide for more details. You can check to see if this file is hosted properly by checking this URL: https : // digitalassetlinks . googleapis . com / v1 / statements : list ? source . web . site = https : //< domain1 > : < port >& relation = delegate_permission / common . handle_all_urls","title":"Navigation with Intents"},{"location":"navigation/intents/#using-intents-to-create-flows","text":"Intent is a powerful concept within the Android universe. An intent is a message that can be thought of as a request that is given to either an activity within your own app, an external application, or a built-in Android service. Think of an intent as a way for an Activity to communicate with the outside Android world. A few key tasks that an intent might be used for within your apps: Take the user to another screen (activity) within your application Take the user to a particular URL within the Android web browser Take the user to the camera to have them take a picture Initiate a call for the user to a given number As you can see, the Intent is a core part of user flows in Android development. The Intent object itself is a class that represents a particular \"request\" including the topic of the request and any request \"parameters\" which are called the Bundle .","title":"Using Intents to Create Flows"},{"location":"navigation/intents/#explicit-intents","text":"An \"explicit\" intent is used to launch other activities within your application. For example, if you the user presses the \"compose\" button and you want to bring up an activity for them to compose a message, you would launch that second activity using an explicit intent. Using an intent is as simple as constructing the Intent with the correct parameters and then invoking that intent using the startActivity method: // ActivityOne.java public void launchComposeView () { // first parameter is the context, second is the class of the activity to launch Intent i = new Intent ( ActivityOne . this , ActivityTwo . class ); startActivity ( i ); // brings up the second activity } Now, in the launched second activity, the user can go back to the first screen by hitting \"back\" or if the developer wants to trigger the second activity to close, we need only call the finish method : // ActivityTwo.java public void onSubmit ( View v ) { // closes the activity and returns to first screen this . finish (); } Note: The first argument of the Intent constructor used above is a Context which at the moment is just the current Activity in scope.","title":"Explicit Intents"},{"location":"navigation/intents/#passing-data-to-launched-activities","text":"In addition to specifying the activity that we want to display, an intent can also pass key-value data between activities. Think of this as specifying the \"request parameters\" for an HTTP Request. You can specify the parameters by putting key-value pairs into the intent bundle: // ActivityOne.java public void launchComposeView () { // first parameter is the context, second is the class of the activity to launch Intent i = new Intent ( ActivityOne . this , ActivityTwo . class ); // put \"extras\" into the bundle for access in the second activity i . putExtra ( \"username\" , \"foobar\" ); i . putExtra ( \"in_reply_to\" , \"george\" ); i . putExtra ( \"code\" , 400 ); // brings up the second activity startActivity ( i ); } Once you have added data into the bundle, you can easily access that data within the launched activity: // ActivityTwo.java (subactivity) can access any extras passed in protected void onCreate ( Bundle savedInstanceState ) { String username = getIntent (). getStringExtra ( \"username\" ); String inReplyTo = getIntent (). getStringExtra ( \"in_reply_to\" ); int code = getIntent (). getIntExtra ( \"code\" , 0 ); } And using this system the intent can pass useful data across activities.","title":"Passing Data to Launched Activities"},{"location":"navigation/intents/#returning-data-result-to-parent-activity","text":"In the typical case of using startActivity , the activity is launched and added to the navigation stack and no result is expected. If the user wants to close the activity, the user can simply hit \"back\" and the parent activity is displayed. However, in other cases the parent activity may want the launched activity to return a result back when it is finished. In this case, we use a different method to launch called startActivityForResult which allows the parent to retrieve the result based on a code that is returned (akin to an HTTP code). // ActivityOne.java // REQUEST_CODE can be any value we like, used to determine the result type later private final int REQUEST_CODE = 20 ; // FirstActivity, launching an activity for a result public void onClick ( View view ) { Intent i = new Intent ( ActivityOne . this , ActivityNamePrompt . class ); i . putExtra ( \"mode\" , 2 ); // pass arbitrary data to launched activity startActivityForResult ( i , REQUEST_CODE ); } This will launch the subactivity, and when the subactivity is complete then it can return the result to the parent: // ActivityNamePrompt.java -- launched for a result public void onSubmit ( View v ) { EditText etName = ( EditText ) findViewById ( R . id . name ); // Prepare data intent Intent data = new Intent (); // Pass relevant data back as a result data . putExtra ( \"name\" , etName . getText (). toString ()); data . putExtra ( \"code\" , 200 ); // ints work too // Activity finished ok, return the data setResult ( RESULT_OK , data ); // set result code and bundle data for response finish (); // closes the activity, pass data to parent } Once the sub-activity finishes, the onActivityResult() method in the calling activity is be invoked: // ActivityOne.java, time to handle the result of the sub-activity @Override protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { // REQUEST_CODE is defined above if ( resultCode == RESULT_OK && requestCode == REQUEST_CODE ) { // Extract name value from result extras String name = data . getExtras (). getString ( \"name\" ); int code = data . getExtras (). getInt ( \"code\" , 0 ); // Toast the name to display temporarily on screen Toast . makeText ( this , name , Toast . LENGTH_SHORT ). show (); } } And using that process you can communicate data freely between different activities in your application.","title":"Returning Data Result to Parent Activity"},{"location":"navigation/intents/#passing-complex-data-in-a-bundle","text":"Bundles can pass complex Java objects into Intents through the use of serialization. Simple types such as integers and strings can be automatically passed as an extra but to pass Java objects, they need to be Serializable or Parcelable . public class User implements Serializable { private static final long serialVersionUID = 5177222050535318633L ; private String firstName ; private String lastName ; private int age ; } Then you can pass arbitrary user objects into an intent as an extra: User u = new User ( \"John\" , \"Smith\" , 45 ); Intent i = new Intent ( ActivityOne . this , SecondActivity . class ); i . putExtra ( \"user\" , u ); startActivity ( i ); and access the user data in the launched intent with getSerializableExtra : // SecondActivity.java User u = ( User ) getIntent (). getSerializableExtra ( \"user\" ); TextView tvUser = ( TextView ) findViewById ( R . id . tvUser ); tvUser . setText ( u . getFirstName () + \" \" + u . getLastName ()); A faster and more reliable approach is to use Parcelable as a replacement for Serializable. Parcelable is about 10x faster than Serializable and thanks to libraries like Parceler not very hard to implement.","title":"Passing Complex Data in a Bundle"},{"location":"navigation/intents/#implicit-intents","text":"Implicit Intents are requests to perform an action based on a desired action and target data. This is in contrast to an explicit intent that targets a specific activity. For example, if I want to make a phone call for the user, that can be done with this intent: Intent callIntent = new Intent ( Intent . ACTION_CALL ); callIntent . setData ( Uri . parse ( \"tel:3777789888\" )); startActivity ( callIntent ); If I want to launch a website in the phone's browser, I might do this: Intent browserIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( \"http://www.google.com\" )); startActivity ( browserIntent ); You can see a list of other [[common implicit intents|Common-Implicit-Intents]].","title":"Implicit Intents"},{"location":"navigation/intents/#receiving-implicit-intents","text":"If we wish to receive implicit intents, you need to associate intent filters with your activity. You can also enable links within a view page to launch your app using deep links . You can also create custom URL schemes (i.e. instead of http:// you can create example://) patterns that are primarily meant to launch your app as well. Make sure to specify android.intent.category.DEFAULT category to declare that the activity should receive implicit intents. Otherwise, the activity can only respond to explicit intents. You also need to declare what type of implicit intent action to which it responds with the <action> tag. The list of possible actions are shown in the Standard Activity Actions section here . If you wish to receive a share intent from Chrome, for instance, you have to declare an activity will be responsible for processing the data in your AndroidManifest.xml file: <activity android:name= \"com.codepath.ReceiveIntentDataActivity\" > <intent-filter> <action android:name= \"android.intent.action.SEND\" /> <category android:name= \"android.intent.category.DEFAULT\" /> <data android:mimeType= \"text/plain\" ></data> </intent-filter> Receiving the data entails receiving the intent data: @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); // Get intent, action and MIME type Intent intent = getIntent (); String action = intent . getAction (); String type = intent . getType (); if ( Intent . ACTION_SEND . equals ( action ) && type != null ) { if ( \"text/plain\" . equals ( type )) { // Make sure to check whether returned data will be null. String titleOfPage = intent . getStringExtra ( Intent . EXTRA_SUBJECT ); String urlOfPage = intent . getStringExtra ( Intent . EXTRA_TEXT ); Uri imageUriOfPage = ( Uri ) intent . getParcelableExtra ( Intent . EXTRA_STREAM ); } } See this article for more details about parsing data from Chrome. If you wish for a web page link to be able to launch an activity, make sure to also specify the BROWSABLE category as well. You should also specify the <data> tag to specify what URL pattern to scan for: <intent-filter> <action android:name= \"android.intent.action.SEND\" /> <category android:name= \"android.intent.category.BROWSABLE\" /> <category android:name= \"android.intent.category.DEFAULT\" /> <data android:scheme= \"http\" android:host= \"www.codepath.com\" android:pathPrefix= \"/example\" /> </intent-filter> Receiving the specific URL being requested entails calling getData() on the intent: @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . main ); Intent intent = getIntent (); String action = intent . getAction (); Uri data = intent . getData (); } You can also receive more complex data types as shown in this guide . You can also use the DeepLinkDispatch library to makes it easy to annotate your activities with specific URL patterns.","title":"Receiving Implicit Intents"},{"location":"navigation/intents/#default-link-handling","text":"If you wish for your app to be considered the default handler for a link (only works for Android Marshmallow devices and higher), you can leverage the new feature by setting android:autoVerify on the intent filter: <intent-filter android:autoVerify= \"true\" > </intent> You would then need to host an assetlinks.json file at https://domain[:optional_port]/.well-known/assetlinks.json that uses the following format: [{ \"relation\" : [ \"delegate_permission/common.handle_all_urls\" ], \"target\" : { \"namespace\" : \"android_app\" , \"package_name\" : \"com.mycompany.app1\" , \"sha256_cert_fingerprints\" : [ \"14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\" ] } }] The sha256_cert_fingerprints comes from the app signing certificate by typing keytool -list -v -keystore my-release-key.keystore . The package name should correspond to your app's package name. See this guide for more details. You can check to see if this file is hosted properly by checking this URL: https : // digitalassetlinks . googleapis . com / v1 / statements : list ? source . web . site = https : //< domain1 > : < port >& relation = delegate_permission / common . handle_all_urls","title":"Default link handling"},{"location":"navigation/navigation-drawer/","text":"Navigation with Navigation Drawer \u00b6 During the I/O Conference 2015, Google released NavigationView , which makes it far easier to create it than the previously documented instructions . With the release of Android 5.0 Lollipop, the new material design style navigation drawer spans the full height of the screen and is displayed over the ActionBar and overlaps the translucent StatusBar . Read the material design style navigation drawer document for specs on styling your navigation drawer. Usage \u00b6 This guide explains how to setup a basic material design style drawer filled with navigation items that switch different fragments into the content area. In this way, you can define multiple fragments, and then define the list of options which will display in the drawers items list. Each item when clicked will switch the relevant fragment into the activity's container view. Setup \u00b6 Make sure to setup the Google [[Design Support Library]] before using Google's new NavigationView , announced as part of the Android M release. The NavigationView should be backwards compatible with all versions down to Android 2.1. Make sure you have this Gradle dependency added to your app/build.gradle file: dependencies { compile 'com.android.support:design:25.2.0' } Download Nav Drawer Item icons \u00b6 Download the following icons and add them to your drawable folders by copying and pasting them into the drawable folder or using the New Image Asset dialog to create versions for each density. ic_one ic_two ic_three If you use the New Image Asset dialog, choose a black foreground color and change the resource name. Setup Drawer Resources \u00b6 Create a menu/drawer_view.xml file: <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" > <group android:checkableBehavior= \"single\" > <item android:id= \"@+id/nav_first_fragment\" android:icon= \"@drawable/ic_one\" android:title= \"First\" /> <item android:id= \"@+id/nav_second_fragment\" android:icon= \"@drawable/ic_two\" android:title= \"Second\" /> <item android:id= \"@+id/nav_third_fragment\" android:icon= \"@drawable/ic_three\" android:title= \"Third\" /> </group> </menu> Note that you can set one of these elements to be default selected by using android:checked=\"true\" . You can also create subheaders too and group elements together: <item android:title= \"Sub items\" > <menu> <group android:checkableBehavior= \"single\" > <item android:icon= \"@drawable/ic_dashboard\" android:title= \"Sub item 1\" /> <item android:icon= \"@drawable/ic_forum\" android:title= \"Sub item 2\" /> </group> </menu> </item> Define Fragments \u00b6 Next, you need to define your fragments that will be displayed within the drawer. These can be any support fragments you define within your application. Make sure that all the fragments extend from android.support.v4.app.Fragment . Setup Toolbar \u00b6 In order to slide our navigation drawer over the ActionBar, we need to use the new [[Toolbar|Using-the-App-ToolBar]] widget as defined in the AppCompat v21 library. The Toolbar can be embedded into your view hierarchy which makes sure that the drawer slides over the ActionBar . Create a new layout file res/layout/toolbar.xml with the following code: <android.support.v7.widget.Toolbar xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:id= \"@+id/toolbar\" android:layout_height= \"wrap_content\" android:layout_width= \"match_parent\" android:fitsSystemWindows= \"true\" android:minHeight= \"?attr/actionBarSize\" app:theme= \"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" android:background= \"?attr/colorPrimaryDark\" > </android.support.v7.widget.Toolbar> Note that when the android:fitsSystemWindows attribute is set to true for a view, the view would be laid out as if the StatusBar and the ActionBar were present i.e. the UI on top gets padding enough to not be obscured by the navigation bar. Without this attribute, there is not enough padding factored into consideration for the ToolBar : We want our main content view to have the navigation bar and hence android:fitsSystemWindows is set to true for the Toolbar . To use the Toolbar as an ActionBar , you need to disable the default ActionBar . This can be done by setting the app theme in styles.xml file. <resources> <!-- Base application theme. --> <style name= \"AppTheme\" parent= \"Theme.AppCompat.Light.NoActionBar\" > <item name= \"colorPrimary\" > #673AB7 </item> <item name= \"colorPrimaryDark\" > #512DA8 </item> <item name= \"colorAccent\" > #FF4081 </item> </style> </resources> Also note that normally you should decide on your color scheme by going to Material Palette and choosing a primary and dark primary color. For this example, we will pick purple-based colors as shown in the screenshot. Note : If you forget to disable the ActionBar in styles.xml , you are likely to see a java.lang.IllegalStateException with an error message that reads This Activity already has an action bar supplied by the window decor. Do not request Window.FEATURE_ACTION_BAR and set windowActionBar to false in your theme to use a Toolbar instead. If you see this message, you need to make sure to follow the previous steps. Setup Drawer in Activity \u00b6 Next, let's setup a basic navigation drawer based on the following layout file which has the entire drawer setup in res/layout/activity_main.xml . Note that the Toolbar is added as the first child of the main content view by adding the include tag. <!-- This DrawerLayout has two children at the root --> <android.support.v4.widget.DrawerLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:id= \"@+id/drawer_layout\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <!-- This LinearLayout represents the contents of the screen --> <LinearLayout android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" > <!-- The ActionBar displayed at the top --> <include layout= \"@layout/toolbar\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <!-- The main content view where fragments are loaded --> <FrameLayout android:id= \"@+id/flContent\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </LinearLayout> <!-- The navigation drawer that comes from the left --> <!-- Note that `android:layout_gravity` needs to be set to 'start' --> <android.support.design.widget.NavigationView android:id= \"@+id/nvView\" android:layout_width= \"wrap_content\" android:layout_height= \"match_parent\" android:layout_gravity= \"start\" android:background= \"@android:color/white\" app:menu= \"@menu/drawer_view\" /> </android.support.v4.widget.DrawerLayout> Now, let's setup the drawer in our activity. We can also setup the menu icon too. public class MainActivity extends AppCompatActivity { private DrawerLayout mDrawer ; private Toolbar toolbar ; private NavigationView nvDrawer ; // Make sure to be using android.support.v7.app.ActionBarDrawerToggle version. // The android.support.v4.app.ActionBarDrawerToggle has been deprecated. private ActionBarDrawerToggle drawerToggle ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); // Set a Toolbar to replace the ActionBar. toolbar = ( Toolbar ) findViewById ( R . id . toolbar ); setSupportActionBar ( toolbar ); // Find our drawer view mDrawer = ( DrawerLayout ) findViewById ( R . id . drawer_layout ); } @Override public boolean onOptionsItemSelected ( MenuItem item ) { // The action bar home/up action should open or close the drawer. switch ( item . getItemId ()) { case android . R . id . home : mDrawer . openDrawer ( GravityCompat . START ); return true ; } return super . onOptionsItemSelected ( item ); } } Navigating between Menu Items \u00b6 Setup a handler to respond to click events on the navigation elements and swap out the fragment. This can be put into the activity directly: public class MainActivity extends AppCompatActivity { // ... @Override protected void onCreate ( Bundle savedInstanceState ) { // ...From section above... // Find our drawer view nvDrawer = ( NavigationView ) findViewById ( R . id . nvView ); // Setup drawer view setupDrawerContent ( nvDrawer ); } private void setupDrawerContent ( NavigationView navigationView ) { navigationView . setNavigationItemSelectedListener ( new NavigationView . OnNavigationItemSelectedListener () { @Override public boolean onNavigationItemSelected ( MenuItem menuItem ) { selectDrawerItem ( menuItem ); return true ; } }); } public void selectDrawerItem ( MenuItem menuItem ) { // Create a new fragment and specify the fragment to show based on nav item clicked Fragment fragment = null ; Class fragmentClass ; switch ( menuItem . getItemId ()) { case R . id . nav_first_fragment : fragmentClass = FirstFragment . class ; break ; case R . id . nav_second_fragment : fragmentClass = SecondFragment . class ; break ; case R . id . nav_third_fragment : fragmentClass = ThirdFragment . class ; break ; default : fragmentClass = FirstFragment . class ; } try { fragment = ( Fragment ) fragmentClass . newInstance (); } catch ( Exception e ) { e . printStackTrace (); } // Insert the fragment by replacing any existing fragment FragmentManager fragmentManager = getSupportFragmentManager (); fragmentManager . beginTransaction (). replace ( R . id . flContent , fragment ). commit (); // Highlight the selected item has been done by NavigationView menuItem . setChecked ( true ); // Set action bar title setTitle ( menuItem . getTitle ()); // Close the navigation drawer mDrawer . closeDrawers (); } // ... } Add Navigation Header \u00b6 The NavigationView also accepts a custom attribute that can reference a layout that provides a header of our layout. For instance, you can create a layout/nav_header.xml similar to the following: <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"192dp\" android:background= \"?attr/colorPrimaryDark\" android:padding= \"16dp\" android:theme= \"@style/ThemeOverlay.AppCompat.Dark\" android:orientation= \"vertical\" android:gravity= \"bottom\" > <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"Header\" android:textColor= \"@android:color/white\" android:textAppearance= \"@style/TextAppearance.AppCompat.Body1\" /> </LinearLayout> You would then reference this in the layout res/layout/activity_main.xml in the NavigationView with the app:headerLayout custom attribute: <!-- res/layout/activity_main.xml --> <!-- The navigation drawer --> <android.support.design.widget.NavigationView ... app:headerLayout= \"@layout/nav_header\" > </android.support.design.widget.NavigationView> This app:headerLayout inflates the specified layout into the header automatically. This can alternatively be done at runtime with: // Lookup navigation view NavigationView navigationView = ( NavigationView ) findViewById ( R . id . nav_draw ); // Inflate the header view at runtime View headerLayout = navigationView . inflateHeaderView ( R . layout . nav_header ); // We can now look up items within the header if needed ImageView ivHeaderPhoto = headerLayout . findViewById ( R . id . imageView ); Getting references to the header \u00b6 Note: Version 23.1.0 of the design support library switches NavigationView to using a RecyclerView and causes NPE (null exceptions) on header lookups unless the header is added at runtime. If you need to get a reference to the header, you need to use the new getHeaderView() method introduced in the latest v23.1.1 update: // There is usually only 1 header view. // Multiple header views can technically be added at runtime. // We can use navigationView.getHeaderCount() to determine the total number. View headerLayout = navigationView . getHeaderView ( 0 ); Animate the Hamburger Icon \u00b6 In order for the hamburger icon to animate to indicate the drawer is being opened and closed, we need to use the ActionBarDrawerToggle class. In your res/values/strings.xml add the following: <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string name= \"drawer_open\" > Open navigation drawer </string> <string name= \"drawer_close\" > Close navigation drawer </string> </resources> We need to tie the DrawerLayout and Toolbar together: protected void onCreate ( Bundle savedInstanceState ) { // Set a Toolbar to replace the ActionBar. toolbar = ( Toolbar ) findViewById ( R . id . toolbar ); setSupportActionBar ( toolbar ); // Find our drawer view mDrawer = ( DrawerLayout ) findViewById ( R . id . drawer_layout ); drawerToggle = setupDrawerToggle (); // Tie DrawerLayout events to the ActionBarToggle mDrawer . addDrawerListener ( drawerToggle ); } private ActionBarDrawerToggle setupDrawerToggle () { // NOTE: Make sure you pass in a valid toolbar reference. ActionBarDrawToggle() does not require it // and will not render the hamburger icon without it. return new ActionBarDrawerToggle ( this , mDrawer , toolbar , R . string . drawer_open , R . string . drawer_close ); } Next, we need to make sure we synchronize the state whenever the screen is restored or there is a configuration change (i.e screen rotation): // `onPostCreate` called when activity start-up is complete after `onStart()` // NOTE 1: Make sure to override the method with only a single `Bundle` argument // Note 2: Make sure you implement the correct `onPostCreate(Bundle savedInstanceState)` method. // There are 2 signatures and only `onPostCreate(Bundle state)` shows the hamburger icon. @Override protected void onPostCreate ( Bundle savedInstanceState ) { super . onPostCreate ( savedInstanceState ); // Sync the toggle state after onRestoreInstanceState has occurred. drawerToggle . syncState (); } @Override public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ); // Pass any configuration change to the drawer toggles drawerToggle . onConfigurationChanged ( newConfig ); } We also need to change the onOptionsItemSelected() method and allow the ActionBarToggle to handle the events. @Override public boolean onOptionsItemSelected ( MenuItem item ) { if ( drawerToggle . onOptionsItemSelected ( item )) { return true ; } return super . onOptionsItemSelected ( item ); } The ActionBarToggle will perform the same function done previously but adds a bit more checks and allows mouse clicks on the icon to open and close the drawer. See the source code for more context. One thing to note is that the ActionBarDrawerToggle renders a custom DrawerArrowDrawable for you for the hamburger icon. Also, make sure to be using android.support.v7.app.ActionBarDrawerToggle version. The android.support.v4.app.ActionBarDrawerToggle has been deprecated. Making Status Bar Translucent \u00b6 To have the status bar translucent and have our drawer slide over it, we need to set android:windowTranslucentStatus to true. Because this style is not available for pre Kitkat devices, we'll add res/values-v19/styles.xml file for API version 19 and onwards. Note : If you modify your res/values/styles.xml directly with this android:windowTranslucentStatus line, you are likely to need to build only for SDK versions 19 or higher, which will obviously limit you from supporting many older devices. In res/values-v19/styles.xml we can add the following: <resources> <!-- Base application theme. --> <style name= \"AppTheme\" parent= \"Theme.AppCompat.Light.NoActionBar\" > <!-- Customize your theme here. --> <item name= \"android:windowTranslucentStatus\" > true </item> </style> </resources> Now if you run your app, you should see the navigation drawer and be able to select between your fragments. Adding custom views to navigation drawer \u00b6 One improvement made to the design support library 23.1.0 is the addition of support for custom views for the navigation drawer items. For instance, we can create a custom switch like the navigation drawer from Google Play Movies for one of the rows: The approach is the same as adding [[ActionView items|Extended-ActionBar-Guide#adding-actionview-items]] to the ActionBar. We simply need to define a separate layout such as the following snippet. We will call this file action_view_switch.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <android.support.v7.widget.SwitchCompat android:layout_width= \"fill_parent\" android:layout_height= \"match_parent\" android:text= \"Switch\" /> </LinearLayout> We then reference this layout using the app:actionLayout attribute. A title must be provided but can also be set to blank: <menu xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:id= \"@+id/nav_switch\" app:actionLayout= \"@layout/action_view_switch\" android:title= \"Downloaded only\" /> </item> </menu> You can attach events directly in XML so long as your Activity will implement the method. To add an event handling to the toggle switch programmatically through Java, you will need to first get the menu instance and get access to the corresponding ActionView: Menu menu = navigationView . getMenu (); MenuItem menuItem = menu . findItem ( R . id . nav_switch ); View actionView = MenuItemCompat . getActionView ( menuItem ); actionView . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { } }); Custom widgets using app:actionViewClass can also be used too for menu items as well now too. For more details about how Action Views, see adding the [[SearchView to ActionBar|Extended-ActionBar-Guide#adding-searchview-to-actionbar]] guide. Persistent Navigation Drawer \u00b6 In certain situations, especially on tablets, the navigation drawer should be a permanent fixture on the activity acting as a sidebar: To achieve this effect, review the following links which describe one approach: Static Nav Drawer Related Stackoverflow Question Sample Code Third-party libraries may also make this easier to achieve. Alternative to Fragments \u00b6 Although many navigation drawer examples show how fragments can be used with the navigation drawer, you can also use a RelativeLayout / LinearLayout if you wish to use the drawer as an overlay to your currently displayed Activity. Instead of <FrameLayout> you can substitute that for a <LinearLayout> <android.support.v4.widget.DrawerLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:id= \"@+id/drawer_layout\" > <LinearLayout android:id= \"@+id/content_frame\" android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> <!-- The navigation drawer --> <ListView android:id= \"@+id/left_drawer\" android:layout_width= \"240dp\" android:layout_height= \"wrap_content\" android:layout_gravity= \"start\" android:choiceMode= \"singleChoice\" android:divider= \"@android:color/transparent\" android:dividerHeight= \"0dp\" android:background= \"#111\" /> </android.support.v4.widget.DrawerLayout> Instead of this: // Insert the fragment by replacing any existing fragment getFragmentManager (). beginTransaction () . replace ( R . id . content_frame , fragment ) . commit (); You can instead use the LinearLayout container to inflate the Activity directly: LayoutInflater inflater = getLayoutInflater (); LinearLayout container = ( LinearLayout ) findViewById ( R . id . content_frame ); inflater . inflate ( R . layout . activity_main , container );","title":"Navigation Drawer"},{"location":"navigation/navigation-drawer/#navigation-with-navigation-drawer","text":"During the I/O Conference 2015, Google released NavigationView , which makes it far easier to create it than the previously documented instructions . With the release of Android 5.0 Lollipop, the new material design style navigation drawer spans the full height of the screen and is displayed over the ActionBar and overlaps the translucent StatusBar . Read the material design style navigation drawer document for specs on styling your navigation drawer.","title":"Navigation with Navigation Drawer"},{"location":"navigation/navigation-drawer/#usage","text":"This guide explains how to setup a basic material design style drawer filled with navigation items that switch different fragments into the content area. In this way, you can define multiple fragments, and then define the list of options which will display in the drawers items list. Each item when clicked will switch the relevant fragment into the activity's container view.","title":"Usage"},{"location":"navigation/navigation-drawer/#setup","text":"Make sure to setup the Google [[Design Support Library]] before using Google's new NavigationView , announced as part of the Android M release. The NavigationView should be backwards compatible with all versions down to Android 2.1. Make sure you have this Gradle dependency added to your app/build.gradle file: dependencies { compile 'com.android.support:design:25.2.0' }","title":"Setup"},{"location":"navigation/navigation-drawer/#download-nav-drawer-item-icons","text":"Download the following icons and add them to your drawable folders by copying and pasting them into the drawable folder or using the New Image Asset dialog to create versions for each density. ic_one ic_two ic_three If you use the New Image Asset dialog, choose a black foreground color and change the resource name.","title":"Download Nav Drawer Item icons"},{"location":"navigation/navigation-drawer/#setup-drawer-resources","text":"Create a menu/drawer_view.xml file: <menu xmlns:android= \"http://schemas.android.com/apk/res/android\" > <group android:checkableBehavior= \"single\" > <item android:id= \"@+id/nav_first_fragment\" android:icon= \"@drawable/ic_one\" android:title= \"First\" /> <item android:id= \"@+id/nav_second_fragment\" android:icon= \"@drawable/ic_two\" android:title= \"Second\" /> <item android:id= \"@+id/nav_third_fragment\" android:icon= \"@drawable/ic_three\" android:title= \"Third\" /> </group> </menu> Note that you can set one of these elements to be default selected by using android:checked=\"true\" . You can also create subheaders too and group elements together: <item android:title= \"Sub items\" > <menu> <group android:checkableBehavior= \"single\" > <item android:icon= \"@drawable/ic_dashboard\" android:title= \"Sub item 1\" /> <item android:icon= \"@drawable/ic_forum\" android:title= \"Sub item 2\" /> </group> </menu> </item>","title":"Setup Drawer Resources"},{"location":"navigation/navigation-drawer/#define-fragments","text":"Next, you need to define your fragments that will be displayed within the drawer. These can be any support fragments you define within your application. Make sure that all the fragments extend from android.support.v4.app.Fragment .","title":"Define Fragments"},{"location":"navigation/navigation-drawer/#setup-toolbar","text":"In order to slide our navigation drawer over the ActionBar, we need to use the new [[Toolbar|Using-the-App-ToolBar]] widget as defined in the AppCompat v21 library. The Toolbar can be embedded into your view hierarchy which makes sure that the drawer slides over the ActionBar . Create a new layout file res/layout/toolbar.xml with the following code: <android.support.v7.widget.Toolbar xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:id= \"@+id/toolbar\" android:layout_height= \"wrap_content\" android:layout_width= \"match_parent\" android:fitsSystemWindows= \"true\" android:minHeight= \"?attr/actionBarSize\" app:theme= \"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" android:background= \"?attr/colorPrimaryDark\" > </android.support.v7.widget.Toolbar> Note that when the android:fitsSystemWindows attribute is set to true for a view, the view would be laid out as if the StatusBar and the ActionBar were present i.e. the UI on top gets padding enough to not be obscured by the navigation bar. Without this attribute, there is not enough padding factored into consideration for the ToolBar : We want our main content view to have the navigation bar and hence android:fitsSystemWindows is set to true for the Toolbar . To use the Toolbar as an ActionBar , you need to disable the default ActionBar . This can be done by setting the app theme in styles.xml file. <resources> <!-- Base application theme. --> <style name= \"AppTheme\" parent= \"Theme.AppCompat.Light.NoActionBar\" > <item name= \"colorPrimary\" > #673AB7 </item> <item name= \"colorPrimaryDark\" > #512DA8 </item> <item name= \"colorAccent\" > #FF4081 </item> </style> </resources> Also note that normally you should decide on your color scheme by going to Material Palette and choosing a primary and dark primary color. For this example, we will pick purple-based colors as shown in the screenshot. Note : If you forget to disable the ActionBar in styles.xml , you are likely to see a java.lang.IllegalStateException with an error message that reads This Activity already has an action bar supplied by the window decor. Do not request Window.FEATURE_ACTION_BAR and set windowActionBar to false in your theme to use a Toolbar instead. If you see this message, you need to make sure to follow the previous steps.","title":"Setup Toolbar"},{"location":"navigation/navigation-drawer/#setup-drawer-in-activity","text":"Next, let's setup a basic navigation drawer based on the following layout file which has the entire drawer setup in res/layout/activity_main.xml . Note that the Toolbar is added as the first child of the main content view by adding the include tag. <!-- This DrawerLayout has two children at the root --> <android.support.v4.widget.DrawerLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:id= \"@+id/drawer_layout\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <!-- This LinearLayout represents the contents of the screen --> <LinearLayout android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" > <!-- The ActionBar displayed at the top --> <include layout= \"@layout/toolbar\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" /> <!-- The main content view where fragments are loaded --> <FrameLayout android:id= \"@+id/flContent\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </LinearLayout> <!-- The navigation drawer that comes from the left --> <!-- Note that `android:layout_gravity` needs to be set to 'start' --> <android.support.design.widget.NavigationView android:id= \"@+id/nvView\" android:layout_width= \"wrap_content\" android:layout_height= \"match_parent\" android:layout_gravity= \"start\" android:background= \"@android:color/white\" app:menu= \"@menu/drawer_view\" /> </android.support.v4.widget.DrawerLayout> Now, let's setup the drawer in our activity. We can also setup the menu icon too. public class MainActivity extends AppCompatActivity { private DrawerLayout mDrawer ; private Toolbar toolbar ; private NavigationView nvDrawer ; // Make sure to be using android.support.v7.app.ActionBarDrawerToggle version. // The android.support.v4.app.ActionBarDrawerToggle has been deprecated. private ActionBarDrawerToggle drawerToggle ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); // Set a Toolbar to replace the ActionBar. toolbar = ( Toolbar ) findViewById ( R . id . toolbar ); setSupportActionBar ( toolbar ); // Find our drawer view mDrawer = ( DrawerLayout ) findViewById ( R . id . drawer_layout ); } @Override public boolean onOptionsItemSelected ( MenuItem item ) { // The action bar home/up action should open or close the drawer. switch ( item . getItemId ()) { case android . R . id . home : mDrawer . openDrawer ( GravityCompat . START ); return true ; } return super . onOptionsItemSelected ( item ); } }","title":"Setup Drawer in Activity"},{"location":"navigation/navigation-drawer/#navigating-between-menu-items","text":"Setup a handler to respond to click events on the navigation elements and swap out the fragment. This can be put into the activity directly: public class MainActivity extends AppCompatActivity { // ... @Override protected void onCreate ( Bundle savedInstanceState ) { // ...From section above... // Find our drawer view nvDrawer = ( NavigationView ) findViewById ( R . id . nvView ); // Setup drawer view setupDrawerContent ( nvDrawer ); } private void setupDrawerContent ( NavigationView navigationView ) { navigationView . setNavigationItemSelectedListener ( new NavigationView . OnNavigationItemSelectedListener () { @Override public boolean onNavigationItemSelected ( MenuItem menuItem ) { selectDrawerItem ( menuItem ); return true ; } }); } public void selectDrawerItem ( MenuItem menuItem ) { // Create a new fragment and specify the fragment to show based on nav item clicked Fragment fragment = null ; Class fragmentClass ; switch ( menuItem . getItemId ()) { case R . id . nav_first_fragment : fragmentClass = FirstFragment . class ; break ; case R . id . nav_second_fragment : fragmentClass = SecondFragment . class ; break ; case R . id . nav_third_fragment : fragmentClass = ThirdFragment . class ; break ; default : fragmentClass = FirstFragment . class ; } try { fragment = ( Fragment ) fragmentClass . newInstance (); } catch ( Exception e ) { e . printStackTrace (); } // Insert the fragment by replacing any existing fragment FragmentManager fragmentManager = getSupportFragmentManager (); fragmentManager . beginTransaction (). replace ( R . id . flContent , fragment ). commit (); // Highlight the selected item has been done by NavigationView menuItem . setChecked ( true ); // Set action bar title setTitle ( menuItem . getTitle ()); // Close the navigation drawer mDrawer . closeDrawers (); } // ... }","title":"Navigating between Menu Items"},{"location":"navigation/navigation-drawer/#add-navigation-header","text":"The NavigationView also accepts a custom attribute that can reference a layout that provides a header of our layout. For instance, you can create a layout/nav_header.xml similar to the following: <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"192dp\" android:background= \"?attr/colorPrimaryDark\" android:padding= \"16dp\" android:theme= \"@style/ThemeOverlay.AppCompat.Dark\" android:orientation= \"vertical\" android:gravity= \"bottom\" > <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"Header\" android:textColor= \"@android:color/white\" android:textAppearance= \"@style/TextAppearance.AppCompat.Body1\" /> </LinearLayout> You would then reference this in the layout res/layout/activity_main.xml in the NavigationView with the app:headerLayout custom attribute: <!-- res/layout/activity_main.xml --> <!-- The navigation drawer --> <android.support.design.widget.NavigationView ... app:headerLayout= \"@layout/nav_header\" > </android.support.design.widget.NavigationView> This app:headerLayout inflates the specified layout into the header automatically. This can alternatively be done at runtime with: // Lookup navigation view NavigationView navigationView = ( NavigationView ) findViewById ( R . id . nav_draw ); // Inflate the header view at runtime View headerLayout = navigationView . inflateHeaderView ( R . layout . nav_header ); // We can now look up items within the header if needed ImageView ivHeaderPhoto = headerLayout . findViewById ( R . id . imageView );","title":"Add Navigation Header"},{"location":"navigation/navigation-drawer/#getting-references-to-the-header","text":"Note: Version 23.1.0 of the design support library switches NavigationView to using a RecyclerView and causes NPE (null exceptions) on header lookups unless the header is added at runtime. If you need to get a reference to the header, you need to use the new getHeaderView() method introduced in the latest v23.1.1 update: // There is usually only 1 header view. // Multiple header views can technically be added at runtime. // We can use navigationView.getHeaderCount() to determine the total number. View headerLayout = navigationView . getHeaderView ( 0 );","title":"Getting references to the header"},{"location":"navigation/navigation-drawer/#animate-the-hamburger-icon","text":"In order for the hamburger icon to animate to indicate the drawer is being opened and closed, we need to use the ActionBarDrawerToggle class. In your res/values/strings.xml add the following: <?xml version=\"1.0\" encoding=\"utf-8\"?> <resources> <string name= \"drawer_open\" > Open navigation drawer </string> <string name= \"drawer_close\" > Close navigation drawer </string> </resources> We need to tie the DrawerLayout and Toolbar together: protected void onCreate ( Bundle savedInstanceState ) { // Set a Toolbar to replace the ActionBar. toolbar = ( Toolbar ) findViewById ( R . id . toolbar ); setSupportActionBar ( toolbar ); // Find our drawer view mDrawer = ( DrawerLayout ) findViewById ( R . id . drawer_layout ); drawerToggle = setupDrawerToggle (); // Tie DrawerLayout events to the ActionBarToggle mDrawer . addDrawerListener ( drawerToggle ); } private ActionBarDrawerToggle setupDrawerToggle () { // NOTE: Make sure you pass in a valid toolbar reference. ActionBarDrawToggle() does not require it // and will not render the hamburger icon without it. return new ActionBarDrawerToggle ( this , mDrawer , toolbar , R . string . drawer_open , R . string . drawer_close ); } Next, we need to make sure we synchronize the state whenever the screen is restored or there is a configuration change (i.e screen rotation): // `onPostCreate` called when activity start-up is complete after `onStart()` // NOTE 1: Make sure to override the method with only a single `Bundle` argument // Note 2: Make sure you implement the correct `onPostCreate(Bundle savedInstanceState)` method. // There are 2 signatures and only `onPostCreate(Bundle state)` shows the hamburger icon. @Override protected void onPostCreate ( Bundle savedInstanceState ) { super . onPostCreate ( savedInstanceState ); // Sync the toggle state after onRestoreInstanceState has occurred. drawerToggle . syncState (); } @Override public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ); // Pass any configuration change to the drawer toggles drawerToggle . onConfigurationChanged ( newConfig ); } We also need to change the onOptionsItemSelected() method and allow the ActionBarToggle to handle the events. @Override public boolean onOptionsItemSelected ( MenuItem item ) { if ( drawerToggle . onOptionsItemSelected ( item )) { return true ; } return super . onOptionsItemSelected ( item ); } The ActionBarToggle will perform the same function done previously but adds a bit more checks and allows mouse clicks on the icon to open and close the drawer. See the source code for more context. One thing to note is that the ActionBarDrawerToggle renders a custom DrawerArrowDrawable for you for the hamburger icon. Also, make sure to be using android.support.v7.app.ActionBarDrawerToggle version. The android.support.v4.app.ActionBarDrawerToggle has been deprecated.","title":"Animate the Hamburger Icon"},{"location":"navigation/navigation-drawer/#making-status-bar-translucent","text":"To have the status bar translucent and have our drawer slide over it, we need to set android:windowTranslucentStatus to true. Because this style is not available for pre Kitkat devices, we'll add res/values-v19/styles.xml file for API version 19 and onwards. Note : If you modify your res/values/styles.xml directly with this android:windowTranslucentStatus line, you are likely to need to build only for SDK versions 19 or higher, which will obviously limit you from supporting many older devices. In res/values-v19/styles.xml we can add the following: <resources> <!-- Base application theme. --> <style name= \"AppTheme\" parent= \"Theme.AppCompat.Light.NoActionBar\" > <!-- Customize your theme here. --> <item name= \"android:windowTranslucentStatus\" > true </item> </style> </resources> Now if you run your app, you should see the navigation drawer and be able to select between your fragments.","title":"Making Status Bar Translucent"},{"location":"navigation/navigation-drawer/#adding-custom-views-to-navigation-drawer","text":"One improvement made to the design support library 23.1.0 is the addition of support for custom views for the navigation drawer items. For instance, we can create a custom switch like the navigation drawer from Google Play Movies for one of the rows: The approach is the same as adding [[ActionView items|Extended-ActionBar-Guide#adding-actionview-items]] to the ActionBar. We simply need to define a separate layout such as the following snippet. We will call this file action_view_switch.xml : <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <android.support.v7.widget.SwitchCompat android:layout_width= \"fill_parent\" android:layout_height= \"match_parent\" android:text= \"Switch\" /> </LinearLayout> We then reference this layout using the app:actionLayout attribute. A title must be provided but can also be set to blank: <menu xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:android= \"http://schemas.android.com/apk/res/android\" > <item android:id= \"@+id/nav_switch\" app:actionLayout= \"@layout/action_view_switch\" android:title= \"Downloaded only\" /> </item> </menu> You can attach events directly in XML so long as your Activity will implement the method. To add an event handling to the toggle switch programmatically through Java, you will need to first get the menu instance and get access to the corresponding ActionView: Menu menu = navigationView . getMenu (); MenuItem menuItem = menu . findItem ( R . id . nav_switch ); View actionView = MenuItemCompat . getActionView ( menuItem ); actionView . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { } }); Custom widgets using app:actionViewClass can also be used too for menu items as well now too. For more details about how Action Views, see adding the [[SearchView to ActionBar|Extended-ActionBar-Guide#adding-searchview-to-actionbar]] guide.","title":"Adding custom views to navigation drawer"},{"location":"navigation/navigation-drawer/#persistent-navigation-drawer","text":"In certain situations, especially on tablets, the navigation drawer should be a permanent fixture on the activity acting as a sidebar: To achieve this effect, review the following links which describe one approach: Static Nav Drawer Related Stackoverflow Question Sample Code Third-party libraries may also make this easier to achieve.","title":"Persistent Navigation Drawer"},{"location":"navigation/navigation-drawer/#alternative-to-fragments","text":"Although many navigation drawer examples show how fragments can be used with the navigation drawer, you can also use a RelativeLayout / LinearLayout if you wish to use the drawer as an overlay to your currently displayed Activity. Instead of <FrameLayout> you can substitute that for a <LinearLayout> <android.support.v4.widget.DrawerLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:id= \"@+id/drawer_layout\" > <LinearLayout android:id= \"@+id/content_frame\" android:orientation= \"horizontal\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> <!-- The navigation drawer --> <ListView android:id= \"@+id/left_drawer\" android:layout_width= \"240dp\" android:layout_height= \"wrap_content\" android:layout_gravity= \"start\" android:choiceMode= \"singleChoice\" android:divider= \"@android:color/transparent\" android:dividerHeight= \"0dp\" android:background= \"#111\" /> </android.support.v4.widget.DrawerLayout> Instead of this: // Insert the fragment by replacing any existing fragment getFragmentManager (). beginTransaction () . replace ( R . id . content_frame , fragment ) . commit (); You can instead use the LinearLayout container to inflate the Activity directly: LayoutInflater inflater = getLayoutInflater (); LinearLayout container = ( LinearLayout ) findViewById ( R . id . content_frame ); inflater . inflate ( R . layout . activity_main , container );","title":"Alternative to Fragments"},{"location":"navigation/stack-navigation/","text":"","title":"Stack navigation"},{"location":"navigation/swipe-tabbed-navigation/","text":"Swipe and Sliding Tabs Layout \u00b6 Simply add android.support.design.widget.TabLayout , which will be used for rendering the different tab options. The android.support.v4.view.ViewPager component will be used to page between the various fragments we will create. <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" > <android.support.design.widget.TabLayout android:id= \"@+id/sliding_tabs\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:tabMode= \"fixed\" /> <android.support.v4.view.ViewPager android:id= \"@+id/viewpager\" android:layout_width= \"match_parent\" android:layout_height= \"0px\" android:layout_weight= \"1\" android:background= \"@android:color/white\" /> </LinearLayout> Create Fragment \u00b6 Now that we have the ViewPager and our tabs in our layout, we should start defining the content of each of the tabs. Since each tab is just a fragment being displayed, we need to create and define the Fragment to be shown. You may have one or more fragments in your application depending on your requirements. In res/layout/fragment_page.xml define the XML layout for the fragment which will be displayed on screen when a particular tab is selected: <?xml version=\"1.0\" encoding=\"utf-8\"?> <TextView xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:gravity= \"center\" /> In PageFragment.java define the inflation logic for the fragment of tab content: // In this case, the fragment displays simple text based on the page public class PageFragment extends Fragment { public static final String ARG_PAGE = \"ARG_PAGE\" ; private int mPage ; public static PageFragment newInstance ( int page ) { Bundle args = new Bundle (); args . putInt ( ARG_PAGE , page ); PageFragment fragment = new PageFragment (); fragment . setArguments ( args ); return fragment ; } @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); mPage = getArguments (). getInt ( ARG_PAGE ); } @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_page , container , false ); TextView textView = ( TextView ) view ; textView . setText ( \"Fragment #\" + mPage ); return view ; } } Implement FragmentPagerAdapter \u00b6 The next thing to do is to implement the adapter for your ViewPager which controls the order of the tabs, the titles and their associated content. The most important methods to implement here are getPageTitle(int position) which is used to get the title for each tab and getItem(int position) which determines the fragment for each tab. public class SampleFragmentPagerAdapter extends FragmentPagerAdapter { final int PAGE_COUNT = 3 ; private String tabTitles [] = new String [] { \"Tab1\" , \"Tab2\" , \"Tab3\" }; private Context context ; public SampleFragmentPagerAdapter ( FragmentManager fm , Context context ) { super ( fm ); this . context = context ; } @Override public int getCount () { return PAGE_COUNT ; } @Override public Fragment getItem ( int position ) { return PageFragment . newInstance ( position + 1 ); } @Override public CharSequence getPageTitle ( int position ) { // Generate title based on item position return tabTitles [ position ]; } } Setup Sliding Tabs \u00b6 Finally, we need to attach our ViewPager to the SampleFragmentPagerAdapter and then configure the sliding tabs with a two step process: In the onCreate() method of your activity, find the ViewPager and connect the adapter. Set the ViewPager on the TabLayout to connect the pager with the tabs. public class MainActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); // Get the ViewPager and set it's PagerAdapter so that it can display items ViewPager viewPager = ( ViewPager ) findViewById ( R . id . viewpager ); viewPager . setAdapter ( new SampleFragmentPagerAdapter ( getSupportFragmentManager (), MainActivity . this )); // Give the TabLayout the ViewPager TabLayout tabLayout = ( TabLayout ) findViewById ( R . id . sliding_tabs ); tabLayout . setupWithViewPager ( viewPager ); } } Heres the output: Configuring the TabLayout \u00b6 There are many attributes you can use to customize the behavior of your TabLayout as shown below: <android.support.design.widget.TabLayout android:id= \"@+id/sliding_tabs\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:tabMaxWidth= \"0dp\" app:tabGravity= \"fill\" app:tabMode= \"fixed\" /> The most important properties available are listed below: Name Options Description tabBackground @drawable/image Background applied to the tabs tabGravity center , fill Gravity of the tabs tabIndicatorColor @color/blue Color of the tab indicator line tabIndicatorHeight @dimen/tabh Height of the tab indicator line tabMaxWidth @dimen/tabmaxw Maximum width of the tab tabMode fixed , scrollable Small number of fixed tabs or scrolling list tabTextColor @color/blue Color of the text on the tab You can see all the properties available here . Styling the TabLayout \u00b6 Normally, the tab indicator color chosen is the accent color defined for your Material Design theme. We can override this color by defining a custom style in styles.xml and then applying the style to your TabLayout : <style name= \"MyCustomTabLayout\" parent= \"Widget.Design.TabLayout\" > <item name= \"tabIndicatorColor\" > #0000FF </item> </style> You can then override this style for your TabLayout: <android.support.design.widget.TabLayout android:id= \"@+id/tabs\" style= \"@style/MyCustomTabLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > </android.support.design.widget.TabLayout> There are several other styles that can be configured for the TabLayout : <style name= \"MyCustomTabLayout\" parent= \"Widget.Design.TabLayout\" > <item name= \"tabMaxWidth\" > @dimen/tab_max_width </item> <item name= \"tabIndicatorColor\" > ?attr/colorAccent </item> <item name= \"tabIndicatorHeight\" > 2dp </item> <item name= \"tabPaddingStart\" > 12dp </item> <item name= \"tabPaddingEnd\" > 12dp </item> <item name= \"tabBackground\" > ?attr/selectableItemBackground </item> <item name= \"tabTextAppearance\" > @style/MyCustomTabTextAppearance </item> <item name= \"tabSelectedTextColor\" > ?android:textColorPrimary </item> </style> <style name= \"MyCustomTabTextAppearance\" parent= \"TextAppearance.Design.Tab\" > <item name= \"android:textSize\" > 14sp </item> <item name= \"android:textColor\" > ?android:textColorSecondary </item> <item name= \"textAllCaps\" > true </item> </style> Add Icons to TabLayout \u00b6 Currently, the TabLayout class does not provide a clean abstraction model that allows for icons in your tab. There are many posted workarounds, one of which is to return a SpannableString , containing your icon in an ImageSpan , from your PagerAdapter's getPageTitle(position) method as shown in the code snippet below: private int [] imageResId = { R . drawable . ic_one , R . drawable . ic_two , R . drawable . ic_three }; // ... @Override public CharSequence getPageTitle ( int position ) { // Generate title based on item position // return tabTitles[position]; // getDrawable(int i) is deprecated, use getDrawable(int i, Theme theme) for min SDK >=21 // or ContextCompat.getDrawable(Context context, int id) if you want support for older versions. // Drawable image = context.getResources().getDrawable(iconIds[position], context.getTheme()); // Drawable image = context.getResources().getDrawable(imageResId[position]); // Drawable image = AppCompatDrawableManager.get().getDrawable(context, imageResId[position]); for support library Drawable image = ContextCompat . getDrawable ( context , imageResId [ position ]); image . setBounds ( 0 , 0 , image . getIntrinsicWidth (), image . getIntrinsicHeight ()); SpannableString sb = new SpannableString ( \" \" ); ImageSpan imageSpan = new ImageSpan ( image , ImageSpan . ALIGN_BOTTOM ); sb . setSpan ( imageSpan , 0 , 1 , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ); return sb ; } By default, the tab created by TabLayout sets the textAllCaps property to be true, which prevents ImageSpans from being rendered. You can override this behavior by changing the tabTextAppearance property. <style name= \"MyCustomTabLayout\" parent= \"Widget.Design.TabLayout\" > <item name= \"tabTextAppearance\" > @style/MyCustomTextAppearance </item> </style> <style name= \"MyCustomTextAppearance\" parent= \"TextAppearance.Design.Tab\" > <item name= \"textAllCaps\" > false </item> </style> Sliding tabs with images: Add Icons+Text to TabLayout \u00b6 Since we are using SpannableString to add icons to TabLayout , it becomes easy to have text next to the icons by manipulating the SpannableString object. @Override public CharSequence getPageTitle ( int position ) { // Generate title based on item position Drawable image = context . getResources (). getDrawable ( imageResId [ position ]); image . setBounds ( 0 , 0 , image . getIntrinsicWidth (), image . getIntrinsicHeight ()); // Replace blank spaces with image icon SpannableString sb = new SpannableString ( \" \" + tabTitles [ position ]); ImageSpan imageSpan = new ImageSpan ( image , ImageSpan . ALIGN_BOTTOM ); sb . setSpan ( imageSpan , 0 , 1 , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ); return sb ; } Note the additional spaces that are added before the tab title while instantiating SpannableString class. The blank spaces are used to place the image icon so that the actual title is displayed completely. Depending on where you want to position your icon, you can specify the range start\u2026end of the span in setSpan() method. Add Custom View to TabLayout \u00b6 In certain cases, instead of the default tab view we may want to apply a custom XML layout for each tab. To achieve this, iterate over all the TabLayout.Tab s after attaching the sliding tabs to the pager: public class MainActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); // Get the ViewPager and set it's PagerAdapter so that it can display items ViewPager viewPager = ( ViewPager ) findViewById ( R . id . viewpager ); SampleFragmentPagerAdapter pagerAdapter = new SampleFragmentPagerAdapter ( getSupportFragmentManager (), MainActivity . this ); viewPager . setAdapter ( pagerAdapter ); // Give the TabLayout the ViewPager TabLayout tabLayout = ( TabLayout ) findViewById ( R . id . sliding_tabs ); tabLayout . setupWithViewPager ( viewPager ); // Iterate over all tabs and set the custom view for ( int i = 0 ; i < tabLayout . getTabCount (); i ++) { TabLayout . Tab tab = tabLayout . getTabAt ( i ); tab . setCustomView ( pagerAdapter . getTabView ( i )); } } //... } Next, we add the getTabView(position) method to the SampleFragmentPagerAdapter class: public class SampleFragmentPagerAdapter extends FragmentPagerAdapter { private String tabTitles [] = new String [] { \"Tab1\" , \"Tab2\" }; private int [] imageResId = { R . drawable . ic_one , R . drawable . ic_two }; public View getTabView ( int position ) { // Given you have a custom layout in `res/layout/custom_tab.xml` with a TextView and ImageView View v = LayoutInflater . from ( context ). inflate ( R . layout . custom_tab , null ); TextView tv = ( TextView ) v . findViewById ( R . id . textView ); tv . setText ( tabTitles [ position ]); ImageView img = ( ImageView ) v . findViewById ( R . id . imgView ); img . setImageResource ( imageResId [ position ]); return v ; } } With this you can setup any custom tab content for each page in the adapter. Getting or Selected the Current Page \u00b6 With the recent updates to the design support library, you can also get the selected tab position by calling getSelectedTabPosition() . If you need to save or restore the selected tab position during screen rotation or other configuration changes, this method is helpful for restoring the original tab position. First, move your tabLayout and viewPager as member variables of your main activity: public class MainActivity extends AppCompatActivity { TabLayout tabLayout ; ViewPager viewPager ; Next, we can save and restore the last known tab position by implementing methods on onSaveInstanceState() and onRestoreInstanceState() to persist this data. When the view is recreated, we can use this data and set the current tab to the last selected tab value. public static String POSITION = \"POSITION\" ; @Override public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ); outState . putInt ( POSITION , tabLayout . getSelectedTabPosition ()); } @Override protected void onRestoreInstanceState ( Bundle savedInstanceState ) { super . onRestoreInstanceState ( savedInstanceState ); viewPager . setCurrentItem ( savedInstanceState . getInt ( POSITION )); }","title":"Swipe and Tabbed Navigation"},{"location":"navigation/swipe-tabbed-navigation/#swipe-and-sliding-tabs-layout","text":"Simply add android.support.design.widget.TabLayout , which will be used for rendering the different tab options. The android.support.v4.view.ViewPager component will be used to page between the various fragments we will create. <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" > <android.support.design.widget.TabLayout android:id= \"@+id/sliding_tabs\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:tabMode= \"fixed\" /> <android.support.v4.view.ViewPager android:id= \"@+id/viewpager\" android:layout_width= \"match_parent\" android:layout_height= \"0px\" android:layout_weight= \"1\" android:background= \"@android:color/white\" /> </LinearLayout>","title":"Swipe and Sliding Tabs Layout"},{"location":"navigation/swipe-tabbed-navigation/#create-fragment","text":"Now that we have the ViewPager and our tabs in our layout, we should start defining the content of each of the tabs. Since each tab is just a fragment being displayed, we need to create and define the Fragment to be shown. You may have one or more fragments in your application depending on your requirements. In res/layout/fragment_page.xml define the XML layout for the fragment which will be displayed on screen when a particular tab is selected: <?xml version=\"1.0\" encoding=\"utf-8\"?> <TextView xmlns:android= \"http://schemas.android.com/apk/res/android\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:gravity= \"center\" /> In PageFragment.java define the inflation logic for the fragment of tab content: // In this case, the fragment displays simple text based on the page public class PageFragment extends Fragment { public static final String ARG_PAGE = \"ARG_PAGE\" ; private int mPage ; public static PageFragment newInstance ( int page ) { Bundle args = new Bundle (); args . putInt ( ARG_PAGE , page ); PageFragment fragment = new PageFragment (); fragment . setArguments ( args ); return fragment ; } @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); mPage = getArguments (). getInt ( ARG_PAGE ); } @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_page , container , false ); TextView textView = ( TextView ) view ; textView . setText ( \"Fragment #\" + mPage ); return view ; } }","title":"Create Fragment"},{"location":"navigation/swipe-tabbed-navigation/#implement-fragmentpageradapter","text":"The next thing to do is to implement the adapter for your ViewPager which controls the order of the tabs, the titles and their associated content. The most important methods to implement here are getPageTitle(int position) which is used to get the title for each tab and getItem(int position) which determines the fragment for each tab. public class SampleFragmentPagerAdapter extends FragmentPagerAdapter { final int PAGE_COUNT = 3 ; private String tabTitles [] = new String [] { \"Tab1\" , \"Tab2\" , \"Tab3\" }; private Context context ; public SampleFragmentPagerAdapter ( FragmentManager fm , Context context ) { super ( fm ); this . context = context ; } @Override public int getCount () { return PAGE_COUNT ; } @Override public Fragment getItem ( int position ) { return PageFragment . newInstance ( position + 1 ); } @Override public CharSequence getPageTitle ( int position ) { // Generate title based on item position return tabTitles [ position ]; } }","title":"Implement FragmentPagerAdapter"},{"location":"navigation/swipe-tabbed-navigation/#setup-sliding-tabs","text":"Finally, we need to attach our ViewPager to the SampleFragmentPagerAdapter and then configure the sliding tabs with a two step process: In the onCreate() method of your activity, find the ViewPager and connect the adapter. Set the ViewPager on the TabLayout to connect the pager with the tabs. public class MainActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); // Get the ViewPager and set it's PagerAdapter so that it can display items ViewPager viewPager = ( ViewPager ) findViewById ( R . id . viewpager ); viewPager . setAdapter ( new SampleFragmentPagerAdapter ( getSupportFragmentManager (), MainActivity . this )); // Give the TabLayout the ViewPager TabLayout tabLayout = ( TabLayout ) findViewById ( R . id . sliding_tabs ); tabLayout . setupWithViewPager ( viewPager ); } } Heres the output:","title":"Setup Sliding Tabs"},{"location":"navigation/swipe-tabbed-navigation/#configuring-the-tablayout","text":"There are many attributes you can use to customize the behavior of your TabLayout as shown below: <android.support.design.widget.TabLayout android:id= \"@+id/sliding_tabs\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:tabMaxWidth= \"0dp\" app:tabGravity= \"fill\" app:tabMode= \"fixed\" /> The most important properties available are listed below: Name Options Description tabBackground @drawable/image Background applied to the tabs tabGravity center , fill Gravity of the tabs tabIndicatorColor @color/blue Color of the tab indicator line tabIndicatorHeight @dimen/tabh Height of the tab indicator line tabMaxWidth @dimen/tabmaxw Maximum width of the tab tabMode fixed , scrollable Small number of fixed tabs or scrolling list tabTextColor @color/blue Color of the text on the tab You can see all the properties available here .","title":"Configuring the TabLayout"},{"location":"navigation/swipe-tabbed-navigation/#styling-the-tablayout","text":"Normally, the tab indicator color chosen is the accent color defined for your Material Design theme. We can override this color by defining a custom style in styles.xml and then applying the style to your TabLayout : <style name= \"MyCustomTabLayout\" parent= \"Widget.Design.TabLayout\" > <item name= \"tabIndicatorColor\" > #0000FF </item> </style> You can then override this style for your TabLayout: <android.support.design.widget.TabLayout android:id= \"@+id/tabs\" style= \"@style/MyCustomTabLayout\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" > </android.support.design.widget.TabLayout> There are several other styles that can be configured for the TabLayout : <style name= \"MyCustomTabLayout\" parent= \"Widget.Design.TabLayout\" > <item name= \"tabMaxWidth\" > @dimen/tab_max_width </item> <item name= \"tabIndicatorColor\" > ?attr/colorAccent </item> <item name= \"tabIndicatorHeight\" > 2dp </item> <item name= \"tabPaddingStart\" > 12dp </item> <item name= \"tabPaddingEnd\" > 12dp </item> <item name= \"tabBackground\" > ?attr/selectableItemBackground </item> <item name= \"tabTextAppearance\" > @style/MyCustomTabTextAppearance </item> <item name= \"tabSelectedTextColor\" > ?android:textColorPrimary </item> </style> <style name= \"MyCustomTabTextAppearance\" parent= \"TextAppearance.Design.Tab\" > <item name= \"android:textSize\" > 14sp </item> <item name= \"android:textColor\" > ?android:textColorSecondary </item> <item name= \"textAllCaps\" > true </item> </style>","title":"Styling the TabLayout"},{"location":"navigation/swipe-tabbed-navigation/#add-icons-to-tablayout","text":"Currently, the TabLayout class does not provide a clean abstraction model that allows for icons in your tab. There are many posted workarounds, one of which is to return a SpannableString , containing your icon in an ImageSpan , from your PagerAdapter's getPageTitle(position) method as shown in the code snippet below: private int [] imageResId = { R . drawable . ic_one , R . drawable . ic_two , R . drawable . ic_three }; // ... @Override public CharSequence getPageTitle ( int position ) { // Generate title based on item position // return tabTitles[position]; // getDrawable(int i) is deprecated, use getDrawable(int i, Theme theme) for min SDK >=21 // or ContextCompat.getDrawable(Context context, int id) if you want support for older versions. // Drawable image = context.getResources().getDrawable(iconIds[position], context.getTheme()); // Drawable image = context.getResources().getDrawable(imageResId[position]); // Drawable image = AppCompatDrawableManager.get().getDrawable(context, imageResId[position]); for support library Drawable image = ContextCompat . getDrawable ( context , imageResId [ position ]); image . setBounds ( 0 , 0 , image . getIntrinsicWidth (), image . getIntrinsicHeight ()); SpannableString sb = new SpannableString ( \" \" ); ImageSpan imageSpan = new ImageSpan ( image , ImageSpan . ALIGN_BOTTOM ); sb . setSpan ( imageSpan , 0 , 1 , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ); return sb ; } By default, the tab created by TabLayout sets the textAllCaps property to be true, which prevents ImageSpans from being rendered. You can override this behavior by changing the tabTextAppearance property. <style name= \"MyCustomTabLayout\" parent= \"Widget.Design.TabLayout\" > <item name= \"tabTextAppearance\" > @style/MyCustomTextAppearance </item> </style> <style name= \"MyCustomTextAppearance\" parent= \"TextAppearance.Design.Tab\" > <item name= \"textAllCaps\" > false </item> </style> Sliding tabs with images:","title":"Add Icons to TabLayout"},{"location":"navigation/swipe-tabbed-navigation/#add-iconstext-to-tablayout","text":"Since we are using SpannableString to add icons to TabLayout , it becomes easy to have text next to the icons by manipulating the SpannableString object. @Override public CharSequence getPageTitle ( int position ) { // Generate title based on item position Drawable image = context . getResources (). getDrawable ( imageResId [ position ]); image . setBounds ( 0 , 0 , image . getIntrinsicWidth (), image . getIntrinsicHeight ()); // Replace blank spaces with image icon SpannableString sb = new SpannableString ( \" \" + tabTitles [ position ]); ImageSpan imageSpan = new ImageSpan ( image , ImageSpan . ALIGN_BOTTOM ); sb . setSpan ( imageSpan , 0 , 1 , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE ); return sb ; } Note the additional spaces that are added before the tab title while instantiating SpannableString class. The blank spaces are used to place the image icon so that the actual title is displayed completely. Depending on where you want to position your icon, you can specify the range start\u2026end of the span in setSpan() method.","title":"Add Icons+Text to TabLayout"},{"location":"navigation/swipe-tabbed-navigation/#add-custom-view-to-tablayout","text":"In certain cases, instead of the default tab view we may want to apply a custom XML layout for each tab. To achieve this, iterate over all the TabLayout.Tab s after attaching the sliding tabs to the pager: public class MainActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); // Get the ViewPager and set it's PagerAdapter so that it can display items ViewPager viewPager = ( ViewPager ) findViewById ( R . id . viewpager ); SampleFragmentPagerAdapter pagerAdapter = new SampleFragmentPagerAdapter ( getSupportFragmentManager (), MainActivity . this ); viewPager . setAdapter ( pagerAdapter ); // Give the TabLayout the ViewPager TabLayout tabLayout = ( TabLayout ) findViewById ( R . id . sliding_tabs ); tabLayout . setupWithViewPager ( viewPager ); // Iterate over all tabs and set the custom view for ( int i = 0 ; i < tabLayout . getTabCount (); i ++) { TabLayout . Tab tab = tabLayout . getTabAt ( i ); tab . setCustomView ( pagerAdapter . getTabView ( i )); } } //... } Next, we add the getTabView(position) method to the SampleFragmentPagerAdapter class: public class SampleFragmentPagerAdapter extends FragmentPagerAdapter { private String tabTitles [] = new String [] { \"Tab1\" , \"Tab2\" }; private int [] imageResId = { R . drawable . ic_one , R . drawable . ic_two }; public View getTabView ( int position ) { // Given you have a custom layout in `res/layout/custom_tab.xml` with a TextView and ImageView View v = LayoutInflater . from ( context ). inflate ( R . layout . custom_tab , null ); TextView tv = ( TextView ) v . findViewById ( R . id . textView ); tv . setText ( tabTitles [ position ]); ImageView img = ( ImageView ) v . findViewById ( R . id . imgView ); img . setImageResource ( imageResId [ position ]); return v ; } } With this you can setup any custom tab content for each page in the adapter.","title":"Add Custom View to TabLayout"},{"location":"navigation/swipe-tabbed-navigation/#getting-or-selected-the-current-page","text":"With the recent updates to the design support library, you can also get the selected tab position by calling getSelectedTabPosition() . If you need to save or restore the selected tab position during screen rotation or other configuration changes, this method is helpful for restoring the original tab position. First, move your tabLayout and viewPager as member variables of your main activity: public class MainActivity extends AppCompatActivity { TabLayout tabLayout ; ViewPager viewPager ; Next, we can save and restore the last known tab position by implementing methods on onSaveInstanceState() and onRestoreInstanceState() to persist this data. When the view is recreated, we can use this data and set the current tab to the last selected tab value. public static String POSITION = \"POSITION\" ; @Override public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ); outState . putInt ( POSITION , tabLayout . getSelectedTabPosition ()); } @Override protected void onRestoreInstanceState ( Bundle savedInstanceState ) { super . onRestoreInstanceState ( savedInstanceState ); viewPager . setCurrentItem ( savedInstanceState . getInt ( POSITION )); }","title":"Getting or Selected the Current Page"},{"location":"navigation/task-stacks/","text":"Navigation and Task Stacks \u00b6 Introduction \u00b6 The core of navigation flows in Android apps centers around the Activity and the Intent. In this guide, we are going to review tasks, navigation, and how to manipulate these when navigating between activities. This is typically used in cases where we need to exert more fine-tuned control over the behavior of the task stack which determines the \"history\" of our application. Note: To skip to changing the behavior of the task stack, jump right to the [[Usage|Navigation-and-Task-Stacks#usage]] section of this document. Conceptual Overview \u00b6 While the concept of using intents to launch activities should already be familiar to you, let's take a second to explore how launching new activities works and how this navigation is managed. As we navigate around our app (or even between apps), Android is maintaining a task stack which tracks each step in the user's history. A task is a collection of activities that users interact with when performing a certain job. The activities are arranged in a stack (the \"back stack\"), in the order in which each activity is opened. By default, your activities in your app are organized as part of the same task affinity group . Understanding the Task Stack \u00b6 When an application is launched from the Home Screen, the application comes to the foreground and the \"stack\" for that application becomes active. If no task stack exists for this application (first launch recently), then a new task is created and the \"main\" activity of the app becomes the first (root) item in the stack. Each time an activity is launched in your app, that activity is pushed onto the top of the stack and becomes active. The previous activity remains in the stack but it is stopped. However, despite being stopped the system retains the state of the Activity UI automatically. If the user hits \"back\", the current activity is popped from the top of the stack (and destroyed) and the previous activity resumes with the previous UI state restored. If the user continues to press Back, then each activity in the stack is popped off to reveal the previous one, until the user returns to whichever task was happening before this task stack began. Task Stacks Everywhere \u00b6 A \"task\" is a collection of activities stemming from a \"root\" application. This group is cohesive and when the user hits the home screen, the entire \"task\" is moved to the background until the stack is re-activated. While in the background, all the activities in the task are stopped, but the back stack for the task remains intact. If the user were to open another separate application now, that app would have an entirely separate task stack that would come to the foreground. This means that multiple discrete stacks frequently are stored by the system. There might be several task stacks in the background and when the user re-enters the related application, that stack will reappear in the foreground with states restored. Multiple Activity Instances \u00b6 This process of multiple task stacks is just the beginning. The real point of understanding comes from exploring what happens when we launch the same activity multiple times. Because the activities in the back stack are never rearranged, every time an activity is started via an intent, a brand new instance of that activity is created and pushed onto the stack . This means that if you have an activity (say the timeline for twitter), and you launch the timeline activity multiple times using different intents, then multiple instances of that activity will be tracked in the stack. This gets even more complex when you consider you might launch the same Activity from multiple different task stacks. For example, think about how many apps might launch the browser and how many instances of a browser you might have across all task stacks. By default, if the user navigates backward using the Back button, each instance of the activity is revealed in the order in which they were opened (each with their own UI state). See Tasks and Back Stack official guide for the source of the above content and additional details. Affinity Groups \u00b6 Activities within your application all belong to the same affinity group unless you define one differently using the taskAffinity XML property: < activity android : name = \".activities.MyActivity\" android: taskAffinity = \"com.codepath.myapp\" > You can group activities together in this way to dismiss them all at once: ActivityCompat . finishAffinity ( this ); // equivalent to finish(true); on Android devices API > 4 When using finishAffinity() , you may notice that the activity can still show up in the Most Recents screen. You can use the android:autoRemoveFromRecents flag to be true to remove it, which is normally set to false by default. You can also use finishAndRemoveTask() to accomplish the same effect. <activity android:name= \".MyActivity\" android:autoRemoveFromRecents= \"true\" android:taskAffinity= \"com.codepath.myapp\" /> Usage \u00b6 The behavior described above works automatically and without any special configuration from the developer. The default behavior is to just place all activities started in succession in the same task and in a \"last in, first out\" stack. However, there are cases where this behavior may not suit your needs. In the event that you want to tune or tweak this behavior, we need to understand how to change the behavior of our task stack. For example, we might want to: Have an activity in your application to begin a new task when it is started Want to bring forward an existing instance of an activity (rather than create a new one) Want to clear the history of the back stack at a particular point In order to change this behavior, there are two approaches available: Activity Properties - Setting properties on the activity within the manifest that changes the task stack behavior. Intent Flags - Adding flags to an intent in order to change the task stack behavior for that launch. If you always want an Activity to show a particular kind of behaviour then you will set the property in the <activity> element corresponding to that Activity in the manifest. If you only want to exclude it from recent tasks under certain one-off conditions then you set the flag in the Intent and not the manifest. Configuring Activity Properties \u00b6 The first approach to modifying the task stack is to set properties on the element within the AndroidManifest.xml . Launch Modes \u00b6 To tweak the behavior of the Activity in the manifest, we want to set the launchMode attribute. This looks like: <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" package= \"com.example.todoapp\" \u2026 > <application android:icon= \"@drawable/ic_launcher\" android:label= \"@string/app_name\" ... > <activity android:name= \"com.example.todoapp.TodoActivity\" android:label= \"@string/app_name\" android:launchMode= \"singleTop\" > </activity> </application> </manifest> Notice there we have specified the launchMode as \"singleTop\". There are four different \"launch modes\" to choose from that alter the task stack behaviors for that activity: standard - The default behavior. Creates a new instance of the activity in the task. singleTop - Reuse an activity instance if already at the top of the stack; otherwise create new instance. singleTask - Reuse an activity instance if exists in an existing stack; otherwise create in a new task stack. singleInstance - Same as singleTask but no other activities are ever inserted into the created task stack. See the official guide for stacks for a more detailed explanation. This table may help clarify the different launch modes: Mode Default Instantiation New Task on Launch Allow other activities within Task standard Yes Everytime an intent is created, a new instance is created. Also instances can be member of multiple tasks and more than one instance in a Task. No. Open in the same Task that originated the intent Yes singleTop No Exactly like standard but if the activity is at the top of the Task stack then it uses the existing instance. No. Open in the same Task that originated the intent Yes singleTask No Single instance Yes. Always a Root Task. Yes singleInstance No Single instance Yes. Always a Root Task. Never. Always the only activity in the task It might be useful to understand when various modes might be appropriate in an application. The following provides examples: singleTask - There is only one BrowserActivity at a time and it doesn't become part of tasks that send it intents to open web pages. While it might return to whatever most recently launched it when you hit back it is actually fixed at the bottom of its own task activity stack. singleTop - While there can be multiple instances of the BrowserBookmarksPage if there is already one at the top of the task's activity stack it will be reused. This way you only have to hit back once to return to the browser if the bookmarks activity is started multiple times. singleInstance - Only one AlarmAlert activity at a time and it is always its own task. Anything it might launch (if anything) becomes a part of a separate task stack. Check out the understanding launch modes guide for more detailed examples. Also check out this blog post for another explanation. Configuring No History \u00b6 There are additional properties as well that can be set on an activity. For example, if an activity should not be added to the task stack at all, simply set the noHistory flag within the manifest: <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" package= \"com.example.todoapp\" \u2026 > <application android:icon= \"@drawable/ic_launcher\" android:label= \"@string/app_name\" ... > <activity android:name= \"com.example.todoapp.TodoActivity\" android:label= \"@string/app_name\" android:noHistory= \"true\" > </activity> </application> </manifest> Once this is set, that activity will never be a part of the stack even when launched. You might also want to check out the taskAffinity property as well as the allowTaskReparenting properties for more fine tuned control over the activity's behavior in the task stack. Configuring Intent Flags \u00b6 The other approach to modifying the task stack is to set flags within an intent when starting an Activity. You can alter the task stack behavior by appending various flags when launching an intent. For example, to clear the task stack when starting a new activity, we can do: Intent i = new Intent ( this , SecondActivity . this ); // Add flags into the intent to alter behavior i . intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_TASK | IntentCompat . FLAG_ACTIVITY_CLEAR_TASK ); // Execute as normal startActivity ( i ); The above can be very useful for login activities. The flags launch a new activity such that when the user presses \"back\", the previous activity would not show up. The following other flags are available to be set on the intent: FLAG_ACTIVITY_CLEAR_TASK - Clear any existing tasks on this stack before starting the activity. FLAG_ACTIVITY_NEW_TASK - Start the activity in a new task or reuse an existing task tied to that activity. FLAG_ACTIVITY_SINGLE_TOP - If the activity being started is the same as the current activity, then reuses the existing instance which receives a call to onNewIntent() FLAG_ACTIVITY_CLEAR_TOP - If the activity being started is already running in the current task, delivers us back to the existing instance and clears the stack. There are almost a dozen other flags you can set as well, for example FLAG_ACTIVITY_BROUGHT_TO_FRONT , FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS , and FLAG_ACTIVITY_MULTIPLE_TASK . For a more comprehensive list, check out this article . See the official guide for stacks for a more detailed explanation.","title":"Navigation and Task Stacks"},{"location":"navigation/task-stacks/#navigation-and-task-stacks","text":"","title":"Navigation and Task Stacks"},{"location":"navigation/task-stacks/#introduction","text":"The core of navigation flows in Android apps centers around the Activity and the Intent. In this guide, we are going to review tasks, navigation, and how to manipulate these when navigating between activities. This is typically used in cases where we need to exert more fine-tuned control over the behavior of the task stack which determines the \"history\" of our application. Note: To skip to changing the behavior of the task stack, jump right to the [[Usage|Navigation-and-Task-Stacks#usage]] section of this document.","title":"Introduction"},{"location":"navigation/task-stacks/#conceptual-overview","text":"While the concept of using intents to launch activities should already be familiar to you, let's take a second to explore how launching new activities works and how this navigation is managed. As we navigate around our app (or even between apps), Android is maintaining a task stack which tracks each step in the user's history. A task is a collection of activities that users interact with when performing a certain job. The activities are arranged in a stack (the \"back stack\"), in the order in which each activity is opened. By default, your activities in your app are organized as part of the same task affinity group .","title":"Conceptual Overview"},{"location":"navigation/task-stacks/#understanding-the-task-stack","text":"When an application is launched from the Home Screen, the application comes to the foreground and the \"stack\" for that application becomes active. If no task stack exists for this application (first launch recently), then a new task is created and the \"main\" activity of the app becomes the first (root) item in the stack. Each time an activity is launched in your app, that activity is pushed onto the top of the stack and becomes active. The previous activity remains in the stack but it is stopped. However, despite being stopped the system retains the state of the Activity UI automatically. If the user hits \"back\", the current activity is popped from the top of the stack (and destroyed) and the previous activity resumes with the previous UI state restored. If the user continues to press Back, then each activity in the stack is popped off to reveal the previous one, until the user returns to whichever task was happening before this task stack began.","title":"Understanding the Task Stack"},{"location":"navigation/task-stacks/#task-stacks-everywhere","text":"A \"task\" is a collection of activities stemming from a \"root\" application. This group is cohesive and when the user hits the home screen, the entire \"task\" is moved to the background until the stack is re-activated. While in the background, all the activities in the task are stopped, but the back stack for the task remains intact. If the user were to open another separate application now, that app would have an entirely separate task stack that would come to the foreground. This means that multiple discrete stacks frequently are stored by the system. There might be several task stacks in the background and when the user re-enters the related application, that stack will reappear in the foreground with states restored.","title":"Task Stacks Everywhere"},{"location":"navigation/task-stacks/#multiple-activity-instances","text":"This process of multiple task stacks is just the beginning. The real point of understanding comes from exploring what happens when we launch the same activity multiple times. Because the activities in the back stack are never rearranged, every time an activity is started via an intent, a brand new instance of that activity is created and pushed onto the stack . This means that if you have an activity (say the timeline for twitter), and you launch the timeline activity multiple times using different intents, then multiple instances of that activity will be tracked in the stack. This gets even more complex when you consider you might launch the same Activity from multiple different task stacks. For example, think about how many apps might launch the browser and how many instances of a browser you might have across all task stacks. By default, if the user navigates backward using the Back button, each instance of the activity is revealed in the order in which they were opened (each with their own UI state). See Tasks and Back Stack official guide for the source of the above content and additional details.","title":"Multiple Activity Instances"},{"location":"navigation/task-stacks/#affinity-groups","text":"Activities within your application all belong to the same affinity group unless you define one differently using the taskAffinity XML property: < activity android : name = \".activities.MyActivity\" android: taskAffinity = \"com.codepath.myapp\" > You can group activities together in this way to dismiss them all at once: ActivityCompat . finishAffinity ( this ); // equivalent to finish(true); on Android devices API > 4 When using finishAffinity() , you may notice that the activity can still show up in the Most Recents screen. You can use the android:autoRemoveFromRecents flag to be true to remove it, which is normally set to false by default. You can also use finishAndRemoveTask() to accomplish the same effect. <activity android:name= \".MyActivity\" android:autoRemoveFromRecents= \"true\" android:taskAffinity= \"com.codepath.myapp\" />","title":"Affinity Groups"},{"location":"navigation/task-stacks/#usage","text":"The behavior described above works automatically and without any special configuration from the developer. The default behavior is to just place all activities started in succession in the same task and in a \"last in, first out\" stack. However, there are cases where this behavior may not suit your needs. In the event that you want to tune or tweak this behavior, we need to understand how to change the behavior of our task stack. For example, we might want to: Have an activity in your application to begin a new task when it is started Want to bring forward an existing instance of an activity (rather than create a new one) Want to clear the history of the back stack at a particular point In order to change this behavior, there are two approaches available: Activity Properties - Setting properties on the activity within the manifest that changes the task stack behavior. Intent Flags - Adding flags to an intent in order to change the task stack behavior for that launch. If you always want an Activity to show a particular kind of behaviour then you will set the property in the <activity> element corresponding to that Activity in the manifest. If you only want to exclude it from recent tasks under certain one-off conditions then you set the flag in the Intent and not the manifest.","title":"Usage"},{"location":"navigation/task-stacks/#configuring-activity-properties","text":"The first approach to modifying the task stack is to set properties on the element within the AndroidManifest.xml .","title":"Configuring Activity Properties"},{"location":"navigation/task-stacks/#launch-modes","text":"To tweak the behavior of the Activity in the manifest, we want to set the launchMode attribute. This looks like: <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" package= \"com.example.todoapp\" \u2026 > <application android:icon= \"@drawable/ic_launcher\" android:label= \"@string/app_name\" ... > <activity android:name= \"com.example.todoapp.TodoActivity\" android:label= \"@string/app_name\" android:launchMode= \"singleTop\" > </activity> </application> </manifest> Notice there we have specified the launchMode as \"singleTop\". There are four different \"launch modes\" to choose from that alter the task stack behaviors for that activity: standard - The default behavior. Creates a new instance of the activity in the task. singleTop - Reuse an activity instance if already at the top of the stack; otherwise create new instance. singleTask - Reuse an activity instance if exists in an existing stack; otherwise create in a new task stack. singleInstance - Same as singleTask but no other activities are ever inserted into the created task stack. See the official guide for stacks for a more detailed explanation. This table may help clarify the different launch modes: Mode Default Instantiation New Task on Launch Allow other activities within Task standard Yes Everytime an intent is created, a new instance is created. Also instances can be member of multiple tasks and more than one instance in a Task. No. Open in the same Task that originated the intent Yes singleTop No Exactly like standard but if the activity is at the top of the Task stack then it uses the existing instance. No. Open in the same Task that originated the intent Yes singleTask No Single instance Yes. Always a Root Task. Yes singleInstance No Single instance Yes. Always a Root Task. Never. Always the only activity in the task It might be useful to understand when various modes might be appropriate in an application. The following provides examples: singleTask - There is only one BrowserActivity at a time and it doesn't become part of tasks that send it intents to open web pages. While it might return to whatever most recently launched it when you hit back it is actually fixed at the bottom of its own task activity stack. singleTop - While there can be multiple instances of the BrowserBookmarksPage if there is already one at the top of the task's activity stack it will be reused. This way you only have to hit back once to return to the browser if the bookmarks activity is started multiple times. singleInstance - Only one AlarmAlert activity at a time and it is always its own task. Anything it might launch (if anything) becomes a part of a separate task stack. Check out the understanding launch modes guide for more detailed examples. Also check out this blog post for another explanation.","title":"Launch Modes"},{"location":"navigation/task-stacks/#configuring-no-history","text":"There are additional properties as well that can be set on an activity. For example, if an activity should not be added to the task stack at all, simply set the noHistory flag within the manifest: <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" package= \"com.example.todoapp\" \u2026 > <application android:icon= \"@drawable/ic_launcher\" android:label= \"@string/app_name\" ... > <activity android:name= \"com.example.todoapp.TodoActivity\" android:label= \"@string/app_name\" android:noHistory= \"true\" > </activity> </application> </manifest> Once this is set, that activity will never be a part of the stack even when launched. You might also want to check out the taskAffinity property as well as the allowTaskReparenting properties for more fine tuned control over the activity's behavior in the task stack.","title":"Configuring No History"},{"location":"navigation/task-stacks/#configuring-intent-flags","text":"The other approach to modifying the task stack is to set flags within an intent when starting an Activity. You can alter the task stack behavior by appending various flags when launching an intent. For example, to clear the task stack when starting a new activity, we can do: Intent i = new Intent ( this , SecondActivity . this ); // Add flags into the intent to alter behavior i . intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_TASK | IntentCompat . FLAG_ACTIVITY_CLEAR_TASK ); // Execute as normal startActivity ( i ); The above can be very useful for login activities. The flags launch a new activity such that when the user presses \"back\", the previous activity would not show up. The following other flags are available to be set on the intent: FLAG_ACTIVITY_CLEAR_TASK - Clear any existing tasks on this stack before starting the activity. FLAG_ACTIVITY_NEW_TASK - Start the activity in a new task or reuse an existing task tied to that activity. FLAG_ACTIVITY_SINGLE_TOP - If the activity being started is the same as the current activity, then reuses the existing instance which receives a call to onNewIntent() FLAG_ACTIVITY_CLEAR_TOP - If the activity being started is already running in the current task, delivers us back to the existing instance and clears the stack. There are almost a dozen other flags you can set as well, for example FLAG_ACTIVITY_BROUGHT_TO_FRONT , FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS , and FLAG_ACTIVITY_MULTIPLE_TASK . For a more comprehensive list, check out this article . See the official guide for stacks for a more detailed explanation.","title":"Configuring Intent Flags"},{"location":"persistence/content-providers/","text":"","title":"Content providers"},{"location":"persistence/loaders/","text":"","title":"Loaders"},{"location":"persistence/shared-preferences/","text":"","title":"Shared preferences"},{"location":"persistence/sqlite/","text":"","title":"Sqlite"}]}