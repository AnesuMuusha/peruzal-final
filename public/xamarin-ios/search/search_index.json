{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Xamarin.iOS Guide Welcome These guides are designed to support our instructor led courses for the iOS 200 iOS Mobile App Development Training with Xamarin and the XAM300 Developing Cross Platform Mobile Applications with Xamarin.Android, Xamarin.iOS and Xamarin Forms Target Audience Developers The guides are targeted for experience C# developers with more than 2 years solid programming experience. A good command of the latest C# features is assumed. What is Xamarin.iOS Xamarin.iOS allows developers to create native iOS applications using the same UI controls that are available in Objective-C and Xcode, except with the flexibility and elegance of a modern language (C#), the power of the .NET Base Class Library (BCL), and two first-class IDEs - Visual Studio for Mac and Visual Studio for Windows. Required components To build for Xamarin.iOS, the following are required: the latest iOS SDK the latest version of Xcode macOS High Sierra (10.14) and above The latest version of Xcode can be downloaded from the Mac App Store.","title":"Introduction"},{"location":"#xamarinios-guide","text":"","title":"Xamarin.iOS Guide"},{"location":"#welcome","text":"These guides are designed to support our instructor led courses for the iOS 200 iOS Mobile App Development Training with Xamarin and the XAM300 Developing Cross Platform Mobile Applications with Xamarin.Android, Xamarin.iOS and Xamarin Forms","title":"Welcome"},{"location":"#target-audience","text":"Developers The guides are targeted for experience C# developers with more than 2 years solid programming experience. A good command of the latest C# features is assumed.","title":"Target Audience"},{"location":"#what-is-xamarinios","text":"Xamarin.iOS allows developers to create native iOS applications using the same UI controls that are available in Objective-C and Xcode, except with the flexibility and elegance of a modern language (C#), the power of the .NET Base Class Library (BCL), and two first-class IDEs - Visual Studio for Mac and Visual Studio for Windows.","title":"What is Xamarin.iOS"},{"location":"#required-components","text":"To build for Xamarin.iOS, the following are required: the latest iOS SDK the latest version of Xcode macOS High Sierra (10.14) and above The latest version of Xcode can be downloaded from the Mac App Store.","title":"Required components"},{"location":"activity-indicator-view/","text":"Activity Indicator View A view that shows that a task is in progress. It is an instance of the UIActivityIndictorView . It has two method method used to control the animation, StartAnimating() and StopAnimating() ; Purpose Activity Indicators should be shown when your app is running a long process, but you don't know the exact length of time the task will require. Configuring through the story board Add the activity indicator view from the Toolbox. You can change the Behavior: Animating: The view will automatically start to animate when its visible Hides When Stop: The view will hide when you call its stop by calling the StopAnimating() method Start and stopping the animation The following shows how you start and stop the animation from code: 1 2 3 4 5 6 7 8 9 10 partial void HandleLogin ( UIButton sender ) { // Start the animation loadingView . StartAnimating (); // Perform some long operation here // Stop the animation // Will also hide when \"Hides When Stop is true\" loadingView . StopAnimating (); }","title":"Activity Indicator View"},{"location":"activity-indicator-view/#activity-indicator-view","text":"A view that shows that a task is in progress. It is an instance of the UIActivityIndictorView . It has two method method used to control the animation, StartAnimating() and StopAnimating() ;","title":"Activity Indicator View"},{"location":"activity-indicator-view/#purpose","text":"Activity Indicators should be shown when your app is running a long process, but you don't know the exact length of time the task will require.","title":"Purpose"},{"location":"activity-indicator-view/#configuring-through-the-story-board","text":"Add the activity indicator view from the Toolbox. You can change the Behavior: Animating: The view will automatically start to animate when its visible Hides When Stop: The view will hide when you call its stop by calling the StopAnimating() method","title":"Configuring through the story board"},{"location":"activity-indicator-view/#start-and-stopping-the-animation","text":"The following shows how you start and stop the animation from code: 1 2 3 4 5 6 7 8 9 10 partial void HandleLogin ( UIButton sender ) { // Start the animation loadingView . StartAnimating (); // Perform some long operation here // Stop the animation // Will also hide when \"Hides When Stop is true\" loadingView . StopAnimating (); }","title":"Start and stopping the animation"},{"location":"alerts/","text":"Displaying Alerts Alerts are used to present important information to the user or prompt the user about an important choice. Alerts and action sheets interrupt your app\u2019s normal flow to display a message to the user. Using alerts Because alerts and action sheets are an interruption, use them sparingly and only when absolutely needed. Display an alert You can present different types of alerts. To display an alert you need to do the following: Create an an object of type UIAlertController and choose the preferred style Actions actions of type UIAlertController Present the controller Create alert view controller Create an object that is an instance of the UIAlertController and choose the preferred style. There are two styles: UIAlertControllerStyle.Alert - Creates an alert dialog that appears in the middle of the screen UIAlertControllerStyle.ActionSheet - Creates an action sheet that appears from the bottom with the different options The following code creates an alert style with a tile and a message: 1 2 3 var alertController = UIAlertController . Create ( \"Terms and Conditions\" , \"Click Agree to accept the terms and conditions.\" , UIAlertControllerStyle . Alert ); Create the actions The different button options are created as actions. The following code creates two actions, a default and cancel action. The default action 1 2 3 4 var defaultAction = UIAlertAction . Create ( \"Agree\" , UIAlertActionStyle . Default , ( UIAlertAction action ) => { // Perform action action on default action }); and the cancel option: 1 2 3 4 var cancelAction = UIAlertAction . Create ( \"Disagree\" , UIAlertActionStyle . Cancel , ( UIAlertAction obj ) => { // Perform action for cancel }); Add the actions to the alert controller You need to add the actions to the alert controller object as the following code shows: 1 2 3 // Add actions alertController . AddAction ( defaultAction ); alertController . AddAction ( cancelAction ); Present the alert Finally we can present the alert as follows: 1 PresentViewController ( alertController , true , null ); The above code will show the following figure when run: Action Sheet An action sheet is a specific style of alert that appears in response to a control or action, and presents a set of two or more choices related to the current context. Use an action sheet to let people initiate tasks, or to request confirmation before performing a potentially destructive operation. On smaller screens, an action sheet slides up from the bottom of the screen. On larger screens, an action sheet appears all at once as a popover. You can change the code above by changing the style to ActionSheet . You will also need to add more actions. Dsiplaying action sheet on iPad On devices with a larger screen, the action sheet is displayed as a pop over. To display the action as a pop over, you need to set the view for which the pop over will anchor to when displayed. 1 2 3 4 5 6 7 8 9 var presentationPopOver = alertController . PopoverPresentationController ; // Check if the action sheet is displayed ona larger screen if ( presentationPopOver != null ) { // Set the cource view presentationPopOver . SourceView = sender ; // Choose the direction to anchor presentationPopOver . PermittedArrowDirections = UIPopoverArrowDirection . Down ; } The action sheet will display as the figure below on the ipad:","title":"Displaying Alerts"},{"location":"alerts/#displaying-alerts","text":"Alerts are used to present important information to the user or prompt the user about an important choice. Alerts and action sheets interrupt your app\u2019s normal flow to display a message to the user. Using alerts Because alerts and action sheets are an interruption, use them sparingly and only when absolutely needed.","title":"Displaying Alerts"},{"location":"alerts/#display-an-alert","text":"You can present different types of alerts. To display an alert you need to do the following: Create an an object of type UIAlertController and choose the preferred style Actions actions of type UIAlertController Present the controller","title":"Display an alert"},{"location":"alerts/#create-alert-view-controller","text":"Create an object that is an instance of the UIAlertController and choose the preferred style. There are two styles: UIAlertControllerStyle.Alert - Creates an alert dialog that appears in the middle of the screen UIAlertControllerStyle.ActionSheet - Creates an action sheet that appears from the bottom with the different options The following code creates an alert style with a tile and a message: 1 2 3 var alertController = UIAlertController . Create ( \"Terms and Conditions\" , \"Click Agree to accept the terms and conditions.\" , UIAlertControllerStyle . Alert );","title":"Create alert view controller"},{"location":"alerts/#create-the-actions","text":"The different button options are created as actions. The following code creates two actions, a default and cancel action. The default action 1 2 3 4 var defaultAction = UIAlertAction . Create ( \"Agree\" , UIAlertActionStyle . Default , ( UIAlertAction action ) => { // Perform action action on default action }); and the cancel option: 1 2 3 4 var cancelAction = UIAlertAction . Create ( \"Disagree\" , UIAlertActionStyle . Cancel , ( UIAlertAction obj ) => { // Perform action for cancel });","title":"Create the actions"},{"location":"alerts/#add-the-actions-to-the-alert-controller","text":"You need to add the actions to the alert controller object as the following code shows: 1 2 3 // Add actions alertController . AddAction ( defaultAction ); alertController . AddAction ( cancelAction );","title":"Add the actions to the alert controller"},{"location":"alerts/#present-the-alert","text":"Finally we can present the alert as follows: 1 PresentViewController ( alertController , true , null ); The above code will show the following figure when run:","title":"Present the alert"},{"location":"alerts/#action-sheet","text":"An action sheet is a specific style of alert that appears in response to a control or action, and presents a set of two or more choices related to the current context. Use an action sheet to let people initiate tasks, or to request confirmation before performing a potentially destructive operation. On smaller screens, an action sheet slides up from the bottom of the screen. On larger screens, an action sheet appears all at once as a popover. You can change the code above by changing the style to ActionSheet . You will also need to add more actions.","title":"Action Sheet"},{"location":"alerts/#dsiplaying-action-sheet-on-ipad","text":"On devices with a larger screen, the action sheet is displayed as a pop over. To display the action as a pop over, you need to set the view for which the pop over will anchor to when displayed. 1 2 3 4 5 6 7 8 9 var presentationPopOver = alertController . PopoverPresentationController ; // Check if the action sheet is displayed ona larger screen if ( presentationPopOver != null ) { // Set the cource view presentationPopOver . SourceView = sender ; // Choose the direction to anchor presentationPopOver . PermittedArrowDirections = UIPopoverArrowDirection . Down ; } The action sheet will display as the figure below on the ipad:","title":"Dsiplaying action sheet on iPad"},{"location":"animations-and-gestures/","text":"Animations and Gestures iOS was built from the ground up to support animations. It is absolutely required to maintain the illusion of a touch-based interface. Simple Animation with UIKit The UIView class provides an Animate() method to perform simple animations on views. Move animation Most of the time, you will perform animation by working directly with UIKit . You can animate any property of the view, e.g the following changes the position of the view change its frame: 1 2 3 4 UIView . Animate ( 0.5 , () => { logoImageView . Frame = new CGRect ( View . Center . X , View . Center . Y , logoImageView . Frame . Width , logoImageView . Frame . Height ); }); Fade in animation To fade in, we can change the alpha of the view as follows: 1 2 3 4 5 logoImageView . Alpha = 0 ; UIView . Animate ( 0.5 , () => { logoImageView . Alpha = 1 ; }); Scale animation We can animate the Transform property of the view by scaling it up or down as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 // Scale by 2 var scaleTransform = CGAffineTransform . MakeScale ( 2 , 2 ); var originalTransform = CGAffineTransform . MakeScale ( 1 , 1 ); UIView . Animate ( 0.5 , () => { logoImageView . Transform = scaleTransform ; }, () => { logoImageView . Transform = originalTransform ; }); You can find more animation recipes here . Gestures iOS supports several gestures. You can add the gestures from the Toolbox.","title":"Animations and Gestures"},{"location":"animations-and-gestures/#animations-and-gestures","text":"iOS was built from the ground up to support animations. It is absolutely required to maintain the illusion of a touch-based interface.","title":"Animations and Gestures"},{"location":"animations-and-gestures/#simple-animation-with-uikit","text":"The UIView class provides an Animate() method to perform simple animations on views.","title":"Simple Animation with UIKit"},{"location":"animations-and-gestures/#move-animation","text":"Most of the time, you will perform animation by working directly with UIKit . You can animate any property of the view, e.g the following changes the position of the view change its frame: 1 2 3 4 UIView . Animate ( 0.5 , () => { logoImageView . Frame = new CGRect ( View . Center . X , View . Center . Y , logoImageView . Frame . Width , logoImageView . Frame . Height ); });","title":"Move animation"},{"location":"animations-and-gestures/#fade-in-animation","text":"To fade in, we can change the alpha of the view as follows: 1 2 3 4 5 logoImageView . Alpha = 0 ; UIView . Animate ( 0.5 , () => { logoImageView . Alpha = 1 ; });","title":"Fade in animation"},{"location":"animations-and-gestures/#scale-animation","text":"We can animate the Transform property of the view by scaling it up or down as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 // Scale by 2 var scaleTransform = CGAffineTransform . MakeScale ( 2 , 2 ); var originalTransform = CGAffineTransform . MakeScale ( 1 , 1 ); UIView . Animate ( 0.5 , () => { logoImageView . Transform = scaleTransform ; }, () => { logoImageView . Transform = originalTransform ; }); You can find more animation recipes here .","title":"Scale animation"},{"location":"animations-and-gestures/#gestures","text":"iOS supports several gestures. You can add the gestures from the Toolbox.","title":"Gestures"},{"location":"app-store-deployment/","text":"","title":"App store deployment"},{"location":"auto-layout/","text":"AutoLayout AutoLayout is a constraint based layout system that requires two things, Size and Position , in order to correctly position views. Size Classes iOS uses Size Classes for applying AutoLayout constraints to be applied to the different devices. Using Size Classes you could define your views so that you could hide certain view or reposition them. AutoLayout with XCode In XCode you have two buttons for applying the size and position of views, Pin and Align . Resolving AutoLayout Issues If the contraints are not satisfied, XCode will highlight the issues, and show either a red border around the view or a yello dotted line. To resolve the issues, you have several options : Update Frames : you think the red dotted lines are correct. Clicking this will move your layer to that position. Update Constraints : you think that the red dotted lines are incorrect. Clicking this will change the constraints. Add Missing Constraint : whatever is missing in term of position or size will be added. AutoLayout in Visual Studio In Visual Studio, you switch the UI designer to AutoLayout mode by clicking the Constraint Editing Mode button. Adding constraints To add constraints to a view, switch to constraint editing mode, then use either the sizing or space constraints to add the constraint. You will notice dashed green lines as you get closer to the other views or the sides of the view controller. When all constraints are satisfied, you will notice solid blue lines.","title":"Auto Layout"},{"location":"auto-layout/#autolayout","text":"AutoLayout is a constraint based layout system that requires two things, Size and Position , in order to correctly position views.","title":"AutoLayout"},{"location":"auto-layout/#size-classes","text":"iOS uses Size Classes for applying AutoLayout constraints to be applied to the different devices. Using Size Classes you could define your views so that you could hide certain view or reposition them.","title":"Size Classes"},{"location":"auto-layout/#autolayout-with-xcode","text":"In XCode you have two buttons for applying the size and position of views, Pin and Align .","title":"AutoLayout with XCode"},{"location":"auto-layout/#resolving-autolayout-issues","text":"If the contraints are not satisfied, XCode will highlight the issues, and show either a red border around the view or a yello dotted line. To resolve the issues, you have several options : Update Frames : you think the red dotted lines are correct. Clicking this will move your layer to that position. Update Constraints : you think that the red dotted lines are incorrect. Clicking this will change the constraints. Add Missing Constraint : whatever is missing in term of position or size will be added.","title":"Resolving AutoLayout Issues"},{"location":"auto-layout/#autolayout-in-visual-studio","text":"In Visual Studio, you switch the UI designer to AutoLayout mode by clicking the Constraint Editing Mode button.","title":"AutoLayout in Visual Studio"},{"location":"auto-layout/#adding-constraints","text":"To add constraints to a view, switch to constraint editing mode, then use either the sizing or space constraints to add the constraint. You will notice dashed green lines as you get closer to the other views or the sides of the view controller. When all constraints are satisfied, you will notice solid blue lines.","title":"Adding constraints"},{"location":"button/","text":"Button Buttons initiate app-specific actions, have customizable backgrounds, and can include a title or an icon. The system provides a number of predefined button styles for most use cases. You can also design fully custom buttons. The button derives from the UIButton class. System Buttons System buttons often appear in navigation bars and toolbars, but may be used anywhere. System : A general-purpose button DetailDisclosure : Indicates the availability of detailed information, usually about a specific item in a table InfoDark : Indicates the availability of configuration information; dark-colored InfoLight : Indicates the availability of configuration information; light-colored AddContact : Indicates that a contact can be added Custom : Customizable button Configuring the button Button events To handle the button click event, use the Touch Up Inside event. The event can be added from the Properties window or in code. Add event in code Select the button from interface builder From the Properties window, under the Identity section, assign a Name to the button From the backing ViewController file wire up the event as follows 1 2 3 4 5 6 7 public override void ViewDidLoad () { base . ViewDidLoad (); btnLogin . TouchUpInside += ( sender , e ) => { // Handle the button click here }; } Add event from interface builder You can also add the event from within interface builder. Select the button from interface builder Open the Properties window Choose the Events section Add the name of the method to handle the event Visual Studio code editor will open and let you choose where to place the event handler method Custom button types You can create custom button types by using images. Set the Image property from interface builder. You can also use code ot change the button image as below: 1 btnSignUp . SetImage ( UIImage . FromBundle ( \"logo\" ), UIControlState . Normal ); Using the UIImage.FromBundle finds the iamge already defined in the asset catalog.","title":"Button"},{"location":"button/#button","text":"Buttons initiate app-specific actions, have customizable backgrounds, and can include a title or an icon. The system provides a number of predefined button styles for most use cases. You can also design fully custom buttons. The button derives from the UIButton class.","title":"Button"},{"location":"button/#system-buttons","text":"System buttons often appear in navigation bars and toolbars, but may be used anywhere. System : A general-purpose button DetailDisclosure : Indicates the availability of detailed information, usually about a specific item in a table InfoDark : Indicates the availability of configuration information; dark-colored InfoLight : Indicates the availability of configuration information; light-colored AddContact : Indicates that a contact can be added Custom : Customizable button","title":"System Buttons"},{"location":"button/#configuring-the-button","text":"","title":"Configuring the button"},{"location":"button/#button-events","text":"To handle the button click event, use the Touch Up Inside event. The event can be added from the Properties window or in code.","title":"Button events"},{"location":"button/#add-event-in-code","text":"Select the button from interface builder From the Properties window, under the Identity section, assign a Name to the button From the backing ViewController file wire up the event as follows 1 2 3 4 5 6 7 public override void ViewDidLoad () { base . ViewDidLoad (); btnLogin . TouchUpInside += ( sender , e ) => { // Handle the button click here }; }","title":"Add event in code"},{"location":"button/#add-event-from-interface-builder","text":"You can also add the event from within interface builder. Select the button from interface builder Open the Properties window Choose the Events section Add the name of the method to handle the event Visual Studio code editor will open and let you choose where to place the event handler method","title":"Add event from interface builder"},{"location":"button/#custom-button-types","text":"You can create custom button types by using images. Set the Image property from interface builder. You can also use code ot change the button image as below: 1 btnSignUp . SetImage ( UIImage . FromBundle ( \"logo\" ), UIControlState . Normal ); Using the UIImage.FromBundle finds the iamge already defined in the asset catalog.","title":"Custom button types"},{"location":"collection-view/","text":"","title":"Collection view"},{"location":"common-views/","text":"iOS Views In this section we discuss about the various UI controls used to build iOS user interfaces. Let's start about discussing about storyboards. Storyboard A Storyboard is a file that contains the visual designs of our application\u2019s screens as well as the transitions and relationships between the screens. The storyboard files end in the .storyboard extensions. What is the difference between xib and storyboard files? In the beginning, to design iOS screens, you had to create one file for each screen. These files were called xib files. In later versions of iOS you could design multiple screens in one place, this file is called the storyboard . Scence The combination of a ViewController and its views is called a Scene in the storyboard. You will have multiple Scenes for each of the screens for your app. When a new Single View Application project is created from a template, Visual Studio for Mac automatically generates a Storyboard file called Main.storyboard and populates it with a single Scene . ViewController The view controller is an instance of the UIViewController class that contains the backing code. You wire the event and all the logic in the viewcontroller. MVC iOS uses the MVC design pattern. The ViewController combines the View and Controller into one object called the ViewController. View Each ViewController have a view it controls. The View is an instance of the UIView class that defines an area of the screen and provides interfaces for working with the content in that area. The default View is a single Root View that fills the whole device screen. The outline of all the elements in the scene can be viewed by examining it in the Document Outline pad: Segue A segue (pronounced seg-way ) is the transition from one scene to the next. Its represented with an arrow on the storyboard. They are different types of segues and we will discuss them in later chapters. Window The AppDelegate class manages the application Window . The Window is a single instance of the UIWindow class that serves as a container for the user interface. By default, an application gets only one Window onto which to load its content, and the Window is attached to a Screen (single UIScreen instance) that provides the bounding rectangle matching the dimensions of the physical device screen. The figure below shows the relationships between the different components: These additional Views are inside the Root View are called Subviews . Common Views Let's now look at the different sub views we use to create the UI. We are going to look at the following views: Label TextField TextView Button Slider ImageView ActionSheet Segmented Button Switch Stepper Date Picker Alert View Web View","title":"Views"},{"location":"common-views/#ios-views","text":"In this section we discuss about the various UI controls used to build iOS user interfaces. Let's start about discussing about storyboards.","title":"iOS Views"},{"location":"common-views/#storyboard","text":"A Storyboard is a file that contains the visual designs of our application\u2019s screens as well as the transitions and relationships between the screens. The storyboard files end in the .storyboard extensions. What is the difference between xib and storyboard files? In the beginning, to design iOS screens, you had to create one file for each screen. These files were called xib files. In later versions of iOS you could design multiple screens in one place, this file is called the storyboard .","title":"Storyboard"},{"location":"common-views/#scence","text":"The combination of a ViewController and its views is called a Scene in the storyboard. You will have multiple Scenes for each of the screens for your app. When a new Single View Application project is created from a template, Visual Studio for Mac automatically generates a Storyboard file called Main.storyboard and populates it with a single Scene .","title":"Scence"},{"location":"common-views/#viewcontroller","text":"The view controller is an instance of the UIViewController class that contains the backing code. You wire the event and all the logic in the viewcontroller. MVC iOS uses the MVC design pattern. The ViewController combines the View and Controller into one object called the ViewController.","title":"ViewController"},{"location":"common-views/#view","text":"Each ViewController have a view it controls. The View is an instance of the UIView class that defines an area of the screen and provides interfaces for working with the content in that area. The default View is a single Root View that fills the whole device screen. The outline of all the elements in the scene can be viewed by examining it in the Document Outline pad:","title":"View"},{"location":"common-views/#segue","text":"A segue (pronounced seg-way ) is the transition from one scene to the next. Its represented with an arrow on the storyboard. They are different types of segues and we will discuss them in later chapters.","title":"Segue"},{"location":"common-views/#window","text":"The AppDelegate class manages the application Window . The Window is a single instance of the UIWindow class that serves as a container for the user interface. By default, an application gets only one Window onto which to load its content, and the Window is attached to a Screen (single UIScreen instance) that provides the bounding rectangle matching the dimensions of the physical device screen. The figure below shows the relationships between the different components: These additional Views are inside the Root View are called Subviews .","title":"Window"},{"location":"common-views/#common-views","text":"Let's now look at the different sub views we use to create the UI. We are going to look at the following views: Label TextField TextView Button Slider ImageView ActionSheet Segmented Button Switch Stepper Date Picker Alert View Web View","title":"Common Views"},{"location":"date-picker/","text":"Pickers and Date Picker Picker View A picker view displays one or more wheels that the user manipulates to select items. Each wheel\u2014known as a component\u2014has a series of indexed rows representing the selectable items. Users select items by rotating the wheels to the desired values, which align with a selection indicator. The picker view is an instance of the UIPickerView . Users select items by rotating the wheels to the desired values, which align with a selection indicator. Date Picker The UIDatePicker class uses a custom subclass of UIPickerView to display dates and times.","title":"Date Picker"},{"location":"date-picker/#pickers-and-date-picker","text":"","title":"Pickers and Date Picker"},{"location":"date-picker/#picker-view","text":"A picker view displays one or more wheels that the user manipulates to select items. Each wheel\u2014known as a component\u2014has a series of indexed rows representing the selectable items. Users select items by rotating the wheels to the desired values, which align with a selection indicator. The picker view is an instance of the UIPickerView . Users select items by rotating the wheels to the desired values, which align with a selection indicator.","title":"Picker View"},{"location":"date-picker/#date-picker","text":"The UIDatePicker class uses a custom subclass of UIPickerView to display dates and times.","title":"Date Picker"},{"location":"getting-started/","text":"Setting up Development Environment You can develop with Xamarin.iOS from Windows or a Mac. You need access to a Mac from Windows Although you can develop iOS applications from Windows, you will need access to a Mac running XCode to build the application. Install on a Mac To create iOS app you will need: XCode Xamarin.iOS Installing XCode XCode can be installed from the Mac App Store. Search for XCode, install the latest one. Install Visual Studio You will need to setup Xamarin.iOS during the Visual Studio installation. Download Visual Studio and run the setup, make sure to select Xamarin.iOS during the setup. For a step by step installation check out the Microsoft documentation . Install on Windows There's nothing to install on Windows as you will access everything from the Mac. Visual Studio will make a connection to a Mac through SSH, you can use a mac machine on the local network or use a remote one e.g Mac In Cloud . Pair Windows to Mac You will need to pair your Windows machine to a Mac. Enable remote connection on the Mac Connect to the Mac from Visual Studio Enable remote connection To set up the Mac build host, first enable remote login: On the Mac, open System Preferences (Click the Apple logo at the top left corner) and go to the Sharing pane. Check Remote Login in the Service list. Make sure that it is configured to allow access for All users , or that your Mac username or group is included in the list of allowed users. Connect from Visual Studio Now that remote login is enabled, connect Visual Studio 2019 to the Mac. In Visual Studio 2019, open an existing iOS project or create a new one by choosing File > New > Project and then selecting an iOS project template. Open the Pair to Mac dialog. The Pair to Mac dialog displays a list of all previously-connected and currently-available Mac build hosts: Connect to the Mac and enter your username and password when prompted. If you have successfully paired to a Mac build host, you are ready to build Xamarin.iOS apps in Visual Studio 2019.","title":"Getting Started"},{"location":"getting-started/#setting-up-development-environment","text":"You can develop with Xamarin.iOS from Windows or a Mac. You need access to a Mac from Windows Although you can develop iOS applications from Windows, you will need access to a Mac running XCode to build the application.","title":"Setting up Development Environment"},{"location":"getting-started/#install-on-a-mac","text":"To create iOS app you will need: XCode Xamarin.iOS","title":"Install on a Mac"},{"location":"getting-started/#installing-xcode","text":"XCode can be installed from the Mac App Store. Search for XCode, install the latest one.","title":"Installing XCode"},{"location":"getting-started/#install-visual-studio","text":"You will need to setup Xamarin.iOS during the Visual Studio installation. Download Visual Studio and run the setup, make sure to select Xamarin.iOS during the setup. For a step by step installation check out the Microsoft documentation .","title":"Install Visual Studio"},{"location":"getting-started/#install-on-windows","text":"There's nothing to install on Windows as you will access everything from the Mac. Visual Studio will make a connection to a Mac through SSH, you can use a mac machine on the local network or use a remote one e.g Mac In Cloud .","title":"Install on Windows"},{"location":"getting-started/#pair-windows-to-mac","text":"You will need to pair your Windows machine to a Mac. Enable remote connection on the Mac Connect to the Mac from Visual Studio","title":"Pair Windows to Mac"},{"location":"getting-started/#enable-remote-connection","text":"To set up the Mac build host, first enable remote login: On the Mac, open System Preferences (Click the Apple logo at the top left corner) and go to the Sharing pane. Check Remote Login in the Service list. Make sure that it is configured to allow access for All users , or that your Mac username or group is included in the list of allowed users.","title":"Enable remote connection"},{"location":"getting-started/#connect-from-visual-studio","text":"Now that remote login is enabled, connect Visual Studio 2019 to the Mac. In Visual Studio 2019, open an existing iOS project or create a new one by choosing File > New > Project and then selecting an iOS project template. Open the Pair to Mac dialog. The Pair to Mac dialog displays a list of all previously-connected and currently-available Mac build hosts: Connect to the Mac and enter your username and password when prompted. If you have successfully paired to a Mac build host, you are ready to build Xamarin.iOS apps in Visual Studio 2019.","title":"Connect from Visual Studio"},{"location":"hello-xamarin-ios/","text":"Creating your first Xamarin.iOS project To make sure you development environment is properly setup, we are going to create the traditional Hello World app for iOS. Create a new project from template Using the template, choose iOS and then select the Single View App template. From the figure above: Choose iOS -> App Select the S ingle View App Templates Visual Studio provides various starter templates. In development your app, you can select other templates based on your app requirements. Configure project App Name : This is the name of your app Organization Identifier : Is used to created a unique name for you app on the App Store. Each app should have a unique name. You can use the reverse DNS of your organization since its guaranteed to be unqiue. Team : You can sign in if you have an Apple Developer account. Visual Studio will automatically manage the certificates for you. 4: Devices : The devices to target with your app Target : The iOS versions the app should run on. Choose a lower version to target older iOS versions. Exploring the project Once the project is created, you should have the project as the figure below. Run the app By default, Visual Studio will select the latest iPhone emulator, you can change which emulator to run your app on. Click the Play button to run the app on the emulator. No view displayed Unfortunately the default template for Visual Studio 2019 on a Mac does not contain any views, so when you run, you will see a blank white screen. Adding views We are going to add a label using the Storyboard. You create your UI in iOS using storyboards. Open the Main.storyboard From the Toolbox drag the Label Use the guides and align the Label at the center Add the text \"Hello World\" Resize the label Align the text using the Properties inspector window Run again, and you should see the emulator with the Hello World text displayed on the center Exploring the project On the left is the solution Pad, which contains the directory structure and all the files associated with the solution: The items in the project include: References - Contains the assemblies required to build and run the application. Packages - The packages directory contains ready-made NuGet packages. Assets.xcassets - The asset catalog contains image file for the different resolutions. Resources - The resources folder stores other media. Main.cs \u2013 This contains the main entry point of the application. To start the application, the name of the main application class, the AppDelegate, is passed in. AppDelegate.cs \u2013 This file contains the main application class and is responsible for creating the Window, building the user interface, and listening to events from the operating system. Main.storyboard - The Storyboard contains the visual design of the application\u2019s user interface. Storyboard files open in a graphical editor called the iOS Designer. LaunchScreen.storyboard - The storyboard used to create the splash screen. This is automatically displayed when the app starts. ViewController.cs \u2013 The view controller powers the screen (View) that a user sees and touches. The view controller is responsible for handling interactions between the user and the View. ViewController.designer.cs \u2013 The designer.cs is an auto-generated file that serves as the glue between controls in the View and their code representations in the view controller. Info.plist \u2013 The Info.plist is where application properties such as the application name, icons, launch images, and more are set. Entitlements.plist - The entitlements property list lets us specify application capabilities (also called App Store Technologies) such as iCloud, PassKit, and more. The figure below shows the Assets.xcassets showing the AppIcon with the different images for the different devices. The figure below show the Visual Studio editor with the various window panes open: Solution pane: Show the files in th eproject Main editor area : Shows the code editor or the storyboard Toolbox : You drag the various controls from here onto the storyboard Properties pane : used to change the properties of the views on the storyboard The controls used to switch the editor to between edit mode and constraints mode. Constraints are used to position the views correctly on the different device resolutions. Application fundamentals Let's explore how an iOS application is loaded. The entry point into an iOS application is defined in Main.cs in the Main() method 1 2 3 4 5 6 7 8 9 10 public class Application { // This is the main entry point of the application. static void Main ( string [] args ) { // if you want to use a different Application Delegate class from \"AppDelegate\" // you can specify it here. UIApplication . Main ( args , null , \"AppDelegate\" ); } } The Main.cs uses a class that derives from the UIApplicationDelegate to handle system wide events. The Main.cs hands over control to the AppDelegate class The ApplicationDelegate implements various methods to handle system wide events. In the FinishedLaunching it loads the storyboard file. The main story board file is defined in the Info.plist file. The code below shows the UIApplicationDelegate derived class that loads the story board 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // The UIApplicationDelegate for the application. This class is responsible for launching the // User Interface of the application, as well as listening (and optionally responding) to application events from iOS. [Register(\"AppDelegate\")] public class AppDelegate : UIApplicationDelegate { // class-level declarations public override UIWindow Window { get ; set ; } public override bool FinishedLaunching ( UIApplication application , NSDictionary launchOptions ) { // Override point for customization after application launch. // If not required for your application you can safely delete this method return true ; } ... } When the Main.storyboard loads, it defines the Initial Root View Controller The figure below summarises how the app is loaded and the different files involved:","title":"Hello Xamarin.iOS"},{"location":"hello-xamarin-ios/#creating-your-first-xamarinios-project","text":"To make sure you development environment is properly setup, we are going to create the traditional Hello World app for iOS.","title":"Creating your first Xamarin.iOS project"},{"location":"hello-xamarin-ios/#create-a-new-project-from-template","text":"Using the template, choose iOS and then select the Single View App template. From the figure above: Choose iOS -> App Select the S ingle View App Templates Visual Studio provides various starter templates. In development your app, you can select other templates based on your app requirements.","title":"Create a new project from template"},{"location":"hello-xamarin-ios/#configure-project","text":"App Name : This is the name of your app Organization Identifier : Is used to created a unique name for you app on the App Store. Each app should have a unique name. You can use the reverse DNS of your organization since its guaranteed to be unqiue. Team : You can sign in if you have an Apple Developer account. Visual Studio will automatically manage the certificates for you. 4: Devices : The devices to target with your app Target : The iOS versions the app should run on. Choose a lower version to target older iOS versions.","title":"Configure project"},{"location":"hello-xamarin-ios/#exploring-the-project","text":"Once the project is created, you should have the project as the figure below.","title":"Exploring the project"},{"location":"hello-xamarin-ios/#run-the-app","text":"By default, Visual Studio will select the latest iPhone emulator, you can change which emulator to run your app on. Click the Play button to run the app on the emulator. No view displayed Unfortunately the default template for Visual Studio 2019 on a Mac does not contain any views, so when you run, you will see a blank white screen.","title":"Run the app"},{"location":"hello-xamarin-ios/#adding-views","text":"We are going to add a label using the Storyboard. You create your UI in iOS using storyboards. Open the Main.storyboard From the Toolbox drag the Label Use the guides and align the Label at the center Add the text \"Hello World\" Resize the label Align the text using the Properties inspector window Run again, and you should see the emulator with the Hello World text displayed on the center","title":"Adding views"},{"location":"hello-xamarin-ios/#exploring-the-project_1","text":"On the left is the solution Pad, which contains the directory structure and all the files associated with the solution: The items in the project include: References - Contains the assemblies required to build and run the application. Packages - The packages directory contains ready-made NuGet packages. Assets.xcassets - The asset catalog contains image file for the different resolutions. Resources - The resources folder stores other media. Main.cs \u2013 This contains the main entry point of the application. To start the application, the name of the main application class, the AppDelegate, is passed in. AppDelegate.cs \u2013 This file contains the main application class and is responsible for creating the Window, building the user interface, and listening to events from the operating system. Main.storyboard - The Storyboard contains the visual design of the application\u2019s user interface. Storyboard files open in a graphical editor called the iOS Designer. LaunchScreen.storyboard - The storyboard used to create the splash screen. This is automatically displayed when the app starts. ViewController.cs \u2013 The view controller powers the screen (View) that a user sees and touches. The view controller is responsible for handling interactions between the user and the View. ViewController.designer.cs \u2013 The designer.cs is an auto-generated file that serves as the glue between controls in the View and their code representations in the view controller. Info.plist \u2013 The Info.plist is where application properties such as the application name, icons, launch images, and more are set. Entitlements.plist - The entitlements property list lets us specify application capabilities (also called App Store Technologies) such as iCloud, PassKit, and more. The figure below shows the Assets.xcassets showing the AppIcon with the different images for the different devices. The figure below show the Visual Studio editor with the various window panes open: Solution pane: Show the files in th eproject Main editor area : Shows the code editor or the storyboard Toolbox : You drag the various controls from here onto the storyboard Properties pane : used to change the properties of the views on the storyboard The controls used to switch the editor to between edit mode and constraints mode. Constraints are used to position the views correctly on the different device resolutions.","title":"Exploring the project"},{"location":"hello-xamarin-ios/#application-fundamentals","text":"Let's explore how an iOS application is loaded. The entry point into an iOS application is defined in Main.cs in the Main() method 1 2 3 4 5 6 7 8 9 10 public class Application { // This is the main entry point of the application. static void Main ( string [] args ) { // if you want to use a different Application Delegate class from \"AppDelegate\" // you can specify it here. UIApplication . Main ( args , null , \"AppDelegate\" ); } } The Main.cs uses a class that derives from the UIApplicationDelegate to handle system wide events. The Main.cs hands over control to the AppDelegate class The ApplicationDelegate implements various methods to handle system wide events. In the FinishedLaunching it loads the storyboard file. The main story board file is defined in the Info.plist file. The code below shows the UIApplicationDelegate derived class that loads the story board 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // The UIApplicationDelegate for the application. This class is responsible for launching the // User Interface of the application, as well as listening (and optionally responding) to application events from iOS. [Register(\"AppDelegate\")] public class AppDelegate : UIApplicationDelegate { // class-level declarations public override UIWindow Window { get ; set ; } public override bool FinishedLaunching ( UIApplication application , NSDictionary launchOptions ) { // Override point for customization after application launch. // If not required for your application you can safely delete this method return true ; } ... } When the Main.storyboard loads, it defines the Initial Root View Controller The figure below summarises how the app is loaded and the different files involved:","title":"Application fundamentals"},{"location":"imageview/","text":"Image Views An image view displays a single image or an animated sequence of images over a transparent or opaque background. The image view is an instance of the UIImageView class. It displays ab object of type UIImage . You can configure image views programmatically or in your storyboard file and change the images they display at runtime. Configuring image view from storyboard To add the image, do the following: Open the asset catalog file, Assets.xcassets, if its not there, you can create one Create a New Image Set Add the different resolutions of the image On the storyboard, select the image view, select the image from the drop down list on the Properties window -> Image View -> Image . Loading the image in code To load the image in code from the asset catalog, we can use the following code: 1 logoImageView . Image = UIImage . FromBundle ( \"logo\" ); Creating images We can create images from resource, bundle, data or from another image. We can also create animated images using multiple image file names.","title":"Image View"},{"location":"imageview/#image-views","text":"An image view displays a single image or an animated sequence of images over a transparent or opaque background. The image view is an instance of the UIImageView class. It displays ab object of type UIImage . You can configure image views programmatically or in your storyboard file and change the images they display at runtime.","title":"Image Views"},{"location":"imageview/#configuring-image-view-from-storyboard","text":"To add the image, do the following: Open the asset catalog file, Assets.xcassets, if its not there, you can create one Create a New Image Set Add the different resolutions of the image On the storyboard, select the image view, select the image from the drop down list on the Properties window -> Image View -> Image .","title":"Configuring image view from storyboard"},{"location":"imageview/#loading-the-image-in-code","text":"To load the image in code from the asset catalog, we can use the following code: 1 logoImageView . Image = UIImage . FromBundle ( \"logo\" ); Creating images We can create images from resource, bundle, data or from another image. We can also create animated images using multiple image file names.","title":"Loading the image in code"},{"location":"ios-frameworks/","text":"iOS Frameworks iOS comes with a lot of frameworks that enables developers to perform complex tasks easily. You have already been using the UIKit framework. For more information on how to use the framework, check the documentation on the developer website . We going to see how to use the Contacts framework. Picking a contact To pick a contact, you create CNContactPickerViewController , and then provide a delegate to handle events. The CNContactPickerViewController comes from the ContactsUI . 1 2 3 4 5 6 var contactPicker = new CNContactPickerViewController (); // Make the current class the delegate contactPicker . Delegate = this ; // Present the controller PresentViewController ( contactPicker , true , null ); Since we made the delegate the current class, we will need to implement an interface, ICNContactPickerDelegate as follows: 1 2 3 public partial class ViewController : UIViewController , ICNContactPickerDelegate { } Handle selected contact To get the contact, we implement the method DidSelectContact() as follows: 1 2 3 4 5 [Export(\"contactPicker:didSelectContact:\")] public void DidSelectContact ( CNContactPickerViewController picker , Contacts . CNContact contact ) { Debug . WriteLine ( $ \"Selected contact {contact.GivenName} {contact.PhoneNumbers[0].Value.StringValue}\" ); }","title":"iOS Frameworks"},{"location":"ios-frameworks/#ios-frameworks","text":"iOS comes with a lot of frameworks that enables developers to perform complex tasks easily. You have already been using the UIKit framework. For more information on how to use the framework, check the documentation on the developer website . We going to see how to use the Contacts framework.","title":"iOS Frameworks"},{"location":"ios-frameworks/#picking-a-contact","text":"To pick a contact, you create CNContactPickerViewController , and then provide a delegate to handle events. The CNContactPickerViewController comes from the ContactsUI . 1 2 3 4 5 6 var contactPicker = new CNContactPickerViewController (); // Make the current class the delegate contactPicker . Delegate = this ; // Present the controller PresentViewController ( contactPicker , true , null ); Since we made the delegate the current class, we will need to implement an interface, ICNContactPickerDelegate as follows: 1 2 3 public partial class ViewController : UIViewController , ICNContactPickerDelegate { }","title":"Picking a contact"},{"location":"ios-frameworks/#handle-selected-contact","text":"To get the contact, we implement the method DidSelectContact() as follows: 1 2 3 4 5 [Export(\"contactPicker:didSelectContact:\")] public void DidSelectContact ( CNContactPickerViewController picker , Contacts . CNContact contact ) { Debug . WriteLine ( $ \"Selected contact {contact.GivenName} {contact.PhoneNumbers[0].Value.StringValue}\" ); }","title":"Handle selected contact"},{"location":"label/","text":"Label A label displays static text. It defined in code using the UILabel class. UILabel is descendant of the UIView . Labels are often used in conjunction with controls to describe their intended purpose such as explaining which value a button or slider affects. Purpose Labels allow the user to: Understand the purpose of controls in an app Receive instructions or context in an app Configuring the Label properties The label properties can be changed in storyboard properties window. The Properties window allows you to change the properties from UIView and also the ones for the UILabel . The figure below shows the label properties: The following properties can be changed from the properties window: Text Context \u2013 Plain or Attributed. Plain text allows you to set the formatting attributes on the entire string. Attributed texts allows you to set formatting to different characters or words in the string. Color, Font, Alignment \u2013 Formatting Attributes that can be applied to the label. Lines \u2013 Sets the number of lines that the label can span. Set this to 0 to allow the label to use as many lines as needed. Behavior \u2013 Can be set to either Enabled or Highlighted. Enabled is set by default, disabled text will be displayed in a lighter grey color. Highlighted is disabled by default and allows the label to be redrawn with a highlighted state when it is selected by a user. Baselane and Line Break \u2013 Basline determines how the text will be positioned if the font sizes is different from the one specified. Line Breaks determine how a string will be wrapped or truncated if it is longer than a single line. Autoshrink \u2013 Determines how the font sized will be minimized within a label, if necessary. Highlighted , Shadow , Offset \u2013 Allows you to set the Hightlighted and Shadow color, and the shadow offset.","title":"Label"},{"location":"label/#label","text":"A label displays static text. It defined in code using the UILabel class. UILabel is descendant of the UIView . Labels are often used in conjunction with controls to describe their intended purpose such as explaining which value a button or slider affects.","title":"Label"},{"location":"label/#purpose","text":"Labels allow the user to: Understand the purpose of controls in an app Receive instructions or context in an app","title":"Purpose"},{"location":"label/#configuring-the-label-properties","text":"The label properties can be changed in storyboard properties window. The Properties window allows you to change the properties from UIView and also the ones for the UILabel . The figure below shows the label properties: The following properties can be changed from the properties window: Text Context \u2013 Plain or Attributed. Plain text allows you to set the formatting attributes on the entire string. Attributed texts allows you to set formatting to different characters or words in the string. Color, Font, Alignment \u2013 Formatting Attributes that can be applied to the label. Lines \u2013 Sets the number of lines that the label can span. Set this to 0 to allow the label to use as many lines as needed. Behavior \u2013 Can be set to either Enabled or Highlighted. Enabled is set by default, disabled text will be displayed in a lighter grey color. Highlighted is disabled by default and allows the label to be redrawn with a highlighted state when it is selected by a user. Baselane and Line Break \u2013 Basline determines how the text will be positioned if the font sizes is different from the one specified. Line Breaks determine how a string will be wrapped or truncated if it is longer than a single line. Autoshrink \u2013 Determines how the font sized will be minimized within a label, if necessary. Highlighted , Shadow , Offset \u2013 Allows you to set the Hightlighted and Shadow color, and the shadow offset.","title":"Configuring the Label properties"},{"location":"maps-and-location/","text":"Maps and Location iOS comes with two frameworks for working with maps and location. The MapKit frameworks provides the classes to work with maps and the CoreLocation library provides classes to work with location. Add a map To add a map, add the map view from the toolbox. You can change the various properties as shown below: Change map style You can change the style on the map view using the MapType property on the map view as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 partial void DidChangeMapType ( UISegmentedControl sender ) { switch ( sender . SelectedSegment ) { case 0 : MapView . MapType = MKMapType . Standard ; break ; case 1 : MapView . MapType = MKMapType . Satellite ; break ; case 2 : MapView . MapType = MKMapType . Hybrid ; break ; } } Show user location To show the user location, check the User Location on the map properties on the story board. You can also change in code as follows: 1 MapView . ShowsUserLocation = true ; Request permission for location To access the user's location, you need to request the permission. You the CLLocationManager class to request location. You will need to add a value in the Info.plist value with the reason for requesting the user's location. You can set one of the following based on how your app uses the use location: NSLocationWhenInUseUsageDescription NSLocationAlwaysAndWhenInUseUsageDescription Requesting location Don't request authorization at launch time unless you need the user's location immediately or were launched in the background to receive a location update. Use the location manager to request permission: 1 2 3 4 5 6 7 var locationManager = new CLLocationManager (); switch ( CLLocationManager . Status ) { case CLAuthorizationStatus . NotDetermined : locationManager . RequestWhenInUseAuthorization (); break ; } The above have been simplified, you will need to handle the different states for your app to work properly. Subscribe to user location changes You can subscribe to DidUpdateUserLocation event to be notified when the user location changes as follows: 1 MapView . DidUpdateUserLocation += MapView_DidUpdateUserLocation ; and center the map on the user's location as follows: 1 2 3 4 5 6 7 void MapView_DidUpdateUserLocation ( object sender , MapKit . MKUserLocationEventArgs e ) { var span = new MKCoordinateSpan ( 0.2 , 0.2 ); var region = new MKCoordinateRegion ( e . UserLocation . Coordinate , span ); MapView . SetRegion ( region , true ); }","title":"Maps and Location"},{"location":"maps-and-location/#maps-and-location","text":"iOS comes with two frameworks for working with maps and location. The MapKit frameworks provides the classes to work with maps and the CoreLocation library provides classes to work with location.","title":"Maps and Location"},{"location":"maps-and-location/#add-a-map","text":"To add a map, add the map view from the toolbox. You can change the various properties as shown below:","title":"Add a map"},{"location":"maps-and-location/#change-map-style","text":"You can change the style on the map view using the MapType property on the map view as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 partial void DidChangeMapType ( UISegmentedControl sender ) { switch ( sender . SelectedSegment ) { case 0 : MapView . MapType = MKMapType . Standard ; break ; case 1 : MapView . MapType = MKMapType . Satellite ; break ; case 2 : MapView . MapType = MKMapType . Hybrid ; break ; } }","title":"Change map style"},{"location":"maps-and-location/#show-user-location","text":"To show the user location, check the User Location on the map properties on the story board. You can also change in code as follows: 1 MapView . ShowsUserLocation = true ;","title":"Show user location"},{"location":"maps-and-location/#request-permission-for-location","text":"To access the user's location, you need to request the permission. You the CLLocationManager class to request location. You will need to add a value in the Info.plist value with the reason for requesting the user's location. You can set one of the following based on how your app uses the use location: NSLocationWhenInUseUsageDescription NSLocationAlwaysAndWhenInUseUsageDescription Requesting location Don't request authorization at launch time unless you need the user's location immediately or were launched in the background to receive a location update. Use the location manager to request permission: 1 2 3 4 5 6 7 var locationManager = new CLLocationManager (); switch ( CLLocationManager . Status ) { case CLAuthorizationStatus . NotDetermined : locationManager . RequestWhenInUseAuthorization (); break ; } The above have been simplified, you will need to handle the different states for your app to work properly.","title":"Request permission for location"},{"location":"maps-and-location/#subscribe-to-user-location-changes","text":"You can subscribe to DidUpdateUserLocation event to be notified when the user location changes as follows: 1 MapView . DidUpdateUserLocation += MapView_DidUpdateUserLocation ; and center the map on the user's location as follows: 1 2 3 4 5 6 7 void MapView_DidUpdateUserLocation ( object sender , MapKit . MKUserLocationEventArgs e ) { var span = new MKCoordinateSpan ( 0.2 , 0.2 ); var region = new MKCoordinateRegion ( e . UserLocation . Coordinate , span ); MapView . SetRegion ( region , true ); }","title":"Subscribe to user location changes"},{"location":"network-activity-indicator/","text":"Network Activity Indicators On devices without edge-to-edge displays, a network activity indicator spins in the status bar at the top of the screen as networking occurs. It disappears when networking is complete. This indicator looks just like an activity indicator and is noninteractive. Showing the indicator The network activity indicator is not available in the Toolbox. To show it, use the UIApplication.SharedApplication.NetworkActivityIndicatorVisible and toggle it between true and false as follows: 1 2 3 4 5 // Display the activity indicator UIApplication . SharedApplication . NetworkActivityIndicatorVisible = true ; // Hide the activity indicator UIApplication . SharedApplication . NetworkActivityIndicatorVisible = false ;","title":"Network Activity Indicator"},{"location":"network-activity-indicator/#network-activity-indicators","text":"On devices without edge-to-edge displays, a network activity indicator spins in the status bar at the top of the screen as networking occurs. It disappears when networking is complete. This indicator looks just like an activity indicator and is noninteractive.","title":"Network Activity Indicators"},{"location":"network-activity-indicator/#showing-the-indicator","text":"The network activity indicator is not available in the Toolbox. To show it, use the UIApplication.SharedApplication.NetworkActivityIndicatorVisible and toggle it between true and false as follows: 1 2 3 4 5 // Display the activity indicator UIApplication . SharedApplication . NetworkActivityIndicatorVisible = true ; // Hide the activity indicator UIApplication . SharedApplication . NetworkActivityIndicatorVisible = false ;","title":"Showing the indicator"},{"location":"networking/","text":"Networking We can data from a remote API using HTTP. Using REST API we can get and create data. On iOS you will just need to make sure that the API is using https . If the url is http , you will need to add some configuration to the Info.plist file. Performing a GET Request Let's retrieve a random joke from the API url http://api.icndb.com/jokes/random . We use the GetStringAsync method of the HttpClient class as follows : 1 2 3 4 using ( var client = new HttpClient ()) { var content = await client . GetStringAsync ( \" http://api.icndb.com/jokes/random \" ) ; Console . WriteLine ( content ) ; } Performing a POST Request To send data to the server you use the HTTP form data and send the parameters as form url encoded using the FormUrlEncodedContent class. The parameters will be sent as key/value pairs. We use the PostAsync method of the HttpClient class. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 using ( var client = new HttpClient ()) { client.BaseAddress = new Uri(\" http : // api . peruzal . com / \"); //Create a list of params var content = new FormUrlEncodedContent(new [] { //The parameters to post, in a key/value pair new KeyValuePair<string, string>(\" title \", \" Dawn of the Planet Earth \"), new KeyValuePair<string, string>(\" category \", \" Sci-Fi \") }); //Make the network call to post var result = await client.PostAsync(\" / api / movie \" , content ); string resultContent = await result.Content.ReadAsStringAsync() ; Console.WriteLine(resultContent) ; } Post JSON Instead of sending the content as form url encoded, we can post the body of the content as JSON as follows: 1 2 var content = new StringContent ( jsonObject . ToString (), Encoding . UTF8 , \"application/json\" ); var result = await client . PostAsync ( url , content ). Result ; Posting form data We can post form data using the FormUrlEncodedContent as follows: 1 2 3 4 5 6 7 var content = new FormUrlEncodedContent ( new List < KeyValuePair < string , string >>() { new KeyValuePair < string , string >( \"username\" , entryUsername . Text ), new KeyValuePair < string , string >( \"password\" , entryPassword . Text ) }); var result = await client . PostAsync ( url , content ); Send Headers To send the headers, we add the headers as a key value pair in the DefaultRequestHeaders collection as follows : 1 2 3 4 5 6 private Task < string > fetchMovies (){ var client = new HttpClient (); //Add the header as a key value pair client . DefaultRequestHeaders . Add ( \"X-Parse-Application-Id\" , \"Value of header here\" ); return client . GetStringAsync ( \"https://parse.peruzal.com/parse/classes/Movie/\" ); } Note The header name is X-Parse-Application-Id and the value of the header is Value of header here .","title":"Networking"},{"location":"networking/#networking","text":"We can data from a remote API using HTTP. Using REST API we can get and create data. On iOS you will just need to make sure that the API is using https . If the url is http , you will need to add some configuration to the Info.plist file.","title":"Networking"},{"location":"networking/#performing-a-get-request","text":"Let's retrieve a random joke from the API url http://api.icndb.com/jokes/random . We use the GetStringAsync method of the HttpClient class as follows : 1 2 3 4 using ( var client = new HttpClient ()) { var content = await client . GetStringAsync ( \" http://api.icndb.com/jokes/random \" ) ; Console . WriteLine ( content ) ; }","title":"Performing a GET Request"},{"location":"networking/#performing-a-post-request","text":"To send data to the server you use the HTTP form data and send the parameters as form url encoded using the FormUrlEncodedContent class. The parameters will be sent as key/value pairs. We use the PostAsync method of the HttpClient class. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 using ( var client = new HttpClient ()) { client.BaseAddress = new Uri(\" http : // api . peruzal . com / \"); //Create a list of params var content = new FormUrlEncodedContent(new [] { //The parameters to post, in a key/value pair new KeyValuePair<string, string>(\" title \", \" Dawn of the Planet Earth \"), new KeyValuePair<string, string>(\" category \", \" Sci-Fi \") }); //Make the network call to post var result = await client.PostAsync(\" / api / movie \" , content ); string resultContent = await result.Content.ReadAsStringAsync() ; Console.WriteLine(resultContent) ; }","title":"Performing a POST Request"},{"location":"networking/#post-json","text":"Instead of sending the content as form url encoded, we can post the body of the content as JSON as follows: 1 2 var content = new StringContent ( jsonObject . ToString (), Encoding . UTF8 , \"application/json\" ); var result = await client . PostAsync ( url , content ). Result ;","title":"Post JSON"},{"location":"networking/#posting-form-data","text":"We can post form data using the FormUrlEncodedContent as follows: 1 2 3 4 5 6 7 var content = new FormUrlEncodedContent ( new List < KeyValuePair < string , string >>() { new KeyValuePair < string , string >( \"username\" , entryUsername . Text ), new KeyValuePair < string , string >( \"password\" , entryPassword . Text ) }); var result = await client . PostAsync ( url , content );","title":"Posting form data"},{"location":"networking/#send-headers","text":"To send the headers, we add the headers as a key value pair in the DefaultRequestHeaders collection as follows : 1 2 3 4 5 6 private Task < string > fetchMovies (){ var client = new HttpClient (); //Add the header as a key value pair client . DefaultRequestHeaders . Add ( \"X-Parse-Application-Id\" , \"Value of header here\" ); return client . GetStringAsync ( \"https://parse.peruzal.com/parse/classes/Movie/\" ); } Note The header name is X-Parse-Application-Id and the value of the header is Value of header here .","title":"Send Headers"},{"location":"pass-data-between-view-controllers/","text":"Passing data between view controller We are going to discuss two things in this section: Pass data to the view controller Get data from a called view controller Pass data to the view controller You can pass data to a view controller by overriding the PrepareForSegue() method, getting the DestinationViewController property of the segue and assigning the public properties on it. In the figure below, we want to share the first name of the logged in with the courses view controller. We have two view controllers, LoginViewController and CoursesViewController . In the CoursesViewController we have a public FirstName property define. Give the segue a name From the story board, click and drag whilst holding the Ctrl control from the login button to the navigation controller that have the CourseViewController as root. Choose the Show segue. Give a name to the segue. You will use the name to check if we are navigating to the CoursesViewController . Pass data in the PrepareForSegue() method In the LoginViewController implement the PrepareForSegue() method and assign the the property of the first name as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public override void PrepareForSegue ( UIStoryboardSegue segue , NSObject sender ) { base . PrepareForSegue ( segue , sender ); // check if we are segeuing to the LoginViewController if ( segue . Identifier . Equals ( \"login\" )) { // Get the destination view controller // The destination is navigation controller with the root controller CoursesViewController var navVC = segue . DestinationViewController as UINavigationController ; // Get the top view controller from the navigation controller var dvc = navVC . TopViewController as CoursesViewController ; // Get the data from the login and assign to property // Hard coded here for simplicity dvc . FirstName = \"Joseph\" ; } } When you run, you should now be able to see the message Welcome Joseph on the course view controller. Using PrepareForSegue() The PrepareForSegue() method is called for any segue to another view controller. You should check the identifier and also the destination view controller. If you don't properly check, the app will crash. Get data from a called view controller They are cases where you need to segue to a view controller and get back the data back to the calling view controller. View controller A calls B view controller. We need to pass data back from view controller B to A when B is dismissed. We are going to use the fire below for our demo. We want to get the email address used once the user finishes registration. To pass the data back, we need to do the following: Create the unwind segue in the first view controller Wire up the segue from the second view controller Pass data when we dismiss the segue Create the unwind segue","title":"Pass Data Between View Controller"},{"location":"pass-data-between-view-controllers/#passing-data-between-view-controller","text":"We are going to discuss two things in this section: Pass data to the view controller Get data from a called view controller","title":"Passing data between view controller"},{"location":"pass-data-between-view-controllers/#pass-data-to-the-view-controller","text":"You can pass data to a view controller by overriding the PrepareForSegue() method, getting the DestinationViewController property of the segue and assigning the public properties on it. In the figure below, we want to share the first name of the logged in with the courses view controller. We have two view controllers, LoginViewController and CoursesViewController . In the CoursesViewController we have a public FirstName property define.","title":"Pass data to the view controller"},{"location":"pass-data-between-view-controllers/#give-the-segue-a-name","text":"From the story board, click and drag whilst holding the Ctrl control from the login button to the navigation controller that have the CourseViewController as root. Choose the Show segue. Give a name to the segue. You will use the name to check if we are navigating to the CoursesViewController .","title":"Give the segue a name"},{"location":"pass-data-between-view-controllers/#pass-data-in-the-prepareforsegue-method","text":"In the LoginViewController implement the PrepareForSegue() method and assign the the property of the first name as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public override void PrepareForSegue ( UIStoryboardSegue segue , NSObject sender ) { base . PrepareForSegue ( segue , sender ); // check if we are segeuing to the LoginViewController if ( segue . Identifier . Equals ( \"login\" )) { // Get the destination view controller // The destination is navigation controller with the root controller CoursesViewController var navVC = segue . DestinationViewController as UINavigationController ; // Get the top view controller from the navigation controller var dvc = navVC . TopViewController as CoursesViewController ; // Get the data from the login and assign to property // Hard coded here for simplicity dvc . FirstName = \"Joseph\" ; } } When you run, you should now be able to see the message Welcome Joseph on the course view controller. Using PrepareForSegue() The PrepareForSegue() method is called for any segue to another view controller. You should check the identifier and also the destination view controller. If you don't properly check, the app will crash.","title":"Pass data in the PrepareForSegue() method"},{"location":"pass-data-between-view-controllers/#get-data-from-a-called-view-controller","text":"They are cases where you need to segue to a view controller and get back the data back to the calling view controller. View controller A calls B view controller. We need to pass data back from view controller B to A when B is dismissed. We are going to use the fire below for our demo. We want to get the email address used once the user finishes registration. To pass the data back, we need to do the following: Create the unwind segue in the first view controller Wire up the segue from the second view controller Pass data when we dismiss the segue","title":"Get data from a called view controller"},{"location":"pass-data-between-view-controllers/#create-the-unwind-segue","text":"","title":"Create the unwind segue"},{"location":"persistence/","text":"Persistence In iOS we can keep arbitrarily user data using the NSUserDefaults class. For complex data we can use the SQLite library. The NSUserDefaults uses a plist to store the users preferences Save data To save data use the NSUserDefaults.StandardUserDefaults and use one of the Set methods, providing the key and the value as follows: 1 NSUserDefaults . StandardUserDefaults . SetString ( \"joseph\" , \"NICKNAME\" ); The first argument is the value, and the second argument is the key. Reading the preference To read the value stored in the NSUserDefaults we can one of the methods that start with the type and provide the key as follows: 1 var nickname = NSUserDefaults . StandardUserDefaults . StringForKey ( \"NICKNAME\" );","title":"Persistence"},{"location":"persistence/#persistence","text":"In iOS we can keep arbitrarily user data using the NSUserDefaults class. For complex data we can use the SQLite library. The NSUserDefaults uses a plist to store the users preferences","title":"Persistence"},{"location":"persistence/#save-data","text":"To save data use the NSUserDefaults.StandardUserDefaults and use one of the Set methods, providing the key and the value as follows: 1 NSUserDefaults . StandardUserDefaults . SetString ( \"joseph\" , \"NICKNAME\" ); The first argument is the value, and the second argument is the key.","title":"Save data"},{"location":"persistence/#reading-the-preference","text":"To read the value stored in the NSUserDefaults we can one of the methods that start with the type and provide the key as follows: 1 var nickname = NSUserDefaults . StandardUserDefaults . StringForKey ( \"NICKNAME\" );","title":"Reading the preference"},{"location":"progress-view/","text":"Progress Bar A progress bar includes a track that fills from left to right to show the progression of a task with a known duration. Progress bars are noninteractive, although they are often accompanied by a button for canceling the corresponding operation. The progress bar is an instance of the UIProgressView . Configuring in the story board The properties shown on the figure nelow can be configured for the progress view: The following video show the progress view: Configuring in code You can move the progress bar by initially setting a value for the Progress property and then increment it as follows: 1 2 3 // Move the progress to 90% and animate the move // The progress is between 0 and 1 progressView . SetProgress ( 0.8f , true );","title":"Progress View"},{"location":"progress-view/#progress-bar","text":"A progress bar includes a track that fills from left to right to show the progression of a task with a known duration. Progress bars are noninteractive, although they are often accompanied by a button for canceling the corresponding operation. The progress bar is an instance of the UIProgressView .","title":"Progress Bar"},{"location":"progress-view/#configuring-in-the-story-board","text":"The properties shown on the figure nelow can be configured for the progress view: The following video show the progress view:","title":"Configuring in the story board"},{"location":"progress-view/#configuring-in-code","text":"You can move the progress bar by initially setting a value for the Progress property and then increment it as follows: 1 2 3 // Move the progress to 90% and animate the move // The progress is between 0 and 1 progressView . SetProgress ( 0.8f , true );","title":"Configuring in code"},{"location":"search-bar/","text":"","title":"Search bar"},{"location":"segmented-button/","text":"Segmented Button A segmented control is a linear set of two or more segments, each of which functions as a mutually exclusive button. Within the control, all segments are equal in width. Like buttons, segments can contain text or images. Segmented controls are often used to display different views. In Maps, for example, a segmented control lets you switch between Map, Transit, and Satellite views. The segmented button is an instance of the UISegmentedControl class. Configuring segmented control The following properties can be configured in the story board: Handle value changed event You can also wire up the ValueChanged event from the story board as follows: and adding the method in the view controller code as follows: 1 2 3 4 5 partial void HandleSegmentedChanged ( UISegmentedControl sender ) { var title = sender . TitleAt ( sender . SelectedSegment ); Debug . WriteLine ( title ); } or you can wire up the event in code as follows : 1 2 3 4 5 6 7 8 public override void ViewDidLoad () { base . ViewDidLoad (); mapOptions . ValueChanged += ( sender , e ) => { var title = mapOptions . TitleAt ( mapOptions . SelectedSegment ); }; }","title":"Segmented Button"},{"location":"segmented-button/#segmented-button","text":"A segmented control is a linear set of two or more segments, each of which functions as a mutually exclusive button. Within the control, all segments are equal in width. Like buttons, segments can contain text or images. Segmented controls are often used to display different views. In Maps, for example, a segmented control lets you switch between Map, Transit, and Satellite views. The segmented button is an instance of the UISegmentedControl class.","title":"Segmented Button"},{"location":"segmented-button/#configuring-segmented-control","text":"The following properties can be configured in the story board:","title":"Configuring segmented control"},{"location":"segmented-button/#handle-value-changed-event","text":"You can also wire up the ValueChanged event from the story board as follows: and adding the method in the view controller code as follows: 1 2 3 4 5 partial void HandleSegmentedChanged ( UISegmentedControl sender ) { var title = sender . TitleAt ( sender . SelectedSegment ); Debug . WriteLine ( title ); } or you can wire up the event in code as follows : 1 2 3 4 5 6 7 8 public override void ViewDidLoad () { base . ViewDidLoad (); mapOptions . ValueChanged += ( sender , e ) => { var title = mapOptions . TitleAt ( mapOptions . SelectedSegment ); }; }","title":"Handle value changed event"},{"location":"slider/","text":"Slider A slider is a horizontal track with a control called a thumb, which you can slide with your finger to move between a minimum and maximum value, such as screen brightness level or position during media playback. The slider is an instance of the UISlider class. Slider A slider can optionally display left and right icons that illustrate the meaning of the minimum and maximum values. Configuring properties in the story board The following properties shown on the figure below can be customized: Setting slider values You can change the slider value in code as follows: 1 2 // Sets the value to 80% and animates the change slider . SetValue ( 0.8f , true ); Slider events You can set the ValueChanged event to get the values as the slider is moved as follows: 1 2 3 slider . ValueChanged += ( object sender , EventArgs e ) => { Debug . WriteLine ( slider . Value ); }; The event can also be hooked in the storyboard on the Properties window Events section. and wire up the method in the view controller as follows : 1 2 3 4 partial void HandleValueChanged ( UISlider sender ) { // Implement to handle the changes on the slider }","title":"Slider"},{"location":"slider/#slider","text":"A slider is a horizontal track with a control called a thumb, which you can slide with your finger to move between a minimum and maximum value, such as screen brightness level or position during media playback. The slider is an instance of the UISlider class. Slider A slider can optionally display left and right icons that illustrate the meaning of the minimum and maximum values.","title":"Slider"},{"location":"slider/#configuring-properties-in-the-story-board","text":"The following properties shown on the figure below can be customized:","title":"Configuring properties in the story board"},{"location":"slider/#setting-slider-values","text":"You can change the slider value in code as follows: 1 2 // Sets the value to 80% and animates the change slider . SetValue ( 0.8f , true );","title":"Setting slider values"},{"location":"slider/#slider-events","text":"You can set the ValueChanged event to get the values as the slider is moved as follows: 1 2 3 slider . ValueChanged += ( object sender , EventArgs e ) => { Debug . WriteLine ( slider . Value ); }; The event can also be hooked in the storyboard on the Properties window Events section. and wire up the method in the view controller as follows : 1 2 3 4 partial void HandleValueChanged ( UISlider sender ) { // Implement to handle the changes on the slider }","title":"Slider events"},{"location":"stepper/","text":"Stepper A control used to increment or decrement a value. The stepper is an instance of the UIStepper . Configuring properties The following figure shows the stepper properties that can be configured from the story board: Handle value changed event You can wire up the ValueChanged event for the stepper from the story board as the following figure shows: and add the method in the view controller as follows: 1 2 3 4 partial void HandlePrintCopies ( UIStepper sender ) { labelCopies . Text = $ \"{sender.Value} Copies\" ; } The ValueChanged event can also be wired up directly from code as follows: 1 2 3 stepper . ValueChanged += ( sender , e ) => { Debug . WriteLine ( stepper . Value ); }; The stepper variable have been defined from the story board.","title":"Stepper"},{"location":"stepper/#stepper","text":"A control used to increment or decrement a value. The stepper is an instance of the UIStepper .","title":"Stepper"},{"location":"stepper/#configuring-properties","text":"The following figure shows the stepper properties that can be configured from the story board:","title":"Configuring properties"},{"location":"stepper/#handle-value-changed-event","text":"You can wire up the ValueChanged event for the stepper from the story board as the following figure shows: and add the method in the view controller as follows: 1 2 3 4 partial void HandlePrintCopies ( UIStepper sender ) { labelCopies . Text = $ \"{sender.Value} Copies\" ; } The ValueChanged event can also be wired up directly from code as follows: 1 2 3 stepper . ValueChanged += ( sender , e ) => { Debug . WriteLine ( stepper . Value ); }; The stepper variable have been defined from the story board.","title":"Handle value changed event"},{"location":"switch/","text":"Switch A switch is a visual toggle between two mutually exclusive states\u2014on and off. The switch is an instance of the UISwitch class. Configuring switch properties The following figure show the properties of the switch that can be configured from the story board: Handle changed event We can wire up the ValueChanged event from the story board as show below: and add the method in the view controller file as follows: 1 2 3 4 partial void HandleRingChanged ( UISwitch sender ) { Debug . WriteLine ( sender . On ); } The On property will be true or false as you toggle the switch. The event could also be wired in code as follows: 1 2 3 ringSwitch . ValueChanged += ( sender , e ) => { Debug . WriteLine ( ringSwitch . On ); }; ringSwitch variable name is setup in the story board Properties window.","title":"Switch"},{"location":"switch/#switch","text":"A switch is a visual toggle between two mutually exclusive states\u2014on and off. The switch is an instance of the UISwitch class.","title":"Switch"},{"location":"switch/#configuring-switch-properties","text":"The following figure show the properties of the switch that can be configured from the story board:","title":"Configuring switch properties"},{"location":"switch/#handle-changed-event","text":"We can wire up the ValueChanged event from the story board as show below: and add the method in the view controller file as follows: 1 2 3 4 partial void HandleRingChanged ( UISwitch sender ) { Debug . WriteLine ( sender . On ); } The On property will be true or false as you toggle the switch. The event could also be wired in code as follows: 1 2 3 ringSwitch . ValueChanged += ( sender , e ) => { Debug . WriteLine ( ringSwitch . On ); }; ringSwitch variable name is setup in the story board Properties window.","title":"Handle changed event"},{"location":"tab-bar/","text":"","title":"Tab bar"},{"location":"table-view/","text":"TableView The Table View is one of the most commonly used control. Its found in almost every iOS app. The Table View display data as rows. Most Table Views are highly customized and might not appear as one. Example of TableView in Apps Apps such as Whatsapp , Contacts , TED use Table Views for displaying content as rows. More Examples of Apps using TableView The Twitter , Contacts , and the Yelp apps are all using the table view. Table View Content A table view can contain static or dynamic data. Static Table View Content A static table can only be created inside a TableViewController . A TableViewController, is a ViewController that derives from the UITableViewController and has its view , as the the table view. Remember View Controller has its view as a view , which derives from UIView , but the UITableViewController controller's view derives from UITableView . Table views with static contents are usually used for displaying a settings screen, like the iOS Settings app, or the Google Maps iOS app. Dynamic Table View Content A dynamic table view needs a data source to provide its content. When designing a dynamic table view, you will need to provide a prototype cell in the StoryBoard . The table view will ask its data source and use the prototype to display the content. You can add more prototype cell in the StoryBoard. Each prototype cell will need a Reuse Identifier . This is a string used by the table view to deque cells. The table view efficiently manages displaying data by only creating cells for the visible rows onscreen. It ask the the data source to provide more data as you scroll. Table View Style The table view can be plain or grouped . You can customize the plain table view with your own colors and design. Table View Cell Each row of the table view is of type UITableViewCell . The table comes with default table view cells you can use. The cells have a Title Label , Detail Label , and ImageView . If you want to create your own, you can change the style fo a Custom cell type. Providing Data to the Table View The table view uses a data source to provide the data to display. This is done using a protocol . A protocol is contract in iOS, it can have required and optional methods that needs to be implemented, by the class. The protocol name is UITableViewDataSource , this is implemented as a generic class in Xamarin. For handling cell selection and other table view functions, the table uses the UITableViewDelegate protocol. Xamarin instead uses a class UITableViewSource that handles both the functions of the UITableViewDataSource and UITableViewDelegate protocols. Dynamic table view data with UITableViewSource To use a dynamic table view, you need to perform the following steps: Add a table view inside a view controller on the storyboard Create a class that derives from UITableViewDataSource Implement the methods in the UITableViewDataSource derived class Add table view in the story board Drag a table from the Toolbox and add it to the view controller. Change the Name under Identity section on the Properties inspector and call it TableView . Select the prototype cell and change the Style to Basic . Add a an Identifier and add the text cell . The identifier is used to for recycling table view cells. Create the class to provide data Create a class that derives from UITableViewDataSource as follows : 1 2 3 4 5 6 7 8 9 10 11 12 class CoursesDataSource : UITableViewSource { public override UITableViewCell GetCell ( UITableView tableView , NSIndexPath indexPath ) { throw new NotImplementedException (); } public override nint RowsInSection ( UITableView tableview , nint section ) { throw new NotImplementedException (); } } You will need to implement the two methods. You need to return the number of rows in each section in the RowsInSection() method and a provide the cell for each row in the GetCell() method. Add a list of strings field 1 2 3 List < string > courses = new List < string >() { \"Xamarin Forms\" , \"ReactJS\" , \"C# Programming\" , \"Ruby Programming\" }; and return the count in the RowsInSection() method: 1 2 3 4 public override nint RowsInSection ( UITableView tableview , nint section ) { return courses . Count ; } Implement the GetCell by dequeuing a reusable cell using the identifier defined in the story board: 1 2 3 4 5 6 7 8 9 10 11 12 public override UITableViewCell GetCell ( UITableView tableView , NSIndexPath indexPath ) { const string identifier = \"cell\" ; var cell = tableView . DequeueReusableCell ( identifier , indexPath ); if ( cell == null ) { cell = new UITableViewCell ( UITableViewCellStyle . Default , identifier ); } cell . TextLabel . Text = courses [ indexPath . Row ]; return cell ; } The complete class for the UITableViewSource should be as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class CoursesDataSource : UITableViewSource { List < string > courses = new List < string >() { \"Xamarin Forms\" , \"ReactJS\" , \"C# Programming\" , \"Ruby Programming\" }; public override UITableViewCell GetCell ( UITableView tableView , NSIndexPath indexPath ) { const string identifier = \"cell\" ; var cell = tableView . DequeueReusableCell ( identifier , indexPath ); if ( cell == null ) { cell = new UITableViewCell ( UITableViewCellStyle . Default , identifier ); } cell . TextLabel . Text = courses [ indexPath . Row ]; return cell ; } public override nint RowsInSection ( UITableView tableview , nint section ) { return courses . Count ; } } Connect table view to data source The last piece is to connect the table view to the data source. In the ViewDidLoad, add the following 1 2 3 4 5 public override void ViewDidLoad () { base . ViewDidLoad (); TableView . Source = new CoursesDataSource (); } When you now run, you should get the courses displaying.","title":"Table View"},{"location":"table-view/#tableview","text":"The Table View is one of the most commonly used control. Its found in almost every iOS app. The Table View display data as rows. Most Table Views are highly customized and might not appear as one.","title":"TableView"},{"location":"table-view/#example-of-tableview-in-apps","text":"Apps such as Whatsapp , Contacts , TED use Table Views for displaying content as rows.","title":"Example of TableView in Apps"},{"location":"table-view/#more-examples-of-apps-using-tableview","text":"The Twitter , Contacts , and the Yelp apps are all using the table view.","title":"More Examples of Apps using TableView"},{"location":"table-view/#table-view-content","text":"A table view can contain static or dynamic data.","title":"Table View Content"},{"location":"table-view/#static-table-view-content","text":"A static table can only be created inside a TableViewController . A TableViewController, is a ViewController that derives from the UITableViewController and has its view , as the the table view. Remember View Controller has its view as a view , which derives from UIView , but the UITableViewController controller's view derives from UITableView . Table views with static contents are usually used for displaying a settings screen, like the iOS Settings app, or the Google Maps iOS app.","title":"Static Table View Content"},{"location":"table-view/#dynamic-table-view-content","text":"A dynamic table view needs a data source to provide its content. When designing a dynamic table view, you will need to provide a prototype cell in the StoryBoard . The table view will ask its data source and use the prototype to display the content. You can add more prototype cell in the StoryBoard. Each prototype cell will need a Reuse Identifier . This is a string used by the table view to deque cells. The table view efficiently manages displaying data by only creating cells for the visible rows onscreen. It ask the the data source to provide more data as you scroll.","title":"Dynamic Table View Content"},{"location":"table-view/#table-view-style","text":"The table view can be plain or grouped . You can customize the plain table view with your own colors and design.","title":"Table View Style"},{"location":"table-view/#table-view-cell","text":"Each row of the table view is of type UITableViewCell . The table comes with default table view cells you can use. The cells have a Title Label , Detail Label , and ImageView . If you want to create your own, you can change the style fo a Custom cell type.","title":"Table View Cell"},{"location":"table-view/#providing-data-to-the-table-view","text":"The table view uses a data source to provide the data to display. This is done using a protocol . A protocol is contract in iOS, it can have required and optional methods that needs to be implemented, by the class. The protocol name is UITableViewDataSource , this is implemented as a generic class in Xamarin. For handling cell selection and other table view functions, the table uses the UITableViewDelegate protocol. Xamarin instead uses a class UITableViewSource that handles both the functions of the UITableViewDataSource and UITableViewDelegate protocols.","title":"Providing Data to the Table View"},{"location":"table-view/#dynamic-table-view-data-with-uitableviewsource","text":"To use a dynamic table view, you need to perform the following steps: Add a table view inside a view controller on the storyboard Create a class that derives from UITableViewDataSource Implement the methods in the UITableViewDataSource derived class","title":"Dynamic table view data with UITableViewSource"},{"location":"table-view/#add-table-view-in-the-story-board","text":"Drag a table from the Toolbox and add it to the view controller. Change the Name under Identity section on the Properties inspector and call it TableView . Select the prototype cell and change the Style to Basic . Add a an Identifier and add the text cell . The identifier is used to for recycling table view cells.","title":"Add table view in the story board"},{"location":"table-view/#create-the-class-to-provide-data","text":"Create a class that derives from UITableViewDataSource as follows : 1 2 3 4 5 6 7 8 9 10 11 12 class CoursesDataSource : UITableViewSource { public override UITableViewCell GetCell ( UITableView tableView , NSIndexPath indexPath ) { throw new NotImplementedException (); } public override nint RowsInSection ( UITableView tableview , nint section ) { throw new NotImplementedException (); } } You will need to implement the two methods. You need to return the number of rows in each section in the RowsInSection() method and a provide the cell for each row in the GetCell() method. Add a list of strings field 1 2 3 List < string > courses = new List < string >() { \"Xamarin Forms\" , \"ReactJS\" , \"C# Programming\" , \"Ruby Programming\" }; and return the count in the RowsInSection() method: 1 2 3 4 public override nint RowsInSection ( UITableView tableview , nint section ) { return courses . Count ; } Implement the GetCell by dequeuing a reusable cell using the identifier defined in the story board: 1 2 3 4 5 6 7 8 9 10 11 12 public override UITableViewCell GetCell ( UITableView tableView , NSIndexPath indexPath ) { const string identifier = \"cell\" ; var cell = tableView . DequeueReusableCell ( identifier , indexPath ); if ( cell == null ) { cell = new UITableViewCell ( UITableViewCellStyle . Default , identifier ); } cell . TextLabel . Text = courses [ indexPath . Row ]; return cell ; } The complete class for the UITableViewSource should be as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class CoursesDataSource : UITableViewSource { List < string > courses = new List < string >() { \"Xamarin Forms\" , \"ReactJS\" , \"C# Programming\" , \"Ruby Programming\" }; public override UITableViewCell GetCell ( UITableView tableView , NSIndexPath indexPath ) { const string identifier = \"cell\" ; var cell = tableView . DequeueReusableCell ( identifier , indexPath ); if ( cell == null ) { cell = new UITableViewCell ( UITableViewCellStyle . Default , identifier ); } cell . TextLabel . Text = courses [ indexPath . Row ]; return cell ; } public override nint RowsInSection ( UITableView tableview , nint section ) { return courses . Count ; } }","title":"Create the class to provide data"},{"location":"table-view/#connect-table-view-to-data-source","text":"The last piece is to connect the table view to the data source. In the ViewDidLoad, add the following 1 2 3 4 5 public override void ViewDidLoad () { base . ViewDidLoad (); TableView . Source = new CoursesDataSource (); } When you now run, you should get the courses displaying.","title":"Connect table view to data source"},{"location":"testflight/","text":"","title":"Testflight"},{"location":"text-field/","text":"TextField Text fields allows the user to input a single line of text into an app. The text field is a subclass of the UITextField class. Purpose Gather small amounts of text from the user. Perform some immediate action on the text, such as a search operation Configuring TextField properties You can configure the properties of the TextField in interface builder. Some properties of the TextField can not be changed with the properties window, they can only be changed in code. The following figure shows the fields that can be changed in the Properties window: Placeholder \u2013 This is optional. If set, it is displayed when the text field is empty, usually to explain to the user what input is expected. Clear Button \u2013 This controls when the standard clear button (the grey circle with X ) appears in the text field, as a way for the user to clear text quickly. It can be permanently hidden, permanently visible, or shown, depending on whether or not the field is being edited. Min Font Size and Adjust to Fit \u2013 Allows the font size to be adjusted automatically to fit longer text and prevent truncation, but limited to no smaller than the specified size. Capitalization \u2013 Whether to automatically capitalize words, sentences or all input. Correction \u2013 Whether spell checking and suggestions are enabled. Keyboard \u2013 Controls the keyboard style displayed for the input, and therefore what keys are available on the keyboard. This includes Number Pad , Phone Pad , Email , URL along with other options. Appearance \u2013 Controls the appearance style of the keyboard and will be either dark or light themed. Return Key \u2013 Change the label on the Return key to better reflect what action will be taken. Supported values include Go , Join , Next , Route , Done , and Search . Secure \u2013 Identifies whether the input is masked (such as for a Password input). Handling text filed events iOS uses the delegation pattern to handle events. In Xamarin.iOS the delegates are handled using events. You handle the events by creating them from the Properties window: The figure below shows the ValueChanged event wired up in the Properties window: and the code in the ViewController 1 2 3 4 partial void ValidatePassword ( UITextField sender ) { // Handle the changes character by character for the text field }","title":"Text Field"},{"location":"text-field/#textfield","text":"Text fields allows the user to input a single line of text into an app. The text field is a subclass of the UITextField class.","title":"TextField"},{"location":"text-field/#purpose","text":"Gather small amounts of text from the user. Perform some immediate action on the text, such as a search operation","title":"Purpose"},{"location":"text-field/#configuring-textfield-properties","text":"You can configure the properties of the TextField in interface builder. Some properties of the TextField can not be changed with the properties window, they can only be changed in code. The following figure shows the fields that can be changed in the Properties window: Placeholder \u2013 This is optional. If set, it is displayed when the text field is empty, usually to explain to the user what input is expected. Clear Button \u2013 This controls when the standard clear button (the grey circle with X ) appears in the text field, as a way for the user to clear text quickly. It can be permanently hidden, permanently visible, or shown, depending on whether or not the field is being edited. Min Font Size and Adjust to Fit \u2013 Allows the font size to be adjusted automatically to fit longer text and prevent truncation, but limited to no smaller than the specified size. Capitalization \u2013 Whether to automatically capitalize words, sentences or all input. Correction \u2013 Whether spell checking and suggestions are enabled. Keyboard \u2013 Controls the keyboard style displayed for the input, and therefore what keys are available on the keyboard. This includes Number Pad , Phone Pad , Email , URL along with other options. Appearance \u2013 Controls the appearance style of the keyboard and will be either dark or light themed. Return Key \u2013 Change the label on the Return key to better reflect what action will be taken. Supported values include Go , Join , Next , Route , Done , and Search . Secure \u2013 Identifies whether the input is masked (such as for a Password input).","title":"Configuring TextField properties"},{"location":"text-field/#handling-text-filed-events","text":"iOS uses the delegation pattern to handle events. In Xamarin.iOS the delegates are handled using events. You handle the events by creating them from the Properties window: The figure below shows the ValueChanged event wired up in the Properties window: and the code in the ViewController 1 2 3 4 partial void ValidatePassword ( UITextField sender ) { // Handle the changes character by character for the text field }","title":"Handling text filed events"},{"location":"textview/","text":"Text View A text view displays multiline, styled text content. Text views can be any height and enable scrolling when the content extends outside of the view. By default, content within a text view is left-aligned and uses the system font in black. If a text view is editable, a keyboard appears when you tap inside the view. The text field is an instance of the UITextView class which inherits from UIScrollView . Configuring the properties The following properties can be configured from the story board: In addition to those properties, the textfield inherits from the UIScrollView so you can also configure the UIScrollView properties as shown below: Specific properties include: Behavior \u2013 Whether the text is editable or read-only. Detection \u2013 Detects and converts the inputted data into clickable elements such as phone numbers that can trigger a call, addresses that become links to Maps, URLs that open in Safari or dates and times that become events in Calendar. Handling text view events The UITextView have similar events as the UITextField .","title":"TextView"},{"location":"textview/#text-view","text":"A text view displays multiline, styled text content. Text views can be any height and enable scrolling when the content extends outside of the view. By default, content within a text view is left-aligned and uses the system font in black. If a text view is editable, a keyboard appears when you tap inside the view. The text field is an instance of the UITextView class which inherits from UIScrollView .","title":"Text View"},{"location":"textview/#configuring-the-properties","text":"The following properties can be configured from the story board: In addition to those properties, the textfield inherits from the UIScrollView so you can also configure the UIScrollView properties as shown below: Specific properties include: Behavior \u2013 Whether the text is editable or read-only. Detection \u2013 Detects and converts the inputted data into clickable elements such as phone numbers that can trigger a call, addresses that become links to Maps, URLs that open in Safari or dates and times that become events in Calendar.","title":"Configuring the properties"},{"location":"textview/#handling-text-view-events","text":"The UITextView have similar events as the UITextField .","title":"Handling text view events"},{"location":"user-notifications/","text":"","title":"User notifications"},{"location":"view-controllers/","text":"View Controller A view controller manages a single root view, which may itself contain any number of subviews. The view controller is the VC in the MVC(Model View Controller) design pattern. User interactions within a view are handled by the view controller. Every app has at least one view controller whose content fills the main window. If your app has more content than can fit onscreen at once, use multiple view controllers to manage different parts of that content. The view controller is an instance of UIViewController . UIKit provides several view controllers and you derive from an instance: UIViewController : An object that manages a view hierarchy for your UIKit app UITableViewController : A view controller that specializes in managing a table view. UICollectionViewController : A view controller that specializes in managing a collection view. UINavigationController : A container view controller that defines a stack-based scheme for navigating hierarchical content. UIPageViewController : A container view controller that manages navigation between pages of content, where each page is managed by a child view controller. UITabBarController : A container view controller that manages a radio-style selection interface, where the selection determines which child view controller to display. UISearchController : A view controller that manages the display of search results based on interactions with a search bar. UIImagePickerController - A view controller that manages the system interfaces for taking pictures, recording movies, and choosing items from the user's media library. UIVideoEditorController : A view controller that manages the system interface for trimming video frames and encoding a previously recorded movie. UIActivityViewController : A view controller that you use to offer standard services from your app. UIPresentationController : An object that manages the transition animations and the presentation of view controllers onscreen. and they are many more UIViewController An object that manages a view hierarchy for your UIKit app. The UIViewController class defines the shared behavior that is common to all view controllers. You rarely create instances of the UIViewController class directly. Instead, you subclass UIViewController and add the methods and properties needed to manage the view controller's view hierarchy. A view controller is tightly bound to the views it manages and takes part in handling events in its view hierarchy. View controllers are rarely used in isolation. Instead, you often use multiple view controllers, each of which owns a portion of your app\u2019s user interface. For example, one view controller might display a table of items while a different view controller displays the selected item from that table. 1 2 3 4 5 6 7 public partial class ViewController : UIViewController { public ViewController ( IntPtr handle ) : base ( handle ) { } } View Management Each view manages a view hierachy, the view controller have the View property, which is the root view. The root view is the parent view for the rest of the hierarchy. Creating View Controller View controllers can be created in the story board. Within the story board, the app views and connections to other view controller is specified. Creating a view controller from the storyboard You can use code to instantiate a view controller using the InstantiateViewController() method of the story board as follows: 1 2 3 4 5 // Instantiate a view controller with StoryBoardID ControlsTableViewController var controlsTVC = Storyboard . InstantiateViewController ( \"ControlsTableViewController\" ) as ControlsTableViewController ; // Present the view controller PresentViewController ( controlsTVC , true , null ); The above view controller have the properties set as show in the figure below: View transitions When the visibility of its views changes, a view controller automatically calls its own methods so that subclasses can respond to the change. ViewDidLoad - Called once the first time the view controller loads its Content View Hierarchy into memory. This is a good place to do initial setup because it is when Subviews first become available in code. ViewWillAppear - Called every time a view controller's View is about to be added to a Content View Hierarchy and appear on the screen. ViewWillDisappear - Called every time a view controller's View is about to be removed from a Content View Hierarchy and disappear from the screen. This lifecycle event is used for cleanup and saving state. ViewDidAppear and ViewDidDisappear - Called when a View gets added or removed from the Content View Hierarchy, respectively. Responding to user interaction The most important role of the view controller is responding to user interaction, such as button presses, navigation, and more.","title":"View Controllers"},{"location":"view-controllers/#view-controller","text":"A view controller manages a single root view, which may itself contain any number of subviews. The view controller is the VC in the MVC(Model View Controller) design pattern. User interactions within a view are handled by the view controller. Every app has at least one view controller whose content fills the main window. If your app has more content than can fit onscreen at once, use multiple view controllers to manage different parts of that content. The view controller is an instance of UIViewController . UIKit provides several view controllers and you derive from an instance: UIViewController : An object that manages a view hierarchy for your UIKit app UITableViewController : A view controller that specializes in managing a table view. UICollectionViewController : A view controller that specializes in managing a collection view. UINavigationController : A container view controller that defines a stack-based scheme for navigating hierarchical content. UIPageViewController : A container view controller that manages navigation between pages of content, where each page is managed by a child view controller. UITabBarController : A container view controller that manages a radio-style selection interface, where the selection determines which child view controller to display. UISearchController : A view controller that manages the display of search results based on interactions with a search bar. UIImagePickerController - A view controller that manages the system interfaces for taking pictures, recording movies, and choosing items from the user's media library. UIVideoEditorController : A view controller that manages the system interface for trimming video frames and encoding a previously recorded movie. UIActivityViewController : A view controller that you use to offer standard services from your app. UIPresentationController : An object that manages the transition animations and the presentation of view controllers onscreen. and they are many more","title":"View Controller"},{"location":"view-controllers/#uiviewcontroller","text":"An object that manages a view hierarchy for your UIKit app. The UIViewController class defines the shared behavior that is common to all view controllers. You rarely create instances of the UIViewController class directly. Instead, you subclass UIViewController and add the methods and properties needed to manage the view controller's view hierarchy. A view controller is tightly bound to the views it manages and takes part in handling events in its view hierarchy. View controllers are rarely used in isolation. Instead, you often use multiple view controllers, each of which owns a portion of your app\u2019s user interface. For example, one view controller might display a table of items while a different view controller displays the selected item from that table. 1 2 3 4 5 6 7 public partial class ViewController : UIViewController { public ViewController ( IntPtr handle ) : base ( handle ) { } }","title":"UIViewController"},{"location":"view-controllers/#view-management","text":"Each view manages a view hierachy, the view controller have the View property, which is the root view. The root view is the parent view for the rest of the hierarchy.","title":"View Management"},{"location":"view-controllers/#creating-view-controller","text":"View controllers can be created in the story board. Within the story board, the app views and connections to other view controller is specified.","title":"Creating View Controller"},{"location":"view-controllers/#creating-a-view-controller-from-the-storyboard","text":"You can use code to instantiate a view controller using the InstantiateViewController() method of the story board as follows: 1 2 3 4 5 // Instantiate a view controller with StoryBoardID ControlsTableViewController var controlsTVC = Storyboard . InstantiateViewController ( \"ControlsTableViewController\" ) as ControlsTableViewController ; // Present the view controller PresentViewController ( controlsTVC , true , null ); The above view controller have the properties set as show in the figure below:","title":"Creating a view controller from the storyboard"},{"location":"view-controllers/#view-transitions","text":"When the visibility of its views changes, a view controller automatically calls its own methods so that subclasses can respond to the change. ViewDidLoad - Called once the first time the view controller loads its Content View Hierarchy into memory. This is a good place to do initial setup because it is when Subviews first become available in code. ViewWillAppear - Called every time a view controller's View is about to be added to a Content View Hierarchy and appear on the screen. ViewWillDisappear - Called every time a view controller's View is about to be removed from a Content View Hierarchy and disappear from the screen. This lifecycle event is used for cleanup and saving state. ViewDidAppear and ViewDidDisappear - Called when a View gets added or removed from the Content View Hierarchy, respectively.","title":"View transitions"},{"location":"view-controllers/#responding-to-user-interaction","text":"The most important role of the view controller is responding to user interaction, such as button presses, navigation, and more.","title":"Responding to user interaction"},{"location":"web-view/","text":"","title":"Web view"}]}